import argparse
import json
import sys


def generate(args):
    commands = _generate_compile_commands(args)
    qtc_commands = _load_qtc_compile_commands(args)

    _compare_compile_commands(commands, qtc_commands)

    return _store_compile_commands(args, commands)


def _generate_compile_commands(args):
    res = []

    paths = []
    paths.extend(Path(".").rglob("*.h"))
    paths.extend(Path(".").rglob("*.cpp"))

    return res


def _load_qtc_compile_commands(args):
    res = None

    try:
        with open(args.qtc_commands, "r") as f:
            res = json.load(f)
    except Exception as e:
        return None

    return res


def _compare_compile_commands(commands, qtc_commands):
    if qtc_commands is not None:
        commands_text = json.dumps(commands, indent=4)
        qtc_commands_text = json.dumps(qtc_commands, indent=4)

        if commands != qtc_commands_text:
            print("Generated:")
            print(commands)
            print("")
            print("But expecting for:")
            print(qtc_commands_text)


def _store_compile_commands(args, commands):
    with open(args.output, "w") as f:
        f.write(json.dumps(commands, indent=4))


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--os",
        dest="operation_system",
        type=str,
        choices=["Windows", "Linux"],
        default="Windows",
        help="Operation system",
    )
    parser.add_argument(
        "--qtc-commands",
        dest="qtc_commands",
        type=str,
        default="build/Desktop-Debug/.qtc_clangd/compile_commands.json",
        help="compile_commands.json generated by Qt Creator",
    )
    parser.add_argument(
        "--output",
        dest="output",
        type=str,
        default="build/Desktop-Debug/compile_commands.json",
        help="Output file"
    )
    args = parser.parse_args()

    sys.exit(0 if generate(args) else 1)
