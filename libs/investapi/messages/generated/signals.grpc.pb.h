// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: signals.proto
#ifndef GRPC_signals_2eproto__INCLUDED
#define GRPC_signals_2eproto__INCLUDED

#include "signals.pb.h"

#include <functional>
#include <grpcpp/generic/async_generic_service.h>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/client_context.h>
#include <grpcpp/completion_queue.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/proto_utils.h>
#include <grpcpp/impl/rpc_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/status.h>
#include <grpcpp/support/stub_options.h>
#include <grpcpp/support/sync_stream.h>

namespace tinkoff {
namespace public_ {
namespace invest {
namespace api {
namespace contract {
namespace v1 {

class SignalService final {
 public:
  static constexpr char const* service_full_name() {
    return "tinkoff.public.invest.api.contract.v1.SignalService";
  }
  class StubInterface {
   public:
    virtual ~StubInterface() {}
    // GetStrategies — стратегии
    virtual ::grpc::Status GetStrategies(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetStrategiesRequest& request, ::tinkoff::public_::invest::api::contract::v1::GetStrategiesResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tinkoff::public_::invest::api::contract::v1::GetStrategiesResponse>> AsyncGetStrategies(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetStrategiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tinkoff::public_::invest::api::contract::v1::GetStrategiesResponse>>(AsyncGetStrategiesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tinkoff::public_::invest::api::contract::v1::GetStrategiesResponse>> PrepareAsyncGetStrategies(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetStrategiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tinkoff::public_::invest::api::contract::v1::GetStrategiesResponse>>(PrepareAsyncGetStrategiesRaw(context, request, cq));
    }
    // GetSignals — сигналы
    virtual ::grpc::Status GetSignals(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetSignalsRequest& request, ::tinkoff::public_::invest::api::contract::v1::GetSignalsResponse* response) = 0;
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tinkoff::public_::invest::api::contract::v1::GetSignalsResponse>> AsyncGetSignals(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetSignalsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tinkoff::public_::invest::api::contract::v1::GetSignalsResponse>>(AsyncGetSignalsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tinkoff::public_::invest::api::contract::v1::GetSignalsResponse>> PrepareAsyncGetSignals(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetSignalsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReaderInterface< ::tinkoff::public_::invest::api::contract::v1::GetSignalsResponse>>(PrepareAsyncGetSignalsRaw(context, request, cq));
    }
    class async_interface {
     public:
      virtual ~async_interface() {}
      // GetStrategies — стратегии
      virtual void GetStrategies(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetStrategiesRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetStrategiesResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetStrategies(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetStrategiesRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetStrategiesResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
      // GetSignals — сигналы
      virtual void GetSignals(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetSignalsRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetSignalsResponse* response, std::function<void(::grpc::Status)>) = 0;
      virtual void GetSignals(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetSignalsRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetSignalsResponse* response, ::grpc::ClientUnaryReactor* reactor) = 0;
    };
    typedef class async_interface experimental_async_interface;
    virtual class async_interface* async() { return nullptr; }
    class async_interface* experimental_async() { return async(); }
   private:
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tinkoff::public_::invest::api::contract::v1::GetStrategiesResponse>* AsyncGetStrategiesRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetStrategiesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tinkoff::public_::invest::api::contract::v1::GetStrategiesResponse>* PrepareAsyncGetStrategiesRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetStrategiesRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tinkoff::public_::invest::api::contract::v1::GetSignalsResponse>* AsyncGetSignalsRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetSignalsRequest& request, ::grpc::CompletionQueue* cq) = 0;
    virtual ::grpc::ClientAsyncResponseReaderInterface< ::tinkoff::public_::invest::api::contract::v1::GetSignalsResponse>* PrepareAsyncGetSignalsRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetSignalsRequest& request, ::grpc::CompletionQueue* cq) = 0;
  };
  class Stub final : public StubInterface {
   public:
    Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());
    ::grpc::Status GetStrategies(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetStrategiesRequest& request, ::tinkoff::public_::invest::api::contract::v1::GetStrategiesResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetStrategiesResponse>> AsyncGetStrategies(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetStrategiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetStrategiesResponse>>(AsyncGetStrategiesRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetStrategiesResponse>> PrepareAsyncGetStrategies(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetStrategiesRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetStrategiesResponse>>(PrepareAsyncGetStrategiesRaw(context, request, cq));
    }
    ::grpc::Status GetSignals(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetSignalsRequest& request, ::tinkoff::public_::invest::api::contract::v1::GetSignalsResponse* response) override;
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetSignalsResponse>> AsyncGetSignals(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetSignalsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetSignalsResponse>>(AsyncGetSignalsRaw(context, request, cq));
    }
    std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetSignalsResponse>> PrepareAsyncGetSignals(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetSignalsRequest& request, ::grpc::CompletionQueue* cq) {
      return std::unique_ptr< ::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetSignalsResponse>>(PrepareAsyncGetSignalsRaw(context, request, cq));
    }
    class async final :
      public StubInterface::async_interface {
     public:
      void GetStrategies(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetStrategiesRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetStrategiesResponse* response, std::function<void(::grpc::Status)>) override;
      void GetStrategies(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetStrategiesRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetStrategiesResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
      void GetSignals(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetSignalsRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetSignalsResponse* response, std::function<void(::grpc::Status)>) override;
      void GetSignals(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetSignalsRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetSignalsResponse* response, ::grpc::ClientUnaryReactor* reactor) override;
     private:
      friend class Stub;
      explicit async(Stub* stub): stub_(stub) { }
      Stub* stub() { return stub_; }
      Stub* stub_;
    };
    class async* async() override { return &async_stub_; }

   private:
    std::shared_ptr< ::grpc::ChannelInterface> channel_;
    class async async_stub_{this};
    ::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetStrategiesResponse>* AsyncGetStrategiesRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetStrategiesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetStrategiesResponse>* PrepareAsyncGetStrategiesRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetStrategiesRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetSignalsResponse>* AsyncGetSignalsRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetSignalsRequest& request, ::grpc::CompletionQueue* cq) override;
    ::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetSignalsResponse>* PrepareAsyncGetSignalsRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetSignalsRequest& request, ::grpc::CompletionQueue* cq) override;
    const ::grpc::internal::RpcMethod rpcmethod_GetStrategies_;
    const ::grpc::internal::RpcMethod rpcmethod_GetSignals_;
  };
  static std::unique_ptr<Stub> NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options = ::grpc::StubOptions());

  class Service : public ::grpc::Service {
   public:
    Service();
    virtual ~Service();
    // GetStrategies — стратегии
    virtual ::grpc::Status GetStrategies(::grpc::ServerContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetStrategiesRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetStrategiesResponse* response);
    // GetSignals — сигналы
    virtual ::grpc::Status GetSignals(::grpc::ServerContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetSignalsRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetSignalsResponse* response);
  };
  template <class BaseClass>
  class WithAsyncMethod_GetStrategies : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetStrategies() {
      ::grpc::Service::MarkMethodAsync(0);
    }
    ~WithAsyncMethod_GetStrategies() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStrategies(::grpc::ServerContext* /*context*/, const ::tinkoff::public_::invest::api::contract::v1::GetStrategiesRequest* /*request*/, ::tinkoff::public_::invest::api::contract::v1::GetStrategiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetStrategies(::grpc::ServerContext* context, ::tinkoff::public_::invest::api::contract::v1::GetStrategiesRequest* request, ::grpc::ServerAsyncResponseWriter< ::tinkoff::public_::invest::api::contract::v1::GetStrategiesResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithAsyncMethod_GetSignals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithAsyncMethod_GetSignals() {
      ::grpc::Service::MarkMethodAsync(1);
    }
    ~WithAsyncMethod_GetSignals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSignals(::grpc::ServerContext* /*context*/, const ::tinkoff::public_::invest::api::contract::v1::GetSignalsRequest* /*request*/, ::tinkoff::public_::invest::api::contract::v1::GetSignalsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSignals(::grpc::ServerContext* context, ::tinkoff::public_::invest::api::contract::v1::GetSignalsRequest* request, ::grpc::ServerAsyncResponseWriter< ::tinkoff::public_::invest::api::contract::v1::GetSignalsResponse>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  typedef WithAsyncMethod_GetStrategies<WithAsyncMethod_GetSignals<Service > > AsyncService;
  template <class BaseClass>
  class WithCallbackMethod_GetStrategies : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetStrategies() {
      ::grpc::Service::MarkMethodCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::tinkoff::public_::invest::api::contract::v1::GetStrategiesRequest, ::tinkoff::public_::invest::api::contract::v1::GetStrategiesResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetStrategiesRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetStrategiesResponse* response) { return this->GetStrategies(context, request, response); }));}
    void SetMessageAllocatorFor_GetStrategies(
        ::grpc::MessageAllocator< ::tinkoff::public_::invest::api::contract::v1::GetStrategiesRequest, ::tinkoff::public_::invest::api::contract::v1::GetStrategiesResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(0);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::tinkoff::public_::invest::api::contract::v1::GetStrategiesRequest, ::tinkoff::public_::invest::api::contract::v1::GetStrategiesResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetStrategies() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStrategies(::grpc::ServerContext* /*context*/, const ::tinkoff::public_::invest::api::contract::v1::GetStrategiesRequest* /*request*/, ::tinkoff::public_::invest::api::contract::v1::GetStrategiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetStrategies(
      ::grpc::CallbackServerContext* /*context*/, const ::tinkoff::public_::invest::api::contract::v1::GetStrategiesRequest* /*request*/, ::tinkoff::public_::invest::api::contract::v1::GetStrategiesResponse* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithCallbackMethod_GetSignals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithCallbackMethod_GetSignals() {
      ::grpc::Service::MarkMethodCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::tinkoff::public_::invest::api::contract::v1::GetSignalsRequest, ::tinkoff::public_::invest::api::contract::v1::GetSignalsResponse>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetSignalsRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetSignalsResponse* response) { return this->GetSignals(context, request, response); }));}
    void SetMessageAllocatorFor_GetSignals(
        ::grpc::MessageAllocator< ::tinkoff::public_::invest::api::contract::v1::GetSignalsRequest, ::tinkoff::public_::invest::api::contract::v1::GetSignalsResponse>* allocator) {
      ::grpc::internal::MethodHandler* const handler = ::grpc::Service::GetHandler(1);
      static_cast<::grpc::internal::CallbackUnaryHandler< ::tinkoff::public_::invest::api::contract::v1::GetSignalsRequest, ::tinkoff::public_::invest::api::contract::v1::GetSignalsResponse>*>(handler)
              ->SetMessageAllocator(allocator);
    }
    ~WithCallbackMethod_GetSignals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSignals(::grpc::ServerContext* /*context*/, const ::tinkoff::public_::invest::api::contract::v1::GetSignalsRequest* /*request*/, ::tinkoff::public_::invest::api::contract::v1::GetSignalsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSignals(
      ::grpc::CallbackServerContext* /*context*/, const ::tinkoff::public_::invest::api::contract::v1::GetSignalsRequest* /*request*/, ::tinkoff::public_::invest::api::contract::v1::GetSignalsResponse* /*response*/)  { return nullptr; }
  };
  typedef WithCallbackMethod_GetStrategies<WithCallbackMethod_GetSignals<Service > > CallbackService;
  typedef CallbackService ExperimentalCallbackService;
  template <class BaseClass>
  class WithGenericMethod_GetStrategies : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetStrategies() {
      ::grpc::Service::MarkMethodGeneric(0);
    }
    ~WithGenericMethod_GetStrategies() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStrategies(::grpc::ServerContext* /*context*/, const ::tinkoff::public_::invest::api::contract::v1::GetStrategiesRequest* /*request*/, ::tinkoff::public_::invest::api::contract::v1::GetStrategiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithGenericMethod_GetSignals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithGenericMethod_GetSignals() {
      ::grpc::Service::MarkMethodGeneric(1);
    }
    ~WithGenericMethod_GetSignals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSignals(::grpc::ServerContext* /*context*/, const ::tinkoff::public_::invest::api::contract::v1::GetSignalsRequest* /*request*/, ::tinkoff::public_::invest::api::contract::v1::GetSignalsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetStrategies : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetStrategies() {
      ::grpc::Service::MarkMethodRaw(0);
    }
    ~WithRawMethod_GetStrategies() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStrategies(::grpc::ServerContext* /*context*/, const ::tinkoff::public_::invest::api::contract::v1::GetStrategiesRequest* /*request*/, ::tinkoff::public_::invest::api::contract::v1::GetStrategiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetStrategies(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(0, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawMethod_GetSignals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawMethod_GetSignals() {
      ::grpc::Service::MarkMethodRaw(1);
    }
    ~WithRawMethod_GetSignals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSignals(::grpc::ServerContext* /*context*/, const ::tinkoff::public_::invest::api::contract::v1::GetSignalsRequest* /*request*/, ::tinkoff::public_::invest::api::contract::v1::GetSignalsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    void RequestGetSignals(::grpc::ServerContext* context, ::grpc::ByteBuffer* request, ::grpc::ServerAsyncResponseWriter< ::grpc::ByteBuffer>* response, ::grpc::CompletionQueue* new_call_cq, ::grpc::ServerCompletionQueue* notification_cq, void *tag) {
      ::grpc::Service::RequestAsyncUnary(1, context, request, response, new_call_cq, notification_cq, tag);
    }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetStrategies : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetStrategies() {
      ::grpc::Service::MarkMethodRawCallback(0,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetStrategies(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetStrategies() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetStrategies(::grpc::ServerContext* /*context*/, const ::tinkoff::public_::invest::api::contract::v1::GetStrategiesRequest* /*request*/, ::tinkoff::public_::invest::api::contract::v1::GetStrategiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetStrategies(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithRawCallbackMethod_GetSignals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithRawCallbackMethod_GetSignals() {
      ::grpc::Service::MarkMethodRawCallback(1,
          new ::grpc::internal::CallbackUnaryHandler< ::grpc::ByteBuffer, ::grpc::ByteBuffer>(
            [this](
                   ::grpc::CallbackServerContext* context, const ::grpc::ByteBuffer* request, ::grpc::ByteBuffer* response) { return this->GetSignals(context, request, response); }));
    }
    ~WithRawCallbackMethod_GetSignals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable synchronous version of this method
    ::grpc::Status GetSignals(::grpc::ServerContext* /*context*/, const ::tinkoff::public_::invest::api::contract::v1::GetSignalsRequest* /*request*/, ::tinkoff::public_::invest::api::contract::v1::GetSignalsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    virtual ::grpc::ServerUnaryReactor* GetSignals(
      ::grpc::CallbackServerContext* /*context*/, const ::grpc::ByteBuffer* /*request*/, ::grpc::ByteBuffer* /*response*/)  { return nullptr; }
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetStrategies : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetStrategies() {
      ::grpc::Service::MarkMethodStreamed(0,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tinkoff::public_::invest::api::contract::v1::GetStrategiesRequest, ::tinkoff::public_::invest::api::contract::v1::GetStrategiesResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::tinkoff::public_::invest::api::contract::v1::GetStrategiesRequest, ::tinkoff::public_::invest::api::contract::v1::GetStrategiesResponse>* streamer) {
                       return this->StreamedGetStrategies(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetStrategies() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetStrategies(::grpc::ServerContext* /*context*/, const ::tinkoff::public_::invest::api::contract::v1::GetStrategiesRequest* /*request*/, ::tinkoff::public_::invest::api::contract::v1::GetStrategiesResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetStrategies(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tinkoff::public_::invest::api::contract::v1::GetStrategiesRequest,::tinkoff::public_::invest::api::contract::v1::GetStrategiesResponse>* server_unary_streamer) = 0;
  };
  template <class BaseClass>
  class WithStreamedUnaryMethod_GetSignals : public BaseClass {
   private:
    void BaseClassMustBeDerivedFromService(const Service* /*service*/) {}
   public:
    WithStreamedUnaryMethod_GetSignals() {
      ::grpc::Service::MarkMethodStreamed(1,
        new ::grpc::internal::StreamedUnaryHandler<
          ::tinkoff::public_::invest::api::contract::v1::GetSignalsRequest, ::tinkoff::public_::invest::api::contract::v1::GetSignalsResponse>(
            [this](::grpc::ServerContext* context,
                   ::grpc::ServerUnaryStreamer<
                     ::tinkoff::public_::invest::api::contract::v1::GetSignalsRequest, ::tinkoff::public_::invest::api::contract::v1::GetSignalsResponse>* streamer) {
                       return this->StreamedGetSignals(context,
                         streamer);
                  }));
    }
    ~WithStreamedUnaryMethod_GetSignals() override {
      BaseClassMustBeDerivedFromService(this);
    }
    // disable regular version of this method
    ::grpc::Status GetSignals(::grpc::ServerContext* /*context*/, const ::tinkoff::public_::invest::api::contract::v1::GetSignalsRequest* /*request*/, ::tinkoff::public_::invest::api::contract::v1::GetSignalsResponse* /*response*/) override {
      abort();
      return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
    }
    // replace default version of method with streamed unary
    virtual ::grpc::Status StreamedGetSignals(::grpc::ServerContext* context, ::grpc::ServerUnaryStreamer< ::tinkoff::public_::invest::api::contract::v1::GetSignalsRequest,::tinkoff::public_::invest::api::contract::v1::GetSignalsResponse>* server_unary_streamer) = 0;
  };
  typedef WithStreamedUnaryMethod_GetStrategies<WithStreamedUnaryMethod_GetSignals<Service > > StreamedUnaryService;
  typedef Service SplitStreamedService;
  typedef WithStreamedUnaryMethod_GetStrategies<WithStreamedUnaryMethod_GetSignals<Service > > StreamedService;
};
// Сервис для получения технических сигналов и мнений аналитиков по инструментам.

}  // namespace v1
}  // namespace contract
}  // namespace api
}  // namespace invest
}  // namespace public_
}  // namespace tinkoff


#endif  // GRPC_signals_2eproto__INCLUDED
