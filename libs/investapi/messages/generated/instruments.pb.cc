// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: instruments.proto
// Protobuf C++ Version: 5.29.3

#include "instruments.pb.h"

#include <algorithm>
#include <type_traits>
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/generated_message_tctable_impl.h"
#include "google/protobuf/extension_set.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/wire_format_lite.h"
#include "google/protobuf/descriptor.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/reflection_ops.h"
#include "google/protobuf/wire_format.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"
PROTOBUF_PRAGMA_INIT_SEG
namespace _pb = ::google::protobuf;
namespace _pbi = ::google::protobuf::internal;
namespace _fl = ::google::protobuf::internal::field_layout;
namespace tinkoff {
namespace public_ {
namespace invest {
namespace api {
namespace contract {
namespace v1 {

inline constexpr InstrumentsRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        instrument_status_{static_cast< ::tinkoff::public_::invest::api::contract::v1::InstrumentStatus >(0)},
        instrument_exchange_{static_cast< ::tinkoff::public_::invest::api::contract::v1::InstrumentExchangeType >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR InstrumentsRequest::InstrumentsRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct InstrumentsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InstrumentsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InstrumentsRequestDefaultTypeInternal() {}
  union {
    InstrumentsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InstrumentsRequestDefaultTypeInternal _InstrumentsRequest_default_instance_;

inline constexpr InstrumentRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        class_code_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        id_type_{static_cast< ::tinkoff::public_::invest::api::contract::v1::InstrumentIdType >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR InstrumentRequest::InstrumentRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct InstrumentRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InstrumentRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InstrumentRequestDefaultTypeInternal() {}
  union {
    InstrumentRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InstrumentRequestDefaultTypeInternal _InstrumentRequest_default_instance_;

inline constexpr InstrumentLink::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        instrument_uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR InstrumentLink::InstrumentLink(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct InstrumentLinkDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InstrumentLinkDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InstrumentLinkDefaultTypeInternal() {}
  union {
    InstrumentLink _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InstrumentLinkDefaultTypeInternal _InstrumentLink_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR IndicativesRequest::IndicativesRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct IndicativesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IndicativesRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~IndicativesRequestDefaultTypeInternal() {}
  union {
    IndicativesRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IndicativesRequestDefaultTypeInternal _IndicativesRequest_default_instance_;

inline constexpr IndicativeResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : figi_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        ticker_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        class_code_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        currency_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        exchange_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        instrument_kind_{static_cast< ::tinkoff::public_::invest::api::contract::v1::InstrumentType >(0)},
        buy_available_flag_{false},
        sell_available_flag_{false},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR IndicativeResponse::IndicativeResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct IndicativeResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IndicativeResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~IndicativeResponseDefaultTypeInternal() {}
  union {
    IndicativeResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IndicativeResponseDefaultTypeInternal _IndicativeResponse_default_instance_;

inline constexpr GetFuturesMarginRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : figi_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        instrument_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GetFuturesMarginRequest::GetFuturesMarginRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GetFuturesMarginRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetFuturesMarginRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetFuturesMarginRequestDefaultTypeInternal() {}
  union {
    GetFuturesMarginRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetFuturesMarginRequestDefaultTypeInternal _GetFuturesMarginRequest_default_instance_;

inline constexpr GetForecastRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : instrument_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GetForecastRequest::GetForecastRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GetForecastRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetForecastRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetForecastRequestDefaultTypeInternal() {}
  union {
    GetForecastRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetForecastRequestDefaultTypeInternal _GetForecastRequest_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR GetFavoritesRequest::GetFavoritesRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct GetFavoritesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetFavoritesRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetFavoritesRequestDefaultTypeInternal() {}
  union {
    GetFavoritesRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetFavoritesRequestDefaultTypeInternal _GetFavoritesRequest_default_instance_;
              template <typename>
PROTOBUF_CONSTEXPR GetCountriesRequest::GetCountriesRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(_class_data_.base()){}
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase() {
}
#endif  // PROTOBUF_CUSTOM_VTABLE
struct GetCountriesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetCountriesRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetCountriesRequestDefaultTypeInternal() {}
  union {
    GetCountriesRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetCountriesRequestDefaultTypeInternal _GetCountriesRequest_default_instance_;

inline constexpr GetBrandRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GetBrandRequest::GetBrandRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GetBrandRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetBrandRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetBrandRequestDefaultTypeInternal() {}
  union {
    GetBrandRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetBrandRequestDefaultTypeInternal _GetBrandRequest_default_instance_;

inline constexpr GetAssetFundamentalsRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : assets_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GetAssetFundamentalsRequest::GetAssetFundamentalsRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GetAssetFundamentalsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetAssetFundamentalsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetAssetFundamentalsRequestDefaultTypeInternal() {}
  union {
    GetAssetFundamentalsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetAssetFundamentalsRequestDefaultTypeInternal _GetAssetFundamentalsRequest_default_instance_;

inline constexpr FindInstrumentRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        query_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        instrument_kind_{static_cast< ::tinkoff::public_::invest::api::contract::v1::InstrumentType >(0)},
        api_trade_available_flag_{false} {}

template <typename>
PROTOBUF_CONSTEXPR FindInstrumentRequest::FindInstrumentRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct FindInstrumentRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FindInstrumentRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FindInstrumentRequestDefaultTypeInternal() {}
  union {
    FindInstrumentRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FindInstrumentRequestDefaultTypeInternal _FindInstrumentRequest_default_instance_;

inline constexpr FilterOptionsRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        basic_asset_uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        basic_asset_position_uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()) {}

template <typename>
PROTOBUF_CONSTEXPR FilterOptionsRequest::FilterOptionsRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct FilterOptionsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FilterOptionsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FilterOptionsRequestDefaultTypeInternal() {}
  union {
    FilterOptionsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FilterOptionsRequestDefaultTypeInternal _FilterOptionsRequest_default_instance_;

inline constexpr FavoriteInstrument::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : figi_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        ticker_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        class_code_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        isin_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        instrument_type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        otc_flag_{false},
        api_trade_available_flag_{false},
        instrument_kind_{static_cast< ::tinkoff::public_::invest::api::contract::v1::InstrumentType >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR FavoriteInstrument::FavoriteInstrument(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct FavoriteInstrumentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FavoriteInstrumentDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FavoriteInstrumentDefaultTypeInternal() {}
  union {
    FavoriteInstrument _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FavoriteInstrumentDefaultTypeInternal _FavoriteInstrument_default_instance_;

inline constexpr EditFavoritesRequestInstrument::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        figi_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        instrument_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()) {}

template <typename>
PROTOBUF_CONSTEXPR EditFavoritesRequestInstrument::EditFavoritesRequestInstrument(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct EditFavoritesRequestInstrumentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EditFavoritesRequestInstrumentDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EditFavoritesRequestInstrumentDefaultTypeInternal() {}
  union {
    EditFavoritesRequestInstrument _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EditFavoritesRequestInstrumentDefaultTypeInternal _EditFavoritesRequestInstrument_default_instance_;

inline constexpr CountryResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : alfa_two_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        alfa_three_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        name_brief_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR CountryResponse::CountryResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CountryResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CountryResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CountryResponseDefaultTypeInternal() {}
  union {
    CountryResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CountryResponseDefaultTypeInternal _CountryResponse_default_instance_;

inline constexpr Brand::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        description_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        info_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        company_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        sector_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        country_of_risk_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        country_of_risk_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Brand::Brand(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct BrandDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BrandDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BrandDefaultTypeInternal() {}
  union {
    Brand _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BrandDefaultTypeInternal _Brand_default_instance_;

inline constexpr AssetsRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        instrument_type_{static_cast< ::tinkoff::public_::invest::api::contract::v1::InstrumentType >(0)},
        instrument_status_{static_cast< ::tinkoff::public_::invest::api::contract::v1::InstrumentStatus >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR AssetsRequest::AssetsRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AssetsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AssetsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AssetsRequestDefaultTypeInternal() {}
  union {
    AssetsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AssetsRequestDefaultTypeInternal _AssetsRequest_default_instance_;

inline constexpr AssetRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR AssetRequest::AssetRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AssetRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AssetRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AssetRequestDefaultTypeInternal() {}
  union {
    AssetRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AssetRequestDefaultTypeInternal _AssetRequest_default_instance_;

inline constexpr AssetCurrency::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : base_currency_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR AssetCurrency::AssetCurrency(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AssetCurrencyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AssetCurrencyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AssetCurrencyDefaultTypeInternal() {}
  union {
    AssetCurrency _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AssetCurrencyDefaultTypeInternal _AssetCurrency_default_instance_;

inline constexpr TradingSchedulesRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        exchange_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        from_{nullptr},
        to_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR TradingSchedulesRequest::TradingSchedulesRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TradingSchedulesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TradingSchedulesRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TradingSchedulesRequestDefaultTypeInternal() {}
  union {
    TradingSchedulesRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TradingSchedulesRequestDefaultTypeInternal _TradingSchedulesRequest_default_instance_;

inline constexpr TradingInterval_TimeInterval::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        start_ts_{nullptr},
        end_ts_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR TradingInterval_TimeInterval::TradingInterval_TimeInterval(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TradingInterval_TimeIntervalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TradingInterval_TimeIntervalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TradingInterval_TimeIntervalDefaultTypeInternal() {}
  union {
    TradingInterval_TimeInterval _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TradingInterval_TimeIntervalDefaultTypeInternal _TradingInterval_TimeInterval_default_instance_;

inline constexpr Share::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        figi_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        ticker_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        class_code_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        isin_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        currency_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        exchange_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        country_of_risk_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        country_of_risk_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        sector_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        position_uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        asset_uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        klong_{nullptr},
        kshort_{nullptr},
        dlong_{nullptr},
        dshort_{nullptr},
        dlong_min_{nullptr},
        dshort_min_{nullptr},
        ipo_date_{nullptr},
        nominal_{nullptr},
        min_price_increment_{nullptr},
        first_1min_candle_date_{nullptr},
        first_1day_candle_date_{nullptr},
        brand_{nullptr},
        dlong_client_{nullptr},
        dshort_client_{nullptr},
        issue_size_{::int64_t{0}},
        lot_{0},
        short_enabled_flag_{false},
        otc_flag_{false},
        buy_available_flag_{false},
        sell_available_flag_{false},
        issue_size_plan_{::int64_t{0}},
        trading_status_{static_cast< ::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus >(0)},
        share_type_{static_cast< ::tinkoff::public_::invest::api::contract::v1::ShareType >(0)},
        real_exchange_{static_cast< ::tinkoff::public_::invest::api::contract::v1::RealExchange >(0)},
        instrument_exchange_{static_cast< ::tinkoff::public_::invest::api::contract::v1::InstrumentExchangeType >(0)},
        div_yield_flag_{false},
        api_trade_available_flag_{false},
        for_iis_flag_{false},
        for_qual_investor_flag_{false},
        weekend_flag_{false},
        blocked_tca_flag_{false},
        liquidity_flag_{false} {}

template <typename>
PROTOBUF_CONSTEXPR Share::Share(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ShareDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShareDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShareDefaultTypeInternal() {}
  union {
    Share _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShareDefaultTypeInternal _Share_default_instance_;

inline constexpr Option::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        position_uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        ticker_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        class_code_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        basic_asset_position_uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        currency_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        settlement_currency_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        asset_type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        basic_asset_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        exchange_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        country_of_risk_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        country_of_risk_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        sector_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        brand_{nullptr},
        basic_asset_size_{nullptr},
        klong_{nullptr},
        kshort_{nullptr},
        dlong_{nullptr},
        dshort_{nullptr},
        dlong_min_{nullptr},
        dshort_min_{nullptr},
        min_price_increment_{nullptr},
        strike_price_{nullptr},
        dlong_client_{nullptr},
        dshort_client_{nullptr},
        expiration_date_{nullptr},
        first_trade_date_{nullptr},
        last_trade_date_{nullptr},
        first_1min_candle_date_{nullptr},
        first_1day_candle_date_{nullptr},
        trading_status_{static_cast< ::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus >(0)},
        real_exchange_{static_cast< ::tinkoff::public_::invest::api::contract::v1::RealExchange >(0)},
        direction_{static_cast< ::tinkoff::public_::invest::api::contract::v1::OptionDirection >(0)},
        payment_type_{static_cast< ::tinkoff::public_::invest::api::contract::v1::OptionPaymentType >(0)},
        style_{static_cast< ::tinkoff::public_::invest::api::contract::v1::OptionStyle >(0)},
        settlement_type_{static_cast< ::tinkoff::public_::invest::api::contract::v1::OptionSettlementType >(0)},
        lot_{0},
        short_enabled_flag_{false},
        for_iis_flag_{false},
        otc_flag_{false},
        buy_available_flag_{false},
        sell_available_flag_{false},
        for_qual_investor_flag_{false},
        weekend_flag_{false},
        blocked_tca_flag_{false},
        api_trade_available_flag_{false} {}

template <typename>
PROTOBUF_CONSTEXPR Option::Option(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct OptionDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OptionDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OptionDefaultTypeInternal() {}
  union {
    Option _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OptionDefaultTypeInternal _Option_default_instance_;

inline constexpr InstrumentShort::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        isin_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        figi_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        ticker_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        class_code_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        instrument_type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        position_uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        first_1min_candle_date_{nullptr},
        first_1day_candle_date_{nullptr},
        instrument_kind_{static_cast< ::tinkoff::public_::invest::api::contract::v1::InstrumentType >(0)},
        api_trade_available_flag_{false},
        for_iis_flag_{false},
        for_qual_investor_flag_{false},
        weekend_flag_{false},
        blocked_tca_flag_{false},
        lot_{0} {}

template <typename>
PROTOBUF_CONSTEXPR InstrumentShort::InstrumentShort(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct InstrumentShortDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InstrumentShortDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InstrumentShortDefaultTypeInternal() {}
  union {
    InstrumentShort _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InstrumentShortDefaultTypeInternal _InstrumentShort_default_instance_;

inline constexpr Instrument::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        figi_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        ticker_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        class_code_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        isin_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        currency_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        exchange_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        country_of_risk_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        country_of_risk_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        instrument_type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        position_uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        asset_uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        klong_{nullptr},
        kshort_{nullptr},
        dlong_{nullptr},
        dshort_{nullptr},
        dlong_min_{nullptr},
        dshort_min_{nullptr},
        min_price_increment_{nullptr},
        first_1min_candle_date_{nullptr},
        first_1day_candle_date_{nullptr},
        brand_{nullptr},
        dlong_client_{nullptr},
        dshort_client_{nullptr},
        lot_{0},
        trading_status_{static_cast< ::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus >(0)},
        short_enabled_flag_{false},
        otc_flag_{false},
        buy_available_flag_{false},
        sell_available_flag_{false},
        real_exchange_{static_cast< ::tinkoff::public_::invest::api::contract::v1::RealExchange >(0)},
        api_trade_available_flag_{false},
        for_iis_flag_{false},
        for_qual_investor_flag_{false},
        weekend_flag_{false},
        blocked_tca_flag_{false},
        instrument_kind_{static_cast< ::tinkoff::public_::invest::api::contract::v1::InstrumentType >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR Instrument::Instrument(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct InstrumentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InstrumentDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InstrumentDefaultTypeInternal() {}
  union {
    Instrument _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InstrumentDefaultTypeInternal _Instrument_default_instance_;

inline constexpr IndicativesResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : instruments_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR IndicativesResponse::IndicativesResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct IndicativesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR IndicativesResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~IndicativesResponseDefaultTypeInternal() {}
  union {
    IndicativesResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 IndicativesResponseDefaultTypeInternal _IndicativesResponse_default_instance_;

inline constexpr GetFuturesMarginResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        initial_margin_on_buy_{nullptr},
        initial_margin_on_sell_{nullptr},
        min_price_increment_{nullptr},
        min_price_increment_amount_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR GetFuturesMarginResponse::GetFuturesMarginResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GetFuturesMarginResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetFuturesMarginResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetFuturesMarginResponseDefaultTypeInternal() {}
  union {
    GetFuturesMarginResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetFuturesMarginResponseDefaultTypeInternal _GetFuturesMarginResponse_default_instance_;

inline constexpr GetForecastResponse_TargetItem::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        ticker_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        company_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        currency_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        show_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        recommendation_date_{nullptr},
        current_price_{nullptr},
        target_price_{nullptr},
        price_change_{nullptr},
        price_change_rel_{nullptr},
        recommendation_{static_cast< ::tinkoff::public_::invest::api::contract::v1::Recommendation >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR GetForecastResponse_TargetItem::GetForecastResponse_TargetItem(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GetForecastResponse_TargetItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetForecastResponse_TargetItemDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetForecastResponse_TargetItemDefaultTypeInternal() {}
  union {
    GetForecastResponse_TargetItem _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetForecastResponse_TargetItemDefaultTypeInternal _GetForecastResponse_TargetItem_default_instance_;

inline constexpr GetForecastResponse_ConsensusItem::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        ticker_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        currency_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        current_price_{nullptr},
        consensus_{nullptr},
        min_target_{nullptr},
        max_target_{nullptr},
        price_change_{nullptr},
        price_change_rel_{nullptr},
        recommendation_{static_cast< ::tinkoff::public_::invest::api::contract::v1::Recommendation >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR GetForecastResponse_ConsensusItem::GetForecastResponse_ConsensusItem(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GetForecastResponse_ConsensusItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetForecastResponse_ConsensusItemDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetForecastResponse_ConsensusItemDefaultTypeInternal() {}
  union {
    GetForecastResponse_ConsensusItem _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetForecastResponse_ConsensusItemDefaultTypeInternal _GetForecastResponse_ConsensusItem_default_instance_;

inline constexpr GetFavoritesResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : favorite_instruments_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GetFavoritesResponse::GetFavoritesResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GetFavoritesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetFavoritesResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetFavoritesResponseDefaultTypeInternal() {}
  union {
    GetFavoritesResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetFavoritesResponseDefaultTypeInternal _GetFavoritesResponse_default_instance_;

inline constexpr GetDividendsRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        figi_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        instrument_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        from_{nullptr},
        to_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR GetDividendsRequest::GetDividendsRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GetDividendsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetDividendsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetDividendsRequestDefaultTypeInternal() {}
  union {
    GetDividendsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetDividendsRequestDefaultTypeInternal _GetDividendsRequest_default_instance_;

inline constexpr GetCountriesResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : countries_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GetCountriesResponse::GetCountriesResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GetCountriesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetCountriesResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetCountriesResponseDefaultTypeInternal() {}
  union {
    GetCountriesResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetCountriesResponseDefaultTypeInternal _GetCountriesResponse_default_instance_;

inline constexpr GetConsensusForecastsResponse_ConsensusForecastsItem::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        asset_uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        currency_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        created_at_{nullptr},
        best_target_price_{nullptr},
        best_target_low_{nullptr},
        best_target_high_{nullptr},
        prognosis_date_{nullptr},
        total_buy_recommend_{0},
        total_hold_recommend_{0},
        total_sell_recommend_{0},
        consensus_{static_cast< ::tinkoff::public_::invest::api::contract::v1::Recommendation >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR GetConsensusForecastsResponse_ConsensusForecastsItem::GetConsensusForecastsResponse_ConsensusForecastsItem(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GetConsensusForecastsResponse_ConsensusForecastsItemDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetConsensusForecastsResponse_ConsensusForecastsItemDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetConsensusForecastsResponse_ConsensusForecastsItemDefaultTypeInternal() {}
  union {
    GetConsensusForecastsResponse_ConsensusForecastsItem _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetConsensusForecastsResponse_ConsensusForecastsItemDefaultTypeInternal _GetConsensusForecastsResponse_ConsensusForecastsItem_default_instance_;

inline constexpr GetConsensusForecastsRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        paging_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR GetConsensusForecastsRequest::GetConsensusForecastsRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GetConsensusForecastsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetConsensusForecastsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetConsensusForecastsRequestDefaultTypeInternal() {}
  union {
    GetConsensusForecastsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetConsensusForecastsRequestDefaultTypeInternal _GetConsensusForecastsRequest_default_instance_;

inline constexpr GetBrandsResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        brands_{},
        paging_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR GetBrandsResponse::GetBrandsResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GetBrandsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetBrandsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetBrandsResponseDefaultTypeInternal() {}
  union {
    GetBrandsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetBrandsResponseDefaultTypeInternal _GetBrandsResponse_default_instance_;

inline constexpr GetBrandsRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        paging_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR GetBrandsRequest::GetBrandsRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GetBrandsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetBrandsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetBrandsRequestDefaultTypeInternal() {}
  union {
    GetBrandsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetBrandsRequestDefaultTypeInternal _GetBrandsRequest_default_instance_;

inline constexpr GetBondEventsResponse_BondEvent::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        instrument_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        execution_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        operation_type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        note_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        convert_to_fin_tool_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        event_date_{nullptr},
        event_total_vol_{nullptr},
        fix_date_{nullptr},
        rate_date_{nullptr},
        default_date_{nullptr},
        real_pay_date_{nullptr},
        pay_date_{nullptr},
        pay_one_bond_{nullptr},
        money_flow_val_{nullptr},
        value_{nullptr},
        coupon_start_date_{nullptr},
        coupon_end_date_{nullptr},
        coupon_interest_rate_{nullptr},
        event_number_{0},
        event_type_{static_cast< ::tinkoff::public_::invest::api::contract::v1::GetBondEventsRequest_EventType >(0)},
        coupon_period_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GetBondEventsResponse_BondEvent::GetBondEventsResponse_BondEvent(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GetBondEventsResponse_BondEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetBondEventsResponse_BondEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetBondEventsResponse_BondEventDefaultTypeInternal() {}
  union {
    GetBondEventsResponse_BondEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetBondEventsResponse_BondEventDefaultTypeInternal _GetBondEventsResponse_BondEvent_default_instance_;

inline constexpr GetBondEventsRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        instrument_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        from_{nullptr},
        to_{nullptr},
        type_{static_cast< ::tinkoff::public_::invest::api::contract::v1::GetBondEventsRequest_EventType >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR GetBondEventsRequest::GetBondEventsRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GetBondEventsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetBondEventsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetBondEventsRequestDefaultTypeInternal() {}
  union {
    GetBondEventsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetBondEventsRequestDefaultTypeInternal _GetBondEventsRequest_default_instance_;

inline constexpr GetBondCouponsRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        figi_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        instrument_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        from_{nullptr},
        to_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR GetBondCouponsRequest::GetBondCouponsRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GetBondCouponsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetBondCouponsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetBondCouponsRequestDefaultTypeInternal() {}
  union {
    GetBondCouponsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetBondCouponsRequestDefaultTypeInternal _GetBondCouponsRequest_default_instance_;

inline constexpr GetAssetReportsResponse_GetAssetReportsEvent::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        instrument_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        report_date_{nullptr},
        created_at_{nullptr},
        period_year_{0},
        period_num_{0},
        period_type_{static_cast< ::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse_AssetReportPeriodType >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR GetAssetReportsResponse_GetAssetReportsEvent::GetAssetReportsResponse_GetAssetReportsEvent(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GetAssetReportsResponse_GetAssetReportsEventDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetAssetReportsResponse_GetAssetReportsEventDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetAssetReportsResponse_GetAssetReportsEventDefaultTypeInternal() {}
  union {
    GetAssetReportsResponse_GetAssetReportsEvent _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetAssetReportsResponse_GetAssetReportsEventDefaultTypeInternal _GetAssetReportsResponse_GetAssetReportsEvent_default_instance_;

inline constexpr GetAssetReportsRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        instrument_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        from_{nullptr},
        to_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR GetAssetReportsRequest::GetAssetReportsRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GetAssetReportsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetAssetReportsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetAssetReportsRequestDefaultTypeInternal() {}
  union {
    GetAssetReportsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetAssetReportsRequestDefaultTypeInternal _GetAssetReportsRequest_default_instance_;

inline constexpr GetAssetFundamentalsResponse_StatisticResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        asset_uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        currency_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        domicile_indicator_code_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        ex_dividend_date_{nullptr},
        fiscal_period_start_date_{nullptr},
        fiscal_period_end_date_{nullptr},
        market_capitalization_{0},
        high_price_last_52_weeks_{0},
        low_price_last_52_weeks_{0},
        average_daily_volume_last_10_days_{0},
        average_daily_volume_last_4_weeks_{0},
        beta_{0},
        free_float_{0},
        forward_annual_dividend_yield_{0},
        shares_outstanding_{0},
        revenue_ttm_{0},
        ebitda_ttm_{0},
        net_income_ttm_{0},
        eps_ttm_{0},
        diluted_eps_ttm_{0},
        free_cash_flow_ttm_{0},
        five_year_annual_revenue_growth_rate_{0},
        three_year_annual_revenue_growth_rate_{0},
        pe_ratio_ttm_{0},
        price_to_sales_ttm_{0},
        price_to_book_ttm_{0},
        price_to_free_cash_flow_ttm_{0},
        total_enterprise_value_mrq_{0},
        ev_to_ebitda_mrq_{0},
        net_margin_mrq_{0},
        net_interest_margin_mrq_{0},
        roe_{0},
        roa_{0},
        roic_{0},
        total_debt_mrq_{0},
        total_debt_to_equity_mrq_{0},
        total_debt_to_ebitda_mrq_{0},
        free_cash_flow_to_price_{0},
        net_debt_to_ebitda_{0},
        current_ratio_mrq_{0},
        fixed_charge_coverage_ratio_fy_{0},
        dividend_yield_daily_ttm_{0},
        dividend_rate_ttm_{0},
        dividends_per_share_{0},
        five_years_average_dividend_yield_{0},
        five_year_annual_dividend_growth_rate_{0},
        dividend_payout_ratio_fy_{0},
        buy_back_ttm_{0},
        one_year_annual_revenue_growth_rate_{0},
        adr_to_common_share_ratio_{0},
        number_of_employees_{0},
        revenue_change_five_years_{0},
        eps_change_five_years_{0},
        ebitda_change_five_years_{0},
        total_debt_change_five_years_{0},
        ev_to_sales_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GetAssetFundamentalsResponse_StatisticResponse::GetAssetFundamentalsResponse_StatisticResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GetAssetFundamentalsResponse_StatisticResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetAssetFundamentalsResponse_StatisticResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetAssetFundamentalsResponse_StatisticResponseDefaultTypeInternal() {}
  union {
    GetAssetFundamentalsResponse_StatisticResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetAssetFundamentalsResponse_StatisticResponseDefaultTypeInternal _GetAssetFundamentalsResponse_StatisticResponse_default_instance_;

inline constexpr GetAccruedInterestsRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        figi_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        instrument_id_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        from_{nullptr},
        to_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR GetAccruedInterestsRequest::GetAccruedInterestsRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GetAccruedInterestsRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetAccruedInterestsRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetAccruedInterestsRequestDefaultTypeInternal() {}
  union {
    GetAccruedInterestsRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetAccruedInterestsRequestDefaultTypeInternal _GetAccruedInterestsRequest_default_instance_;

inline constexpr Future::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        figi_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        ticker_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        class_code_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        currency_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        exchange_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        futures_type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        asset_type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        basic_asset_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        country_of_risk_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        country_of_risk_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        sector_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        position_uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        basic_asset_position_uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        klong_{nullptr},
        kshort_{nullptr},
        dlong_{nullptr},
        dshort_{nullptr},
        dlong_min_{nullptr},
        dshort_min_{nullptr},
        first_trade_date_{nullptr},
        last_trade_date_{nullptr},
        basic_asset_size_{nullptr},
        expiration_date_{nullptr},
        min_price_increment_{nullptr},
        first_1min_candle_date_{nullptr},
        first_1day_candle_date_{nullptr},
        initial_margin_on_buy_{nullptr},
        initial_margin_on_sell_{nullptr},
        min_price_increment_amount_{nullptr},
        brand_{nullptr},
        dlong_client_{nullptr},
        dshort_client_{nullptr},
        lot_{0},
        short_enabled_flag_{false},
        otc_flag_{false},
        buy_available_flag_{false},
        sell_available_flag_{false},
        trading_status_{static_cast< ::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus >(0)},
        real_exchange_{static_cast< ::tinkoff::public_::invest::api::contract::v1::RealExchange >(0)},
        api_trade_available_flag_{false},
        for_iis_flag_{false},
        for_qual_investor_flag_{false},
        weekend_flag_{false},
        blocked_tca_flag_{false} {}

template <typename>
PROTOBUF_CONSTEXPR Future::Future(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct FutureDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FutureDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FutureDefaultTypeInternal() {}
  union {
    Future _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FutureDefaultTypeInternal _Future_default_instance_;

inline constexpr Etf::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        figi_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        ticker_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        class_code_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        isin_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        currency_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        exchange_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        focus_type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        country_of_risk_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        country_of_risk_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        sector_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        rebalancing_freq_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        position_uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        asset_uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        klong_{nullptr},
        kshort_{nullptr},
        dlong_{nullptr},
        dshort_{nullptr},
        dlong_min_{nullptr},
        dshort_min_{nullptr},
        fixed_commission_{nullptr},
        released_date_{nullptr},
        num_shares_{nullptr},
        min_price_increment_{nullptr},
        first_1min_candle_date_{nullptr},
        first_1day_candle_date_{nullptr},
        brand_{nullptr},
        dlong_client_{nullptr},
        dshort_client_{nullptr},
        lot_{0},
        short_enabled_flag_{false},
        otc_flag_{false},
        buy_available_flag_{false},
        sell_available_flag_{false},
        trading_status_{static_cast< ::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus >(0)},
        real_exchange_{static_cast< ::tinkoff::public_::invest::api::contract::v1::RealExchange >(0)},
        instrument_exchange_{static_cast< ::tinkoff::public_::invest::api::contract::v1::InstrumentExchangeType >(0)},
        api_trade_available_flag_{false},
        for_iis_flag_{false},
        for_qual_investor_flag_{false},
        weekend_flag_{false},
        blocked_tca_flag_{false},
        liquidity_flag_{false} {}

template <typename>
PROTOBUF_CONSTEXPR Etf::Etf(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct EtfDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EtfDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EtfDefaultTypeInternal() {}
  union {
    Etf _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EtfDefaultTypeInternal _Etf_default_instance_;

inline constexpr EditFavoritesResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : favorite_instruments_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR EditFavoritesResponse::EditFavoritesResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct EditFavoritesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EditFavoritesResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EditFavoritesResponseDefaultTypeInternal() {}
  union {
    EditFavoritesResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EditFavoritesResponseDefaultTypeInternal _EditFavoritesResponse_default_instance_;

inline constexpr EditFavoritesRequest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : instruments_{},
        action_type_{static_cast< ::tinkoff::public_::invest::api::contract::v1::EditFavoritesActionType >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR EditFavoritesRequest::EditFavoritesRequest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct EditFavoritesRequestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EditFavoritesRequestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EditFavoritesRequestDefaultTypeInternal() {}
  union {
    EditFavoritesRequest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EditFavoritesRequestDefaultTypeInternal _EditFavoritesRequest_default_instance_;

inline constexpr Dividend::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        dividend_type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        regularity_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        dividend_net_{nullptr},
        payment_date_{nullptr},
        declared_date_{nullptr},
        last_buy_date_{nullptr},
        record_date_{nullptr},
        close_price_{nullptr},
        yield_value_{nullptr},
        created_at_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR Dividend::Dividend(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct DividendDefaultTypeInternal {
  PROTOBUF_CONSTEXPR DividendDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~DividendDefaultTypeInternal() {}
  union {
    Dividend _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 DividendDefaultTypeInternal _Dividend_default_instance_;

inline constexpr Currency::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        figi_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        ticker_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        class_code_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        isin_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        currency_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        exchange_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        country_of_risk_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        country_of_risk_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        iso_currency_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        position_uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        klong_{nullptr},
        kshort_{nullptr},
        dlong_{nullptr},
        dshort_{nullptr},
        dlong_min_{nullptr},
        dshort_min_{nullptr},
        nominal_{nullptr},
        min_price_increment_{nullptr},
        first_1min_candle_date_{nullptr},
        first_1day_candle_date_{nullptr},
        brand_{nullptr},
        dlong_client_{nullptr},
        dshort_client_{nullptr},
        lot_{0},
        short_enabled_flag_{false},
        otc_flag_{false},
        buy_available_flag_{false},
        sell_available_flag_{false},
        trading_status_{static_cast< ::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus >(0)},
        real_exchange_{static_cast< ::tinkoff::public_::invest::api::contract::v1::RealExchange >(0)},
        api_trade_available_flag_{false},
        for_iis_flag_{false},
        for_qual_investor_flag_{false},
        weekend_flag_{false},
        blocked_tca_flag_{false} {}

template <typename>
PROTOBUF_CONSTEXPR Currency::Currency(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CurrencyDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CurrencyDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CurrencyDefaultTypeInternal() {}
  union {
    Currency _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CurrencyDefaultTypeInternal _Currency_default_instance_;

inline constexpr Coupon::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        figi_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        coupon_date_{nullptr},
        fix_date_{nullptr},
        pay_one_bond_{nullptr},
        coupon_start_date_{nullptr},
        coupon_end_date_{nullptr},
        coupon_number_{::int64_t{0}},
        coupon_type_{static_cast< ::tinkoff::public_::invest::api::contract::v1::CouponType >(0)},
        coupon_period_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Coupon::Coupon(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CouponDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CouponDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CouponDefaultTypeInternal() {}
  union {
    Coupon _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CouponDefaultTypeInternal _Coupon_default_instance_;

inline constexpr Bond::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        figi_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        ticker_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        class_code_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        isin_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        currency_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        exchange_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        country_of_risk_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        country_of_risk_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        sector_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        issue_kind_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        position_uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        asset_uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        klong_{nullptr},
        kshort_{nullptr},
        dlong_{nullptr},
        dshort_{nullptr},
        dlong_min_{nullptr},
        dshort_min_{nullptr},
        maturity_date_{nullptr},
        nominal_{nullptr},
        initial_nominal_{nullptr},
        state_reg_date_{nullptr},
        placement_date_{nullptr},
        placement_price_{nullptr},
        aci_value_{nullptr},
        min_price_increment_{nullptr},
        first_1min_candle_date_{nullptr},
        first_1day_candle_date_{nullptr},
        brand_{nullptr},
        call_date_{nullptr},
        dlong_client_{nullptr},
        dshort_client_{nullptr},
        lot_{0},
        coupon_quantity_per_year_{0},
        short_enabled_flag_{false},
        otc_flag_{false},
        buy_available_flag_{false},
        sell_available_flag_{false},
        trading_status_{static_cast< ::tinkoff::public_::invest::api::contract::v1::SecurityTradingStatus >(0)},
        issue_size_{::int64_t{0}},
        issue_size_plan_{::int64_t{0}},
        floating_coupon_flag_{false},
        perpetual_flag_{false},
        amortization_flag_{false},
        api_trade_available_flag_{false},
        real_exchange_{static_cast< ::tinkoff::public_::invest::api::contract::v1::RealExchange >(0)},
        for_iis_flag_{false},
        for_qual_investor_flag_{false},
        weekend_flag_{false},
        blocked_tca_flag_{false},
        subordinated_flag_{false},
        liquidity_flag_{false},
        risk_level_{static_cast< ::tinkoff::public_::invest::api::contract::v1::RiskLevel >(0)},
        bond_type_{static_cast< ::tinkoff::public_::invest::api::contract::v1::BondType >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR Bond::Bond(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct BondDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BondDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BondDefaultTypeInternal() {}
  union {
    Bond _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BondDefaultTypeInternal _Bond_default_instance_;

inline constexpr AssetStructuredProduct::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        borrow_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        nominal_currency_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        logic_portfolio_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        basic_asset_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        issue_kind_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        nominal_{nullptr},
        safety_barrier_{nullptr},
        maturity_date_{nullptr},
        issue_size_plan_{nullptr},
        issue_size_{nullptr},
        placement_date_{nullptr},
        type_{static_cast< ::tinkoff::public_::invest::api::contract::v1::StructuredProductType >(0)},
        asset_type_{static_cast< ::tinkoff::public_::invest::api::contract::v1::AssetType >(0)} {}

template <typename>
PROTOBUF_CONSTEXPR AssetStructuredProduct::AssetStructuredProduct(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AssetStructuredProductDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AssetStructuredProductDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AssetStructuredProductDefaultTypeInternal() {}
  union {
    AssetStructuredProduct _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AssetStructuredProductDefaultTypeInternal _AssetStructuredProduct_default_instance_;

inline constexpr AssetShare::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        nominal_currency_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        primary_index_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        preferred_share_type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        issue_kind_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        repres_isin_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        issue_size_{nullptr},
        nominal_{nullptr},
        dividend_rate_{nullptr},
        ipo_date_{nullptr},
        registry_date_{nullptr},
        placement_date_{nullptr},
        issue_size_plan_{nullptr},
        total_float_{nullptr},
        type_{static_cast< ::tinkoff::public_::invest::api::contract::v1::ShareType >(0)},
        div_yield_flag_{false} {}

template <typename>
PROTOBUF_CONSTEXPR AssetShare::AssetShare(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AssetShareDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AssetShareDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AssetShareDefaultTypeInternal() {}
  union {
    AssetShare _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AssetShareDefaultTypeInternal _AssetShare_default_instance_;

inline constexpr AssetInstrument::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : links_{},
        uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        figi_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        instrument_type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        ticker_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        class_code_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        position_uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        instrument_kind_{static_cast< ::tinkoff::public_::invest::api::contract::v1::InstrumentType >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR AssetInstrument::AssetInstrument(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AssetInstrumentDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AssetInstrumentDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AssetInstrumentDefaultTypeInternal() {}
  union {
    AssetInstrument _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AssetInstrumentDefaultTypeInternal _AssetInstrument_default_instance_;

inline constexpr AssetEtf::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        rebalancing_dates_{},
        payment_type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        rebalancing_freq_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        management_type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        primary_index_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        focus_type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        description_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        primary_index_description_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        primary_index_company_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        inav_code_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        rebalancing_plan_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        tax_rate_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        issue_kind_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        nominal_currency_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        total_expense_{nullptr},
        hurdle_rate_{nullptr},
        performance_fee_{nullptr},
        fixed_commission_{nullptr},
        buy_premium_{nullptr},
        sell_discount_{nullptr},
        num_share_{nullptr},
        released_date_{nullptr},
        index_recovery_period_{nullptr},
        expense_commission_{nullptr},
        primary_index_tracking_error_{nullptr},
        nominal_{nullptr},
        watermark_flag_{false},
        rebalancing_flag_{false},
        leveraged_flag_{false},
        ucits_flag_{false},
        div_yield_flag_{false} {}

template <typename>
PROTOBUF_CONSTEXPR AssetEtf::AssetEtf(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AssetEtfDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AssetEtfDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AssetEtfDefaultTypeInternal() {}
  union {
    AssetEtf _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AssetEtfDefaultTypeInternal _AssetEtf_default_instance_;

inline constexpr AssetClearingCertificate::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        nominal_currency_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        nominal_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR AssetClearingCertificate::AssetClearingCertificate(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AssetClearingCertificateDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AssetClearingCertificateDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AssetClearingCertificateDefaultTypeInternal() {}
  union {
    AssetClearingCertificate _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AssetClearingCertificateDefaultTypeInternal _AssetClearingCertificate_default_instance_;

inline constexpr AssetBond::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        borrow_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        nominal_currency_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        issue_kind_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        interest_kind_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        return_condition_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        current_nominal_{nullptr},
        issue_size_{nullptr},
        nominal_{nullptr},
        maturity_date_{nullptr},
        state_reg_date_{nullptr},
        placement_date_{nullptr},
        placement_price_{nullptr},
        issue_size_plan_{nullptr},
        coupon_quantity_per_year_{0},
        indexed_nominal_flag_{false},
        subordinated_flag_{false},
        collateral_flag_{false},
        tax_free_flag_{false},
        amortization_flag_{false},
        floating_coupon_flag_{false},
        perpetual_flag_{false} {}

template <typename>
PROTOBUF_CONSTEXPR AssetBond::AssetBond(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AssetBondDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AssetBondDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AssetBondDefaultTypeInternal() {}
  union {
    AssetBond _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AssetBondDefaultTypeInternal _AssetBond_default_instance_;

inline constexpr AccruedInterest::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        date_{nullptr},
        value_{nullptr},
        value_percent_{nullptr},
        nominal_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR AccruedInterest::AccruedInterest(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AccruedInterestDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AccruedInterestDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AccruedInterestDefaultTypeInternal() {}
  union {
    AccruedInterest _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AccruedInterestDefaultTypeInternal _AccruedInterest_default_instance_;

inline constexpr TradingInterval::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        interval_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR TradingInterval::TradingInterval(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TradingIntervalDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TradingIntervalDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TradingIntervalDefaultTypeInternal() {}
  union {
    TradingInterval _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TradingIntervalDefaultTypeInternal _TradingInterval_default_instance_;

inline constexpr SharesResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : instruments_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR SharesResponse::SharesResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct SharesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR SharesResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~SharesResponseDefaultTypeInternal() {}
  union {
    SharesResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 SharesResponseDefaultTypeInternal _SharesResponse_default_instance_;

inline constexpr ShareResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        instrument_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR ShareResponse::ShareResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct ShareResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR ShareResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~ShareResponseDefaultTypeInternal() {}
  union {
    ShareResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 ShareResponseDefaultTypeInternal _ShareResponse_default_instance_;

inline constexpr OptionsResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : instruments_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR OptionsResponse::OptionsResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct OptionsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OptionsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OptionsResponseDefaultTypeInternal() {}
  union {
    OptionsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OptionsResponseDefaultTypeInternal _OptionsResponse_default_instance_;

inline constexpr OptionResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        instrument_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR OptionResponse::OptionResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct OptionResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR OptionResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~OptionResponseDefaultTypeInternal() {}
  union {
    OptionResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 OptionResponseDefaultTypeInternal _OptionResponse_default_instance_;

inline constexpr InstrumentResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        instrument_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR InstrumentResponse::InstrumentResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct InstrumentResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR InstrumentResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~InstrumentResponseDefaultTypeInternal() {}
  union {
    InstrumentResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 InstrumentResponseDefaultTypeInternal _InstrumentResponse_default_instance_;

inline constexpr GetForecastResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        targets_{},
        consensus_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR GetForecastResponse::GetForecastResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GetForecastResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetForecastResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetForecastResponseDefaultTypeInternal() {}
  union {
    GetForecastResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetForecastResponseDefaultTypeInternal _GetForecastResponse_default_instance_;

inline constexpr GetDividendsResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : dividends_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GetDividendsResponse::GetDividendsResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GetDividendsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetDividendsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetDividendsResponseDefaultTypeInternal() {}
  union {
    GetDividendsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetDividendsResponseDefaultTypeInternal _GetDividendsResponse_default_instance_;

inline constexpr GetConsensusForecastsResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        items_{},
        page_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR GetConsensusForecastsResponse::GetConsensusForecastsResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GetConsensusForecastsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetConsensusForecastsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetConsensusForecastsResponseDefaultTypeInternal() {}
  union {
    GetConsensusForecastsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetConsensusForecastsResponseDefaultTypeInternal _GetConsensusForecastsResponse_default_instance_;

inline constexpr GetBondEventsResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : events_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GetBondEventsResponse::GetBondEventsResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GetBondEventsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetBondEventsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetBondEventsResponseDefaultTypeInternal() {}
  union {
    GetBondEventsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetBondEventsResponseDefaultTypeInternal _GetBondEventsResponse_default_instance_;

inline constexpr GetBondCouponsResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : events_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GetBondCouponsResponse::GetBondCouponsResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GetBondCouponsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetBondCouponsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetBondCouponsResponseDefaultTypeInternal() {}
  union {
    GetBondCouponsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetBondCouponsResponseDefaultTypeInternal _GetBondCouponsResponse_default_instance_;

inline constexpr GetAssetReportsResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : events_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GetAssetReportsResponse::GetAssetReportsResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GetAssetReportsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetAssetReportsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetAssetReportsResponseDefaultTypeInternal() {}
  union {
    GetAssetReportsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetAssetReportsResponseDefaultTypeInternal _GetAssetReportsResponse_default_instance_;

inline constexpr GetAssetFundamentalsResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : fundamentals_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GetAssetFundamentalsResponse::GetAssetFundamentalsResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GetAssetFundamentalsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetAssetFundamentalsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetAssetFundamentalsResponseDefaultTypeInternal() {}
  union {
    GetAssetFundamentalsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetAssetFundamentalsResponseDefaultTypeInternal _GetAssetFundamentalsResponse_default_instance_;

inline constexpr GetAccruedInterestsResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : accrued_interests_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR GetAccruedInterestsResponse::GetAccruedInterestsResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct GetAccruedInterestsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR GetAccruedInterestsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~GetAccruedInterestsResponseDefaultTypeInternal() {}
  union {
    GetAccruedInterestsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 GetAccruedInterestsResponseDefaultTypeInternal _GetAccruedInterestsResponse_default_instance_;

inline constexpr FuturesResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : instruments_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR FuturesResponse::FuturesResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct FuturesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FuturesResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FuturesResponseDefaultTypeInternal() {}
  union {
    FuturesResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FuturesResponseDefaultTypeInternal _FuturesResponse_default_instance_;

inline constexpr FutureResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        instrument_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR FutureResponse::FutureResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct FutureResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FutureResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FutureResponseDefaultTypeInternal() {}
  union {
    FutureResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FutureResponseDefaultTypeInternal _FutureResponse_default_instance_;

inline constexpr FindInstrumentResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : instruments_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR FindInstrumentResponse::FindInstrumentResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct FindInstrumentResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR FindInstrumentResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~FindInstrumentResponseDefaultTypeInternal() {}
  union {
    FindInstrumentResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 FindInstrumentResponseDefaultTypeInternal _FindInstrumentResponse_default_instance_;

inline constexpr EtfsResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : instruments_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR EtfsResponse::EtfsResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct EtfsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EtfsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EtfsResponseDefaultTypeInternal() {}
  union {
    EtfsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EtfsResponseDefaultTypeInternal _EtfsResponse_default_instance_;

inline constexpr EtfResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        instrument_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR EtfResponse::EtfResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct EtfResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR EtfResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~EtfResponseDefaultTypeInternal() {}
  union {
    EtfResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 EtfResponseDefaultTypeInternal _EtfResponse_default_instance_;

inline constexpr CurrencyResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        instrument_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR CurrencyResponse::CurrencyResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CurrencyResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CurrencyResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CurrencyResponseDefaultTypeInternal() {}
  union {
    CurrencyResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CurrencyResponseDefaultTypeInternal _CurrencyResponse_default_instance_;

inline constexpr CurrenciesResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : instruments_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR CurrenciesResponse::CurrenciesResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct CurrenciesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR CurrenciesResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~CurrenciesResponseDefaultTypeInternal() {}
  union {
    CurrenciesResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 CurrenciesResponseDefaultTypeInternal _CurrenciesResponse_default_instance_;

inline constexpr BondsResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : instruments_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR BondsResponse::BondsResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct BondsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BondsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BondsResponseDefaultTypeInternal() {}
  union {
    BondsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BondsResponseDefaultTypeInternal _BondsResponse_default_instance_;

inline constexpr BondResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        instrument_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR BondResponse::BondResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct BondResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR BondResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~BondResponseDefaultTypeInternal() {}
  union {
    BondResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 BondResponseDefaultTypeInternal _BondResponse_default_instance_;

inline constexpr AssetSecurity::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : isin_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        type_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        instrument_kind_{static_cast< ::tinkoff::public_::invest::api::contract::v1::InstrumentType >(0)},
        ext_{},
        _cached_size_{0},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR AssetSecurity::AssetSecurity(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AssetSecurityDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AssetSecurityDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AssetSecurityDefaultTypeInternal() {}
  union {
    AssetSecurity _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AssetSecurityDefaultTypeInternal _AssetSecurity_default_instance_;

inline constexpr Asset::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : instruments_{},
        uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        type_{static_cast< ::tinkoff::public_::invest::api::contract::v1::AssetType >(0)},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR Asset::Asset(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AssetDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AssetDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AssetDefaultTypeInternal() {}
  union {
    Asset _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AssetDefaultTypeInternal _Asset_default_instance_;

inline constexpr TradingDay::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        intervals_{},
        date_{nullptr},
        start_time_{nullptr},
        end_time_{nullptr},
        opening_auction_start_time_{nullptr},
        closing_auction_end_time_{nullptr},
        evening_opening_auction_start_time_{nullptr},
        evening_start_time_{nullptr},
        evening_end_time_{nullptr},
        clearing_start_time_{nullptr},
        clearing_end_time_{nullptr},
        premarket_start_time_{nullptr},
        premarket_end_time_{nullptr},
        closing_auction_start_time_{nullptr},
        opening_auction_end_time_{nullptr},
        is_trading_day_{false} {}

template <typename>
PROTOBUF_CONSTEXPR TradingDay::TradingDay(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TradingDayDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TradingDayDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TradingDayDefaultTypeInternal() {}
  union {
    TradingDay _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TradingDayDefaultTypeInternal _TradingDay_default_instance_;

inline constexpr AssetsResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : assets_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR AssetsResponse::AssetsResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AssetsResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AssetsResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AssetsResponseDefaultTypeInternal() {}
  union {
    AssetsResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AssetsResponseDefaultTypeInternal _AssetsResponse_default_instance_;

inline constexpr AssetFull::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        required_tests_{},
        instruments_{},
        uid_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        name_brief_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        description_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        gos_reg_code_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        cfi_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        code_nsd_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        status_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        br_code_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        br_code_name_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        deleted_at_{nullptr},
        brand_{nullptr},
        updated_at_{nullptr},
        type_{static_cast< ::tinkoff::public_::invest::api::contract::v1::AssetType >(0)},
        ext_{},
        _oneof_case_{} {}

template <typename>
PROTOBUF_CONSTEXPR AssetFull::AssetFull(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AssetFullDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AssetFullDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AssetFullDefaultTypeInternal() {}
  union {
    AssetFull _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AssetFullDefaultTypeInternal _AssetFull_default_instance_;

inline constexpr TradingSchedule::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : days_{},
        exchange_(
            &::google::protobuf::internal::fixed_address_empty_string,
            ::_pbi::ConstantInitialized()),
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TradingSchedule::TradingSchedule(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TradingScheduleDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TradingScheduleDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TradingScheduleDefaultTypeInternal() {}
  union {
    TradingSchedule _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TradingScheduleDefaultTypeInternal _TradingSchedule_default_instance_;

inline constexpr AssetResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : _cached_size_{0},
        asset_{nullptr} {}

template <typename>
PROTOBUF_CONSTEXPR AssetResponse::AssetResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct AssetResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR AssetResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~AssetResponseDefaultTypeInternal() {}
  union {
    AssetResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 AssetResponseDefaultTypeInternal _AssetResponse_default_instance_;

inline constexpr TradingSchedulesResponse::Impl_::Impl_(
    ::_pbi::ConstantInitialized) noexcept
      : exchanges_{},
        _cached_size_{0} {}

template <typename>
PROTOBUF_CONSTEXPR TradingSchedulesResponse::TradingSchedulesResponse(::_pbi::ConstantInitialized)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(_class_data_.base()),
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(),
#endif  // PROTOBUF_CUSTOM_VTABLE
      _impl_(::_pbi::ConstantInitialized()) {
}
struct TradingSchedulesResponseDefaultTypeInternal {
  PROTOBUF_CONSTEXPR TradingSchedulesResponseDefaultTypeInternal() : _instance(::_pbi::ConstantInitialized{}) {}
  ~TradingSchedulesResponseDefaultTypeInternal() {}
  union {
    TradingSchedulesResponse _instance;
  };
};

PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT
    PROTOBUF_ATTRIBUTE_INIT_PRIORITY1 TradingSchedulesResponseDefaultTypeInternal _TradingSchedulesResponse_default_instance_;
}  // namespace v1
}  // namespace contract
}  // namespace api
}  // namespace invest
}  // namespace public_
}  // namespace tinkoff
static const ::_pb::EnumDescriptor* file_level_enum_descriptors_instruments_2eproto[17];
static constexpr const ::_pb::ServiceDescriptor**
    file_level_service_descriptors_instruments_2eproto = nullptr;
const ::uint32_t
    TableStruct_instruments_2eproto::offsets[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
        protodesc_cold) = {
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingSchedulesRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingSchedulesRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingSchedulesRequest, _impl_.exchange_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingSchedulesRequest, _impl_.from_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingSchedulesRequest, _impl_.to_),
        0,
        1,
        2,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingSchedulesResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingSchedulesResponse, _impl_.exchanges_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingSchedule, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingSchedule, _impl_.exchange_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingSchedule, _impl_.days_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingDay, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingDay, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingDay, _impl_.date_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingDay, _impl_.is_trading_day_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingDay, _impl_.start_time_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingDay, _impl_.end_time_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingDay, _impl_.opening_auction_start_time_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingDay, _impl_.closing_auction_end_time_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingDay, _impl_.evening_opening_auction_start_time_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingDay, _impl_.evening_start_time_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingDay, _impl_.evening_end_time_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingDay, _impl_.clearing_start_time_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingDay, _impl_.clearing_end_time_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingDay, _impl_.premarket_start_time_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingDay, _impl_.premarket_end_time_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingDay, _impl_.closing_auction_start_time_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingDay, _impl_.opening_auction_end_time_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingDay, _impl_.intervals_),
        0,
        ~0u,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentRequest, _impl_.id_type_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentRequest, _impl_.class_code_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentRequest, _impl_.id_),
        ~0u,
        0,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest, _impl_.instrument_status_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest, _impl_.instrument_exchange_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FilterOptionsRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FilterOptionsRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FilterOptionsRequest, _impl_.basic_asset_uid_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FilterOptionsRequest, _impl_.basic_asset_position_uid_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::BondResponse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::BondResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::BondResponse, _impl_.instrument_),
        0,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::BondsResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::BondsResponse, _impl_.instruments_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondCouponsRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondCouponsRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondCouponsRequest, _impl_.figi_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondCouponsRequest, _impl_.from_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondCouponsRequest, _impl_.to_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondCouponsRequest, _impl_.instrument_id_),
        ~0u,
        0,
        1,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondCouponsResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondCouponsResponse, _impl_.events_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsRequest, _impl_.from_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsRequest, _impl_.to_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsRequest, _impl_.instrument_id_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsRequest, _impl_.type_),
        0,
        1,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent, _impl_.instrument_id_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent, _impl_.event_number_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent, _impl_.event_date_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent, _impl_.event_type_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent, _impl_.event_total_vol_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent, _impl_.fix_date_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent, _impl_.rate_date_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent, _impl_.default_date_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent, _impl_.real_pay_date_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent, _impl_.pay_date_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent, _impl_.pay_one_bond_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent, _impl_.money_flow_val_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent, _impl_.execution_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent, _impl_.operation_type_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent, _impl_.value_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent, _impl_.note_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent, _impl_.convert_to_fin_tool_id_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent, _impl_.coupon_start_date_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent, _impl_.coupon_end_date_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent, _impl_.coupon_period_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent, _impl_.coupon_interest_rate_),
        ~0u,
        ~0u,
        0,
        ~0u,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        ~0u,
        ~0u,
        9,
        ~0u,
        ~0u,
        10,
        11,
        ~0u,
        12,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse, _impl_.events_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Coupon, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Coupon, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Coupon, _impl_.figi_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Coupon, _impl_.coupon_date_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Coupon, _impl_.coupon_number_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Coupon, _impl_.fix_date_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Coupon, _impl_.pay_one_bond_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Coupon, _impl_.coupon_type_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Coupon, _impl_.coupon_start_date_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Coupon, _impl_.coupon_end_date_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Coupon, _impl_.coupon_period_),
        ~0u,
        0,
        ~0u,
        1,
        2,
        ~0u,
        3,
        4,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::CurrencyResponse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::CurrencyResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::CurrencyResponse, _impl_.instrument_),
        0,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::CurrenciesResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::CurrenciesResponse, _impl_.instruments_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::EtfResponse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::EtfResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::EtfResponse, _impl_.instrument_),
        0,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::EtfsResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::EtfsResponse, _impl_.instruments_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FutureResponse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FutureResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FutureResponse, _impl_.instrument_),
        0,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FuturesResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FuturesResponse, _impl_.instruments_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OptionResponse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OptionResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OptionResponse, _impl_.instrument_),
        0,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OptionsResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::OptionsResponse, _impl_.instruments_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.uid_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.position_uid_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.ticker_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.class_code_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.basic_asset_position_uid_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.trading_status_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.real_exchange_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.direction_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.payment_type_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.style_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.settlement_type_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.currency_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.settlement_currency_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.asset_type_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.basic_asset_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.exchange_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.country_of_risk_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.country_of_risk_name_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.sector_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.brand_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.lot_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.basic_asset_size_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.klong_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.kshort_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.dlong_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.dshort_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.dlong_min_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.dshort_min_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.min_price_increment_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.strike_price_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.dlong_client_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.dshort_client_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.expiration_date_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.first_trade_date_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.last_trade_date_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.first_1min_candle_date_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.first_1day_candle_date_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.short_enabled_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.for_iis_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.otc_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.buy_available_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.sell_available_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.for_qual_investor_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.weekend_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.blocked_tca_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Option, _impl_.api_trade_available_flag_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
        ~0u,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::ShareResponse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::ShareResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::ShareResponse, _impl_.instrument_),
        0,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::SharesResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::SharesResponse, _impl_.instruments_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.figi_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.ticker_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.class_code_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.isin_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.lot_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.currency_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.klong_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.kshort_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.dlong_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.dshort_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.dlong_min_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.dshort_min_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.short_enabled_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.exchange_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.coupon_quantity_per_year_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.maturity_date_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.nominal_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.initial_nominal_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.state_reg_date_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.placement_date_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.placement_price_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.aci_value_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.country_of_risk_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.country_of_risk_name_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.sector_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.issue_kind_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.issue_size_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.issue_size_plan_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.trading_status_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.otc_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.buy_available_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.sell_available_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.floating_coupon_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.perpetual_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.amortization_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.min_price_increment_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.api_trade_available_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.uid_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.real_exchange_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.position_uid_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.asset_uid_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.for_iis_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.for_qual_investor_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.weekend_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.blocked_tca_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.subordinated_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.liquidity_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.first_1min_candle_date_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.first_1day_candle_date_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.risk_level_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.brand_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.bond_type_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.call_date_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.dlong_client_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Bond, _impl_.dshort_client_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
        1,
        2,
        3,
        4,
        5,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        13,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        14,
        15,
        ~0u,
        16,
        ~0u,
        17,
        18,
        19,
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.figi_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.ticker_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.class_code_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.isin_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.lot_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.currency_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.klong_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.kshort_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.dlong_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.dshort_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.dlong_min_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.dshort_min_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.short_enabled_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.exchange_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.nominal_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.country_of_risk_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.country_of_risk_name_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.trading_status_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.otc_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.buy_available_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.sell_available_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.iso_currency_name_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.min_price_increment_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.api_trade_available_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.uid_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.real_exchange_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.position_uid_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.for_iis_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.for_qual_investor_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.weekend_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.blocked_tca_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.first_1min_candle_date_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.first_1day_candle_date_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.brand_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.dlong_client_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Currency, _impl_.dshort_client_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
        1,
        2,
        3,
        4,
        5,
        ~0u,
        ~0u,
        ~0u,
        6,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        7,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        8,
        9,
        10,
        11,
        12,
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.figi_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.ticker_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.class_code_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.isin_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.lot_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.currency_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.klong_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.kshort_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.dlong_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.dshort_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.dlong_min_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.dshort_min_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.short_enabled_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.exchange_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.fixed_commission_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.focus_type_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.released_date_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.num_shares_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.country_of_risk_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.country_of_risk_name_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.sector_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.rebalancing_freq_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.trading_status_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.otc_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.buy_available_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.sell_available_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.min_price_increment_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.api_trade_available_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.uid_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.real_exchange_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.position_uid_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.asset_uid_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.instrument_exchange_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.for_iis_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.for_qual_investor_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.weekend_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.blocked_tca_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.liquidity_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.first_1min_candle_date_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.first_1day_candle_date_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.brand_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.dlong_client_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Etf, _impl_.dshort_client_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
        1,
        2,
        3,
        4,
        5,
        ~0u,
        ~0u,
        ~0u,
        6,
        ~0u,
        7,
        8,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        9,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        10,
        11,
        12,
        13,
        14,
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.figi_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.ticker_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.class_code_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.lot_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.currency_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.klong_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.kshort_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.dlong_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.dshort_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.dlong_min_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.dshort_min_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.short_enabled_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.exchange_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.first_trade_date_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.last_trade_date_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.futures_type_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.asset_type_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.basic_asset_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.basic_asset_size_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.country_of_risk_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.country_of_risk_name_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.sector_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.expiration_date_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.trading_status_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.otc_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.buy_available_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.sell_available_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.min_price_increment_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.api_trade_available_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.uid_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.real_exchange_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.position_uid_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.basic_asset_position_uid_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.for_iis_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.for_qual_investor_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.weekend_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.blocked_tca_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.first_1min_candle_date_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.first_1day_candle_date_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.initial_margin_on_buy_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.initial_margin_on_sell_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.min_price_increment_amount_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.brand_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.dlong_client_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Future, _impl_.dshort_client_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
        1,
        2,
        3,
        4,
        5,
        ~0u,
        ~0u,
        ~0u,
        6,
        7,
        ~0u,
        ~0u,
        ~0u,
        8,
        ~0u,
        ~0u,
        ~0u,
        9,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        10,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.figi_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.ticker_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.class_code_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.isin_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.lot_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.currency_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.klong_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.kshort_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.dlong_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.dshort_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.dlong_min_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.dshort_min_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.short_enabled_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.exchange_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.ipo_date_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.issue_size_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.country_of_risk_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.country_of_risk_name_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.sector_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.issue_size_plan_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.nominal_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.trading_status_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.otc_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.buy_available_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.sell_available_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.div_yield_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.share_type_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.min_price_increment_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.api_trade_available_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.uid_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.real_exchange_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.position_uid_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.asset_uid_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.instrument_exchange_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.for_iis_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.for_qual_investor_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.weekend_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.blocked_tca_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.liquidity_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.first_1min_candle_date_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.first_1day_candle_date_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.brand_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.dlong_client_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Share, _impl_.dshort_client_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
        1,
        2,
        3,
        4,
        5,
        ~0u,
        ~0u,
        ~0u,
        6,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        7,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        8,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        9,
        10,
        11,
        12,
        13,
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAccruedInterestsRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAccruedInterestsRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAccruedInterestsRequest, _impl_.figi_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAccruedInterestsRequest, _impl_.from_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAccruedInterestsRequest, _impl_.to_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAccruedInterestsRequest, _impl_.instrument_id_),
        ~0u,
        0,
        1,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAccruedInterestsResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAccruedInterestsResponse, _impl_.accrued_interests_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AccruedInterest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AccruedInterest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AccruedInterest, _impl_.date_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AccruedInterest, _impl_.value_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AccruedInterest, _impl_.value_percent_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AccruedInterest, _impl_.nominal_),
        0,
        1,
        2,
        3,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetFuturesMarginRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetFuturesMarginRequest, _impl_.figi_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetFuturesMarginRequest, _impl_.instrument_id_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetFuturesMarginResponse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetFuturesMarginResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetFuturesMarginResponse, _impl_.initial_margin_on_buy_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetFuturesMarginResponse, _impl_.initial_margin_on_sell_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetFuturesMarginResponse, _impl_.min_price_increment_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetFuturesMarginResponse, _impl_.min_price_increment_amount_),
        0,
        1,
        2,
        3,
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentResponse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentResponse, _impl_.instrument_),
        0,
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.figi_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.ticker_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.class_code_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.isin_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.lot_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.currency_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.klong_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.kshort_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.dlong_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.dshort_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.dlong_min_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.dshort_min_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.short_enabled_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.exchange_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.country_of_risk_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.country_of_risk_name_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.instrument_type_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.trading_status_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.otc_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.buy_available_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.sell_available_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.min_price_increment_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.api_trade_available_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.uid_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.real_exchange_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.position_uid_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.asset_uid_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.for_iis_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.for_qual_investor_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.weekend_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.blocked_tca_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.instrument_kind_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.first_1min_candle_date_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.first_1day_candle_date_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.brand_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.dlong_client_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Instrument, _impl_.dshort_client_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
        1,
        2,
        3,
        4,
        5,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        6,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        7,
        8,
        9,
        10,
        11,
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetDividendsRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetDividendsRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetDividendsRequest, _impl_.figi_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetDividendsRequest, _impl_.from_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetDividendsRequest, _impl_.to_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetDividendsRequest, _impl_.instrument_id_),
        ~0u,
        0,
        1,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetDividendsResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetDividendsResponse, _impl_.dividends_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Dividend, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Dividend, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Dividend, _impl_.dividend_net_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Dividend, _impl_.payment_date_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Dividend, _impl_.declared_date_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Dividend, _impl_.last_buy_date_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Dividend, _impl_.dividend_type_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Dividend, _impl_.record_date_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Dividend, _impl_.regularity_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Dividend, _impl_.close_price_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Dividend, _impl_.yield_value_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Dividend, _impl_.created_at_),
        0,
        1,
        2,
        3,
        ~0u,
        4,
        ~0u,
        5,
        6,
        7,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetRequest, _impl_.id_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetResponse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetResponse, _impl_.asset_),
        0,
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetsRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetsRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetsRequest, _impl_.instrument_type_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetsRequest, _impl_.instrument_status_),
        0,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetsResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetsResponse, _impl_.assets_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetFull, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetFull, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetFull, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetFull, _impl_.uid_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetFull, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetFull, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetFull, _impl_.name_brief_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetFull, _impl_.description_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetFull, _impl_.deleted_at_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetFull, _impl_.required_tests_),
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetFull, _impl_.gos_reg_code_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetFull, _impl_.cfi_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetFull, _impl_.code_nsd_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetFull, _impl_.status_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetFull, _impl_.brand_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetFull, _impl_.updated_at_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetFull, _impl_.br_code_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetFull, _impl_.br_code_name_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetFull, _impl_.instruments_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetFull, _impl_.ext_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        1,
        2,
        ~0u,
        ~0u,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Asset, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Asset, _impl_.uid_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Asset, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Asset, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Asset, _impl_.instruments_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetCurrency, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetCurrency, _impl_.base_currency_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetSecurity, _internal_metadata_),
        ~0u,  // no _extensions_
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetSecurity, _impl_._oneof_case_[0]),
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetSecurity, _impl_.isin_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetSecurity, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetSecurity, _impl_.instrument_kind_),
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        ::_pbi::kInvalidFieldOffsetTag,
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetSecurity, _impl_.ext_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetShare, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetShare, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetShare, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetShare, _impl_.issue_size_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetShare, _impl_.nominal_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetShare, _impl_.nominal_currency_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetShare, _impl_.primary_index_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetShare, _impl_.dividend_rate_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetShare, _impl_.preferred_share_type_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetShare, _impl_.ipo_date_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetShare, _impl_.registry_date_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetShare, _impl_.div_yield_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetShare, _impl_.issue_kind_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetShare, _impl_.placement_date_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetShare, _impl_.repres_isin_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetShare, _impl_.issue_size_plan_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetShare, _impl_.total_float_),
        ~0u,
        0,
        1,
        ~0u,
        ~0u,
        2,
        ~0u,
        3,
        4,
        ~0u,
        ~0u,
        5,
        ~0u,
        6,
        7,
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetBond, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetBond, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetBond, _impl_.current_nominal_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetBond, _impl_.borrow_name_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetBond, _impl_.issue_size_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetBond, _impl_.nominal_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetBond, _impl_.nominal_currency_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetBond, _impl_.issue_kind_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetBond, _impl_.interest_kind_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetBond, _impl_.coupon_quantity_per_year_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetBond, _impl_.indexed_nominal_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetBond, _impl_.subordinated_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetBond, _impl_.collateral_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetBond, _impl_.tax_free_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetBond, _impl_.amortization_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetBond, _impl_.floating_coupon_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetBond, _impl_.perpetual_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetBond, _impl_.maturity_date_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetBond, _impl_.return_condition_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetBond, _impl_.state_reg_date_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetBond, _impl_.placement_date_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetBond, _impl_.placement_price_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetBond, _impl_.issue_size_plan_),
        0,
        ~0u,
        1,
        2,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        3,
        ~0u,
        4,
        5,
        6,
        7,
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct, _impl_.borrow_name_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct, _impl_.nominal_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct, _impl_.nominal_currency_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct, _impl_.logic_portfolio_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct, _impl_.asset_type_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct, _impl_.basic_asset_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct, _impl_.safety_barrier_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct, _impl_.maturity_date_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct, _impl_.issue_size_plan_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct, _impl_.issue_size_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct, _impl_.placement_date_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct, _impl_.issue_kind_),
        ~0u,
        0,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        1,
        2,
        3,
        4,
        5,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.total_expense_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.hurdle_rate_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.performance_fee_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.fixed_commission_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.payment_type_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.watermark_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.buy_premium_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.sell_discount_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.rebalancing_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.rebalancing_freq_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.management_type_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.primary_index_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.focus_type_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.leveraged_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.num_share_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.ucits_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.released_date_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.description_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.primary_index_description_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.primary_index_company_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.index_recovery_period_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.inav_code_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.div_yield_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.expense_commission_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.primary_index_tracking_error_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.rebalancing_plan_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.tax_rate_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.rebalancing_dates_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.issue_kind_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.nominal_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetEtf, _impl_.nominal_currency_),
        0,
        1,
        2,
        3,
        ~0u,
        ~0u,
        4,
        5,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        6,
        ~0u,
        7,
        ~0u,
        ~0u,
        ~0u,
        8,
        ~0u,
        ~0u,
        9,
        10,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        11,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetClearingCertificate, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetClearingCertificate, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetClearingCertificate, _impl_.nominal_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetClearingCertificate, _impl_.nominal_currency_),
        0,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Brand, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Brand, _impl_.uid_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Brand, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Brand, _impl_.description_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Brand, _impl_.info_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Brand, _impl_.company_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Brand, _impl_.sector_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Brand, _impl_.country_of_risk_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::Brand, _impl_.country_of_risk_name_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetInstrument, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetInstrument, _impl_.uid_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetInstrument, _impl_.figi_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetInstrument, _impl_.instrument_type_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetInstrument, _impl_.ticker_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetInstrument, _impl_.class_code_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetInstrument, _impl_.links_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetInstrument, _impl_.instrument_kind_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetInstrument, _impl_.position_uid_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentLink, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentLink, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentLink, _impl_.instrument_uid_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetFavoritesRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetFavoritesResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetFavoritesResponse, _impl_.favorite_instruments_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument, _impl_.figi_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument, _impl_.ticker_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument, _impl_.class_code_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument, _impl_.isin_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument, _impl_.instrument_type_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument, _impl_.uid_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument, _impl_.otc_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument, _impl_.api_trade_available_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument, _impl_.instrument_kind_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::EditFavoritesRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::EditFavoritesRequest, _impl_.instruments_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::EditFavoritesRequest, _impl_.action_type_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::EditFavoritesRequestInstrument, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::EditFavoritesRequestInstrument, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::EditFavoritesRequestInstrument, _impl_.figi_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::EditFavoritesRequestInstrument, _impl_.instrument_id_),
        0,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::EditFavoritesResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::EditFavoritesResponse, _impl_.favorite_instruments_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetCountriesRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetCountriesResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetCountriesResponse, _impl_.countries_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::IndicativesRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::IndicativesResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::IndicativesResponse, _impl_.instruments_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::IndicativeResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::IndicativeResponse, _impl_.figi_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::IndicativeResponse, _impl_.ticker_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::IndicativeResponse, _impl_.class_code_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::IndicativeResponse, _impl_.currency_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::IndicativeResponse, _impl_.instrument_kind_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::IndicativeResponse, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::IndicativeResponse, _impl_.exchange_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::IndicativeResponse, _impl_.uid_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::IndicativeResponse, _impl_.buy_available_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::IndicativeResponse, _impl_.sell_available_flag_),
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::CountryResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::CountryResponse, _impl_.alfa_two_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::CountryResponse, _impl_.alfa_three_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::CountryResponse, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::CountryResponse, _impl_.name_brief_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FindInstrumentRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FindInstrumentRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FindInstrumentRequest, _impl_.query_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FindInstrumentRequest, _impl_.instrument_kind_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FindInstrumentRequest, _impl_.api_trade_available_flag_),
        ~0u,
        0,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FindInstrumentResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::FindInstrumentResponse, _impl_.instruments_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentShort, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentShort, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentShort, _impl_.isin_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentShort, _impl_.figi_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentShort, _impl_.ticker_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentShort, _impl_.class_code_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentShort, _impl_.instrument_type_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentShort, _impl_.name_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentShort, _impl_.uid_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentShort, _impl_.position_uid_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentShort, _impl_.instrument_kind_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentShort, _impl_.api_trade_available_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentShort, _impl_.for_iis_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentShort, _impl_.first_1min_candle_date_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentShort, _impl_.first_1day_candle_date_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentShort, _impl_.for_qual_investor_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentShort, _impl_.weekend_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentShort, _impl_.blocked_tca_flag_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::InstrumentShort, _impl_.lot_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
        1,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBrandsRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBrandsRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBrandsRequest, _impl_.paging_),
        0,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBrandRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBrandRequest, _impl_.id_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBrandsResponse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBrandsResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBrandsResponse, _impl_.brands_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetBrandsResponse, _impl_.paging_),
        ~0u,
        0,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsRequest, _impl_.assets_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.asset_uid_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.currency_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.market_capitalization_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.high_price_last_52_weeks_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.low_price_last_52_weeks_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.average_daily_volume_last_10_days_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.average_daily_volume_last_4_weeks_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.beta_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.free_float_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.forward_annual_dividend_yield_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.shares_outstanding_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.revenue_ttm_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.ebitda_ttm_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.net_income_ttm_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.eps_ttm_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.diluted_eps_ttm_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.free_cash_flow_ttm_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.five_year_annual_revenue_growth_rate_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.three_year_annual_revenue_growth_rate_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.pe_ratio_ttm_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.price_to_sales_ttm_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.price_to_book_ttm_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.price_to_free_cash_flow_ttm_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.total_enterprise_value_mrq_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.ev_to_ebitda_mrq_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.net_margin_mrq_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.net_interest_margin_mrq_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.roe_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.roa_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.roic_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.total_debt_mrq_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.total_debt_to_equity_mrq_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.total_debt_to_ebitda_mrq_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.free_cash_flow_to_price_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.net_debt_to_ebitda_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.current_ratio_mrq_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.fixed_charge_coverage_ratio_fy_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.dividend_yield_daily_ttm_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.dividend_rate_ttm_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.dividends_per_share_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.five_years_average_dividend_yield_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.five_year_annual_dividend_growth_rate_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.dividend_payout_ratio_fy_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.buy_back_ttm_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.one_year_annual_revenue_growth_rate_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.domicile_indicator_code_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.adr_to_common_share_ratio_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.number_of_employees_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.ex_dividend_date_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.fiscal_period_start_date_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.fiscal_period_end_date_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.revenue_change_five_years_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.eps_change_five_years_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.ebitda_change_five_years_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.total_debt_change_five_years_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse, _impl_.ev_to_sales_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
        1,
        2,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse, _impl_.fundamentals_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetReportsRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetReportsRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetReportsRequest, _impl_.instrument_id_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetReportsRequest, _impl_.from_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetReportsRequest, _impl_.to_),
        ~0u,
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse_GetAssetReportsEvent, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse_GetAssetReportsEvent, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse_GetAssetReportsEvent, _impl_.instrument_id_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse_GetAssetReportsEvent, _impl_.report_date_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse_GetAssetReportsEvent, _impl_.period_year_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse_GetAssetReportsEvent, _impl_.period_num_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse_GetAssetReportsEvent, _impl_.period_type_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse_GetAssetReportsEvent, _impl_.created_at_),
        ~0u,
        0,
        ~0u,
        ~0u,
        ~0u,
        1,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse, _impl_.events_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsRequest, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsRequest, _impl_.paging_),
        0,
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse_ConsensusForecastsItem, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.uid_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.asset_uid_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.created_at_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.best_target_price_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.best_target_low_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.best_target_high_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.total_buy_recommend_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.total_hold_recommend_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.total_sell_recommend_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.currency_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.consensus_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.prognosis_date_),
        ~0u,
        ~0u,
        0,
        1,
        2,
        3,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        4,
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse, _impl_.items_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse, _impl_.page_),
        ~0u,
        0,
        ~0u,  // no _has_bits_
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastRequest, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastRequest, _impl_.instrument_id_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_TargetItem, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_TargetItem, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_TargetItem, _impl_.uid_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_TargetItem, _impl_.ticker_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_TargetItem, _impl_.company_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_TargetItem, _impl_.recommendation_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_TargetItem, _impl_.recommendation_date_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_TargetItem, _impl_.currency_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_TargetItem, _impl_.current_price_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_TargetItem, _impl_.target_price_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_TargetItem, _impl_.price_change_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_TargetItem, _impl_.price_change_rel_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_TargetItem, _impl_.show_name_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
        ~0u,
        1,
        2,
        3,
        4,
        ~0u,
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem, _impl_.uid_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem, _impl_.ticker_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem, _impl_.recommendation_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem, _impl_.currency_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem, _impl_.current_price_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem, _impl_.consensus_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem, _impl_.min_target_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem, _impl_.max_target_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem, _impl_.price_change_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem, _impl_.price_change_rel_),
        ~0u,
        ~0u,
        ~0u,
        ~0u,
        0,
        1,
        2,
        3,
        4,
        5,
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse, _impl_.targets_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse, _impl_.consensus_),
        ~0u,
        0,
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingInterval_TimeInterval, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingInterval_TimeInterval, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingInterval_TimeInterval, _impl_.start_ts_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingInterval_TimeInterval, _impl_.end_ts_),
        0,
        1,
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingInterval, _impl_._has_bits_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingInterval, _internal_metadata_),
        ~0u,  // no _extensions_
        ~0u,  // no _oneof_case_
        ~0u,  // no _weak_field_map_
        ~0u,  // no _inlined_string_donated_
        ~0u,  // no _split_
        ~0u,  // no sizeof(Split)
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingInterval, _impl_.type_),
        PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::TradingInterval, _impl_.interval_),
        ~0u,
        0,
};

static const ::_pbi::MigrationSchema
    schemas[] ABSL_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
        {0, 11, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::TradingSchedulesRequest)},
        {14, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::TradingSchedulesResponse)},
        {23, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::TradingSchedule)},
        {33, 57, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::TradingDay)},
        {73, 84, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::InstrumentRequest)},
        {87, 97, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest)},
        {99, 109, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::FilterOptionsRequest)},
        {111, 120, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::BondResponse)},
        {121, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::BondsResponse)},
        {130, 142, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetBondCouponsRequest)},
        {146, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetBondCouponsResponse)},
        {155, 167, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetBondEventsRequest)},
        {171, 200, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent)},
        {221, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse)},
        {230, 247, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::Coupon)},
        {256, 265, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::CurrencyResponse)},
        {266, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::CurrenciesResponse)},
        {275, 284, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::EtfResponse)},
        {285, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::EtfsResponse)},
        {294, 303, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::FutureResponse)},
        {304, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::FuturesResponse)},
        {313, 322, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::OptionResponse)},
        {323, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::OptionsResponse)},
        {332, 387, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::Option)},
        {434, 443, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::ShareResponse)},
        {444, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::SharesResponse)},
        {453, 517, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::Bond)},
        {573, 618, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::Currency)},
        {655, 707, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::Etf)},
        {751, 805, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::Future)},
        {851, 904, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::Share)},
        {949, 961, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetAccruedInterestsRequest)},
        {965, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetAccruedInterestsResponse)},
        {974, 986, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::AccruedInterest)},
        {990, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetFuturesMarginRequest)},
        {1000, 1012, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetFuturesMarginResponse)},
        {1016, 1025, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::InstrumentResponse)},
        {1026, 1072, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::Instrument)},
        {1110, 1122, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetDividendsRequest)},
        {1126, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetDividendsResponse)},
        {1135, 1153, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::Dividend)},
        {1163, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::AssetRequest)},
        {1172, 1181, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::AssetResponse)},
        {1182, 1192, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::AssetsRequest)},
        {1194, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::AssetsResponse)},
        {1203, 1230, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::AssetFull)},
        {1248, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::Asset)},
        {1260, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::AssetCurrency)},
        {1269, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::AssetSecurity)},
        {1286, 1309, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::AssetShare)},
        {1324, 1353, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::AssetBond)},
        {1374, 1395, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct)},
        {1408, 1447, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::AssetEtf)},
        {1478, 1488, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::AssetClearingCertificate)},
        {1490, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::Brand)},
        {1506, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::AssetInstrument)},
        {1522, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::InstrumentLink)},
        {1532, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetFavoritesRequest)},
        {1540, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetFavoritesResponse)},
        {1549, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument)},
        {1567, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::EditFavoritesRequest)},
        {1577, 1587, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::EditFavoritesRequestInstrument)},
        {1589, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::EditFavoritesResponse)},
        {1598, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetCountriesRequest)},
        {1606, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetCountriesResponse)},
        {1615, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::IndicativesRequest)},
        {1623, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::IndicativesResponse)},
        {1632, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::IndicativeResponse)},
        {1650, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::CountryResponse)},
        {1662, 1673, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::FindInstrumentRequest)},
        {1676, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::FindInstrumentResponse)},
        {1685, 1710, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::InstrumentShort)},
        {1727, 1736, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetBrandsRequest)},
        {1737, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetBrandRequest)},
        {1746, 1756, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetBrandsResponse)},
        {1758, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsRequest)},
        {1767, 1831, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse)},
        {1887, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse)},
        {1896, 1907, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetAssetReportsRequest)},
        {1910, 1924, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse_GetAssetReportsEvent)},
        {1930, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse)},
        {1939, 1948, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsRequest)},
        {1949, 1969, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse_ConsensusForecastsItem)},
        {1981, 1991, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse)},
        {1993, -1, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetForecastRequest)},
        {2002, 2021, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_TargetItem)},
        {2032, 2050, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem)},
        {2060, 2070, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::GetForecastResponse)},
        {2072, 2082, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::TradingInterval_TimeInterval)},
        {2084, 2094, -1, sizeof(::tinkoff::public_::invest::api::contract::v1::TradingInterval)},
};
static const ::_pb::Message* const file_default_instances[] = {
    &::tinkoff::public_::invest::api::contract::v1::_TradingSchedulesRequest_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_TradingSchedulesResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_TradingSchedule_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_TradingDay_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_InstrumentRequest_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_InstrumentsRequest_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_FilterOptionsRequest_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_BondResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_BondsResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetBondCouponsRequest_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetBondCouponsResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetBondEventsRequest_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetBondEventsResponse_BondEvent_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetBondEventsResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_Coupon_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_CurrencyResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_CurrenciesResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_EtfResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_EtfsResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_FutureResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_FuturesResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_OptionResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_OptionsResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_Option_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_ShareResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_SharesResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_Bond_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_Currency_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_Etf_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_Future_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_Share_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetAccruedInterestsRequest_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetAccruedInterestsResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_AccruedInterest_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetFuturesMarginRequest_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetFuturesMarginResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_InstrumentResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_Instrument_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetDividendsRequest_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetDividendsResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_Dividend_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_AssetRequest_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_AssetResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_AssetsRequest_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_AssetsResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_AssetFull_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_Asset_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_AssetCurrency_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_AssetSecurity_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_AssetShare_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_AssetBond_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_AssetStructuredProduct_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_AssetEtf_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_AssetClearingCertificate_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_Brand_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_AssetInstrument_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_InstrumentLink_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetFavoritesRequest_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetFavoritesResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_FavoriteInstrument_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_EditFavoritesRequest_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_EditFavoritesRequestInstrument_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_EditFavoritesResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetCountriesRequest_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetCountriesResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_IndicativesRequest_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_IndicativesResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_IndicativeResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_CountryResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_FindInstrumentRequest_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_FindInstrumentResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_InstrumentShort_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetBrandsRequest_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetBrandRequest_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetBrandsResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetAssetFundamentalsRequest_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetAssetFundamentalsResponse_StatisticResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetAssetFundamentalsResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetAssetReportsRequest_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetAssetReportsResponse_GetAssetReportsEvent_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetAssetReportsResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetConsensusForecastsRequest_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetConsensusForecastsResponse_ConsensusForecastsItem_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetConsensusForecastsResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetForecastRequest_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetForecastResponse_TargetItem_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetForecastResponse_ConsensusItem_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_GetForecastResponse_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_TradingInterval_TimeInterval_default_instance_._instance,
    &::tinkoff::public_::invest::api::contract::v1::_TradingInterval_default_instance_._instance,
};
const char descriptor_table_protodef_instruments_2eproto[] ABSL_ATTRIBUTE_SECTION_VARIABLE(
    protodesc_cold) = {
    "\n\021instruments.proto\022%tinkoff.public.inve"
    "st.api.contract.v1\032\037google/protobuf/time"
    "stamp.proto\032\014common.proto\032\037google/api/fi"
    "eld_behavior.proto\"\251\001\n\027TradingSchedulesR"
    "equest\022\025\n\010exchange\030\001 \001(\tH\000\210\001\001\022-\n\004from\030\002 "
    "\001(\0132\032.google.protobuf.TimestampH\001\210\001\001\022+\n\002"
    "to\030\003 \001(\0132\032.google.protobuf.TimestampH\002\210\001"
    "\001B\013\n\t_exchangeB\007\n\005_fromB\005\n\003_to\"e\n\030Tradin"
    "gSchedulesResponse\022I\n\texchanges\030\001 \003(\01326."
    "tinkoff.public.invest.api.contract.v1.Tr"
    "adingSchedule\"d\n\017TradingSchedule\022\020\n\010exch"
    "ange\030\001 \001(\t\022\?\n\004days\030\002 \003(\01321.tinkoff.publi"
    "c.invest.api.contract.v1.TradingDay\"\227\007\n\n"
    "TradingDay\022(\n\004date\030\001 \001(\0132\032.google.protob"
    "uf.Timestamp\022\026\n\016is_trading_day\030\002 \001(\010\022.\n\n"
    "start_time\030\003 \001(\0132\032.google.protobuf.Times"
    "tamp\022,\n\010end_time\030\004 \001(\0132\032.google.protobuf"
    ".Timestamp\022>\n\032opening_auction_start_time"
    "\030\007 \001(\0132\032.google.protobuf.Timestamp\022<\n\030cl"
    "osing_auction_end_time\030\010 \001(\0132\032.google.pr"
    "otobuf.Timestamp\022F\n\"evening_opening_auct"
    "ion_start_time\030\t \001(\0132\032.google.protobuf.T"
    "imestamp\0226\n\022evening_start_time\030\n \001(\0132\032.g"
    "oogle.protobuf.Timestamp\0224\n\020evening_end_"
    "time\030\013 \001(\0132\032.google.protobuf.Timestamp\0227"
    "\n\023clearing_start_time\030\014 \001(\0132\032.google.pro"
    "tobuf.Timestamp\0225\n\021clearing_end_time\030\r \001"
    "(\0132\032.google.protobuf.Timestamp\0228\n\024premar"
    "ket_start_time\030\016 \001(\0132\032.google.protobuf.T"
    "imestamp\0226\n\022premarket_end_time\030\017 \001(\0132\032.g"
    "oogle.protobuf.Timestamp\022>\n\032closing_auct"
    "ion_start_time\030\020 \001(\0132\032.google.protobuf.T"
    "imestamp\022<\n\030opening_auction_end_time\030\021 \001"
    "(\0132\032.google.protobuf.Timestamp\022I\n\tinterv"
    "als\030\022 \003(\01326.tinkoff.public.invest.api.co"
    "ntract.v1.TradingIntervalJ\004\010\005\020\006J\004\010\006\020\007\"\235\001"
    "\n\021InstrumentRequest\022N\n\007id_type\030\001 \001(\01627.t"
    "inkoff.public.invest.api.contract.v1.Ins"
    "trumentIdTypeB\004\342A\001\002\022\027\n\nclass_code\030\002 \001(\tH"
    "\000\210\001\001\022\020\n\002id\030\003 \001(\tB\004\342A\001\002B\r\n\013_class_code\"\374\001"
    "\n\022InstrumentsRequest\022W\n\021instrument_statu"
    "s\030\001 \001(\01627.tinkoff.public.invest.api.cont"
    "ract.v1.InstrumentStatusH\000\210\001\001\022_\n\023instrum"
    "ent_exchange\030\002 \001(\0162=.tinkoff.public.inve"
    "st.api.contract.v1.InstrumentExchangeTyp"
    "eH\001\210\001\001B\024\n\022_instrument_statusB\026\n\024_instrum"
    "ent_exchange\"\214\001\n\024FilterOptionsRequest\022\034\n"
    "\017basic_asset_uid\030\001 \001(\tH\000\210\001\001\022%\n\030basic_ass"
    "et_position_uid\030\002 \001(\tH\001\210\001\001B\022\n\020_basic_ass"
    "et_uidB\033\n\031_basic_asset_position_uid\"O\n\014B"
    "ondResponse\022\?\n\ninstrument\030\001 \001(\0132+.tinkof"
    "f.public.invest.api.contract.v1.Bond\"Q\n\r"
    "BondsResponse\022@\n\013instruments\030\001 \003(\0132+.tin"
    "koff.public.invest.api.contract.v1.Bond\""
    "\262\001\n\025GetBondCouponsRequest\022\020\n\004figi\030\001 \001(\tB"
    "\002\030\001\022-\n\004from\030\002 \001(\0132\032.google.protobuf.Time"
    "stampH\000\210\001\001\022+\n\002to\030\003 \001(\0132\032.google.protobuf"
    ".TimestampH\001\210\001\001\022\033\n\rinstrument_id\030\004 \001(\tB\004"
    "\342A\001\002B\007\n\005_fromB\005\n\003_to\"W\n\026GetBondCouponsRe"
    "sponse\022=\n\006events\030\001 \003(\0132-.tinkoff.public."
    "invest.api.contract.v1.Coupon\"\357\002\n\024GetBon"
    "dEventsRequest\022-\n\004from\030\002 \001(\0132\032.google.pr"
    "otobuf.TimestampH\000\210\001\001\022+\n\002to\030\003 \001(\0132\032.goog"
    "le.protobuf.TimestampH\001\210\001\001\022\033\n\rinstrument"
    "_id\030\004 \001(\tB\004\342A\001\002\022S\n\004type\030\005 \001(\0162E.tinkoff."
    "public.invest.api.contract.v1.GetBondEve"
    "ntsRequest.EventType\"y\n\tEventType\022\032\n\026EVE"
    "NT_TYPE_UNSPECIFIED\020\000\022\022\n\016EVENT_TYPE_CPN\020"
    "\001\022\023\n\017EVENT_TYPE_CALL\020\002\022\022\n\016EVENT_TYPE_MTY"
    "\020\003\022\023\n\017EVENT_TYPE_CONV\020\004B\007\n\005_fromB\005\n\003_to\""
    "\361\010\n\025GetBondEventsResponse\022V\n\006events\030\001 \003("
    "\0132F.tinkoff.public.invest.api.contract.v"
    "1.GetBondEventsResponse.BondEvent\032\377\007\n\tBo"
    "ndEvent\022\025\n\rinstrument_id\030\002 \001(\t\022\024\n\014event_"
    "number\030\003 \001(\005\022.\n\nevent_date\030\004 \001(\0132\032.googl"
    "e.protobuf.Timestamp\022Y\n\nevent_type\030\005 \001(\016"
    "2E.tinkoff.public.invest.api.contract.v1"
    ".GetBondEventsRequest.EventType\022I\n\017event"
    "_total_vol\030\006 \001(\01320.tinkoff.public.invest"
    ".api.contract.v1.Quotation\022,\n\010fix_date\030\007"
    " \001(\0132\032.google.protobuf.Timestamp\022-\n\trate"
    "_date\030\010 \001(\0132\032.google.protobuf.Timestamp\022"
    "0\n\014default_date\030\t \001(\0132\032.google.protobuf."
    "Timestamp\0221\n\rreal_pay_date\030\n \001(\0132\032.googl"
    "e.protobuf.Timestamp\022,\n\010pay_date\030\013 \001(\0132\032"
    ".google.protobuf.Timestamp\022G\n\014pay_one_bo"
    "nd\030\014 \001(\01321.tinkoff.public.invest.api.con"
    "tract.v1.MoneyValue\022I\n\016money_flow_val\030\r "
    "\001(\01321.tinkoff.public.invest.api.contract"
    ".v1.MoneyValue\022\021\n\texecution\030\016 \001(\t\022\026\n\016ope"
    "ration_type\030\017 \001(\t\022\?\n\005value\030\020 \001(\01320.tinko"
    "ff.public.invest.api.contract.v1.Quotati"
    "on\022\014\n\004note\030\021 \001(\t\022\036\n\026convert_to_fin_tool_"
    "id\030\022 \001(\t\0225\n\021coupon_start_date\030\023 \001(\0132\032.go"
    "ogle.protobuf.Timestamp\0223\n\017coupon_end_da"
    "te\030\024 \001(\0132\032.google.protobuf.Timestamp\022\025\n\r"
    "coupon_period\030\025 \001(\005\022N\n\024coupon_interest_r"
    "ate\030\026 \001(\01320.tinkoff.public.invest.api.co"
    "ntract.v1.Quotation\"\240\003\n\006Coupon\022\014\n\004figi\030\001"
    " \001(\t\022/\n\013coupon_date\030\002 \001(\0132\032.google.proto"
    "buf.Timestamp\022\025\n\rcoupon_number\030\003 \001(\003\022,\n\010"
    "fix_date\030\004 \001(\0132\032.google.protobuf.Timesta"
    "mp\022G\n\014pay_one_bond\030\005 \001(\01321.tinkoff.publi"
    "c.invest.api.contract.v1.MoneyValue\022F\n\013c"
    "oupon_type\030\006 \001(\01621.tinkoff.public.invest"
    ".api.contract.v1.CouponType\0225\n\021coupon_st"
    "art_date\030\007 \001(\0132\032.google.protobuf.Timesta"
    "mp\0223\n\017coupon_end_date\030\010 \001(\0132\032.google.pro"
    "tobuf.Timestamp\022\025\n\rcoupon_period\030\t \001(\005\"W"
    "\n\020CurrencyResponse\022C\n\ninstrument\030\001 \001(\0132/"
    ".tinkoff.public.invest.api.contract.v1.C"
    "urrency\"Z\n\022CurrenciesResponse\022D\n\013instrum"
    "ents\030\001 \003(\0132/.tinkoff.public.invest.api.c"
    "ontract.v1.Currency\"M\n\013EtfResponse\022>\n\nin"
    "strument\030\001 \001(\0132*.tinkoff.public.invest.a"
    "pi.contract.v1.Etf\"O\n\014EtfsResponse\022\?\n\013in"
    "struments\030\001 \003(\0132*.tinkoff.public.invest."
    "api.contract.v1.Etf\"S\n\016FutureResponse\022A\n"
    "\ninstrument\030\001 \001(\0132-.tinkoff.public.inves"
    "t.api.contract.v1.Future\"U\n\017FuturesRespo"
    "nse\022B\n\013instruments\030\001 \003(\0132-.tinkoff.publi"
    "c.invest.api.contract.v1.Future\"S\n\016Optio"
    "nResponse\022A\n\ninstrument\030\001 \001(\0132-.tinkoff."
    "public.invest.api.contract.v1.Option\"U\n\017"
    "OptionsResponse\022B\n\013instruments\030\001 \003(\0132-.t"
    "inkoff.public.invest.api.contract.v1.Opt"
    "ion\"\202\021\n\006Option\022\013\n\003uid\030\001 \001(\t\022\024\n\014position_"
    "uid\030\002 \001(\t\022\016\n\006ticker\030\003 \001(\t\022\022\n\nclass_code\030"
    "\004 \001(\t\022 \n\030basic_asset_position_uid\030\005 \001(\t\022"
    "T\n\016trading_status\030\025 \001(\0162<.tinkoff.public"
    ".invest.api.contract.v1.SecurityTradingS"
    "tatus\022J\n\rreal_exchange\030\037 \001(\01623.tinkoff.p"
    "ublic.invest.api.contract.v1.RealExchang"
    "e\022I\n\tdirection\030) \001(\01626.tinkoff.public.in"
    "vest.api.contract.v1.OptionDirection\022N\n\014"
    "payment_type\030* \001(\01628.tinkoff.public.inve"
    "st.api.contract.v1.OptionPaymentType\022A\n\005"
    "style\030+ \001(\01622.tinkoff.public.invest.api."
    "contract.v1.OptionStyle\022T\n\017settlement_ty"
    "pe\030, \001(\0162;.tinkoff.public.invest.api.con"
    "tract.v1.OptionSettlementType\022\014\n\004name\030e "
    "\001(\t\022\020\n\010currency\030o \001(\t\022\033\n\023settlement_curr"
    "ency\030p \001(\t\022\023\n\nasset_type\030\203\001 \001(\t\022\024\n\013basic"
    "_asset\030\204\001 \001(\t\022\021\n\010exchange\030\215\001 \001(\t\022\030\n\017coun"
    "try_of_risk\030\227\001 \001(\t\022\035\n\024country_of_risk_na"
    "me\030\230\001 \001(\t\022\017\n\006sector\030\241\001 \001(\t\022@\n\005brand\030\242\001 \001"
    "(\01320.tinkoff.public.invest.api.contract."
    "v1.BrandData\022\014\n\003lot\030\311\001 \001(\005\022K\n\020basic_asse"
    "t_size\030\323\001 \001(\01320.tinkoff.public.invest.ap"
    "i.contract.v1.Quotation\022@\n\005klong\030\335\001 \001(\0132"
    "0.tinkoff.public.invest.api.contract.v1."
    "Quotation\022A\n\006kshort\030\336\001 \001(\01320.tinkoff.pub"
    "lic.invest.api.contract.v1.Quotation\022@\n\005"
    "dlong\030\337\001 \001(\01320.tinkoff.public.invest.api"
    ".contract.v1.Quotation\022A\n\006dshort\030\340\001 \001(\0132"
    "0.tinkoff.public.invest.api.contract.v1."
    "Quotation\022D\n\tdlong_min\030\341\001 \001(\01320.tinkoff."
    "public.invest.api.contract.v1.Quotation\022"
    "E\n\ndshort_min\030\342\001 \001(\01320.tinkoff.public.in"
    "vest.api.contract.v1.Quotation\022N\n\023min_pr"
    "ice_increment\030\347\001 \001(\01320.tinkoff.public.in"
    "vest.api.contract.v1.Quotation\022H\n\014strike"
    "_price\030\361\001 \001(\01321.tinkoff.public.invest.ap"
    "i.contract.v1.MoneyValue\022G\n\014dlong_client"
    "\030\242\002 \001(\01320.tinkoff.public.invest.api.cont"
    "ract.v1.Quotation\022H\n\rdshort_client\030\243\002 \001("
    "\01320.tinkoff.public.invest.api.contract.v"
    "1.Quotation\0224\n\017expiration_date\030\255\002 \001(\0132\032."
    "google.protobuf.Timestamp\0225\n\020first_trade"
    "_date\030\267\002 \001(\0132\032.google.protobuf.Timestamp"
    "\0224\n\017last_trade_date\030\270\002 \001(\0132\032.google.prot"
    "obuf.Timestamp\022;\n\026first_1min_candle_date"
    "\030\301\002 \001(\0132\032.google.protobuf.Timestamp\022;\n\026f"
    "irst_1day_candle_date\030\302\002 \001(\0132\032.google.pr"
    "otobuf.Timestamp\022\033\n\022short_enabled_flag\030\221"
    "\003 \001(\010\022\025\n\014for_iis_flag\030\222\003 \001(\010\022\021\n\010otc_flag"
    "\030\223\003 \001(\010\022\033\n\022buy_available_flag\030\224\003 \001(\010\022\034\n\023"
    "sell_available_flag\030\225\003 \001(\010\022\037\n\026for_qual_i"
    "nvestor_flag\030\226\003 \001(\010\022\025\n\014weekend_flag\030\227\003 \001"
    "(\010\022\031\n\020blocked_tca_flag\030\230\003 \001(\010\022!\n\030api_tra"
    "de_available_flag\030\231\003 \001(\010\"Q\n\rShareRespons"
    "e\022@\n\ninstrument\030\001 \001(\0132,.tinkoff.public.i"
    "nvest.api.contract.v1.Share\"S\n\016SharesRes"
    "ponse\022A\n\013instruments\030\001 \003(\0132,.tinkoff.pub"
    "lic.invest.api.contract.v1.Share\"\232\022\n\004Bon"
    "d\022\014\n\004figi\030\001 \001(\t\022\016\n\006ticker\030\002 \001(\t\022\022\n\nclass"
    "_code\030\003 \001(\t\022\014\n\004isin\030\004 \001(\t\022\013\n\003lot\030\005 \001(\005\022\020"
    "\n\010currency\030\006 \001(\t\022\?\n\005klong\030\007 \001(\01320.tinkof"
    "f.public.invest.api.contract.v1.Quotatio"
    "n\022@\n\006kshort\030\010 \001(\01320.tinkoff.public.inves"
    "t.api.contract.v1.Quotation\022\?\n\005dlong\030\t \001"
    "(\01320.tinkoff.public.invest.api.contract."
    "v1.Quotation\022@\n\006dshort\030\n \001(\01320.tinkoff.p"
    "ublic.invest.api.contract.v1.Quotation\022C"
    "\n\tdlong_min\030\013 \001(\01320.tinkoff.public.inves"
    "t.api.contract.v1.Quotation\022D\n\ndshort_mi"
    "n\030\014 \001(\01320.tinkoff.public.invest.api.cont"
    "ract.v1.Quotation\022\032\n\022short_enabled_flag\030"
    "\r \001(\010\022\014\n\004name\030\017 \001(\t\022\020\n\010exchange\030\020 \001(\t\022 \n"
    "\030coupon_quantity_per_year\030\021 \001(\005\0221\n\rmatur"
    "ity_date\030\022 \001(\0132\032.google.protobuf.Timesta"
    "mp\022B\n\007nominal\030\023 \001(\01321.tinkoff.public.inv"
    "est.api.contract.v1.MoneyValue\022J\n\017initia"
    "l_nominal\030\024 \001(\01321.tinkoff.public.invest."
    "api.contract.v1.MoneyValue\0222\n\016state_reg_"
    "date\030\025 \001(\0132\032.google.protobuf.Timestamp\0222"
    "\n\016placement_date\030\026 \001(\0132\032.google.protobuf"
    ".Timestamp\022J\n\017placement_price\030\027 \001(\01321.ti"
    "nkoff.public.invest.api.contract.v1.Mone"
    "yValue\022D\n\taci_value\030\030 \001(\01321.tinkoff.publ"
    "ic.invest.api.contract.v1.MoneyValue\022\027\n\017"
    "country_of_risk\030\031 \001(\t\022\034\n\024country_of_risk"
    "_name\030\032 \001(\t\022\016\n\006sector\030\033 \001(\t\022\022\n\nissue_kin"
    "d\030\034 \001(\t\022\022\n\nissue_size\030\035 \001(\003\022\027\n\017issue_siz"
    "e_plan\030\036 \001(\003\022T\n\016trading_status\030\037 \001(\0162<.t"
    "inkoff.public.invest.api.contract.v1.Sec"
    "urityTradingStatus\022\020\n\010otc_flag\030  \001(\010\022\032\n\022"
    "buy_available_flag\030! \001(\010\022\033\n\023sell_availab"
    "le_flag\030\" \001(\010\022\034\n\024floating_coupon_flag\030# "
    "\001(\010\022\026\n\016perpetual_flag\030$ \001(\010\022\031\n\021amortizat"
    "ion_flag\030% \001(\010\022M\n\023min_price_increment\030& "
    "\001(\01320.tinkoff.public.invest.api.contract"
    ".v1.Quotation\022 \n\030api_trade_available_fla"
    "g\030\' \001(\010\022\013\n\003uid\030( \001(\t\022J\n\rreal_exchange\030) "
    "\001(\01623.tinkoff.public.invest.api.contract"
    ".v1.RealExchange\022\024\n\014position_uid\030* \001(\t\022\021"
    "\n\tasset_uid\030+ \001(\t\022\024\n\014for_iis_flag\0303 \001(\010\022"
    "\036\n\026for_qual_investor_flag\0304 \001(\010\022\024\n\014weeke"
    "nd_flag\0305 \001(\010\022\030\n\020blocked_tca_flag\0306 \001(\010\022"
    "\031\n\021subordinated_flag\0307 \001(\010\022\026\n\016liquidity_"
    "flag\0308 \001(\010\022:\n\026first_1min_candle_date\030= \001"
    "(\0132\032.google.protobuf.Timestamp\022:\n\026first_"
    "1day_candle_date\030> \001(\0132\032.google.protobuf"
    ".Timestamp\022D\n\nrisk_level\030\? \001(\01620.tinkoff"
    ".public.invest.api.contract.v1.RiskLevel"
    "\022\?\n\005brand\030@ \001(\01320.tinkoff.public.invest."
    "api.contract.v1.BrandData\022B\n\tbond_type\030A"
    " \001(\0162/.tinkoff.public.invest.api.contrac"
    "t.v1.BondType\022-\n\tcall_date\030E \001(\0132\032.googl"
    "e.protobuf.Timestamp\022F\n\014dlong_client\030Z \001"
    "(\01320.tinkoff.public.invest.api.contract."
    "v1.Quotation\022G\n\rdshort_client\030[ \001(\01320.ti"
    "nkoff.public.invest.api.contract.v1.Quot"
    "ation\"\375\013\n\010Currency\022\014\n\004figi\030\001 \001(\t\022\016\n\006tick"
    "er\030\002 \001(\t\022\022\n\nclass_code\030\003 \001(\t\022\014\n\004isin\030\004 \001"
    "(\t\022\013\n\003lot\030\005 \001(\005\022\020\n\010currency\030\006 \001(\t\022\?\n\005klo"
    "ng\030\007 \001(\01320.tinkoff.public.invest.api.con"
    "tract.v1.Quotation\022@\n\006kshort\030\010 \001(\01320.tin"
    "koff.public.invest.api.contract.v1.Quota"
    "tion\022\?\n\005dlong\030\t \001(\01320.tinkoff.public.inv"
    "est.api.contract.v1.Quotation\022@\n\006dshort\030"
    "\n \001(\01320.tinkoff.public.invest.api.contra"
    "ct.v1.Quotation\022C\n\tdlong_min\030\013 \001(\01320.tin"
    "koff.public.invest.api.contract.v1.Quota"
    "tion\022D\n\ndshort_min\030\014 \001(\01320.tinkoff.publi"
    "c.invest.api.contract.v1.Quotation\022\032\n\022sh"
    "ort_enabled_flag\030\r \001(\010\022\014\n\004name\030\017 \001(\t\022\020\n\010"
    "exchange\030\020 \001(\t\022B\n\007nominal\030\021 \001(\01321.tinkof"
    "f.public.invest.api.contract.v1.MoneyVal"
    "ue\022\027\n\017country_of_risk\030\022 \001(\t\022\034\n\024country_o"
    "f_risk_name\030\023 \001(\t\022T\n\016trading_status\030\024 \001("
    "\0162<.tinkoff.public.invest.api.contract.v"
    "1.SecurityTradingStatus\022\020\n\010otc_flag\030\025 \001("
    "\010\022\032\n\022buy_available_flag\030\026 \001(\010\022\033\n\023sell_av"
    "ailable_flag\030\027 \001(\010\022\031\n\021iso_currency_name\030"
    "\030 \001(\t\022M\n\023min_price_increment\030\031 \001(\01320.tin"
    "koff.public.invest.api.contract.v1.Quota"
    "tion\022 \n\030api_trade_available_flag\030\032 \001(\010\022\013"
    "\n\003uid\030\033 \001(\t\022J\n\rreal_exchange\030\034 \001(\01623.tin"
    "koff.public.invest.api.contract.v1.RealE"
    "xchange\022\024\n\014position_uid\030\035 \001(\t\022\024\n\014for_iis"
    "_flag\030) \001(\010\022\036\n\026for_qual_investor_flag\0304 "
    "\001(\010\022\024\n\014weekend_flag\0305 \001(\010\022\030\n\020blocked_tca"
    "_flag\0306 \001(\010\022:\n\026first_1min_candle_date\0308 "
    "\001(\0132\032.google.protobuf.Timestamp\022:\n\026first"
    "_1day_candle_date\0309 \001(\0132\032.google.protobu"
    "f.Timestamp\022\?\n\005brand\030< \001(\01320.tinkoff.pub"
    "lic.invest.api.contract.v1.BrandData\022F\n\014"
    "dlong_client\030Z \001(\01320.tinkoff.public.inve"
    "st.api.contract.v1.Quotation\022G\n\rdshort_c"
    "lient\030[ \001(\01320.tinkoff.public.invest.api."
    "contract.v1.Quotation\"\243\016\n\003Etf\022\014\n\004figi\030\001 "
    "\001(\t\022\016\n\006ticker\030\002 \001(\t\022\022\n\nclass_code\030\003 \001(\t\022"
    "\014\n\004isin\030\004 \001(\t\022\013\n\003lot\030\005 \001(\005\022\020\n\010currency\030\006"
    " \001(\t\022\?\n\005klong\030\007 \001(\01320.tinkoff.public.inv"
    "est.api.contract.v1.Quotation\022@\n\006kshort\030"
    "\010 \001(\01320.tinkoff.public.invest.api.contra"
    "ct.v1.Quotation\022\?\n\005dlong\030\t \001(\01320.tinkoff"
    ".public.invest.api.contract.v1.Quotation"
    "\022@\n\006dshort\030\n \001(\01320.tinkoff.public.invest"
    ".api.contract.v1.Quotation\022C\n\tdlong_min\030"
    "\013 \001(\01320.tinkoff.public.invest.api.contra"
    "ct.v1.Quotation\022D\n\ndshort_min\030\014 \001(\01320.ti"
    "nkoff.public.invest.api.contract.v1.Quot"
    "ation\022\032\n\022short_enabled_flag\030\r \001(\010\022\014\n\004nam"
    "e\030\017 \001(\t\022\020\n\010exchange\030\020 \001(\t\022J\n\020fixed_commi"
    "ssion\030\021 \001(\01320.tinkoff.public.invest.api."
    "contract.v1.Quotation\022\022\n\nfocus_type\030\022 \001("
    "\t\0221\n\rreleased_date\030\023 \001(\0132\032.google.protob"
    "uf.Timestamp\022D\n\nnum_shares\030\024 \001(\01320.tinko"
    "ff.public.invest.api.contract.v1.Quotati"
    "on\022\027\n\017country_of_risk\030\025 \001(\t\022\034\n\024country_o"
    "f_risk_name\030\026 \001(\t\022\016\n\006sector\030\027 \001(\t\022\030\n\020reb"
    "alancing_freq\030\030 \001(\t\022T\n\016trading_status\030\031 "
    "\001(\0162<.tinkoff.public.invest.api.contract"
    ".v1.SecurityTradingStatus\022\020\n\010otc_flag\030\032 "
    "\001(\010\022\032\n\022buy_available_flag\030\033 \001(\010\022\033\n\023sell_"
    "available_flag\030\034 \001(\010\022M\n\023min_price_increm"
    "ent\030\035 \001(\01320.tinkoff.public.invest.api.co"
    "ntract.v1.Quotation\022 \n\030api_trade_availab"
    "le_flag\030\036 \001(\010\022\013\n\003uid\030\037 \001(\t\022J\n\rreal_excha"
    "nge\030  \001(\01623.tinkoff.public.invest.api.co"
    "ntract.v1.RealExchange\022\024\n\014position_uid\030!"
    " \001(\t\022\021\n\tasset_uid\030\" \001(\t\022Z\n\023instrument_ex"
    "change\030# \001(\0162=.tinkoff.public.invest.api"
    ".contract.v1.InstrumentExchangeType\022\024\n\014f"
    "or_iis_flag\030) \001(\010\022\036\n\026for_qual_investor_f"
    "lag\030* \001(\010\022\024\n\014weekend_flag\030+ \001(\010\022\030\n\020block"
    "ed_tca_flag\030, \001(\010\022\026\n\016liquidity_flag\030- \001("
    "\010\022:\n\026first_1min_candle_date\0308 \001(\0132\032.goog"
    "le.protobuf.Timestamp\022:\n\026first_1day_cand"
    "le_date\0309 \001(\0132\032.google.protobuf.Timestam"
    "p\022\?\n\005brand\030< \001(\01320.tinkoff.public.invest"
    ".api.contract.v1.BrandData\022F\n\014dlong_clie"
    "nt\030Z \001(\01320.tinkoff.public.invest.api.con"
    "tract.v1.Quotation\022G\n\rdshort_client\030[ \001("
    "\01320.tinkoff.public.invest.api.contract.v"
    "1.Quotation\"\346\017\n\006Future\022\014\n\004figi\030\001 \001(\t\022\016\n\006"
    "ticker\030\002 \001(\t\022\022\n\nclass_code\030\003 \001(\t\022\013\n\003lot\030"
    "\004 \001(\005\022\020\n\010currency\030\005 \001(\t\022\?\n\005klong\030\006 \001(\01320"
    ".tinkoff.public.invest.api.contract.v1.Q"
    "uotation\022@\n\006kshort\030\007 \001(\01320.tinkoff.publi"
    "c.invest.api.contract.v1.Quotation\022\?\n\005dl"
    "ong\030\010 \001(\01320.tinkoff.public.invest.api.co"
    "ntract.v1.Quotation\022@\n\006dshort\030\t \001(\01320.ti"
    "nkoff.public.invest.api.contract.v1.Quot"
    "ation\022C\n\tdlong_min\030\n \001(\01320.tinkoff.publi"
    "c.invest.api.contract.v1.Quotation\022D\n\nds"
    "hort_min\030\013 \001(\01320.tinkoff.public.invest.a"
    "pi.contract.v1.Quotation\022\032\n\022short_enable"
    "d_flag\030\014 \001(\010\022\014\n\004name\030\r \001(\t\022\020\n\010exchange\030\016"
    " \001(\t\0224\n\020first_trade_date\030\017 \001(\0132\032.google."
    "protobuf.Timestamp\0223\n\017last_trade_date\030\020 "
    "\001(\0132\032.google.protobuf.Timestamp\022\024\n\014futur"
    "es_type\030\021 \001(\t\022\022\n\nasset_type\030\022 \001(\t\022\023\n\013bas"
    "ic_asset\030\023 \001(\t\022J\n\020basic_asset_size\030\024 \001(\013"
    "20.tinkoff.public.invest.api.contract.v1"
    ".Quotation\022\027\n\017country_of_risk\030\025 \001(\t\022\034\n\024c"
    "ountry_of_risk_name\030\026 \001(\t\022\016\n\006sector\030\027 \001("
    "\t\0223\n\017expiration_date\030\030 \001(\0132\032.google.prot"
    "obuf.Timestamp\022T\n\016trading_status\030\031 \001(\0162<"
    ".tinkoff.public.invest.api.contract.v1.S"
    "ecurityTradingStatus\022\020\n\010otc_flag\030\032 \001(\010\022\032"
    "\n\022buy_available_flag\030\033 \001(\010\022\033\n\023sell_avail"
    "able_flag\030\034 \001(\010\022M\n\023min_price_increment\030\035"
    " \001(\01320.tinkoff.public.invest.api.contrac"
    "t.v1.Quotation\022 \n\030api_trade_available_fl"
    "ag\030\036 \001(\010\022\013\n\003uid\030\037 \001(\t\022J\n\rreal_exchange\030 "
    " \001(\01623.tinkoff.public.invest.api.contrac"
    "t.v1.RealExchange\022\024\n\014position_uid\030! \001(\t\022"
    " \n\030basic_asset_position_uid\030\" \001(\t\022\024\n\014for"
    "_iis_flag\030) \001(\010\022\036\n\026for_qual_investor_fla"
    "g\030* \001(\010\022\024\n\014weekend_flag\030+ \001(\010\022\030\n\020blocked"
    "_tca_flag\030, \001(\010\022:\n\026first_1min_candle_dat"
    "e\0308 \001(\0132\032.google.protobuf.Timestamp\022:\n\026f"
    "irst_1day_candle_date\0309 \001(\0132\032.google.pro"
    "tobuf.Timestamp\022P\n\025initial_margin_on_buy"
    "\030= \001(\01321.tinkoff.public.invest.api.contr"
    "act.v1.MoneyValue\022Q\n\026initial_margin_on_s"
    "ell\030> \001(\01321.tinkoff.public.invest.api.co"
    "ntract.v1.MoneyValue\022T\n\032min_price_increm"
    "ent_amount\030\? \001(\01320.tinkoff.public.invest"
    ".api.contract.v1.Quotation\022\?\n\005brand\030@ \001("
    "\01320.tinkoff.public.invest.api.contract.v"
    "1.BrandData\022F\n\014dlong_client\030Z \001(\01320.tink"
    "off.public.invest.api.contract.v1.Quotat"
    "ion\022G\n\rdshort_client\030[ \001(\01320.tinkoff.pub"
    "lic.invest.api.contract.v1.Quotation\"\257\016\n"
    "\005Share\022\014\n\004figi\030\001 \001(\t\022\016\n\006ticker\030\002 \001(\t\022\022\n\n"
    "class_code\030\003 \001(\t\022\014\n\004isin\030\004 \001(\t\022\013\n\003lot\030\005 "
    "\001(\005\022\020\n\010currency\030\006 \001(\t\022\?\n\005klong\030\007 \001(\01320.t"
    "inkoff.public.invest.api.contract.v1.Quo"
    "tation\022@\n\006kshort\030\010 \001(\01320.tinkoff.public."
    "invest.api.contract.v1.Quotation\022\?\n\005dlon"
    "g\030\t \001(\01320.tinkoff.public.invest.api.cont"
    "ract.v1.Quotation\022@\n\006dshort\030\n \001(\01320.tink"
    "off.public.invest.api.contract.v1.Quotat"
    "ion\022C\n\tdlong_min\030\013 \001(\01320.tinkoff.public."
    "invest.api.contract.v1.Quotation\022D\n\ndsho"
    "rt_min\030\014 \001(\01320.tinkoff.public.invest.api"
    ".contract.v1.Quotation\022\032\n\022short_enabled_"
    "flag\030\r \001(\010\022\014\n\004name\030\017 \001(\t\022\020\n\010exchange\030\020 \001"
    "(\t\022,\n\010ipo_date\030\021 \001(\0132\032.google.protobuf.T"
    "imestamp\022\022\n\nissue_size\030\022 \001(\003\022\027\n\017country_"
    "of_risk\030\023 \001(\t\022\034\n\024country_of_risk_name\030\024 "
    "\001(\t\022\016\n\006sector\030\025 \001(\t\022\027\n\017issue_size_plan\030\026"
    " \001(\003\022B\n\007nominal\030\027 \001(\01321.tinkoff.public.i"
    "nvest.api.contract.v1.MoneyValue\022T\n\016trad"
    "ing_status\030\031 \001(\0162<.tinkoff.public.invest"
    ".api.contract.v1.SecurityTradingStatus\022\020"
    "\n\010otc_flag\030\032 \001(\010\022\032\n\022buy_available_flag\030\033"
    " \001(\010\022\033\n\023sell_available_flag\030\034 \001(\010\022\026\n\016div"
    "_yield_flag\030\035 \001(\010\022D\n\nshare_type\030\036 \001(\01620."
    "tinkoff.public.invest.api.contract.v1.Sh"
    "areType\022M\n\023min_price_increment\030\037 \001(\01320.t"
    "inkoff.public.invest.api.contract.v1.Quo"
    "tation\022 \n\030api_trade_available_flag\030  \001(\010"
    "\022\013\n\003uid\030! \001(\t\022J\n\rreal_exchange\030\" \001(\01623.t"
    "inkoff.public.invest.api.contract.v1.Rea"
    "lExchange\022\024\n\014position_uid\030# \001(\t\022\021\n\tasset"
    "_uid\030$ \001(\t\022Z\n\023instrument_exchange\030% \001(\0162"
    "=.tinkoff.public.invest.api.contract.v1."
    "InstrumentExchangeType\022\024\n\014for_iis_flag\030."
    " \001(\010\022\036\n\026for_qual_investor_flag\030/ \001(\010\022\024\n\014"
    "weekend_flag\0300 \001(\010\022\030\n\020blocked_tca_flag\0301"
    " \001(\010\022\026\n\016liquidity_flag\0302 \001(\010\022:\n\026first_1m"
    "in_candle_date\0308 \001(\0132\032.google.protobuf.T"
    "imestamp\022:\n\026first_1day_candle_date\0309 \001(\013"
    "2\032.google.protobuf.Timestamp\022\?\n\005brand\030< "
    "\001(\01320.tinkoff.public.invest.api.contract"
    ".v1.BrandData\022F\n\014dlong_client\030Z \001(\01320.ti"
    "nkoff.public.invest.api.contract.v1.Quot"
    "ation\022G\n\rdshort_client\030[ \001(\01320.tinkoff.p"
    "ublic.invest.api.contract.v1.Quotation\"\251"
    "\001\n\032GetAccruedInterestsRequest\022\020\n\004figi\030\001 "
    "\001(\tB\002\030\001\022.\n\004from\030\002 \001(\0132\032.google.protobuf."
    "TimestampB\004\342A\001\002\022,\n\002to\030\003 \001(\0132\032.google.pro"
    "tobuf.TimestampB\004\342A\001\002\022\033\n\rinstrument_id\030\004"
    " \001(\tB\004\342A\001\002\"p\n\033GetAccruedInterestsRespons"
    "e\022Q\n\021accrued_interests\030\001 \003(\01326.tinkoff.p"
    "ublic.invest.api.contract.v1.AccruedInte"
    "rest\"\210\002\n\017AccruedInterest\022(\n\004date\030\001 \001(\0132\032"
    ".google.protobuf.Timestamp\022\?\n\005value\030\002 \001("
    "\01320.tinkoff.public.invest.api.contract.v"
    "1.Quotation\022G\n\rvalue_percent\030\003 \001(\01320.tin"
    "koff.public.invest.api.contract.v1.Quota"
    "tion\022A\n\007nominal\030\004 \001(\01320.tinkoff.public.i"
    "nvest.api.contract.v1.Quotation\"H\n\027GetFu"
    "turesMarginRequest\022\020\n\004figi\030\001 \001(\tB\002\030\001\022\033\n\r"
    "instrument_id\030\004 \001(\tB\004\342A\001\002\"\344\002\n\030GetFutures"
    "MarginResponse\022P\n\025initial_margin_on_buy\030"
    "\001 \001(\01321.tinkoff.public.invest.api.contra"
    "ct.v1.MoneyValue\022Q\n\026initial_margin_on_se"
    "ll\030\002 \001(\01321.tinkoff.public.invest.api.con"
    "tract.v1.MoneyValue\022M\n\023min_price_increme"
    "nt\030\003 \001(\01320.tinkoff.public.invest.api.con"
    "tract.v1.Quotation\022T\n\032min_price_incremen"
    "t_amount\030\004 \001(\01320.tinkoff.public.invest.a"
    "pi.contract.v1.Quotation\"[\n\022InstrumentRe"
    "sponse\022E\n\ninstrument\030\001 \001(\01321.tinkoff.pub"
    "lic.invest.api.contract.v1.Instrument\"\236\014"
    "\n\nInstrument\022\014\n\004figi\030\001 \001(\t\022\016\n\006ticker\030\002 \001"
    "(\t\022\022\n\nclass_code\030\003 \001(\t\022\014\n\004isin\030\004 \001(\t\022\013\n\003"
    "lot\030\005 \001(\005\022\020\n\010currency\030\006 \001(\t\022\?\n\005klong\030\007 \001"
    "(\01320.tinkoff.public.invest.api.contract."
    "v1.Quotation\022@\n\006kshort\030\010 \001(\01320.tinkoff.p"
    "ublic.invest.api.contract.v1.Quotation\022\?"
    "\n\005dlong\030\t \001(\01320.tinkoff.public.invest.ap"
    "i.contract.v1.Quotation\022@\n\006dshort\030\n \001(\0132"
    "0.tinkoff.public.invest.api.contract.v1."
    "Quotation\022C\n\tdlong_min\030\013 \001(\01320.tinkoff.p"
    "ublic.invest.api.contract.v1.Quotation\022D"
    "\n\ndshort_min\030\014 \001(\01320.tinkoff.public.inve"
    "st.api.contract.v1.Quotation\022\032\n\022short_en"
    "abled_flag\030\r \001(\010\022\014\n\004name\030\016 \001(\t\022\020\n\010exchan"
    "ge\030\017 \001(\t\022\027\n\017country_of_risk\030\020 \001(\t\022\034\n\024cou"
    "ntry_of_risk_name\030\021 \001(\t\022\027\n\017instrument_ty"
    "pe\030\022 \001(\t\022T\n\016trading_status\030\023 \001(\0162<.tinko"
    "ff.public.invest.api.contract.v1.Securit"
    "yTradingStatus\022\020\n\010otc_flag\030\024 \001(\010\022\032\n\022buy_"
    "available_flag\030\025 \001(\010\022\033\n\023sell_available_f"
    "lag\030\026 \001(\010\022M\n\023min_price_increment\030\027 \001(\01320"
    ".tinkoff.public.invest.api.contract.v1.Q"
    "uotation\022 \n\030api_trade_available_flag\030\030 \001"
    "(\010\022\013\n\003uid\030\031 \001(\t\022J\n\rreal_exchange\030\032 \001(\01623"
    ".tinkoff.public.invest.api.contract.v1.R"
    "ealExchange\022\024\n\014position_uid\030\033 \001(\t\022\021\n\tass"
    "et_uid\030\034 \001(\t\022\024\n\014for_iis_flag\030$ \001(\010\022\036\n\026fo"
    "r_qual_investor_flag\030% \001(\010\022\024\n\014weekend_fl"
    "ag\030& \001(\010\022\030\n\020blocked_tca_flag\030\' \001(\010\022N\n\017in"
    "strument_kind\030( \001(\01625.tinkoff.public.inv"
    "est.api.contract.v1.InstrumentType\022:\n\026fi"
    "rst_1min_candle_date\0308 \001(\0132\032.google.prot"
    "obuf.Timestamp\022:\n\026first_1day_candle_date"
    "\0309 \001(\0132\032.google.protobuf.Timestamp\022\?\n\005br"
    "and\030< \001(\01320.tinkoff.public.invest.api.co"
    "ntract.v1.BrandData\022G\n\014dlong_client\030\352\003 \001"
    "(\01320.tinkoff.public.invest.api.contract."
    "v1.Quotation\022H\n\rdshort_client\030\353\003 \001(\01320.t"
    "inkoff.public.invest.api.contract.v1.Quo"
    "tation\"\260\001\n\023GetDividendsRequest\022\020\n\004figi\030\001"
    " \001(\tB\002\030\001\022-\n\004from\030\002 \001(\0132\032.google.protobuf"
    ".TimestampH\000\210\001\001\022+\n\002to\030\003 \001(\0132\032.google.pro"
    "tobuf.TimestampH\001\210\001\001\022\033\n\rinstrument_id\030\004 "
    "\001(\tB\004\342A\001\002B\007\n\005_fromB\005\n\003_to\"Z\n\024GetDividend"
    "sResponse\022B\n\tdividends\030\001 \003(\0132/.tinkoff.p"
    "ublic.invest.api.contract.v1.Dividend\"\206\004"
    "\n\010Dividend\022G\n\014dividend_net\030\001 \001(\01321.tinko"
    "ff.public.invest.api.contract.v1.MoneyVa"
    "lue\0220\n\014payment_date\030\002 \001(\0132\032.google.proto"
    "buf.Timestamp\0221\n\rdeclared_date\030\003 \001(\0132\032.g"
    "oogle.protobuf.Timestamp\0221\n\rlast_buy_dat"
    "e\030\004 \001(\0132\032.google.protobuf.Timestamp\022\025\n\rd"
    "ividend_type\030\005 \001(\t\022/\n\013record_date\030\006 \001(\0132"
    "\032.google.protobuf.Timestamp\022\022\n\nregularit"
    "y\030\007 \001(\t\022F\n\013close_price\030\010 \001(\01321.tinkoff.p"
    "ublic.invest.api.contract.v1.MoneyValue\022"
    "E\n\013yield_value\030\t \001(\01320.tinkoff.public.in"
    "vest.api.contract.v1.Quotation\022.\n\ncreate"
    "d_at\030\n \001(\0132\032.google.protobuf.Timestamp\" "
    "\n\014AssetRequest\022\020\n\002id\030\001 \001(\tB\004\342A\001\002\"P\n\rAsse"
    "tResponse\022\?\n\005asset\030\001 \001(\01320.tinkoff.publi"
    "c.invest.api.contract.v1.AssetFull\"\347\001\n\rA"
    "ssetsRequest\022S\n\017instrument_type\030\001 \001(\01625."
    "tinkoff.public.invest.api.contract.v1.In"
    "strumentTypeH\000\210\001\001\022W\n\021instrument_status\030\002"
    " \001(\01627.tinkoff.public.invest.api.contrac"
    "t.v1.InstrumentStatusH\001\210\001\001B\022\n\020_instrumen"
    "t_typeB\024\n\022_instrument_status\"N\n\016AssetsRe"
    "sponse\022<\n\006assets\030\001 \003(\0132,.tinkoff.public."
    "invest.api.contract.v1.Asset\"\230\005\n\tAssetFu"
    "ll\022\013\n\003uid\030\001 \001(\t\022>\n\004type\030\002 \001(\01620.tinkoff."
    "public.invest.api.contract.v1.AssetType\022"
    "\014\n\004name\030\003 \001(\t\022\022\n\nname_brief\030\004 \001(\t\022\023\n\013des"
    "cription\030\005 \001(\t\022.\n\ndeleted_at\030\006 \001(\0132\032.goo"
    "gle.protobuf.Timestamp\022\026\n\016required_tests"
    "\030\007 \003(\t\022H\n\010currency\030\010 \001(\01324.tinkoff.publi"
    "c.invest.api.contract.v1.AssetCurrencyH\000"
    "\022H\n\010security\030\t \001(\01324.tinkoff.public.inve"
    "st.api.contract.v1.AssetSecurityH\000\022\024\n\014go"
    "s_reg_code\030\n \001(\t\022\013\n\003cfi\030\013 \001(\t\022\020\n\010code_ns"
    "d\030\014 \001(\t\022\016\n\006status\030\r \001(\t\022;\n\005brand\030\016 \001(\0132,"
    ".tinkoff.public.invest.api.contract.v1.B"
    "rand\022.\n\nupdated_at\030\017 \001(\0132\032.google.protob"
    "uf.Timestamp\022\017\n\007br_code\030\020 \001(\t\022\024\n\014br_code"
    "_name\030\021 \001(\t\022K\n\013instruments\030\022 \003(\01326.tinko"
    "ff.public.invest.api.contract.v1.AssetIn"
    "strumentB\005\n\003ext\"\257\001\n\005Asset\022\013\n\003uid\030\001 \001(\t\022>"
    "\n\004type\030\002 \001(\01620.tinkoff.public.invest.api"
    ".contract.v1.AssetType\022\014\n\004name\030\003 \001(\t\022K\n\013"
    "instruments\030\004 \003(\01326.tinkoff.public.inves"
    "t.api.contract.v1.AssetInstrument\"&\n\rAss"
    "etCurrency\022\025\n\rbase_currency\030\001 \001(\t\"\366\003\n\rAs"
    "setSecurity\022\014\n\004isin\030\001 \001(\t\022\014\n\004type\030\002 \001(\t\022"
    "N\n\017instrument_kind\030\n \001(\01625.tinkoff.publi"
    "c.invest.api.contract.v1.InstrumentType\022"
    "B\n\005share\030\003 \001(\01321.tinkoff.public.invest.a"
    "pi.contract.v1.AssetShareH\000\022@\n\004bond\030\004 \001("
    "\01320.tinkoff.public.invest.api.contract.v"
    "1.AssetBondH\000\022K\n\002sp\030\005 \001(\0132=.tinkoff.publ"
    "ic.invest.api.contract.v1.AssetStructure"
    "dProductH\000\022>\n\003etf\030\006 \001(\0132/.tinkoff.public"
    ".invest.api.contract.v1.AssetEtfH\000\022_\n\024cl"
    "earing_certificate\030\007 \001(\0132\?.tinkoff.publi"
    "c.invest.api.contract.v1.AssetClearingCe"
    "rtificateH\000B\005\n\003ext\"\325\005\n\nAssetShare\022>\n\004typ"
    "e\030\001 \001(\01620.tinkoff.public.invest.api.cont"
    "ract.v1.ShareType\022D\n\nissue_size\030\002 \001(\01320."
    "tinkoff.public.invest.api.contract.v1.Qu"
    "otation\022A\n\007nominal\030\003 \001(\01320.tinkoff.publi"
    "c.invest.api.contract.v1.Quotation\022\030\n\020no"
    "minal_currency\030\004 \001(\t\022\025\n\rprimary_index\030\005 "
    "\001(\t\022G\n\rdividend_rate\030\006 \001(\01320.tinkoff.pub"
    "lic.invest.api.contract.v1.Quotation\022\034\n\024"
    "preferred_share_type\030\007 \001(\t\022,\n\010ipo_date\030\010"
    " \001(\0132\032.google.protobuf.Timestamp\0221\n\rregi"
    "stry_date\030\t \001(\0132\032.google.protobuf.Timest"
    "amp\022\026\n\016div_yield_flag\030\n \001(\010\022\022\n\nissue_kin"
    "d\030\013 \001(\t\0222\n\016placement_date\030\014 \001(\0132\032.google"
    ".protobuf.Timestamp\022\023\n\013repres_isin\030\r \001(\t"
    "\022I\n\017issue_size_plan\030\016 \001(\01320.tinkoff.publ"
    "ic.invest.api.contract.v1.Quotation\022E\n\013t"
    "otal_float\030\017 \001(\01320.tinkoff.public.invest"
    ".api.contract.v1.Quotation\"\340\006\n\tAssetBond"
    "\022I\n\017current_nominal\030\001 \001(\01320.tinkoff.publ"
    "ic.invest.api.contract.v1.Quotation\022\023\n\013b"
    "orrow_name\030\002 \001(\t\022D\n\nissue_size\030\003 \001(\01320.t"
    "inkoff.public.invest.api.contract.v1.Quo"
    "tation\022A\n\007nominal\030\004 \001(\01320.tinkoff.public"
    ".invest.api.contract.v1.Quotation\022\030\n\020nom"
    "inal_currency\030\005 \001(\t\022\022\n\nissue_kind\030\006 \001(\t\022"
    "\025\n\rinterest_kind\030\007 \001(\t\022 \n\030coupon_quantit"
    "y_per_year\030\010 \001(\005\022\034\n\024indexed_nominal_flag"
    "\030\t \001(\010\022\031\n\021subordinated_flag\030\n \001(\010\022\027\n\017col"
    "lateral_flag\030\013 \001(\010\022\025\n\rtax_free_flag\030\014 \001("
    "\010\022\031\n\021amortization_flag\030\r \001(\010\022\034\n\024floating"
    "_coupon_flag\030\016 \001(\010\022\026\n\016perpetual_flag\030\017 \001"
    "(\010\0221\n\rmaturity_date\030\020 \001(\0132\032.google.proto"
    "buf.Timestamp\022\030\n\020return_condition\030\021 \001(\t\022"
    "2\n\016state_reg_date\030\022 \001(\0132\032.google.protobu"
    "f.Timestamp\0222\n\016placement_date\030\023 \001(\0132\032.go"
    "ogle.protobuf.Timestamp\022I\n\017placement_pri"
    "ce\030\024 \001(\01320.tinkoff.public.invest.api.con"
    "tract.v1.Quotation\022I\n\017issue_size_plan\030\025 "
    "\001(\01320.tinkoff.public.invest.api.contract"
    ".v1.Quotation\"\240\005\n\026AssetStructuredProduct"
    "\022\023\n\013borrow_name\030\001 \001(\t\022A\n\007nominal\030\002 \001(\01320"
    ".tinkoff.public.invest.api.contract.v1.Q"
    "uotation\022\030\n\020nominal_currency\030\003 \001(\t\022J\n\004ty"
    "pe\030\004 \001(\0162<.tinkoff.public.invest.api.con"
    "tract.v1.StructuredProductType\022\027\n\017logic_"
    "portfolio\030\005 \001(\t\022D\n\nasset_type\030\006 \001(\01620.ti"
    "nkoff.public.invest.api.contract.v1.Asse"
    "tType\022\023\n\013basic_asset\030\007 \001(\t\022H\n\016safety_bar"
    "rier\030\010 \001(\01320.tinkoff.public.invest.api.c"
    "ontract.v1.Quotation\0221\n\rmaturity_date\030\t "
    "\001(\0132\032.google.protobuf.Timestamp\022I\n\017issue"
    "_size_plan\030\n \001(\01320.tinkoff.public.invest"
    ".api.contract.v1.Quotation\022D\n\nissue_size"
    "\030\013 \001(\01320.tinkoff.public.invest.api.contr"
    "act.v1.Quotation\0222\n\016placement_date\030\014 \001(\013"
    "2\032.google.protobuf.Timestamp\022\022\n\nissue_ki"
    "nd\030\r \001(\t\"\330\n\n\010AssetEtf\022G\n\rtotal_expense\030\001"
    " \001(\01320.tinkoff.public.invest.api.contrac"
    "t.v1.Quotation\022E\n\013hurdle_rate\030\002 \001(\01320.ti"
    "nkoff.public.invest.api.contract.v1.Quot"
    "ation\022I\n\017performance_fee\030\003 \001(\01320.tinkoff"
    ".public.invest.api.contract.v1.Quotation"
    "\022J\n\020fixed_commission\030\004 \001(\01320.tinkoff.pub"
    "lic.invest.api.contract.v1.Quotation\022\024\n\014"
    "payment_type\030\005 \001(\t\022\026\n\016watermark_flag\030\006 \001"
    "(\010\022E\n\013buy_premium\030\007 \001(\01320.tinkoff.public"
    ".invest.api.contract.v1.Quotation\022G\n\rsel"
    "l_discount\030\010 \001(\01320.tinkoff.public.invest"
    ".api.contract.v1.Quotation\022\030\n\020rebalancin"
    "g_flag\030\t \001(\010\022\030\n\020rebalancing_freq\030\n \001(\t\022\027"
    "\n\017management_type\030\013 \001(\t\022\025\n\rprimary_index"
    "\030\014 \001(\t\022\022\n\nfocus_type\030\r \001(\t\022\026\n\016leveraged_"
    "flag\030\016 \001(\010\022C\n\tnum_share\030\017 \001(\01320.tinkoff."
    "public.invest.api.contract.v1.Quotation\022"
    "\022\n\nucits_flag\030\020 \001(\010\0221\n\rreleased_date\030\021 \001"
    "(\0132\032.google.protobuf.Timestamp\022\023\n\013descri"
    "ption\030\022 \001(\t\022!\n\031primary_index_description"
    "\030\023 \001(\t\022\035\n\025primary_index_company\030\024 \001(\t\022O\n"
    "\025index_recovery_period\030\025 \001(\01320.tinkoff.p"
    "ublic.invest.api.contract.v1.Quotation\022\021"
    "\n\tinav_code\030\026 \001(\t\022\026\n\016div_yield_flag\030\027 \001("
    "\010\022L\n\022expense_commission\030\030 \001(\01320.tinkoff."
    "public.invest.api.contract.v1.Quotation\022"
    "V\n\034primary_index_tracking_error\030\031 \001(\01320."
    "tinkoff.public.invest.api.contract.v1.Qu"
    "otation\022\030\n\020rebalancing_plan\030\032 \001(\t\022\020\n\010tax"
    "_rate\030\033 \001(\t\0225\n\021rebalancing_dates\030\034 \003(\0132\032"
    ".google.protobuf.Timestamp\022\022\n\nissue_kind"
    "\030\035 \001(\t\022A\n\007nominal\030\036 \001(\01320.tinkoff.public"
    ".invest.api.contract.v1.Quotation\022\030\n\020nom"
    "inal_currency\030\037 \001(\t\"w\n\030AssetClearingCert"
    "ificate\022A\n\007nominal\030\001 \001(\01320.tinkoff.publi"
    "c.invest.api.contract.v1.Quotation\022\030\n\020no"
    "minal_currency\030\002 \001(\t\"\235\001\n\005Brand\022\013\n\003uid\030\001 "
    "\001(\t\022\014\n\004name\030\002 \001(\t\022\023\n\013description\030\003 \001(\t\022\014"
    "\n\004info\030\004 \001(\t\022\017\n\007company\030\005 \001(\t\022\016\n\006sector\030"
    "\006 \001(\t\022\027\n\017country_of_risk\030\007 \001(\t\022\034\n\024countr"
    "y_of_risk_name\030\010 \001(\t\"\225\002\n\017AssetInstrument"
    "\022\013\n\003uid\030\001 \001(\t\022\014\n\004figi\030\002 \001(\t\022\027\n\017instrumen"
    "t_type\030\003 \001(\t\022\016\n\006ticker\030\004 \001(\t\022\022\n\nclass_co"
    "de\030\005 \001(\t\022D\n\005links\030\006 \003(\01325.tinkoff.public"
    ".invest.api.contract.v1.InstrumentLink\022N"
    "\n\017instrument_kind\030\n \001(\01625.tinkoff.public"
    ".invest.api.contract.v1.InstrumentType\022\024"
    "\n\014position_uid\030\013 \001(\t\"6\n\016InstrumentLink\022\014"
    "\n\004type\030\001 \001(\t\022\026\n\016instrument_uid\030\002 \001(\t\"\025\n\023"
    "GetFavoritesRequest\"o\n\024GetFavoritesRespo"
    "nse\022W\n\024favorite_instruments\030\001 \003(\01329.tink"
    "off.public.invest.api.contract.v1.Favori"
    "teInstrument\"\214\002\n\022FavoriteInstrument\022\014\n\004f"
    "igi\030\001 \001(\t\022\016\n\006ticker\030\002 \001(\t\022\022\n\nclass_code\030"
    "\003 \001(\t\022\014\n\004isin\030\004 \001(\t\022\027\n\017instrument_type\030\013"
    " \001(\t\022\014\n\004name\030\014 \001(\t\022\013\n\003uid\030\r \001(\t\022\020\n\010otc_f"
    "lag\030\020 \001(\010\022 \n\030api_trade_available_flag\030\021 "
    "\001(\010\022N\n\017instrument_kind\030\022 \001(\01625.tinkoff.p"
    "ublic.invest.api.contract.v1.InstrumentT"
    "ype\"\323\001\n\024EditFavoritesRequest\022`\n\013instrume"
    "nts\030\001 \003(\0132E.tinkoff.public.invest.api.co"
    "ntract.v1.EditFavoritesRequestInstrument"
    "B\004\342A\001\002\022Y\n\013action_type\030\006 \001(\0162>.tinkoff.pu"
    "blic.invest.api.contract.v1.EditFavorite"
    "sActionTypeB\004\342A\001\002\"]\n\036EditFavoritesReques"
    "tInstrument\022\025\n\004figi\030\001 \001(\tB\002\030\001H\000\210\001\001\022\033\n\rin"
    "strument_id\030\002 \001(\tB\004\342A\001\002B\007\n\005_figi\"p\n\025Edit"
    "FavoritesResponse\022W\n\024favorite_instrument"
    "s\030\001 \003(\01329.tinkoff.public.invest.api.cont"
    "ract.v1.FavoriteInstrument\"\025\n\023GetCountri"
    "esRequest\"a\n\024GetCountriesResponse\022I\n\tcou"
    "ntries\030\001 \003(\01326.tinkoff.public.invest.api"
    ".contract.v1.CountryResponse\"\024\n\022Indicati"
    "vesRequest\"e\n\023IndicativesResponse\022N\n\013ins"
    "truments\030\001 \003(\01329.tinkoff.public.invest.a"
    "pi.contract.v1.IndicativeResponse\"\220\002\n\022In"
    "dicativeResponse\022\014\n\004figi\030\001 \001(\t\022\016\n\006ticker"
    "\030\002 \001(\t\022\022\n\nclass_code\030\003 \001(\t\022\020\n\010currency\030\004"
    " \001(\t\022N\n\017instrument_kind\030\n \001(\01625.tinkoff."
    "public.invest.api.contract.v1.Instrument"
    "Type\022\014\n\004name\030\014 \001(\t\022\020\n\010exchange\030\r \001(\t\022\013\n\003"
    "uid\030\016 \001(\t\022\033\n\022buy_available_flag\030\224\003 \001(\010\022\034"
    "\n\023sell_available_flag\030\225\003 \001(\010\"Y\n\017CountryR"
    "esponse\022\020\n\010alfa_two\030\001 \001(\t\022\022\n\nalfa_three\030"
    "\002 \001(\t\022\014\n\004name\030\003 \001(\t\022\022\n\nname_brief\030\004 \001(\t\""
    "\331\001\n\025FindInstrumentRequest\022\023\n\005query\030\001 \001(\t"
    "B\004\342A\001\002\022S\n\017instrument_kind\030\002 \001(\01625.tinkof"
    "f.public.invest.api.contract.v1.Instrume"
    "ntTypeH\000\210\001\001\022%\n\030api_trade_available_flag\030"
    "\003 \001(\010H\001\210\001\001B\022\n\020_instrument_kindB\033\n\031_api_t"
    "rade_available_flag\"e\n\026FindInstrumentRes"
    "ponse\022K\n\013instruments\030\001 \003(\01326.tinkoff.pub"
    "lic.invest.api.contract.v1.InstrumentSho"
    "rt\"\370\003\n\017InstrumentShort\022\014\n\004isin\030\001 \001(\t\022\014\n\004"
    "figi\030\002 \001(\t\022\016\n\006ticker\030\003 \001(\t\022\022\n\nclass_code"
    "\030\004 \001(\t\022\027\n\017instrument_type\030\005 \001(\t\022\014\n\004name\030"
    "\006 \001(\t\022\013\n\003uid\030\007 \001(\t\022\024\n\014position_uid\030\010 \001(\t"
    "\022N\n\017instrument_kind\030\n \001(\01625.tinkoff.publ"
    "ic.invest.api.contract.v1.InstrumentType"
    "\022 \n\030api_trade_available_flag\030\013 \001(\010\022\024\n\014fo"
    "r_iis_flag\030\014 \001(\010\022:\n\026first_1min_candle_da"
    "te\030\032 \001(\0132\032.google.protobuf.Timestamp\022:\n\026"
    "first_1day_candle_date\030\033 \001(\0132\032.google.pr"
    "otobuf.Timestamp\022\036\n\026for_qual_investor_fl"
    "ag\030\034 \001(\010\022\024\n\014weekend_flag\030\035 \001(\010\022\030\n\020blocke"
    "d_tca_flag\030\036 \001(\010\022\013\n\003lot\030\037 \001(\005\"O\n\020GetBran"
    "dsRequest\022;\n\006paging\030\001 \001(\0132+.tinkoff.publ"
    "ic.invest.api.contract.v1.Page\"#\n\017GetBra"
    "ndRequest\022\020\n\002id\030\001 \001(\tB\004\342A\001\002\"\226\001\n\021GetBrand"
    "sResponse\022<\n\006brands\030\001 \003(\0132,.tinkoff.publ"
    "ic.invest.api.contract.v1.Brand\022C\n\006pagin"
    "g\030\002 \001(\01323.tinkoff.public.invest.api.cont"
    "ract.v1.PageResponse\"3\n\033GetAssetFundamen"
    "talsRequest\022\024\n\006assets\030\001 \003(\tB\004\342A\001\002\"\375\016\n\034Ge"
    "tAssetFundamentalsResponse\022k\n\014fundamenta"
    "ls\030\001 \003(\0132U.tinkoff.public.invest.api.con"
    "tract.v1.GetAssetFundamentalsResponse.St"
    "atisticResponse\032\357\r\n\021StatisticResponse\022\021\n"
    "\tasset_uid\030\001 \001(\t\022\020\n\010currency\030\002 \001(\t\022\035\n\025ma"
    "rket_capitalization\030\003 \001(\001\022 \n\030high_price_"
    "last_52_weeks\030\004 \001(\001\022\037\n\027low_price_last_52"
    "_weeks\030\005 \001(\001\022)\n!average_daily_volume_las"
    "t_10_days\030\006 \001(\001\022)\n!average_daily_volume_"
    "last_4_weeks\030\007 \001(\001\022\014\n\004beta\030\010 \001(\001\022\022\n\nfree"
    "_float\030\t \001(\001\022%\n\035forward_annual_dividend_"
    "yield\030\n \001(\001\022\032\n\022shares_outstanding\030\013 \001(\001\022"
    "\023\n\013revenue_ttm\030\014 \001(\001\022\022\n\nebitda_ttm\030\r \001(\001"
    "\022\026\n\016net_income_ttm\030\016 \001(\001\022\017\n\007eps_ttm\030\017 \001("
    "\001\022\027\n\017diluted_eps_ttm\030\020 \001(\001\022\032\n\022free_cash_"
    "flow_ttm\030\021 \001(\001\022,\n$five_year_annual_reven"
    "ue_growth_rate\030\022 \001(\001\022-\n%three_year_annua"
    "l_revenue_growth_rate\030\023 \001(\001\022\024\n\014pe_ratio_"
    "ttm\030\024 \001(\001\022\032\n\022price_to_sales_ttm\030\025 \001(\001\022\031\n"
    "\021price_to_book_ttm\030\026 \001(\001\022#\n\033price_to_fre"
    "e_cash_flow_ttm\030\027 \001(\001\022\"\n\032total_enterpris"
    "e_value_mrq\030\030 \001(\001\022\030\n\020ev_to_ebitda_mrq\030\031 "
    "\001(\001\022\026\n\016net_margin_mrq\030\032 \001(\001\022\037\n\027net_inter"
    "est_margin_mrq\030\033 \001(\001\022\013\n\003roe\030\034 \001(\001\022\013\n\003roa"
    "\030\035 \001(\001\022\014\n\004roic\030\036 \001(\001\022\026\n\016total_debt_mrq\030\037"
    " \001(\001\022 \n\030total_debt_to_equity_mrq\030  \001(\001\022 "
    "\n\030total_debt_to_ebitda_mrq\030! \001(\001\022\037\n\027free"
    "_cash_flow_to_price\030\" \001(\001\022\032\n\022net_debt_to"
    "_ebitda\030# \001(\001\022\031\n\021current_ratio_mrq\030$ \001(\001"
    "\022&\n\036fixed_charge_coverage_ratio_fy\030% \001(\001"
    "\022 \n\030dividend_yield_daily_ttm\030& \001(\001\022\031\n\021di"
    "vidend_rate_ttm\030\' \001(\001\022\033\n\023dividends_per_s"
    "hare\030( \001(\001\022)\n!five_years_average_dividen"
    "d_yield\030) \001(\001\022-\n%five_year_annual_divide"
    "nd_growth_rate\030* \001(\001\022 \n\030dividend_payout_"
    "ratio_fy\030+ \001(\001\022\024\n\014buy_back_ttm\030, \001(\001\022+\n#"
    "one_year_annual_revenue_growth_rate\030- \001("
    "\001\022\037\n\027domicile_indicator_code\030. \001(\t\022!\n\031ad"
    "r_to_common_share_ratio\030/ \001(\001\022\033\n\023number_"
    "of_employees\0300 \001(\001\0224\n\020ex_dividend_date\0301"
    " \001(\0132\032.google.protobuf.Timestamp\022<\n\030fisc"
    "al_period_start_date\0302 \001(\0132\032.google.prot"
    "obuf.Timestamp\022:\n\026fiscal_period_end_date"
    "\0303 \001(\0132\032.google.protobuf.Timestamp\022!\n\031re"
    "venue_change_five_years\0305 \001(\001\022\035\n\025eps_cha"
    "nge_five_years\0306 \001(\001\022 \n\030ebitda_change_fi"
    "ve_years\0307 \001(\001\022$\n\034total_debt_change_five"
    "_years\0308 \001(\001\022\023\n\013ev_to_sales\0309 \001(\001\"\241\001\n\026Ge"
    "tAssetReportsRequest\022\033\n\rinstrument_id\030\001 "
    "\001(\tB\004\342A\001\002\022-\n\004from\030\002 \001(\0132\032.google.protobu"
    "f.TimestampH\000\210\001\001\022+\n\002to\030\003 \001(\0132\032.google.pr"
    "otobuf.TimestampH\001\210\001\001B\007\n\005_fromB\005\n\003_to\"\247\004"
    "\n\027GetAssetReportsResponse\022c\n\006events\030\001 \003("
    "\0132S.tinkoff.public.invest.api.contract.v"
    "1.GetAssetReportsResponse.GetAssetReport"
    "sEvent\032\242\002\n\024GetAssetReportsEvent\022\025\n\rinstr"
    "ument_id\030\001 \001(\t\022/\n\013report_date\030\002 \001(\0132\032.go"
    "ogle.protobuf.Timestamp\022\023\n\013period_year\030\003"
    " \001(\005\022\022\n\nperiod_num\030\004 \001(\005\022i\n\013period_type\030"
    "\005 \001(\0162T.tinkoff.public.invest.api.contra"
    "ct.v1.GetAssetReportsResponse.AssetRepor"
    "tPeriodType\022.\n\ncreated_at\030\006 \001(\0132\032.google"
    ".protobuf.Timestamp\"\201\001\n\025AssetReportPerio"
    "dType\022\033\n\027PERIOD_TYPE_UNSPECIFIED\020\000\022\027\n\023PE"
    "RIOD_TYPE_QUARTER\020\001\022\032\n\026PERIOD_TYPE_SEMIA"
    "NNUAL\020\002\022\026\n\022PERIOD_TYPE_ANNUAL\020\003\"k\n\034GetCo"
    "nsensusForecastsRequest\022@\n\006paging\030\001 \001(\0132"
    "+.tinkoff.public.invest.api.contract.v1."
    "PageH\000\210\001\001B\t\n\007_paging\"\206\006\n\035GetConsensusFor"
    "ecastsResponse\022j\n\005items\030\001 \003(\0132[.tinkoff."
    "public.invest.api.contract.v1.GetConsens"
    "usForecastsResponse.ConsensusForecastsIt"
    "em\022A\n\004page\030\002 \001(\01323.tinkoff.public.invest"
    ".api.contract.v1.PageResponse\032\265\004\n\026Consen"
    "susForecastsItem\022\013\n\003uid\030\001 \001(\t\022\021\n\tasset_u"
    "id\030\002 \001(\t\022.\n\ncreated_at\030\003 \001(\0132\032.google.pr"
    "otobuf.Timestamp\022K\n\021best_target_price\030\004 "
    "\001(\01320.tinkoff.public.invest.api.contract"
    ".v1.Quotation\022I\n\017best_target_low\030\005 \001(\01320"
    ".tinkoff.public.invest.api.contract.v1.Q"
    "uotation\022J\n\020best_target_high\030\006 \001(\01320.tin"
    "koff.public.invest.api.contract.v1.Quota"
    "tion\022\033\n\023total_buy_recommend\030\007 \001(\005\022\034\n\024tot"
    "al_hold_recommend\030\010 \001(\005\022\034\n\024total_sell_re"
    "commend\030\t \001(\005\022\020\n\010currency\030\n \001(\t\022H\n\tconse"
    "nsus\030\013 \001(\01625.tinkoff.public.invest.api.c"
    "ontract.v1.Recommendation\0222\n\016prognosis_d"
    "ate\030\014 \001(\0132\032.google.protobuf.Timestamp\"+\n"
    "\022GetForecastRequest\022\025\n\rinstrument_id\030\001 \001"
    "(\t\"\227\n\n\023GetForecastResponse\022V\n\007targets\030\001 "
    "\003(\0132E.tinkoff.public.invest.api.contract"
    ".v1.GetForecastResponse.TargetItem\022[\n\tco"
    "nsensus\030\002 \001(\0132H.tinkoff.public.invest.ap"
    "i.contract.v1.GetForecastResponse.Consen"
    "susItem\032\214\004\n\nTargetItem\022\013\n\003uid\030\001 \001(\t\022\016\n\006t"
    "icker\030\002 \001(\t\022\017\n\007company\030\003 \001(\t\022M\n\016recommen"
    "dation\030\004 \001(\01625.tinkoff.public.invest.api"
    ".contract.v1.Recommendation\0227\n\023recommend"
    "ation_date\030\005 \001(\0132\032.google.protobuf.Times"
    "tamp\022\020\n\010currency\030\006 \001(\t\022G\n\rcurrent_price\030"
    "\007 \001(\01320.tinkoff.public.invest.api.contra"
    "ct.v1.Quotation\022F\n\014target_price\030\010 \001(\01320."
    "tinkoff.public.invest.api.contract.v1.Qu"
    "otation\022F\n\014price_change\030\t \001(\01320.tinkoff."
    "public.invest.api.contract.v1.Quotation\022"
    "J\n\020price_change_rel\030\n \001(\01320.tinkoff.publ"
    "ic.invest.api.contract.v1.Quotation\022\021\n\ts"
    "how_name\030\013 \001(\t\032\273\004\n\rConsensusItem\022\013\n\003uid\030"
    "\001 \001(\t\022\016\n\006ticker\030\002 \001(\t\022M\n\016recommendation\030"
    "\003 \001(\01625.tinkoff.public.invest.api.contra"
    "ct.v1.Recommendation\022\020\n\010currency\030\004 \001(\t\022G"
    "\n\rcurrent_price\030\005 \001(\01320.tinkoff.public.i"
    "nvest.api.contract.v1.Quotation\022C\n\tconse"
    "nsus\030\006 \001(\01320.tinkoff.public.invest.api.c"
    "ontract.v1.Quotation\022D\n\nmin_target\030\007 \001(\013"
    "20.tinkoff.public.invest.api.contract.v1"
    ".Quotation\022D\n\nmax_target\030\010 \001(\01320.tinkoff"
    ".public.invest.api.contract.v1.Quotation"
    "\022F\n\014price_change\030\t \001(\01320.tinkoff.public."
    "invest.api.contract.v1.Quotation\022J\n\020pric"
    "e_change_rel\030\n \001(\01320.tinkoff.public.inve"
    "st.api.contract.v1.Quotation\"\340\001\n\017Trading"
    "Interval\022\014\n\004type\030\001 \001(\t\022U\n\010interval\030\002 \001(\013"
    "2C.tinkoff.public.invest.api.contract.v1"
    ".TradingInterval.TimeInterval\032h\n\014TimeInt"
    "erval\022,\n\010start_ts\030\001 \001(\0132\032.google.protobu"
    "f.Timestamp\022*\n\006end_ts\030\002 \001(\0132\032.google.pro"
    "tobuf.Timestamp*\327\001\n\nCouponType\022\033\n\027COUPON"
    "_TYPE_UNSPECIFIED\020\000\022\030\n\024COUPON_TYPE_CONST"
    "ANT\020\001\022\030\n\024COUPON_TYPE_FLOATING\020\002\022\030\n\024COUPO"
    "N_TYPE_DISCOUNT\020\003\022\030\n\024COUPON_TYPE_MORTGAG"
    "E\020\004\022\023\n\017COUPON_TYPE_FIX\020\005\022\030\n\024COUPON_TYPE_"
    "VARIABLE\020\006\022\025\n\021COUPON_TYPE_OTHER\020\007*h\n\017Opt"
    "ionDirection\022 \n\034OPTION_DIRECTION_UNSPECI"
    "FIED\020\000\022\030\n\024OPTION_DIRECTION_PUT\020\001\022\031\n\025OPTI"
    "ON_DIRECTION_CALL\020\002*{\n\021OptionPaymentType"
    "\022#\n\037OPTION_PAYMENT_TYPE_UNSPECIFIED\020\000\022\037\n"
    "\033OPTION_PAYMENT_TYPE_PREMIUM\020\001\022 \n\034OPTION"
    "_PAYMENT_TYPE_MARGINAL\020\002*a\n\013OptionStyle\022"
    "\034\n\030OPTION_STYLE_UNSPECIFIED\020\000\022\031\n\025OPTION_"
    "STYLE_AMERICAN\020\001\022\031\n\025OPTION_STYLE_EUROPEA"
    "N\020\002*\225\001\n\024OptionSettlementType\022%\n!OPTION_E"
    "XECUTION_TYPE_UNSPECIFIED\020\000\022+\n\'OPTION_EX"
    "ECUTION_TYPE_PHYSICAL_DELIVERY\020\001\022)\n%OPTI"
    "ON_EXECUTION_TYPE_CASH_SETTLEMENT\020\002*\256\001\n\020"
    "InstrumentIdType\022\035\n\031INSTRUMENT_ID_UNSPEC"
    "IFIED\020\000\022\033\n\027INSTRUMENT_ID_TYPE_FIGI\020\001\022\035\n\031"
    "INSTRUMENT_ID_TYPE_TICKER\020\002\022\032\n\026INSTRUMEN"
    "T_ID_TYPE_UID\020\003\022#\n\037INSTRUMENT_ID_TYPE_PO"
    "SITION_UID\020\004*\345\001\n\tShareType\022\032\n\026SHARE_TYPE"
    "_UNSPECIFIED\020\000\022\025\n\021SHARE_TYPE_COMMON\020\001\022\030\n"
    "\024SHARE_TYPE_PREFERRED\020\002\022\022\n\016SHARE_TYPE_AD"
    "R\020\003\022\022\n\016SHARE_TYPE_GDR\020\004\022\022\n\016SHARE_TYPE_ML"
    "P\020\005\022\032\n\026SHARE_TYPE_NY_REG_SHRS\020\006\022\036\n\032SHARE"
    "_TYPE_CLOSED_END_FUND\020\007\022\023\n\017SHARE_TYPE_RE"
    "IT\020\010*\211\001\n\tAssetType\022\032\n\026ASSET_TYPE_UNSPECI"
    "FIED\020\000\022\027\n\023ASSET_TYPE_CURRENCY\020\001\022\030\n\024ASSET"
    "_TYPE_COMMODITY\020\002\022\024\n\020ASSET_TYPE_INDEX\020\003\022"
    "\027\n\023ASSET_TYPE_SECURITY\020\004*f\n\025StructuredPr"
    "oductType\022\027\n\023SP_TYPE_UNSPECIFIED\020\000\022\027\n\023SP"
    "_TYPE_DELIVERABLE\020\001\022\033\n\027SP_TYPE_NON_DELIV"
    "ERABLE\020\002*\215\001\n\027EditFavoritesActionType\022*\n&"
    "EDIT_FAVORITES_ACTION_TYPE_UNSPECIFIED\020\000"
    "\022\"\n\036EDIT_FAVORITES_ACTION_TYPE_ADD\020\001\022\"\n\036"
    "EDIT_FAVORITES_ACTION_TYPE_DEL\020\002*\215\001\n\014Rea"
    "lExchange\022\035\n\031REAL_EXCHANGE_UNSPECIFIED\020\000"
    "\022\026\n\022REAL_EXCHANGE_MOEX\020\001\022\025\n\021REAL_EXCHANG"
    "E_RTS\020\002\022\025\n\021REAL_EXCHANGE_OTC\020\003\022\030\n\024REAL_E"
    "XCHANGE_DEALER\020\004*z\n\016Recommendation\022\036\n\032RE"
    "COMMENDATION_UNSPECIFIED\020\000\022\026\n\022RECOMMENDA"
    "TION_BUY\020\001\022\027\n\023RECOMMENDATION_HOLD\020\002\022\027\n\023R"
    "ECOMMENDATION_SELL\020\003*i\n\tRiskLevel\022\032\n\026RIS"
    "K_LEVEL_UNSPECIFIED\020\000\022\022\n\016RISK_LEVEL_LOW\020"
    "\001\022\027\n\023RISK_LEVEL_MODERATE\020\002\022\023\n\017RISK_LEVEL"
    "_HIGH\020\003*=\n\010BondType\022\031\n\025BOND_TYPE_UNSPECI"
    "FIED\020\000\022\026\n\022BOND_TYPE_REPLACED\020\001*]\n\026Instru"
    "mentExchangeType\022#\n\037INSTRUMENT_EXCHANGE_"
    "UNSPECIFIED\020\000\022\036\n\032INSTRUMENT_EXCHANGE_DEA"
    "LER\020\0012\357\"\n\022InstrumentsService\022\223\001\n\020Trading"
    "Schedules\022>.tinkoff.public.invest.api.co"
    "ntract.v1.TradingSchedulesRequest\032\?.tink"
    "off.public.invest.api.contract.v1.Tradin"
    "gSchedulesResponse\022w\n\006BondBy\0228.tinkoff.p"
    "ublic.invest.api.contract.v1.InstrumentR"
    "equest\0323.tinkoff.public.invest.api.contr"
    "act.v1.BondResponse\022x\n\005Bonds\0229.tinkoff.p"
    "ublic.invest.api.contract.v1.Instruments"
    "Request\0324.tinkoff.public.invest.api.cont"
    "ract.v1.BondsResponse\022\215\001\n\016GetBondCoupons"
    "\022<.tinkoff.public.invest.api.contract.v1"
    ".GetBondCouponsRequest\032=.tinkoff.public."
    "invest.api.contract.v1.GetBondCouponsRes"
    "ponse\022\212\001\n\rGetBondEvents\022;.tinkoff.public"
    ".invest.api.contract.v1.GetBondEventsReq"
    "uest\032<.tinkoff.public.invest.api.contrac"
    "t.v1.GetBondEventsResponse\022\177\n\nCurrencyBy"
    "\0228.tinkoff.public.invest.api.contract.v1"
    ".InstrumentRequest\0327.tinkoff.public.inve"
    "st.api.contract.v1.CurrencyResponse\022\202\001\n\n"
    "Currencies\0229.tinkoff.public.invest.api.c"
    "ontract.v1.InstrumentsRequest\0329.tinkoff."
    "public.invest.api.contract.v1.Currencies"
    "Response\022u\n\005EtfBy\0228.tinkoff.public.inves"
    "t.api.contract.v1.InstrumentRequest\0322.ti"
    "nkoff.public.invest.api.contract.v1.EtfR"
    "esponse\022v\n\004Etfs\0229.tinkoff.public.invest."
    "api.contract.v1.InstrumentsRequest\0323.tin"
    "koff.public.invest.api.contract.v1.EtfsR"
    "esponse\022{\n\010FutureBy\0228.tinkoff.public.inv"
    "est.api.contract.v1.InstrumentRequest\0325."
    "tinkoff.public.invest.api.contract.v1.Fu"
    "tureResponse\022|\n\007Futures\0229.tinkoff.public"
    ".invest.api.contract.v1.InstrumentsReque"
    "st\0326.tinkoff.public.invest.api.contract."
    "v1.FuturesResponse\022{\n\010OptionBy\0228.tinkoff"
    ".public.invest.api.contract.v1.Instrumen"
    "tRequest\0325.tinkoff.public.invest.api.con"
    "tract.v1.OptionResponse\022\201\001\n\007Options\0229.ti"
    "nkoff.public.invest.api.contract.v1.Inst"
    "rumentsRequest\0326.tinkoff.public.invest.a"
    "pi.contract.v1.OptionsResponse\"\003\210\002\001\022\200\001\n\t"
    "OptionsBy\022;.tinkoff.public.invest.api.co"
    "ntract.v1.FilterOptionsRequest\0326.tinkoff"
    ".public.invest.api.contract.v1.OptionsRe"
    "sponse\022y\n\007ShareBy\0228.tinkoff.public.inves"
    "t.api.contract.v1.InstrumentRequest\0324.ti"
    "nkoff.public.invest.api.contract.v1.Shar"
    "eResponse\022z\n\006Shares\0229.tinkoff.public.inv"
    "est.api.contract.v1.InstrumentsRequest\0325"
    ".tinkoff.public.invest.api.contract.v1.S"
    "haresResponse\022\204\001\n\013Indicatives\0229.tinkoff."
    "public.invest.api.contract.v1.Indicative"
    "sRequest\032:.tinkoff.public.invest.api.con"
    "tract.v1.IndicativesResponse\022\234\001\n\023GetAccr"
    "uedInterests\022A.tinkoff.public.invest.api"
    ".contract.v1.GetAccruedInterestsRequest\032"
    "B.tinkoff.public.invest.api.contract.v1."
    "GetAccruedInterestsResponse\022\223\001\n\020GetFutur"
    "esMargin\022>.tinkoff.public.invest.api.con"
    "tract.v1.GetFuturesMarginRequest\032\?.tinko"
    "ff.public.invest.api.contract.v1.GetFutu"
    "resMarginResponse\022\206\001\n\017GetInstrumentBy\0228."
    "tinkoff.public.invest.api.contract.v1.In"
    "strumentRequest\0329.tinkoff.public.invest."
    "api.contract.v1.InstrumentResponse\022\207\001\n\014G"
    "etDividends\022:.tinkoff.public.invest.api."
    "contract.v1.GetDividendsRequest\032;.tinkof"
    "f.public.invest.api.contract.v1.GetDivid"
    "endsResponse\022w\n\nGetAssetBy\0223.tinkoff.pub"
    "lic.invest.api.contract.v1.AssetRequest\032"
    "4.tinkoff.public.invest.api.contract.v1."
    "AssetResponse\022x\n\tGetAssets\0224.tinkoff.pub"
    "lic.invest.api.contract.v1.AssetsRequest"
    "\0325.tinkoff.public.invest.api.contract.v1"
    ".AssetsResponse\022\207\001\n\014GetFavorites\022:.tinko"
    "ff.public.invest.api.contract.v1.GetFavo"
    "ritesRequest\032;.tinkoff.public.invest.api"
    ".contract.v1.GetFavoritesResponse\022\212\001\n\rEd"
    "itFavorites\022;.tinkoff.public.invest.api."
    "contract.v1.EditFavoritesRequest\032<.tinko"
    "ff.public.invest.api.contract.v1.EditFav"
    "oritesResponse\022\207\001\n\014GetCountries\022:.tinkof"
    "f.public.invest.api.contract.v1.GetCount"
    "riesRequest\032;.tinkoff.public.invest.api."
    "contract.v1.GetCountriesResponse\022\215\001\n\016Fin"
    "dInstrument\022<.tinkoff.public.invest.api."
    "contract.v1.FindInstrumentRequest\032=.tink"
    "off.public.invest.api.contract.v1.FindIn"
    "strumentResponse\022~\n\tGetBrands\0227.tinkoff."
    "public.invest.api.contract.v1.GetBrandsR"
    "equest\0328.tinkoff.public.invest.api.contr"
    "act.v1.GetBrandsResponse\022r\n\nGetBrandBy\0226"
    ".tinkoff.public.invest.api.contract.v1.G"
    "etBrandRequest\032,.tinkoff.public.invest.a"
    "pi.contract.v1.Brand\022\237\001\n\024GetAssetFundame"
    "ntals\022B.tinkoff.public.invest.api.contra"
    "ct.v1.GetAssetFundamentalsRequest\032C.tink"
    "off.public.invest.api.contract.v1.GetAss"
    "etFundamentalsResponse\022\220\001\n\017GetAssetRepor"
    "ts\022=.tinkoff.public.invest.api.contract."
    "v1.GetAssetReportsRequest\032>.tinkoff.publ"
    "ic.invest.api.contract.v1.GetAssetReport"
    "sResponse\022\242\001\n\025GetConsensusForecasts\022C.ti"
    "nkoff.public.invest.api.contract.v1.GetC"
    "onsensusForecastsRequest\032D.tinkoff.publi"
    "c.invest.api.contract.v1.GetConsensusFor"
    "ecastsResponse\022\206\001\n\rGetForecastBy\0229.tinko"
    "ff.public.invest.api.contract.v1.GetFore"
    "castRequest\032:.tinkoff.public.invest.api."
    "contract.v1.GetForecastResponseBa\n\034ru.ti"
    "nkoff.piapi.contract.v1P\001Z\014./;investapi\242"
    "\002\005TIAPI\252\002\024Tinkoff.InvestApi.V1\312\002\021Tinkoff"
    "\\Invest\\V1b\006proto3"
};
static const ::_pbi::DescriptorTable* const descriptor_table_instruments_2eproto_deps[3] =
    {
        &::descriptor_table_common_2eproto,
        &::descriptor_table_google_2fapi_2ffield_5fbehavior_2eproto,
        &::descriptor_table_google_2fprotobuf_2ftimestamp_2eproto,
};
static ::absl::once_flag descriptor_table_instruments_2eproto_once;
PROTOBUF_CONSTINIT const ::_pbi::DescriptorTable descriptor_table_instruments_2eproto = {
    false,
    false,
    40778,
    descriptor_table_protodef_instruments_2eproto,
    "instruments.proto",
    &descriptor_table_instruments_2eproto_once,
    descriptor_table_instruments_2eproto_deps,
    3,
    90,
    schemas,
    file_default_instances,
    TableStruct_instruments_2eproto::offsets,
    file_level_enum_descriptors_instruments_2eproto,
    file_level_service_descriptors_instruments_2eproto,
};
namespace tinkoff {
namespace public_ {
namespace invest {
namespace api {
namespace contract {
namespace v1 {
const ::google::protobuf::EnumDescriptor* GetBondEventsRequest_EventType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_instruments_2eproto);
  return file_level_enum_descriptors_instruments_2eproto[0];
}
PROTOBUF_CONSTINIT const uint32_t GetBondEventsRequest_EventType_internal_data_[] = {
    327680u, 0u, };
bool GetBondEventsRequest_EventType_IsValid(int value) {
  return 0 <= value && value <= 4;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr GetBondEventsRequest_EventType GetBondEventsRequest::EVENT_TYPE_UNSPECIFIED;
constexpr GetBondEventsRequest_EventType GetBondEventsRequest::EVENT_TYPE_CPN;
constexpr GetBondEventsRequest_EventType GetBondEventsRequest::EVENT_TYPE_CALL;
constexpr GetBondEventsRequest_EventType GetBondEventsRequest::EVENT_TYPE_MTY;
constexpr GetBondEventsRequest_EventType GetBondEventsRequest::EVENT_TYPE_CONV;
constexpr GetBondEventsRequest_EventType GetBondEventsRequest::EventType_MIN;
constexpr GetBondEventsRequest_EventType GetBondEventsRequest::EventType_MAX;
constexpr int GetBondEventsRequest::EventType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* GetAssetReportsResponse_AssetReportPeriodType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_instruments_2eproto);
  return file_level_enum_descriptors_instruments_2eproto[1];
}
PROTOBUF_CONSTINIT const uint32_t GetAssetReportsResponse_AssetReportPeriodType_internal_data_[] = {
    262144u, 0u, };
bool GetAssetReportsResponse_AssetReportPeriodType_IsValid(int value) {
  return 0 <= value && value <= 3;
}
#if (__cplusplus < 201703) && \
  (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))

constexpr GetAssetReportsResponse_AssetReportPeriodType GetAssetReportsResponse::PERIOD_TYPE_UNSPECIFIED;
constexpr GetAssetReportsResponse_AssetReportPeriodType GetAssetReportsResponse::PERIOD_TYPE_QUARTER;
constexpr GetAssetReportsResponse_AssetReportPeriodType GetAssetReportsResponse::PERIOD_TYPE_SEMIANNUAL;
constexpr GetAssetReportsResponse_AssetReportPeriodType GetAssetReportsResponse::PERIOD_TYPE_ANNUAL;
constexpr GetAssetReportsResponse_AssetReportPeriodType GetAssetReportsResponse::AssetReportPeriodType_MIN;
constexpr GetAssetReportsResponse_AssetReportPeriodType GetAssetReportsResponse::AssetReportPeriodType_MAX;
constexpr int GetAssetReportsResponse::AssetReportPeriodType_ARRAYSIZE;

#endif  // (__cplusplus < 201703) &&
        // (!defined(_MSC_VER) || (_MSC_VER >= 1900 && _MSC_VER < 1912))
const ::google::protobuf::EnumDescriptor* CouponType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_instruments_2eproto);
  return file_level_enum_descriptors_instruments_2eproto[2];
}
PROTOBUF_CONSTINIT const uint32_t CouponType_internal_data_[] = {
    524288u, 0u, };
bool CouponType_IsValid(int value) {
  return 0 <= value && value <= 7;
}
const ::google::protobuf::EnumDescriptor* OptionDirection_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_instruments_2eproto);
  return file_level_enum_descriptors_instruments_2eproto[3];
}
PROTOBUF_CONSTINIT const uint32_t OptionDirection_internal_data_[] = {
    196608u, 0u, };
bool OptionDirection_IsValid(int value) {
  return 0 <= value && value <= 2;
}
const ::google::protobuf::EnumDescriptor* OptionPaymentType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_instruments_2eproto);
  return file_level_enum_descriptors_instruments_2eproto[4];
}
PROTOBUF_CONSTINIT const uint32_t OptionPaymentType_internal_data_[] = {
    196608u, 0u, };
bool OptionPaymentType_IsValid(int value) {
  return 0 <= value && value <= 2;
}
const ::google::protobuf::EnumDescriptor* OptionStyle_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_instruments_2eproto);
  return file_level_enum_descriptors_instruments_2eproto[5];
}
PROTOBUF_CONSTINIT const uint32_t OptionStyle_internal_data_[] = {
    196608u, 0u, };
bool OptionStyle_IsValid(int value) {
  return 0 <= value && value <= 2;
}
const ::google::protobuf::EnumDescriptor* OptionSettlementType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_instruments_2eproto);
  return file_level_enum_descriptors_instruments_2eproto[6];
}
PROTOBUF_CONSTINIT const uint32_t OptionSettlementType_internal_data_[] = {
    196608u, 0u, };
bool OptionSettlementType_IsValid(int value) {
  return 0 <= value && value <= 2;
}
const ::google::protobuf::EnumDescriptor* InstrumentIdType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_instruments_2eproto);
  return file_level_enum_descriptors_instruments_2eproto[7];
}
PROTOBUF_CONSTINIT const uint32_t InstrumentIdType_internal_data_[] = {
    327680u, 0u, };
bool InstrumentIdType_IsValid(int value) {
  return 0 <= value && value <= 4;
}
const ::google::protobuf::EnumDescriptor* ShareType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_instruments_2eproto);
  return file_level_enum_descriptors_instruments_2eproto[8];
}
PROTOBUF_CONSTINIT const uint32_t ShareType_internal_data_[] = {
    589824u, 0u, };
bool ShareType_IsValid(int value) {
  return 0 <= value && value <= 8;
}
const ::google::protobuf::EnumDescriptor* AssetType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_instruments_2eproto);
  return file_level_enum_descriptors_instruments_2eproto[9];
}
PROTOBUF_CONSTINIT const uint32_t AssetType_internal_data_[] = {
    327680u, 0u, };
bool AssetType_IsValid(int value) {
  return 0 <= value && value <= 4;
}
const ::google::protobuf::EnumDescriptor* StructuredProductType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_instruments_2eproto);
  return file_level_enum_descriptors_instruments_2eproto[10];
}
PROTOBUF_CONSTINIT const uint32_t StructuredProductType_internal_data_[] = {
    196608u, 0u, };
bool StructuredProductType_IsValid(int value) {
  return 0 <= value && value <= 2;
}
const ::google::protobuf::EnumDescriptor* EditFavoritesActionType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_instruments_2eproto);
  return file_level_enum_descriptors_instruments_2eproto[11];
}
PROTOBUF_CONSTINIT const uint32_t EditFavoritesActionType_internal_data_[] = {
    196608u, 0u, };
bool EditFavoritesActionType_IsValid(int value) {
  return 0 <= value && value <= 2;
}
const ::google::protobuf::EnumDescriptor* RealExchange_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_instruments_2eproto);
  return file_level_enum_descriptors_instruments_2eproto[12];
}
PROTOBUF_CONSTINIT const uint32_t RealExchange_internal_data_[] = {
    327680u, 0u, };
bool RealExchange_IsValid(int value) {
  return 0 <= value && value <= 4;
}
const ::google::protobuf::EnumDescriptor* Recommendation_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_instruments_2eproto);
  return file_level_enum_descriptors_instruments_2eproto[13];
}
PROTOBUF_CONSTINIT const uint32_t Recommendation_internal_data_[] = {
    262144u, 0u, };
bool Recommendation_IsValid(int value) {
  return 0 <= value && value <= 3;
}
const ::google::protobuf::EnumDescriptor* RiskLevel_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_instruments_2eproto);
  return file_level_enum_descriptors_instruments_2eproto[14];
}
PROTOBUF_CONSTINIT const uint32_t RiskLevel_internal_data_[] = {
    262144u, 0u, };
bool RiskLevel_IsValid(int value) {
  return 0 <= value && value <= 3;
}
const ::google::protobuf::EnumDescriptor* BondType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_instruments_2eproto);
  return file_level_enum_descriptors_instruments_2eproto[15];
}
PROTOBUF_CONSTINIT const uint32_t BondType_internal_data_[] = {
    131072u, 0u, };
bool BondType_IsValid(int value) {
  return 0 <= value && value <= 1;
}
const ::google::protobuf::EnumDescriptor* InstrumentExchangeType_descriptor() {
  ::google::protobuf::internal::AssignDescriptors(&descriptor_table_instruments_2eproto);
  return file_level_enum_descriptors_instruments_2eproto[16];
}
PROTOBUF_CONSTINIT const uint32_t InstrumentExchangeType_internal_data_[] = {
    131072u, 0u, };
bool InstrumentExchangeType_IsValid(int value) {
  return 0 <= value && value <= 1;
}
// ===================================================================

class TradingSchedulesRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<TradingSchedulesRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(TradingSchedulesRequest, _impl_._has_bits_);
};

void TradingSchedulesRequest::clear_from() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.from_ != nullptr) _impl_.from_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void TradingSchedulesRequest::clear_to() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.to_ != nullptr) _impl_.to_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
TradingSchedulesRequest::TradingSchedulesRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.TradingSchedulesRequest)
}
inline PROTOBUF_NDEBUG_INLINE TradingSchedulesRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::TradingSchedulesRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        exchange_(arena, from.exchange_) {}

TradingSchedulesRequest::TradingSchedulesRequest(
    ::google::protobuf::Arena* arena,
    const TradingSchedulesRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TradingSchedulesRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.from_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.from_)
                        : nullptr;
  _impl_.to_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.to_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.TradingSchedulesRequest)
}
inline PROTOBUF_NDEBUG_INLINE TradingSchedulesRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        exchange_(arena) {}

inline void TradingSchedulesRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, from_),
           0,
           offsetof(Impl_, to_) -
               offsetof(Impl_, from_) +
               sizeof(Impl_::to_));
}
TradingSchedulesRequest::~TradingSchedulesRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.TradingSchedulesRequest)
  SharedDtor(*this);
}
inline void TradingSchedulesRequest::SharedDtor(MessageLite& self) {
  TradingSchedulesRequest& this_ = static_cast<TradingSchedulesRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.exchange_.Destroy();
  delete this_._impl_.from_;
  delete this_._impl_.to_;
  this_._impl_.~Impl_();
}

inline void* TradingSchedulesRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) TradingSchedulesRequest(arena);
}
constexpr auto TradingSchedulesRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(TradingSchedulesRequest),
                                            alignof(TradingSchedulesRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull TradingSchedulesRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_TradingSchedulesRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &TradingSchedulesRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<TradingSchedulesRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &TradingSchedulesRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<TradingSchedulesRequest>(), &TradingSchedulesRequest::ByteSizeLong,
            &TradingSchedulesRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(TradingSchedulesRequest, _impl_._cached_size_),
        false,
    },
    &TradingSchedulesRequest::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* TradingSchedulesRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 2, 78, 2> TradingSchedulesRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TradingSchedulesRequest, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::TradingSchedulesRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // optional string exchange = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(TradingSchedulesRequest, _impl_.exchange_)}},
    // optional .google.protobuf.Timestamp from = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(TradingSchedulesRequest, _impl_.from_)}},
    // optional .google.protobuf.Timestamp to = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 1, PROTOBUF_FIELD_OFFSET(TradingSchedulesRequest, _impl_.to_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string exchange = 1;
    {PROTOBUF_FIELD_OFFSET(TradingSchedulesRequest, _impl_.exchange_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional .google.protobuf.Timestamp from = 2;
    {PROTOBUF_FIELD_OFFSET(TradingSchedulesRequest, _impl_.from_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .google.protobuf.Timestamp to = 3;
    {PROTOBUF_FIELD_OFFSET(TradingSchedulesRequest, _impl_.to_), _Internal::kHasBitsOffset + 2, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\75\10\0\0\0\0\0\0"
    "tinkoff.public.invest.api.contract.v1.TradingSchedulesRequest"
    "exchange"
  }},
};

PROTOBUF_NOINLINE void TradingSchedulesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.TradingSchedulesRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.exchange_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.from_ != nullptr);
      _impl_.from_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.to_ != nullptr);
      _impl_.to_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* TradingSchedulesRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const TradingSchedulesRequest& this_ = static_cast<const TradingSchedulesRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* TradingSchedulesRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const TradingSchedulesRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.TradingSchedulesRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // optional string exchange = 1;
          if (cached_has_bits & 0x00000001u) {
            const std::string& _s = this_._internal_exchange();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.TradingSchedulesRequest.exchange");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // optional .google.protobuf.Timestamp from = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.from_, this_._impl_.from_->GetCachedSize(), target,
                stream);
          }

          // optional .google.protobuf.Timestamp to = 3;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.to_, this_._impl_.to_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.TradingSchedulesRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t TradingSchedulesRequest::ByteSizeLong(const MessageLite& base) {
          const TradingSchedulesRequest& this_ = static_cast<const TradingSchedulesRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t TradingSchedulesRequest::ByteSizeLong() const {
          const TradingSchedulesRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.TradingSchedulesRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000007u) {
            // optional string exchange = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_exchange());
            }
            // optional .google.protobuf.Timestamp from = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.from_);
            }
            // optional .google.protobuf.Timestamp to = 3;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.to_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void TradingSchedulesRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TradingSchedulesRequest*>(&to_msg);
  auto& from = static_cast<const TradingSchedulesRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.TradingSchedulesRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_exchange(from._internal_exchange());
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.from_ != nullptr);
      if (_this->_impl_.from_ == nullptr) {
        _this->_impl_.from_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.from_);
      } else {
        _this->_impl_.from_->MergeFrom(*from._impl_.from_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.to_ != nullptr);
      if (_this->_impl_.to_ == nullptr) {
        _this->_impl_.to_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.to_);
      } else {
        _this->_impl_.to_->MergeFrom(*from._impl_.to_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TradingSchedulesRequest::CopyFrom(const TradingSchedulesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.TradingSchedulesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TradingSchedulesRequest::InternalSwap(TradingSchedulesRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.exchange_, &other->_impl_.exchange_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TradingSchedulesRequest, _impl_.to_)
      + sizeof(TradingSchedulesRequest::_impl_.to_)
      - PROTOBUF_FIELD_OFFSET(TradingSchedulesRequest, _impl_.from_)>(
          reinterpret_cast<char*>(&_impl_.from_),
          reinterpret_cast<char*>(&other->_impl_.from_));
}

::google::protobuf::Metadata TradingSchedulesRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TradingSchedulesResponse::_Internal {
 public:
};

TradingSchedulesResponse::TradingSchedulesResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.TradingSchedulesResponse)
}
inline PROTOBUF_NDEBUG_INLINE TradingSchedulesResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::TradingSchedulesResponse& from_msg)
      : exchanges_{visibility, arena, from.exchanges_},
        _cached_size_{0} {}

TradingSchedulesResponse::TradingSchedulesResponse(
    ::google::protobuf::Arena* arena,
    const TradingSchedulesResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TradingSchedulesResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.TradingSchedulesResponse)
}
inline PROTOBUF_NDEBUG_INLINE TradingSchedulesResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : exchanges_{visibility, arena},
        _cached_size_{0} {}

inline void TradingSchedulesResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
TradingSchedulesResponse::~TradingSchedulesResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.TradingSchedulesResponse)
  SharedDtor(*this);
}
inline void TradingSchedulesResponse::SharedDtor(MessageLite& self) {
  TradingSchedulesResponse& this_ = static_cast<TradingSchedulesResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* TradingSchedulesResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) TradingSchedulesResponse(arena);
}
constexpr auto TradingSchedulesResponse::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(TradingSchedulesResponse, _impl_.exchanges_) +
          decltype(TradingSchedulesResponse::_impl_.exchanges_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(TradingSchedulesResponse), alignof(TradingSchedulesResponse), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&TradingSchedulesResponse::PlacementNew_,
                                 sizeof(TradingSchedulesResponse),
                                 alignof(TradingSchedulesResponse));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull TradingSchedulesResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_TradingSchedulesResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &TradingSchedulesResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<TradingSchedulesResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &TradingSchedulesResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<TradingSchedulesResponse>(), &TradingSchedulesResponse::ByteSizeLong,
            &TradingSchedulesResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(TradingSchedulesResponse, _impl_._cached_size_),
        false,
    },
    &TradingSchedulesResponse::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* TradingSchedulesResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> TradingSchedulesResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::TradingSchedulesResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .tinkoff.public.invest.api.contract.v1.TradingSchedule exchanges = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TradingSchedulesResponse, _impl_.exchanges_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .tinkoff.public.invest.api.contract.v1.TradingSchedule exchanges = 1;
    {PROTOBUF_FIELD_OFFSET(TradingSchedulesResponse, _impl_.exchanges_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::TradingSchedule>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void TradingSchedulesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.TradingSchedulesResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.exchanges_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* TradingSchedulesResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const TradingSchedulesResponse& this_ = static_cast<const TradingSchedulesResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* TradingSchedulesResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const TradingSchedulesResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.TradingSchedulesResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .tinkoff.public.invest.api.contract.v1.TradingSchedule exchanges = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_exchanges_size());
               i < n; i++) {
            const auto& repfield = this_._internal_exchanges().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.TradingSchedulesResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t TradingSchedulesResponse::ByteSizeLong(const MessageLite& base) {
          const TradingSchedulesResponse& this_ = static_cast<const TradingSchedulesResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t TradingSchedulesResponse::ByteSizeLong() const {
          const TradingSchedulesResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.TradingSchedulesResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .tinkoff.public.invest.api.contract.v1.TradingSchedule exchanges = 1;
            {
              total_size += 1UL * this_._internal_exchanges_size();
              for (const auto& msg : this_._internal_exchanges()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void TradingSchedulesResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TradingSchedulesResponse*>(&to_msg);
  auto& from = static_cast<const TradingSchedulesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.TradingSchedulesResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_exchanges()->MergeFrom(
      from._internal_exchanges());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TradingSchedulesResponse::CopyFrom(const TradingSchedulesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.TradingSchedulesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TradingSchedulesResponse::InternalSwap(TradingSchedulesResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.exchanges_.InternalSwap(&other->_impl_.exchanges_);
}

::google::protobuf::Metadata TradingSchedulesResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TradingSchedule::_Internal {
 public:
};

TradingSchedule::TradingSchedule(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.TradingSchedule)
}
inline PROTOBUF_NDEBUG_INLINE TradingSchedule::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::TradingSchedule& from_msg)
      : days_{visibility, arena, from.days_},
        exchange_(arena, from.exchange_),
        _cached_size_{0} {}

TradingSchedule::TradingSchedule(
    ::google::protobuf::Arena* arena,
    const TradingSchedule& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TradingSchedule* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.TradingSchedule)
}
inline PROTOBUF_NDEBUG_INLINE TradingSchedule::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : days_{visibility, arena},
        exchange_(arena),
        _cached_size_{0} {}

inline void TradingSchedule::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
TradingSchedule::~TradingSchedule() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.TradingSchedule)
  SharedDtor(*this);
}
inline void TradingSchedule::SharedDtor(MessageLite& self) {
  TradingSchedule& this_ = static_cast<TradingSchedule&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.exchange_.Destroy();
  this_._impl_.~Impl_();
}

inline void* TradingSchedule::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) TradingSchedule(arena);
}
constexpr auto TradingSchedule::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(TradingSchedule, _impl_.days_) +
          decltype(TradingSchedule::_impl_.days_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(TradingSchedule), alignof(TradingSchedule), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&TradingSchedule::PlacementNew_,
                                 sizeof(TradingSchedule),
                                 alignof(TradingSchedule));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull TradingSchedule::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_TradingSchedule_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &TradingSchedule::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<TradingSchedule>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &TradingSchedule::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<TradingSchedule>(), &TradingSchedule::ByteSizeLong,
            &TradingSchedule::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(TradingSchedule, _impl_._cached_size_),
        false,
    },
    &TradingSchedule::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* TradingSchedule::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 70, 2> TradingSchedule::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::TradingSchedule>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .tinkoff.public.invest.api.contract.v1.TradingDay days = 2;
    {::_pbi::TcParser::FastMtR1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(TradingSchedule, _impl_.days_)}},
    // string exchange = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TradingSchedule, _impl_.exchange_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string exchange = 1;
    {PROTOBUF_FIELD_OFFSET(TradingSchedule, _impl_.exchange_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .tinkoff.public.invest.api.contract.v1.TradingDay days = 2;
    {PROTOBUF_FIELD_OFFSET(TradingSchedule, _impl_.days_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::TradingDay>()},
  }}, {{
    "\65\10\0\0\0\0\0\0"
    "tinkoff.public.invest.api.contract.v1.TradingSchedule"
    "exchange"
  }},
};

PROTOBUF_NOINLINE void TradingSchedule::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.TradingSchedule)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.days_.Clear();
  _impl_.exchange_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* TradingSchedule::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const TradingSchedule& this_ = static_cast<const TradingSchedule&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* TradingSchedule::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const TradingSchedule& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.TradingSchedule)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string exchange = 1;
          if (!this_._internal_exchange().empty()) {
            const std::string& _s = this_._internal_exchange();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.TradingSchedule.exchange");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // repeated .tinkoff.public.invest.api.contract.v1.TradingDay days = 2;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_days_size());
               i < n; i++) {
            const auto& repfield = this_._internal_days().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    2, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.TradingSchedule)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t TradingSchedule::ByteSizeLong(const MessageLite& base) {
          const TradingSchedule& this_ = static_cast<const TradingSchedule&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t TradingSchedule::ByteSizeLong() const {
          const TradingSchedule& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.TradingSchedule)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .tinkoff.public.invest.api.contract.v1.TradingDay days = 2;
            {
              total_size += 1UL * this_._internal_days_size();
              for (const auto& msg : this_._internal_days()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // string exchange = 1;
            if (!this_._internal_exchange().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_exchange());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void TradingSchedule::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TradingSchedule*>(&to_msg);
  auto& from = static_cast<const TradingSchedule&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.TradingSchedule)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_days()->MergeFrom(
      from._internal_days());
  if (!from._internal_exchange().empty()) {
    _this->_internal_set_exchange(from._internal_exchange());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TradingSchedule::CopyFrom(const TradingSchedule& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.TradingSchedule)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TradingSchedule::InternalSwap(TradingSchedule* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.days_.InternalSwap(&other->_impl_.days_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.exchange_, &other->_impl_.exchange_, arena);
}

::google::protobuf::Metadata TradingSchedule::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TradingDay::_Internal {
 public:
  using HasBits =
      decltype(std::declval<TradingDay>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(TradingDay, _impl_._has_bits_);
};

void TradingDay::clear_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.date_ != nullptr) _impl_.date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void TradingDay::clear_start_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.start_time_ != nullptr) _impl_.start_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void TradingDay::clear_end_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.end_time_ != nullptr) _impl_.end_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void TradingDay::clear_opening_auction_start_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.opening_auction_start_time_ != nullptr) _impl_.opening_auction_start_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void TradingDay::clear_closing_auction_end_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.closing_auction_end_time_ != nullptr) _impl_.closing_auction_end_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void TradingDay::clear_evening_opening_auction_start_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.evening_opening_auction_start_time_ != nullptr) _impl_.evening_opening_auction_start_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void TradingDay::clear_evening_start_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.evening_start_time_ != nullptr) _impl_.evening_start_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void TradingDay::clear_evening_end_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.evening_end_time_ != nullptr) _impl_.evening_end_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void TradingDay::clear_clearing_start_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.clearing_start_time_ != nullptr) _impl_.clearing_start_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void TradingDay::clear_clearing_end_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.clearing_end_time_ != nullptr) _impl_.clearing_end_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void TradingDay::clear_premarket_start_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.premarket_start_time_ != nullptr) _impl_.premarket_start_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
void TradingDay::clear_premarket_end_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.premarket_end_time_ != nullptr) _impl_.premarket_end_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
void TradingDay::clear_closing_auction_start_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.closing_auction_start_time_ != nullptr) _impl_.closing_auction_start_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
void TradingDay::clear_opening_auction_end_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.opening_auction_end_time_ != nullptr) _impl_.opening_auction_end_time_->Clear();
  _impl_._has_bits_[0] &= ~0x00002000u;
}
TradingDay::TradingDay(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.TradingDay)
}
inline PROTOBUF_NDEBUG_INLINE TradingDay::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::TradingDay& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        intervals_{visibility, arena, from.intervals_} {}

TradingDay::TradingDay(
    ::google::protobuf::Arena* arena,
    const TradingDay& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TradingDay* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.date_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.date_)
                        : nullptr;
  _impl_.start_time_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.start_time_)
                        : nullptr;
  _impl_.end_time_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.end_time_)
                        : nullptr;
  _impl_.opening_auction_start_time_ = (cached_has_bits & 0x00000008u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.opening_auction_start_time_)
                        : nullptr;
  _impl_.closing_auction_end_time_ = (cached_has_bits & 0x00000010u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.closing_auction_end_time_)
                        : nullptr;
  _impl_.evening_opening_auction_start_time_ = (cached_has_bits & 0x00000020u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.evening_opening_auction_start_time_)
                        : nullptr;
  _impl_.evening_start_time_ = (cached_has_bits & 0x00000040u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.evening_start_time_)
                        : nullptr;
  _impl_.evening_end_time_ = (cached_has_bits & 0x00000080u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.evening_end_time_)
                        : nullptr;
  _impl_.clearing_start_time_ = (cached_has_bits & 0x00000100u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.clearing_start_time_)
                        : nullptr;
  _impl_.clearing_end_time_ = (cached_has_bits & 0x00000200u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.clearing_end_time_)
                        : nullptr;
  _impl_.premarket_start_time_ = (cached_has_bits & 0x00000400u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.premarket_start_time_)
                        : nullptr;
  _impl_.premarket_end_time_ = (cached_has_bits & 0x00000800u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.premarket_end_time_)
                        : nullptr;
  _impl_.closing_auction_start_time_ = (cached_has_bits & 0x00001000u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.closing_auction_start_time_)
                        : nullptr;
  _impl_.opening_auction_end_time_ = (cached_has_bits & 0x00002000u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.opening_auction_end_time_)
                        : nullptr;
  _impl_.is_trading_day_ = from._impl_.is_trading_day_;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.TradingDay)
}
inline PROTOBUF_NDEBUG_INLINE TradingDay::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        intervals_{visibility, arena} {}

inline void TradingDay::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, date_),
           0,
           offsetof(Impl_, is_trading_day_) -
               offsetof(Impl_, date_) +
               sizeof(Impl_::is_trading_day_));
}
TradingDay::~TradingDay() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.TradingDay)
  SharedDtor(*this);
}
inline void TradingDay::SharedDtor(MessageLite& self) {
  TradingDay& this_ = static_cast<TradingDay&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.date_;
  delete this_._impl_.start_time_;
  delete this_._impl_.end_time_;
  delete this_._impl_.opening_auction_start_time_;
  delete this_._impl_.closing_auction_end_time_;
  delete this_._impl_.evening_opening_auction_start_time_;
  delete this_._impl_.evening_start_time_;
  delete this_._impl_.evening_end_time_;
  delete this_._impl_.clearing_start_time_;
  delete this_._impl_.clearing_end_time_;
  delete this_._impl_.premarket_start_time_;
  delete this_._impl_.premarket_end_time_;
  delete this_._impl_.closing_auction_start_time_;
  delete this_._impl_.opening_auction_end_time_;
  this_._impl_.~Impl_();
}

inline void* TradingDay::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) TradingDay(arena);
}
constexpr auto TradingDay::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(TradingDay, _impl_.intervals_) +
          decltype(TradingDay::_impl_.intervals_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(TradingDay), alignof(TradingDay), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&TradingDay::PlacementNew_,
                                 sizeof(TradingDay),
                                 alignof(TradingDay));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull TradingDay::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_TradingDay_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &TradingDay::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<TradingDay>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &TradingDay::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<TradingDay>(), &TradingDay::ByteSizeLong,
            &TradingDay::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(TradingDay, _impl_._cached_size_),
        false,
    },
    &TradingDay::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* TradingDay::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 16, 15, 0, 2> TradingDay::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TradingDay, _impl_._has_bits_),
    0, // no _extensions_
    18, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294705200,  // skipmap
    offsetof(decltype(_table_), field_entries),
    16,  // num_field_entries
    15,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::TradingDay>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .google.protobuf.Timestamp date = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(TradingDay, _impl_.date_)}},
    // bool is_trading_day = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(TradingDay, _impl_.is_trading_day_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(TradingDay, _impl_.is_trading_day_)}},
    // .google.protobuf.Timestamp start_time = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 1, PROTOBUF_FIELD_OFFSET(TradingDay, _impl_.start_time_)}},
    // .google.protobuf.Timestamp end_time = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 2, 2, PROTOBUF_FIELD_OFFSET(TradingDay, _impl_.end_time_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // .google.protobuf.Timestamp opening_auction_start_time = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 3, 3, PROTOBUF_FIELD_OFFSET(TradingDay, _impl_.opening_auction_start_time_)}},
    // .google.protobuf.Timestamp closing_auction_end_time = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 4, 4, PROTOBUF_FIELD_OFFSET(TradingDay, _impl_.closing_auction_end_time_)}},
    // .google.protobuf.Timestamp evening_opening_auction_start_time = 9;
    {::_pbi::TcParser::FastMtS1,
     {74, 5, 5, PROTOBUF_FIELD_OFFSET(TradingDay, _impl_.evening_opening_auction_start_time_)}},
    // .google.protobuf.Timestamp evening_start_time = 10;
    {::_pbi::TcParser::FastMtS1,
     {82, 6, 6, PROTOBUF_FIELD_OFFSET(TradingDay, _impl_.evening_start_time_)}},
    // .google.protobuf.Timestamp evening_end_time = 11;
    {::_pbi::TcParser::FastMtS1,
     {90, 7, 7, PROTOBUF_FIELD_OFFSET(TradingDay, _impl_.evening_end_time_)}},
    // .google.protobuf.Timestamp clearing_start_time = 12;
    {::_pbi::TcParser::FastMtS1,
     {98, 8, 8, PROTOBUF_FIELD_OFFSET(TradingDay, _impl_.clearing_start_time_)}},
    // .google.protobuf.Timestamp clearing_end_time = 13;
    {::_pbi::TcParser::FastMtS1,
     {106, 9, 9, PROTOBUF_FIELD_OFFSET(TradingDay, _impl_.clearing_end_time_)}},
    // .google.protobuf.Timestamp premarket_start_time = 14;
    {::_pbi::TcParser::FastMtS1,
     {114, 10, 10, PROTOBUF_FIELD_OFFSET(TradingDay, _impl_.premarket_start_time_)}},
    // .google.protobuf.Timestamp premarket_end_time = 15;
    {::_pbi::TcParser::FastMtS1,
     {122, 11, 11, PROTOBUF_FIELD_OFFSET(TradingDay, _impl_.premarket_end_time_)}},
    // .google.protobuf.Timestamp closing_auction_start_time = 16;
    {::_pbi::TcParser::FastMtS2,
     {386, 12, 12, PROTOBUF_FIELD_OFFSET(TradingDay, _impl_.closing_auction_start_time_)}},
    // .google.protobuf.Timestamp opening_auction_end_time = 17;
    {::_pbi::TcParser::FastMtS2,
     {394, 13, 13, PROTOBUF_FIELD_OFFSET(TradingDay, _impl_.opening_auction_end_time_)}},
    // repeated .tinkoff.public.invest.api.contract.v1.TradingInterval intervals = 18;
    {::_pbi::TcParser::FastMtR2,
     {402, 63, 14, PROTOBUF_FIELD_OFFSET(TradingDay, _impl_.intervals_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .google.protobuf.Timestamp date = 1;
    {PROTOBUF_FIELD_OFFSET(TradingDay, _impl_.date_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool is_trading_day = 2;
    {PROTOBUF_FIELD_OFFSET(TradingDay, _impl_.is_trading_day_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .google.protobuf.Timestamp start_time = 3;
    {PROTOBUF_FIELD_OFFSET(TradingDay, _impl_.start_time_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp end_time = 4;
    {PROTOBUF_FIELD_OFFSET(TradingDay, _impl_.end_time_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp opening_auction_start_time = 7;
    {PROTOBUF_FIELD_OFFSET(TradingDay, _impl_.opening_auction_start_time_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp closing_auction_end_time = 8;
    {PROTOBUF_FIELD_OFFSET(TradingDay, _impl_.closing_auction_end_time_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp evening_opening_auction_start_time = 9;
    {PROTOBUF_FIELD_OFFSET(TradingDay, _impl_.evening_opening_auction_start_time_), _Internal::kHasBitsOffset + 5, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp evening_start_time = 10;
    {PROTOBUF_FIELD_OFFSET(TradingDay, _impl_.evening_start_time_), _Internal::kHasBitsOffset + 6, 6,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp evening_end_time = 11;
    {PROTOBUF_FIELD_OFFSET(TradingDay, _impl_.evening_end_time_), _Internal::kHasBitsOffset + 7, 7,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp clearing_start_time = 12;
    {PROTOBUF_FIELD_OFFSET(TradingDay, _impl_.clearing_start_time_), _Internal::kHasBitsOffset + 8, 8,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp clearing_end_time = 13;
    {PROTOBUF_FIELD_OFFSET(TradingDay, _impl_.clearing_end_time_), _Internal::kHasBitsOffset + 9, 9,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp premarket_start_time = 14;
    {PROTOBUF_FIELD_OFFSET(TradingDay, _impl_.premarket_start_time_), _Internal::kHasBitsOffset + 10, 10,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp premarket_end_time = 15;
    {PROTOBUF_FIELD_OFFSET(TradingDay, _impl_.premarket_end_time_), _Internal::kHasBitsOffset + 11, 11,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp closing_auction_start_time = 16;
    {PROTOBUF_FIELD_OFFSET(TradingDay, _impl_.closing_auction_start_time_), _Internal::kHasBitsOffset + 12, 12,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp opening_auction_end_time = 17;
    {PROTOBUF_FIELD_OFFSET(TradingDay, _impl_.opening_auction_end_time_), _Internal::kHasBitsOffset + 13, 13,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated .tinkoff.public.invest.api.contract.v1.TradingInterval intervals = 18;
    {PROTOBUF_FIELD_OFFSET(TradingDay, _impl_.intervals_), -1, 14,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::TradingInterval>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void TradingDay::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.TradingDay)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.intervals_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.date_ != nullptr);
      _impl_.date_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.start_time_ != nullptr);
      _impl_.start_time_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.end_time_ != nullptr);
      _impl_.end_time_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.opening_auction_start_time_ != nullptr);
      _impl_.opening_auction_start_time_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.closing_auction_end_time_ != nullptr);
      _impl_.closing_auction_end_time_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.evening_opening_auction_start_time_ != nullptr);
      _impl_.evening_opening_auction_start_time_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(_impl_.evening_start_time_ != nullptr);
      _impl_.evening_start_time_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      ABSL_DCHECK(_impl_.evening_end_time_ != nullptr);
      _impl_.evening_end_time_->Clear();
    }
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      ABSL_DCHECK(_impl_.clearing_start_time_ != nullptr);
      _impl_.clearing_start_time_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      ABSL_DCHECK(_impl_.clearing_end_time_ != nullptr);
      _impl_.clearing_end_time_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      ABSL_DCHECK(_impl_.premarket_start_time_ != nullptr);
      _impl_.premarket_start_time_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      ABSL_DCHECK(_impl_.premarket_end_time_ != nullptr);
      _impl_.premarket_end_time_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      ABSL_DCHECK(_impl_.closing_auction_start_time_ != nullptr);
      _impl_.closing_auction_start_time_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      ABSL_DCHECK(_impl_.opening_auction_end_time_ != nullptr);
      _impl_.opening_auction_end_time_->Clear();
    }
  }
  _impl_.is_trading_day_ = false;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* TradingDay::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const TradingDay& this_ = static_cast<const TradingDay&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* TradingDay::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const TradingDay& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.TradingDay)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .google.protobuf.Timestamp date = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.date_, this_._impl_.date_->GetCachedSize(), target,
                stream);
          }

          // bool is_trading_day = 2;
          if (this_._internal_is_trading_day() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                2, this_._internal_is_trading_day(), target);
          }

          // .google.protobuf.Timestamp start_time = 3;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.start_time_, this_._impl_.start_time_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Timestamp end_time = 4;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                4, *this_._impl_.end_time_, this_._impl_.end_time_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Timestamp opening_auction_start_time = 7;
          if (cached_has_bits & 0x00000008u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                7, *this_._impl_.opening_auction_start_time_, this_._impl_.opening_auction_start_time_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Timestamp closing_auction_end_time = 8;
          if (cached_has_bits & 0x00000010u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                8, *this_._impl_.closing_auction_end_time_, this_._impl_.closing_auction_end_time_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Timestamp evening_opening_auction_start_time = 9;
          if (cached_has_bits & 0x00000020u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                9, *this_._impl_.evening_opening_auction_start_time_, this_._impl_.evening_opening_auction_start_time_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Timestamp evening_start_time = 10;
          if (cached_has_bits & 0x00000040u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                10, *this_._impl_.evening_start_time_, this_._impl_.evening_start_time_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Timestamp evening_end_time = 11;
          if (cached_has_bits & 0x00000080u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                11, *this_._impl_.evening_end_time_, this_._impl_.evening_end_time_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Timestamp clearing_start_time = 12;
          if (cached_has_bits & 0x00000100u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                12, *this_._impl_.clearing_start_time_, this_._impl_.clearing_start_time_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Timestamp clearing_end_time = 13;
          if (cached_has_bits & 0x00000200u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                13, *this_._impl_.clearing_end_time_, this_._impl_.clearing_end_time_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Timestamp premarket_start_time = 14;
          if (cached_has_bits & 0x00000400u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                14, *this_._impl_.premarket_start_time_, this_._impl_.premarket_start_time_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Timestamp premarket_end_time = 15;
          if (cached_has_bits & 0x00000800u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                15, *this_._impl_.premarket_end_time_, this_._impl_.premarket_end_time_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Timestamp closing_auction_start_time = 16;
          if (cached_has_bits & 0x00001000u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                16, *this_._impl_.closing_auction_start_time_, this_._impl_.closing_auction_start_time_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Timestamp opening_auction_end_time = 17;
          if (cached_has_bits & 0x00002000u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                17, *this_._impl_.opening_auction_end_time_, this_._impl_.opening_auction_end_time_->GetCachedSize(), target,
                stream);
          }

          // repeated .tinkoff.public.invest.api.contract.v1.TradingInterval intervals = 18;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_intervals_size());
               i < n; i++) {
            const auto& repfield = this_._internal_intervals().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    18, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.TradingDay)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t TradingDay::ByteSizeLong(const MessageLite& base) {
          const TradingDay& this_ = static_cast<const TradingDay&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t TradingDay::ByteSizeLong() const {
          const TradingDay& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.TradingDay)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .tinkoff.public.invest.api.contract.v1.TradingInterval intervals = 18;
            {
              total_size += 2UL * this_._internal_intervals_size();
              for (const auto& msg : this_._internal_intervals()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x000000ffu) {
            // .google.protobuf.Timestamp date = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.date_);
            }
            // .google.protobuf.Timestamp start_time = 3;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.start_time_);
            }
            // .google.protobuf.Timestamp end_time = 4;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.end_time_);
            }
            // .google.protobuf.Timestamp opening_auction_start_time = 7;
            if (cached_has_bits & 0x00000008u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.opening_auction_start_time_);
            }
            // .google.protobuf.Timestamp closing_auction_end_time = 8;
            if (cached_has_bits & 0x00000010u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.closing_auction_end_time_);
            }
            // .google.protobuf.Timestamp evening_opening_auction_start_time = 9;
            if (cached_has_bits & 0x00000020u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.evening_opening_auction_start_time_);
            }
            // .google.protobuf.Timestamp evening_start_time = 10;
            if (cached_has_bits & 0x00000040u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.evening_start_time_);
            }
            // .google.protobuf.Timestamp evening_end_time = 11;
            if (cached_has_bits & 0x00000080u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.evening_end_time_);
            }
          }
          if (cached_has_bits & 0x00003f00u) {
            // .google.protobuf.Timestamp clearing_start_time = 12;
            if (cached_has_bits & 0x00000100u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.clearing_start_time_);
            }
            // .google.protobuf.Timestamp clearing_end_time = 13;
            if (cached_has_bits & 0x00000200u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.clearing_end_time_);
            }
            // .google.protobuf.Timestamp premarket_start_time = 14;
            if (cached_has_bits & 0x00000400u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.premarket_start_time_);
            }
            // .google.protobuf.Timestamp premarket_end_time = 15;
            if (cached_has_bits & 0x00000800u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.premarket_end_time_);
            }
            // .google.protobuf.Timestamp closing_auction_start_time = 16;
            if (cached_has_bits & 0x00001000u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.closing_auction_start_time_);
            }
            // .google.protobuf.Timestamp opening_auction_end_time = 17;
            if (cached_has_bits & 0x00002000u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.opening_auction_end_time_);
            }
          }
           {
            // bool is_trading_day = 2;
            if (this_._internal_is_trading_day() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void TradingDay::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TradingDay*>(&to_msg);
  auto& from = static_cast<const TradingDay&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.TradingDay)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_intervals()->MergeFrom(
      from._internal_intervals());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.date_ != nullptr);
      if (_this->_impl_.date_ == nullptr) {
        _this->_impl_.date_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.date_);
      } else {
        _this->_impl_.date_->MergeFrom(*from._impl_.date_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.start_time_ != nullptr);
      if (_this->_impl_.start_time_ == nullptr) {
        _this->_impl_.start_time_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.start_time_);
      } else {
        _this->_impl_.start_time_->MergeFrom(*from._impl_.start_time_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.end_time_ != nullptr);
      if (_this->_impl_.end_time_ == nullptr) {
        _this->_impl_.end_time_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.end_time_);
      } else {
        _this->_impl_.end_time_->MergeFrom(*from._impl_.end_time_);
      }
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(from._impl_.opening_auction_start_time_ != nullptr);
      if (_this->_impl_.opening_auction_start_time_ == nullptr) {
        _this->_impl_.opening_auction_start_time_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.opening_auction_start_time_);
      } else {
        _this->_impl_.opening_auction_start_time_->MergeFrom(*from._impl_.opening_auction_start_time_);
      }
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(from._impl_.closing_auction_end_time_ != nullptr);
      if (_this->_impl_.closing_auction_end_time_ == nullptr) {
        _this->_impl_.closing_auction_end_time_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.closing_auction_end_time_);
      } else {
        _this->_impl_.closing_auction_end_time_->MergeFrom(*from._impl_.closing_auction_end_time_);
      }
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(from._impl_.evening_opening_auction_start_time_ != nullptr);
      if (_this->_impl_.evening_opening_auction_start_time_ == nullptr) {
        _this->_impl_.evening_opening_auction_start_time_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.evening_opening_auction_start_time_);
      } else {
        _this->_impl_.evening_opening_auction_start_time_->MergeFrom(*from._impl_.evening_opening_auction_start_time_);
      }
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(from._impl_.evening_start_time_ != nullptr);
      if (_this->_impl_.evening_start_time_ == nullptr) {
        _this->_impl_.evening_start_time_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.evening_start_time_);
      } else {
        _this->_impl_.evening_start_time_->MergeFrom(*from._impl_.evening_start_time_);
      }
    }
    if (cached_has_bits & 0x00000080u) {
      ABSL_DCHECK(from._impl_.evening_end_time_ != nullptr);
      if (_this->_impl_.evening_end_time_ == nullptr) {
        _this->_impl_.evening_end_time_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.evening_end_time_);
      } else {
        _this->_impl_.evening_end_time_->MergeFrom(*from._impl_.evening_end_time_);
      }
    }
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      ABSL_DCHECK(from._impl_.clearing_start_time_ != nullptr);
      if (_this->_impl_.clearing_start_time_ == nullptr) {
        _this->_impl_.clearing_start_time_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.clearing_start_time_);
      } else {
        _this->_impl_.clearing_start_time_->MergeFrom(*from._impl_.clearing_start_time_);
      }
    }
    if (cached_has_bits & 0x00000200u) {
      ABSL_DCHECK(from._impl_.clearing_end_time_ != nullptr);
      if (_this->_impl_.clearing_end_time_ == nullptr) {
        _this->_impl_.clearing_end_time_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.clearing_end_time_);
      } else {
        _this->_impl_.clearing_end_time_->MergeFrom(*from._impl_.clearing_end_time_);
      }
    }
    if (cached_has_bits & 0x00000400u) {
      ABSL_DCHECK(from._impl_.premarket_start_time_ != nullptr);
      if (_this->_impl_.premarket_start_time_ == nullptr) {
        _this->_impl_.premarket_start_time_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.premarket_start_time_);
      } else {
        _this->_impl_.premarket_start_time_->MergeFrom(*from._impl_.premarket_start_time_);
      }
    }
    if (cached_has_bits & 0x00000800u) {
      ABSL_DCHECK(from._impl_.premarket_end_time_ != nullptr);
      if (_this->_impl_.premarket_end_time_ == nullptr) {
        _this->_impl_.premarket_end_time_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.premarket_end_time_);
      } else {
        _this->_impl_.premarket_end_time_->MergeFrom(*from._impl_.premarket_end_time_);
      }
    }
    if (cached_has_bits & 0x00001000u) {
      ABSL_DCHECK(from._impl_.closing_auction_start_time_ != nullptr);
      if (_this->_impl_.closing_auction_start_time_ == nullptr) {
        _this->_impl_.closing_auction_start_time_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.closing_auction_start_time_);
      } else {
        _this->_impl_.closing_auction_start_time_->MergeFrom(*from._impl_.closing_auction_start_time_);
      }
    }
    if (cached_has_bits & 0x00002000u) {
      ABSL_DCHECK(from._impl_.opening_auction_end_time_ != nullptr);
      if (_this->_impl_.opening_auction_end_time_ == nullptr) {
        _this->_impl_.opening_auction_end_time_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.opening_auction_end_time_);
      } else {
        _this->_impl_.opening_auction_end_time_->MergeFrom(*from._impl_.opening_auction_end_time_);
      }
    }
  }
  if (from._internal_is_trading_day() != 0) {
    _this->_impl_.is_trading_day_ = from._impl_.is_trading_day_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TradingDay::CopyFrom(const TradingDay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.TradingDay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TradingDay::InternalSwap(TradingDay* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.intervals_.InternalSwap(&other->_impl_.intervals_);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TradingDay, _impl_.is_trading_day_)
      + sizeof(TradingDay::_impl_.is_trading_day_)
      - PROTOBUF_FIELD_OFFSET(TradingDay, _impl_.date_)>(
          reinterpret_cast<char*>(&_impl_.date_),
          reinterpret_cast<char*>(&other->_impl_.date_));
}

::google::protobuf::Metadata TradingDay::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class InstrumentRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<InstrumentRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(InstrumentRequest, _impl_._has_bits_);
};

InstrumentRequest::InstrumentRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.InstrumentRequest)
}
inline PROTOBUF_NDEBUG_INLINE InstrumentRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::InstrumentRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        class_code_(arena, from.class_code_),
        id_(arena, from.id_) {}

InstrumentRequest::InstrumentRequest(
    ::google::protobuf::Arena* arena,
    const InstrumentRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  InstrumentRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.id_type_ = from._impl_.id_type_;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.InstrumentRequest)
}
inline PROTOBUF_NDEBUG_INLINE InstrumentRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        class_code_(arena),
        id_(arena) {}

inline void InstrumentRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.id_type_ = {};
}
InstrumentRequest::~InstrumentRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.InstrumentRequest)
  SharedDtor(*this);
}
inline void InstrumentRequest::SharedDtor(MessageLite& self) {
  InstrumentRequest& this_ = static_cast<InstrumentRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.class_code_.Destroy();
  this_._impl_.id_.Destroy();
  this_._impl_.~Impl_();
}

inline void* InstrumentRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) InstrumentRequest(arena);
}
constexpr auto InstrumentRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(InstrumentRequest),
                                            alignof(InstrumentRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull InstrumentRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_InstrumentRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &InstrumentRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<InstrumentRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &InstrumentRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<InstrumentRequest>(), &InstrumentRequest::ByteSizeLong,
            &InstrumentRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(InstrumentRequest, _impl_._cached_size_),
        false,
    },
    &InstrumentRequest::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* InstrumentRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 76, 2> InstrumentRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(InstrumentRequest, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::InstrumentRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .tinkoff.public.invest.api.contract.v1.InstrumentIdType id_type = 1 [(.google.api.field_behavior) = REQUIRED];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(InstrumentRequest, _impl_.id_type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(InstrumentRequest, _impl_.id_type_)}},
    // optional string class_code = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(InstrumentRequest, _impl_.class_code_)}},
    // string id = 3 [(.google.api.field_behavior) = REQUIRED];
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(InstrumentRequest, _impl_.id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .tinkoff.public.invest.api.contract.v1.InstrumentIdType id_type = 1 [(.google.api.field_behavior) = REQUIRED];
    {PROTOBUF_FIELD_OFFSET(InstrumentRequest, _impl_.id_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // optional string class_code = 2;
    {PROTOBUF_FIELD_OFFSET(InstrumentRequest, _impl_.class_code_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string id = 3 [(.google.api.field_behavior) = REQUIRED];
    {PROTOBUF_FIELD_OFFSET(InstrumentRequest, _impl_.id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\67\0\12\2\0\0\0\0"
    "tinkoff.public.invest.api.contract.v1.InstrumentRequest"
    "class_code"
    "id"
  }},
};

PROTOBUF_NOINLINE void InstrumentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.InstrumentRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.class_code_.ClearNonDefaultToEmpty();
  }
  _impl_.id_.ClearToEmpty();
  _impl_.id_type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* InstrumentRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const InstrumentRequest& this_ = static_cast<const InstrumentRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* InstrumentRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const InstrumentRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.InstrumentRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // .tinkoff.public.invest.api.contract.v1.InstrumentIdType id_type = 1 [(.google.api.field_behavior) = REQUIRED];
          if (this_._internal_id_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_id_type(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // optional string class_code = 2;
          if (cached_has_bits & 0x00000001u) {
            const std::string& _s = this_._internal_class_code();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.InstrumentRequest.class_code");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // string id = 3 [(.google.api.field_behavior) = REQUIRED];
          if (!this_._internal_id().empty()) {
            const std::string& _s = this_._internal_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.InstrumentRequest.id");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.InstrumentRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t InstrumentRequest::ByteSizeLong(const MessageLite& base) {
          const InstrumentRequest& this_ = static_cast<const InstrumentRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t InstrumentRequest::ByteSizeLong() const {
          const InstrumentRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.InstrumentRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // optional string class_code = 2;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_class_code());
            }
          }
           {
            // string id = 3 [(.google.api.field_behavior) = REQUIRED];
            if (!this_._internal_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_id());
            }
            // .tinkoff.public.invest.api.contract.v1.InstrumentIdType id_type = 1 [(.google.api.field_behavior) = REQUIRED];
            if (this_._internal_id_type() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_id_type());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void InstrumentRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<InstrumentRequest*>(&to_msg);
  auto& from = static_cast<const InstrumentRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.InstrumentRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _this->_internal_set_class_code(from._internal_class_code());
  }
  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  if (from._internal_id_type() != 0) {
    _this->_impl_.id_type_ = from._impl_.id_type_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void InstrumentRequest::CopyFrom(const InstrumentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.InstrumentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void InstrumentRequest::InternalSwap(InstrumentRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.class_code_, &other->_impl_.class_code_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, &other->_impl_.id_, arena);
  swap(_impl_.id_type_, other->_impl_.id_type_);
}

::google::protobuf::Metadata InstrumentRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class InstrumentsRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<InstrumentsRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(InstrumentsRequest, _impl_._has_bits_);
};

InstrumentsRequest::InstrumentsRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.InstrumentsRequest)
}
InstrumentsRequest::InstrumentsRequest(
    ::google::protobuf::Arena* arena, const InstrumentsRequest& from)
    : InstrumentsRequest(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE InstrumentsRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void InstrumentsRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, instrument_status_),
           0,
           offsetof(Impl_, instrument_exchange_) -
               offsetof(Impl_, instrument_status_) +
               sizeof(Impl_::instrument_exchange_));
}
InstrumentsRequest::~InstrumentsRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.InstrumentsRequest)
  SharedDtor(*this);
}
inline void InstrumentsRequest::SharedDtor(MessageLite& self) {
  InstrumentsRequest& this_ = static_cast<InstrumentsRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* InstrumentsRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) InstrumentsRequest(arena);
}
constexpr auto InstrumentsRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(InstrumentsRequest),
                                            alignof(InstrumentsRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull InstrumentsRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_InstrumentsRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &InstrumentsRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<InstrumentsRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &InstrumentsRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<InstrumentsRequest>(), &InstrumentsRequest::ByteSizeLong,
            &InstrumentsRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(InstrumentsRequest, _impl_._cached_size_),
        false,
    },
    &InstrumentsRequest::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* InstrumentsRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> InstrumentsRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(InstrumentsRequest, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::InstrumentsRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional .tinkoff.public.invest.api.contract.v1.InstrumentExchangeType instrument_exchange = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(InstrumentsRequest, _impl_.instrument_exchange_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(InstrumentsRequest, _impl_.instrument_exchange_)}},
    // optional .tinkoff.public.invest.api.contract.v1.InstrumentStatus instrument_status = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(InstrumentsRequest, _impl_.instrument_status_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(InstrumentsRequest, _impl_.instrument_status_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .tinkoff.public.invest.api.contract.v1.InstrumentStatus instrument_status = 1;
    {PROTOBUF_FIELD_OFFSET(InstrumentsRequest, _impl_.instrument_status_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // optional .tinkoff.public.invest.api.contract.v1.InstrumentExchangeType instrument_exchange = 2;
    {PROTOBUF_FIELD_OFFSET(InstrumentsRequest, _impl_.instrument_exchange_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void InstrumentsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.InstrumentsRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.instrument_status_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.instrument_exchange_) -
        reinterpret_cast<char*>(&_impl_.instrument_status_)) + sizeof(_impl_.instrument_exchange_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* InstrumentsRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const InstrumentsRequest& this_ = static_cast<const InstrumentsRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* InstrumentsRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const InstrumentsRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.InstrumentsRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // optional .tinkoff.public.invest.api.contract.v1.InstrumentStatus instrument_status = 1;
          if (cached_has_bits & 0x00000001u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_instrument_status(), target);
          }

          // optional .tinkoff.public.invest.api.contract.v1.InstrumentExchangeType instrument_exchange = 2;
          if (cached_has_bits & 0x00000002u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                2, this_._internal_instrument_exchange(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.InstrumentsRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t InstrumentsRequest::ByteSizeLong(const MessageLite& base) {
          const InstrumentsRequest& this_ = static_cast<const InstrumentsRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t InstrumentsRequest::ByteSizeLong() const {
          const InstrumentsRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.InstrumentsRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // optional .tinkoff.public.invest.api.contract.v1.InstrumentStatus instrument_status = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_instrument_status());
            }
            // optional .tinkoff.public.invest.api.contract.v1.InstrumentExchangeType instrument_exchange = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_instrument_exchange());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void InstrumentsRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<InstrumentsRequest*>(&to_msg);
  auto& from = static_cast<const InstrumentsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.InstrumentsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.instrument_status_ = from._impl_.instrument_status_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.instrument_exchange_ = from._impl_.instrument_exchange_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void InstrumentsRequest::CopyFrom(const InstrumentsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.InstrumentsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void InstrumentsRequest::InternalSwap(InstrumentsRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InstrumentsRequest, _impl_.instrument_exchange_)
      + sizeof(InstrumentsRequest::_impl_.instrument_exchange_)
      - PROTOBUF_FIELD_OFFSET(InstrumentsRequest, _impl_.instrument_status_)>(
          reinterpret_cast<char*>(&_impl_.instrument_status_),
          reinterpret_cast<char*>(&other->_impl_.instrument_status_));
}

::google::protobuf::Metadata InstrumentsRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class FilterOptionsRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<FilterOptionsRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(FilterOptionsRequest, _impl_._has_bits_);
};

FilterOptionsRequest::FilterOptionsRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.FilterOptionsRequest)
}
inline PROTOBUF_NDEBUG_INLINE FilterOptionsRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::FilterOptionsRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        basic_asset_uid_(arena, from.basic_asset_uid_),
        basic_asset_position_uid_(arena, from.basic_asset_position_uid_) {}

FilterOptionsRequest::FilterOptionsRequest(
    ::google::protobuf::Arena* arena,
    const FilterOptionsRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  FilterOptionsRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.FilterOptionsRequest)
}
inline PROTOBUF_NDEBUG_INLINE FilterOptionsRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        basic_asset_uid_(arena),
        basic_asset_position_uid_(arena) {}

inline void FilterOptionsRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
FilterOptionsRequest::~FilterOptionsRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.FilterOptionsRequest)
  SharedDtor(*this);
}
inline void FilterOptionsRequest::SharedDtor(MessageLite& self) {
  FilterOptionsRequest& this_ = static_cast<FilterOptionsRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.basic_asset_uid_.Destroy();
  this_._impl_.basic_asset_position_uid_.Destroy();
  this_._impl_.~Impl_();
}

inline void* FilterOptionsRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) FilterOptionsRequest(arena);
}
constexpr auto FilterOptionsRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(FilterOptionsRequest),
                                            alignof(FilterOptionsRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull FilterOptionsRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_FilterOptionsRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &FilterOptionsRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<FilterOptionsRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &FilterOptionsRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<FilterOptionsRequest>(), &FilterOptionsRequest::ByteSizeLong,
            &FilterOptionsRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(FilterOptionsRequest, _impl_._cached_size_),
        false,
    },
    &FilterOptionsRequest::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* FilterOptionsRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 106, 2> FilterOptionsRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(FilterOptionsRequest, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::FilterOptionsRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional string basic_asset_position_uid = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 1, 0, PROTOBUF_FIELD_OFFSET(FilterOptionsRequest, _impl_.basic_asset_position_uid_)}},
    // optional string basic_asset_uid = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(FilterOptionsRequest, _impl_.basic_asset_uid_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string basic_asset_uid = 1;
    {PROTOBUF_FIELD_OFFSET(FilterOptionsRequest, _impl_.basic_asset_uid_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional string basic_asset_position_uid = 2;
    {PROTOBUF_FIELD_OFFSET(FilterOptionsRequest, _impl_.basic_asset_position_uid_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\72\17\30\0\0\0\0\0"
    "tinkoff.public.invest.api.contract.v1.FilterOptionsRequest"
    "basic_asset_uid"
    "basic_asset_position_uid"
  }},
};

PROTOBUF_NOINLINE void FilterOptionsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.FilterOptionsRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _impl_.basic_asset_uid_.ClearNonDefaultToEmpty();
    }
    if (cached_has_bits & 0x00000002u) {
      _impl_.basic_asset_position_uid_.ClearNonDefaultToEmpty();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* FilterOptionsRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const FilterOptionsRequest& this_ = static_cast<const FilterOptionsRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* FilterOptionsRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const FilterOptionsRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.FilterOptionsRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // optional string basic_asset_uid = 1;
          if (cached_has_bits & 0x00000001u) {
            const std::string& _s = this_._internal_basic_asset_uid();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.FilterOptionsRequest.basic_asset_uid");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // optional string basic_asset_position_uid = 2;
          if (cached_has_bits & 0x00000002u) {
            const std::string& _s = this_._internal_basic_asset_position_uid();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.FilterOptionsRequest.basic_asset_position_uid");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.FilterOptionsRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t FilterOptionsRequest::ByteSizeLong(const MessageLite& base) {
          const FilterOptionsRequest& this_ = static_cast<const FilterOptionsRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t FilterOptionsRequest::ByteSizeLong() const {
          const FilterOptionsRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.FilterOptionsRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // optional string basic_asset_uid = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_basic_asset_uid());
            }
            // optional string basic_asset_position_uid = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_basic_asset_position_uid());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void FilterOptionsRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<FilterOptionsRequest*>(&to_msg);
  auto& from = static_cast<const FilterOptionsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.FilterOptionsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_internal_set_basic_asset_uid(from._internal_basic_asset_uid());
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_internal_set_basic_asset_position_uid(from._internal_basic_asset_position_uid());
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FilterOptionsRequest::CopyFrom(const FilterOptionsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.FilterOptionsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void FilterOptionsRequest::InternalSwap(FilterOptionsRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.basic_asset_uid_, &other->_impl_.basic_asset_uid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.basic_asset_position_uid_, &other->_impl_.basic_asset_position_uid_, arena);
}

::google::protobuf::Metadata FilterOptionsRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class BondResponse::_Internal {
 public:
  using HasBits =
      decltype(std::declval<BondResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(BondResponse, _impl_._has_bits_);
};

BondResponse::BondResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.BondResponse)
}
inline PROTOBUF_NDEBUG_INLINE BondResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::BondResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

BondResponse::BondResponse(
    ::google::protobuf::Arena* arena,
    const BondResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  BondResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.instrument_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Bond>(
                              arena, *from._impl_.instrument_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.BondResponse)
}
inline PROTOBUF_NDEBUG_INLINE BondResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void BondResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.instrument_ = {};
}
BondResponse::~BondResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.BondResponse)
  SharedDtor(*this);
}
inline void BondResponse::SharedDtor(MessageLite& self) {
  BondResponse& this_ = static_cast<BondResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.instrument_;
  this_._impl_.~Impl_();
}

inline void* BondResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) BondResponse(arena);
}
constexpr auto BondResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(BondResponse),
                                            alignof(BondResponse));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull BondResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_BondResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &BondResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<BondResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &BondResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<BondResponse>(), &BondResponse::ByteSizeLong,
            &BondResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(BondResponse, _impl_._cached_size_),
        false,
    },
    &BondResponse::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* BondResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> BondResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(BondResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::BondResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .tinkoff.public.invest.api.contract.v1.Bond instrument = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(BondResponse, _impl_.instrument_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .tinkoff.public.invest.api.contract.v1.Bond instrument = 1;
    {PROTOBUF_FIELD_OFFSET(BondResponse, _impl_.instrument_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Bond>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void BondResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.BondResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.instrument_ != nullptr);
    _impl_.instrument_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* BondResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const BondResponse& this_ = static_cast<const BondResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* BondResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const BondResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.BondResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .tinkoff.public.invest.api.contract.v1.Bond instrument = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.instrument_, this_._impl_.instrument_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.BondResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t BondResponse::ByteSizeLong(const MessageLite& base) {
          const BondResponse& this_ = static_cast<const BondResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t BondResponse::ByteSizeLong() const {
          const BondResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.BondResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .tinkoff.public.invest.api.contract.v1.Bond instrument = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.instrument_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void BondResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<BondResponse*>(&to_msg);
  auto& from = static_cast<const BondResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.BondResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.instrument_ != nullptr);
    if (_this->_impl_.instrument_ == nullptr) {
      _this->_impl_.instrument_ =
          ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Bond>(arena, *from._impl_.instrument_);
    } else {
      _this->_impl_.instrument_->MergeFrom(*from._impl_.instrument_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void BondResponse::CopyFrom(const BondResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.BondResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void BondResponse::InternalSwap(BondResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.instrument_, other->_impl_.instrument_);
}

::google::protobuf::Metadata BondResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class BondsResponse::_Internal {
 public:
};

BondsResponse::BondsResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.BondsResponse)
}
inline PROTOBUF_NDEBUG_INLINE BondsResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::BondsResponse& from_msg)
      : instruments_{visibility, arena, from.instruments_},
        _cached_size_{0} {}

BondsResponse::BondsResponse(
    ::google::protobuf::Arena* arena,
    const BondsResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  BondsResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.BondsResponse)
}
inline PROTOBUF_NDEBUG_INLINE BondsResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : instruments_{visibility, arena},
        _cached_size_{0} {}

inline void BondsResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
BondsResponse::~BondsResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.BondsResponse)
  SharedDtor(*this);
}
inline void BondsResponse::SharedDtor(MessageLite& self) {
  BondsResponse& this_ = static_cast<BondsResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* BondsResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) BondsResponse(arena);
}
constexpr auto BondsResponse::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(BondsResponse, _impl_.instruments_) +
          decltype(BondsResponse::_impl_.instruments_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(BondsResponse), alignof(BondsResponse), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&BondsResponse::PlacementNew_,
                                 sizeof(BondsResponse),
                                 alignof(BondsResponse));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull BondsResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_BondsResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &BondsResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<BondsResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &BondsResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<BondsResponse>(), &BondsResponse::ByteSizeLong,
            &BondsResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(BondsResponse, _impl_._cached_size_),
        false,
    },
    &BondsResponse::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* BondsResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> BondsResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::BondsResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .tinkoff.public.invest.api.contract.v1.Bond instruments = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(BondsResponse, _impl_.instruments_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .tinkoff.public.invest.api.contract.v1.Bond instruments = 1;
    {PROTOBUF_FIELD_OFFSET(BondsResponse, _impl_.instruments_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Bond>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void BondsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.BondsResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instruments_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* BondsResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const BondsResponse& this_ = static_cast<const BondsResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* BondsResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const BondsResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.BondsResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .tinkoff.public.invest.api.contract.v1.Bond instruments = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_instruments_size());
               i < n; i++) {
            const auto& repfield = this_._internal_instruments().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.BondsResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t BondsResponse::ByteSizeLong(const MessageLite& base) {
          const BondsResponse& this_ = static_cast<const BondsResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t BondsResponse::ByteSizeLong() const {
          const BondsResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.BondsResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .tinkoff.public.invest.api.contract.v1.Bond instruments = 1;
            {
              total_size += 1UL * this_._internal_instruments_size();
              for (const auto& msg : this_._internal_instruments()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void BondsResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<BondsResponse*>(&to_msg);
  auto& from = static_cast<const BondsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.BondsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_instruments()->MergeFrom(
      from._internal_instruments());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void BondsResponse::CopyFrom(const BondsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.BondsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void BondsResponse::InternalSwap(BondsResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.instruments_.InternalSwap(&other->_impl_.instruments_);
}

::google::protobuf::Metadata BondsResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GetBondCouponsRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GetBondCouponsRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GetBondCouponsRequest, _impl_._has_bits_);
};

void GetBondCouponsRequest::clear_from() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.from_ != nullptr) _impl_.from_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GetBondCouponsRequest::clear_to() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.to_ != nullptr) _impl_.to_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
GetBondCouponsRequest::GetBondCouponsRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.GetBondCouponsRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetBondCouponsRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::GetBondCouponsRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        figi_(arena, from.figi_),
        instrument_id_(arena, from.instrument_id_) {}

GetBondCouponsRequest::GetBondCouponsRequest(
    ::google::protobuf::Arena* arena,
    const GetBondCouponsRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GetBondCouponsRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.from_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.from_)
                        : nullptr;
  _impl_.to_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.to_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.GetBondCouponsRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetBondCouponsRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        figi_(arena),
        instrument_id_(arena) {}

inline void GetBondCouponsRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, from_),
           0,
           offsetof(Impl_, to_) -
               offsetof(Impl_, from_) +
               sizeof(Impl_::to_));
}
GetBondCouponsRequest::~GetBondCouponsRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.GetBondCouponsRequest)
  SharedDtor(*this);
}
inline void GetBondCouponsRequest::SharedDtor(MessageLite& self) {
  GetBondCouponsRequest& this_ = static_cast<GetBondCouponsRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.figi_.Destroy();
  this_._impl_.instrument_id_.Destroy();
  delete this_._impl_.from_;
  delete this_._impl_.to_;
  this_._impl_.~Impl_();
}

inline void* GetBondCouponsRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) GetBondCouponsRequest(arena);
}
constexpr auto GetBondCouponsRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(GetBondCouponsRequest),
                                            alignof(GetBondCouponsRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull GetBondCouponsRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_GetBondCouponsRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &GetBondCouponsRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<GetBondCouponsRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &GetBondCouponsRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<GetBondCouponsRequest>(), &GetBondCouponsRequest::ByteSizeLong,
            &GetBondCouponsRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(GetBondCouponsRequest, _impl_._cached_size_),
        false,
    },
    &GetBondCouponsRequest::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* GetBondCouponsRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 2, 85, 2> GetBondCouponsRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetBondCouponsRequest, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::GetBondCouponsRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string instrument_id = 4 [(.google.api.field_behavior) = REQUIRED];
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(GetBondCouponsRequest, _impl_.instrument_id_)}},
    // string figi = 1 [deprecated = true];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetBondCouponsRequest, _impl_.figi_)}},
    // optional .google.protobuf.Timestamp from = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(GetBondCouponsRequest, _impl_.from_)}},
    // optional .google.protobuf.Timestamp to = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 1, PROTOBUF_FIELD_OFFSET(GetBondCouponsRequest, _impl_.to_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string figi = 1 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(GetBondCouponsRequest, _impl_.figi_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional .google.protobuf.Timestamp from = 2;
    {PROTOBUF_FIELD_OFFSET(GetBondCouponsRequest, _impl_.from_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .google.protobuf.Timestamp to = 3;
    {PROTOBUF_FIELD_OFFSET(GetBondCouponsRequest, _impl_.to_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string instrument_id = 4 [(.google.api.field_behavior) = REQUIRED];
    {PROTOBUF_FIELD_OFFSET(GetBondCouponsRequest, _impl_.instrument_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\73\4\0\0\15\0\0\0"
    "tinkoff.public.invest.api.contract.v1.GetBondCouponsRequest"
    "figi"
    "instrument_id"
  }},
};

PROTOBUF_NOINLINE void GetBondCouponsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.GetBondCouponsRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.figi_.ClearToEmpty();
  _impl_.instrument_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.from_ != nullptr);
      _impl_.from_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.to_ != nullptr);
      _impl_.to_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GetBondCouponsRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GetBondCouponsRequest& this_ = static_cast<const GetBondCouponsRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GetBondCouponsRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GetBondCouponsRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.GetBondCouponsRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string figi = 1 [deprecated = true];
          if (!this_._internal_figi().empty()) {
            const std::string& _s = this_._internal_figi();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.GetBondCouponsRequest.figi");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // optional .google.protobuf.Timestamp from = 2;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.from_, this_._impl_.from_->GetCachedSize(), target,
                stream);
          }

          // optional .google.protobuf.Timestamp to = 3;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.to_, this_._impl_.to_->GetCachedSize(), target,
                stream);
          }

          // string instrument_id = 4 [(.google.api.field_behavior) = REQUIRED];
          if (!this_._internal_instrument_id().empty()) {
            const std::string& _s = this_._internal_instrument_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.GetBondCouponsRequest.instrument_id");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.GetBondCouponsRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GetBondCouponsRequest::ByteSizeLong(const MessageLite& base) {
          const GetBondCouponsRequest& this_ = static_cast<const GetBondCouponsRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GetBondCouponsRequest::ByteSizeLong() const {
          const GetBondCouponsRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.GetBondCouponsRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string figi = 1 [deprecated = true];
            if (!this_._internal_figi().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_figi());
            }
            // string instrument_id = 4 [(.google.api.field_behavior) = REQUIRED];
            if (!this_._internal_instrument_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_instrument_id());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // optional .google.protobuf.Timestamp from = 2;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.from_);
            }
            // optional .google.protobuf.Timestamp to = 3;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.to_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GetBondCouponsRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GetBondCouponsRequest*>(&to_msg);
  auto& from = static_cast<const GetBondCouponsRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.GetBondCouponsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_instrument_id().empty()) {
    _this->_internal_set_instrument_id(from._internal_instrument_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.from_ != nullptr);
      if (_this->_impl_.from_ == nullptr) {
        _this->_impl_.from_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.from_);
      } else {
        _this->_impl_.from_->MergeFrom(*from._impl_.from_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.to_ != nullptr);
      if (_this->_impl_.to_ == nullptr) {
        _this->_impl_.to_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.to_);
      } else {
        _this->_impl_.to_->MergeFrom(*from._impl_.to_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetBondCouponsRequest::CopyFrom(const GetBondCouponsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.GetBondCouponsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GetBondCouponsRequest::InternalSwap(GetBondCouponsRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.figi_, &other->_impl_.figi_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.instrument_id_, &other->_impl_.instrument_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetBondCouponsRequest, _impl_.to_)
      + sizeof(GetBondCouponsRequest::_impl_.to_)
      - PROTOBUF_FIELD_OFFSET(GetBondCouponsRequest, _impl_.from_)>(
          reinterpret_cast<char*>(&_impl_.from_),
          reinterpret_cast<char*>(&other->_impl_.from_));
}

::google::protobuf::Metadata GetBondCouponsRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GetBondCouponsResponse::_Internal {
 public:
};

GetBondCouponsResponse::GetBondCouponsResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.GetBondCouponsResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetBondCouponsResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::GetBondCouponsResponse& from_msg)
      : events_{visibility, arena, from.events_},
        _cached_size_{0} {}

GetBondCouponsResponse::GetBondCouponsResponse(
    ::google::protobuf::Arena* arena,
    const GetBondCouponsResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GetBondCouponsResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.GetBondCouponsResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetBondCouponsResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : events_{visibility, arena},
        _cached_size_{0} {}

inline void GetBondCouponsResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
GetBondCouponsResponse::~GetBondCouponsResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.GetBondCouponsResponse)
  SharedDtor(*this);
}
inline void GetBondCouponsResponse::SharedDtor(MessageLite& self) {
  GetBondCouponsResponse& this_ = static_cast<GetBondCouponsResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* GetBondCouponsResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) GetBondCouponsResponse(arena);
}
constexpr auto GetBondCouponsResponse::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(GetBondCouponsResponse, _impl_.events_) +
          decltype(GetBondCouponsResponse::_impl_.events_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(GetBondCouponsResponse), alignof(GetBondCouponsResponse), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&GetBondCouponsResponse::PlacementNew_,
                                 sizeof(GetBondCouponsResponse),
                                 alignof(GetBondCouponsResponse));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull GetBondCouponsResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_GetBondCouponsResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &GetBondCouponsResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<GetBondCouponsResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &GetBondCouponsResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<GetBondCouponsResponse>(), &GetBondCouponsResponse::ByteSizeLong,
            &GetBondCouponsResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(GetBondCouponsResponse, _impl_._cached_size_),
        false,
    },
    &GetBondCouponsResponse::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* GetBondCouponsResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> GetBondCouponsResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::GetBondCouponsResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .tinkoff.public.invest.api.contract.v1.Coupon events = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetBondCouponsResponse, _impl_.events_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .tinkoff.public.invest.api.contract.v1.Coupon events = 1;
    {PROTOBUF_FIELD_OFFSET(GetBondCouponsResponse, _impl_.events_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Coupon>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void GetBondCouponsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.GetBondCouponsResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.events_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GetBondCouponsResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GetBondCouponsResponse& this_ = static_cast<const GetBondCouponsResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GetBondCouponsResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GetBondCouponsResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.GetBondCouponsResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .tinkoff.public.invest.api.contract.v1.Coupon events = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_events_size());
               i < n; i++) {
            const auto& repfield = this_._internal_events().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.GetBondCouponsResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GetBondCouponsResponse::ByteSizeLong(const MessageLite& base) {
          const GetBondCouponsResponse& this_ = static_cast<const GetBondCouponsResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GetBondCouponsResponse::ByteSizeLong() const {
          const GetBondCouponsResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.GetBondCouponsResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .tinkoff.public.invest.api.contract.v1.Coupon events = 1;
            {
              total_size += 1UL * this_._internal_events_size();
              for (const auto& msg : this_._internal_events()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GetBondCouponsResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GetBondCouponsResponse*>(&to_msg);
  auto& from = static_cast<const GetBondCouponsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.GetBondCouponsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_events()->MergeFrom(
      from._internal_events());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetBondCouponsResponse::CopyFrom(const GetBondCouponsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.GetBondCouponsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GetBondCouponsResponse::InternalSwap(GetBondCouponsResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.events_.InternalSwap(&other->_impl_.events_);
}

::google::protobuf::Metadata GetBondCouponsResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GetBondEventsRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GetBondEventsRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GetBondEventsRequest, _impl_._has_bits_);
};

void GetBondEventsRequest::clear_from() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.from_ != nullptr) _impl_.from_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GetBondEventsRequest::clear_to() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.to_ != nullptr) _impl_.to_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
GetBondEventsRequest::GetBondEventsRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.GetBondEventsRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetBondEventsRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::GetBondEventsRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        instrument_id_(arena, from.instrument_id_) {}

GetBondEventsRequest::GetBondEventsRequest(
    ::google::protobuf::Arena* arena,
    const GetBondEventsRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GetBondEventsRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.from_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.from_)
                        : nullptr;
  _impl_.to_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.to_)
                        : nullptr;
  _impl_.type_ = from._impl_.type_;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.GetBondEventsRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetBondEventsRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        instrument_id_(arena) {}

inline void GetBondEventsRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, from_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, from_) +
               sizeof(Impl_::type_));
}
GetBondEventsRequest::~GetBondEventsRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.GetBondEventsRequest)
  SharedDtor(*this);
}
inline void GetBondEventsRequest::SharedDtor(MessageLite& self) {
  GetBondEventsRequest& this_ = static_cast<GetBondEventsRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.instrument_id_.Destroy();
  delete this_._impl_.from_;
  delete this_._impl_.to_;
  this_._impl_.~Impl_();
}

inline void* GetBondEventsRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) GetBondEventsRequest(arena);
}
constexpr auto GetBondEventsRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(GetBondEventsRequest),
                                            alignof(GetBondEventsRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull GetBondEventsRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_GetBondEventsRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &GetBondEventsRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<GetBondEventsRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &GetBondEventsRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<GetBondEventsRequest>(), &GetBondEventsRequest::ByteSizeLong,
            &GetBondEventsRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(GetBondEventsRequest, _impl_._cached_size_),
        false,
    },
    &GetBondEventsRequest::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* GetBondEventsRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 2, 80, 2> GetBondEventsRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetBondEventsRequest, _impl_._has_bits_),
    0, // no _extensions_
    5, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967265,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::GetBondEventsRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string instrument_id = 4 [(.google.api.field_behavior) = REQUIRED];
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(GetBondEventsRequest, _impl_.instrument_id_)}},
    // .tinkoff.public.invest.api.contract.v1.GetBondEventsRequest.EventType type = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetBondEventsRequest, _impl_.type_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(GetBondEventsRequest, _impl_.type_)}},
    // optional .google.protobuf.Timestamp from = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(GetBondEventsRequest, _impl_.from_)}},
    // optional .google.protobuf.Timestamp to = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 1, PROTOBUF_FIELD_OFFSET(GetBondEventsRequest, _impl_.to_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .google.protobuf.Timestamp from = 2;
    {PROTOBUF_FIELD_OFFSET(GetBondEventsRequest, _impl_.from_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .google.protobuf.Timestamp to = 3;
    {PROTOBUF_FIELD_OFFSET(GetBondEventsRequest, _impl_.to_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string instrument_id = 4 [(.google.api.field_behavior) = REQUIRED];
    {PROTOBUF_FIELD_OFFSET(GetBondEventsRequest, _impl_.instrument_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public.invest.api.contract.v1.GetBondEventsRequest.EventType type = 5;
    {PROTOBUF_FIELD_OFFSET(GetBondEventsRequest, _impl_.type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\72\0\0\15\0\0\0\0"
    "tinkoff.public.invest.api.contract.v1.GetBondEventsRequest"
    "instrument_id"
  }},
};

PROTOBUF_NOINLINE void GetBondEventsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.GetBondEventsRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instrument_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.from_ != nullptr);
      _impl_.from_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.to_ != nullptr);
      _impl_.to_->Clear();
    }
  }
  _impl_.type_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GetBondEventsRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GetBondEventsRequest& this_ = static_cast<const GetBondEventsRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GetBondEventsRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GetBondEventsRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.GetBondEventsRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // optional .google.protobuf.Timestamp from = 2;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.from_, this_._impl_.from_->GetCachedSize(), target,
                stream);
          }

          // optional .google.protobuf.Timestamp to = 3;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.to_, this_._impl_.to_->GetCachedSize(), target,
                stream);
          }

          // string instrument_id = 4 [(.google.api.field_behavior) = REQUIRED];
          if (!this_._internal_instrument_id().empty()) {
            const std::string& _s = this_._internal_instrument_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.GetBondEventsRequest.instrument_id");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          // .tinkoff.public.invest.api.contract.v1.GetBondEventsRequest.EventType type = 5;
          if (this_._internal_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                5, this_._internal_type(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.GetBondEventsRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GetBondEventsRequest::ByteSizeLong(const MessageLite& base) {
          const GetBondEventsRequest& this_ = static_cast<const GetBondEventsRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GetBondEventsRequest::ByteSizeLong() const {
          const GetBondEventsRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.GetBondEventsRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string instrument_id = 4 [(.google.api.field_behavior) = REQUIRED];
            if (!this_._internal_instrument_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_instrument_id());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // optional .google.protobuf.Timestamp from = 2;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.from_);
            }
            // optional .google.protobuf.Timestamp to = 3;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.to_);
            }
          }
           {
            // .tinkoff.public.invest.api.contract.v1.GetBondEventsRequest.EventType type = 5;
            if (this_._internal_type() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_type());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GetBondEventsRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GetBondEventsRequest*>(&to_msg);
  auto& from = static_cast<const GetBondEventsRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.GetBondEventsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_instrument_id().empty()) {
    _this->_internal_set_instrument_id(from._internal_instrument_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.from_ != nullptr);
      if (_this->_impl_.from_ == nullptr) {
        _this->_impl_.from_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.from_);
      } else {
        _this->_impl_.from_->MergeFrom(*from._impl_.from_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.to_ != nullptr);
      if (_this->_impl_.to_ == nullptr) {
        _this->_impl_.to_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.to_);
      } else {
        _this->_impl_.to_->MergeFrom(*from._impl_.to_);
      }
    }
  }
  if (from._internal_type() != 0) {
    _this->_impl_.type_ = from._impl_.type_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetBondEventsRequest::CopyFrom(const GetBondEventsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.GetBondEventsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GetBondEventsRequest::InternalSwap(GetBondEventsRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.instrument_id_, &other->_impl_.instrument_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetBondEventsRequest, _impl_.type_)
      + sizeof(GetBondEventsRequest::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(GetBondEventsRequest, _impl_.from_)>(
          reinterpret_cast<char*>(&_impl_.from_),
          reinterpret_cast<char*>(&other->_impl_.from_));
}

::google::protobuf::Metadata GetBondEventsRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GetBondEventsResponse_BondEvent::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GetBondEventsResponse_BondEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_._has_bits_);
};

void GetBondEventsResponse_BondEvent::clear_event_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.event_date_ != nullptr) _impl_.event_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GetBondEventsResponse_BondEvent::clear_event_total_vol() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.event_total_vol_ != nullptr) _impl_.event_total_vol_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void GetBondEventsResponse_BondEvent::clear_fix_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.fix_date_ != nullptr) _impl_.fix_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void GetBondEventsResponse_BondEvent::clear_rate_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.rate_date_ != nullptr) _impl_.rate_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void GetBondEventsResponse_BondEvent::clear_default_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.default_date_ != nullptr) _impl_.default_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void GetBondEventsResponse_BondEvent::clear_real_pay_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.real_pay_date_ != nullptr) _impl_.real_pay_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void GetBondEventsResponse_BondEvent::clear_pay_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pay_date_ != nullptr) _impl_.pay_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void GetBondEventsResponse_BondEvent::clear_pay_one_bond() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pay_one_bond_ != nullptr) _impl_.pay_one_bond_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void GetBondEventsResponse_BondEvent::clear_money_flow_val() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.money_flow_val_ != nullptr) _impl_.money_flow_val_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void GetBondEventsResponse_BondEvent::clear_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.value_ != nullptr) _impl_.value_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void GetBondEventsResponse_BondEvent::clear_coupon_start_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.coupon_start_date_ != nullptr) _impl_.coupon_start_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
void GetBondEventsResponse_BondEvent::clear_coupon_end_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.coupon_end_date_ != nullptr) _impl_.coupon_end_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
void GetBondEventsResponse_BondEvent::clear_coupon_interest_rate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.coupon_interest_rate_ != nullptr) _impl_.coupon_interest_rate_->Clear();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
GetBondEventsResponse_BondEvent::GetBondEventsResponse_BondEvent(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.GetBondEventsResponse.BondEvent)
}
inline PROTOBUF_NDEBUG_INLINE GetBondEventsResponse_BondEvent::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        instrument_id_(arena, from.instrument_id_),
        execution_(arena, from.execution_),
        operation_type_(arena, from.operation_type_),
        note_(arena, from.note_),
        convert_to_fin_tool_id_(arena, from.convert_to_fin_tool_id_) {}

GetBondEventsResponse_BondEvent::GetBondEventsResponse_BondEvent(
    ::google::protobuf::Arena* arena,
    const GetBondEventsResponse_BondEvent& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GetBondEventsResponse_BondEvent* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.event_date_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.event_date_)
                        : nullptr;
  _impl_.event_total_vol_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.event_total_vol_)
                        : nullptr;
  _impl_.fix_date_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.fix_date_)
                        : nullptr;
  _impl_.rate_date_ = (cached_has_bits & 0x00000008u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.rate_date_)
                        : nullptr;
  _impl_.default_date_ = (cached_has_bits & 0x00000010u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.default_date_)
                        : nullptr;
  _impl_.real_pay_date_ = (cached_has_bits & 0x00000020u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.real_pay_date_)
                        : nullptr;
  _impl_.pay_date_ = (cached_has_bits & 0x00000040u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.pay_date_)
                        : nullptr;
  _impl_.pay_one_bond_ = (cached_has_bits & 0x00000080u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(
                              arena, *from._impl_.pay_one_bond_)
                        : nullptr;
  _impl_.money_flow_val_ = (cached_has_bits & 0x00000100u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(
                              arena, *from._impl_.money_flow_val_)
                        : nullptr;
  _impl_.value_ = (cached_has_bits & 0x00000200u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.value_)
                        : nullptr;
  _impl_.coupon_start_date_ = (cached_has_bits & 0x00000400u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.coupon_start_date_)
                        : nullptr;
  _impl_.coupon_end_date_ = (cached_has_bits & 0x00000800u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.coupon_end_date_)
                        : nullptr;
  _impl_.coupon_interest_rate_ = (cached_has_bits & 0x00001000u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.coupon_interest_rate_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, event_number_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, event_number_),
           offsetof(Impl_, coupon_period_) -
               offsetof(Impl_, event_number_) +
               sizeof(Impl_::coupon_period_));

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.GetBondEventsResponse.BondEvent)
}
inline PROTOBUF_NDEBUG_INLINE GetBondEventsResponse_BondEvent::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        instrument_id_(arena),
        execution_(arena),
        operation_type_(arena),
        note_(arena),
        convert_to_fin_tool_id_(arena) {}

inline void GetBondEventsResponse_BondEvent::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, event_date_),
           0,
           offsetof(Impl_, coupon_period_) -
               offsetof(Impl_, event_date_) +
               sizeof(Impl_::coupon_period_));
}
GetBondEventsResponse_BondEvent::~GetBondEventsResponse_BondEvent() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.GetBondEventsResponse.BondEvent)
  SharedDtor(*this);
}
inline void GetBondEventsResponse_BondEvent::SharedDtor(MessageLite& self) {
  GetBondEventsResponse_BondEvent& this_ = static_cast<GetBondEventsResponse_BondEvent&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.instrument_id_.Destroy();
  this_._impl_.execution_.Destroy();
  this_._impl_.operation_type_.Destroy();
  this_._impl_.note_.Destroy();
  this_._impl_.convert_to_fin_tool_id_.Destroy();
  delete this_._impl_.event_date_;
  delete this_._impl_.event_total_vol_;
  delete this_._impl_.fix_date_;
  delete this_._impl_.rate_date_;
  delete this_._impl_.default_date_;
  delete this_._impl_.real_pay_date_;
  delete this_._impl_.pay_date_;
  delete this_._impl_.pay_one_bond_;
  delete this_._impl_.money_flow_val_;
  delete this_._impl_.value_;
  delete this_._impl_.coupon_start_date_;
  delete this_._impl_.coupon_end_date_;
  delete this_._impl_.coupon_interest_rate_;
  this_._impl_.~Impl_();
}

inline void* GetBondEventsResponse_BondEvent::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) GetBondEventsResponse_BondEvent(arena);
}
constexpr auto GetBondEventsResponse_BondEvent::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(GetBondEventsResponse_BondEvent),
                                            alignof(GetBondEventsResponse_BondEvent));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull GetBondEventsResponse_BondEvent::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_GetBondEventsResponse_BondEvent_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &GetBondEventsResponse_BondEvent::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<GetBondEventsResponse_BondEvent>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &GetBondEventsResponse_BondEvent::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<GetBondEventsResponse_BondEvent>(), &GetBondEventsResponse_BondEvent::ByteSizeLong,
            &GetBondEventsResponse_BondEvent::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_._cached_size_),
        false,
    },
    &GetBondEventsResponse_BondEvent::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* GetBondEventsResponse_BondEvent::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 21, 13, 156, 2> GetBondEventsResponse_BondEvent::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_._has_bits_),
    0, // no _extensions_
    22, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4290772993,  // skipmap
    offsetof(decltype(_table_), field_entries),
    21,  // num_field_entries
    13,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // string instrument_id = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.instrument_id_)}},
    // int32 event_number = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetBondEventsResponse_BondEvent, _impl_.event_number_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.event_number_)}},
    // .google.protobuf.Timestamp event_date = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 0, 0, PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.event_date_)}},
    // .tinkoff.public.invest.api.contract.v1.GetBondEventsRequest.EventType event_type = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetBondEventsResponse_BondEvent, _impl_.event_type_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.event_type_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation event_total_vol = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 1, 1, PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.event_total_vol_)}},
    // .google.protobuf.Timestamp fix_date = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 2, 2, PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.fix_date_)}},
    // .google.protobuf.Timestamp rate_date = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 3, 3, PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.rate_date_)}},
    // .google.protobuf.Timestamp default_date = 9;
    {::_pbi::TcParser::FastMtS1,
     {74, 4, 4, PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.default_date_)}},
    // .google.protobuf.Timestamp real_pay_date = 10;
    {::_pbi::TcParser::FastMtS1,
     {82, 5, 5, PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.real_pay_date_)}},
    // .google.protobuf.Timestamp pay_date = 11;
    {::_pbi::TcParser::FastMtS1,
     {90, 6, 6, PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.pay_date_)}},
    // .tinkoff.public.invest.api.contract.v1.MoneyValue pay_one_bond = 12;
    {::_pbi::TcParser::FastMtS1,
     {98, 7, 7, PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.pay_one_bond_)}},
    // .tinkoff.public.invest.api.contract.v1.MoneyValue money_flow_val = 13;
    {::_pbi::TcParser::FastMtS1,
     {106, 8, 8, PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.money_flow_val_)}},
    // string execution = 14;
    {::_pbi::TcParser::FastUS1,
     {114, 63, 0, PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.execution_)}},
    // string operation_type = 15;
    {::_pbi::TcParser::FastUS1,
     {122, 63, 0, PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.operation_type_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation value = 16;
    {::_pbi::TcParser::FastMtS2,
     {386, 9, 9, PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.value_)}},
    // string note = 17;
    {::_pbi::TcParser::FastUS2,
     {394, 63, 0, PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.note_)}},
    // string convert_to_fin_tool_id = 18;
    {::_pbi::TcParser::FastUS2,
     {402, 63, 0, PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.convert_to_fin_tool_id_)}},
    // .google.protobuf.Timestamp coupon_start_date = 19;
    {::_pbi::TcParser::FastMtS2,
     {410, 10, 10, PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.coupon_start_date_)}},
    // .google.protobuf.Timestamp coupon_end_date = 20;
    {::_pbi::TcParser::FastMtS2,
     {418, 11, 11, PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.coupon_end_date_)}},
    // int32 coupon_period = 21;
    {::_pbi::TcParser::FastV32S2,
     {424, 63, 0, PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.coupon_period_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation coupon_interest_rate = 22;
    {::_pbi::TcParser::FastMtS2,
     {434, 12, 12, PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.coupon_interest_rate_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string instrument_id = 2;
    {PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.instrument_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 event_number = 3;
    {PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.event_number_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .google.protobuf.Timestamp event_date = 4;
    {PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.event_date_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.GetBondEventsRequest.EventType event_type = 5;
    {PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.event_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .tinkoff.public.invest.api.contract.v1.Quotation event_total_vol = 6;
    {PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.event_total_vol_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp fix_date = 7;
    {PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.fix_date_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp rate_date = 8;
    {PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.rate_date_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp default_date = 9;
    {PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.default_date_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp real_pay_date = 10;
    {PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.real_pay_date_), _Internal::kHasBitsOffset + 5, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp pay_date = 11;
    {PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.pay_date_), _Internal::kHasBitsOffset + 6, 6,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.MoneyValue pay_one_bond = 12;
    {PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.pay_one_bond_), _Internal::kHasBitsOffset + 7, 7,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.MoneyValue money_flow_val = 13;
    {PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.money_flow_val_), _Internal::kHasBitsOffset + 8, 8,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string execution = 14;
    {PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.execution_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string operation_type = 15;
    {PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.operation_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public.invest.api.contract.v1.Quotation value = 16;
    {PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.value_), _Internal::kHasBitsOffset + 9, 9,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string note = 17;
    {PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.note_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string convert_to_fin_tool_id = 18;
    {PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.convert_to_fin_tool_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Timestamp coupon_start_date = 19;
    {PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.coupon_start_date_), _Internal::kHasBitsOffset + 10, 10,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp coupon_end_date = 20;
    {PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.coupon_end_date_), _Internal::kHasBitsOffset + 11, 11,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 coupon_period = 21;
    {PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.coupon_period_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .tinkoff.public.invest.api.contract.v1.Quotation coupon_interest_rate = 22;
    {PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.coupon_interest_rate_), _Internal::kHasBitsOffset + 12, 12,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::MoneyValue>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::MoneyValue>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
  }}, {{
    "\105\15\0\0\0\0\0\0\0\0\0\0\0\11\16\0\4\26\0\0\0\0\0\0"
    "tinkoff.public.invest.api.contract.v1.GetBondEventsResponse.BondEvent"
    "instrument_id"
    "execution"
    "operation_type"
    "note"
    "convert_to_fin_tool_id"
  }},
};

PROTOBUF_NOINLINE void GetBondEventsResponse_BondEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.GetBondEventsResponse.BondEvent)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instrument_id_.ClearToEmpty();
  _impl_.execution_.ClearToEmpty();
  _impl_.operation_type_.ClearToEmpty();
  _impl_.note_.ClearToEmpty();
  _impl_.convert_to_fin_tool_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.event_date_ != nullptr);
      _impl_.event_date_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.event_total_vol_ != nullptr);
      _impl_.event_total_vol_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.fix_date_ != nullptr);
      _impl_.fix_date_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.rate_date_ != nullptr);
      _impl_.rate_date_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.default_date_ != nullptr);
      _impl_.default_date_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.real_pay_date_ != nullptr);
      _impl_.real_pay_date_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(_impl_.pay_date_ != nullptr);
      _impl_.pay_date_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      ABSL_DCHECK(_impl_.pay_one_bond_ != nullptr);
      _impl_.pay_one_bond_->Clear();
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      ABSL_DCHECK(_impl_.money_flow_val_ != nullptr);
      _impl_.money_flow_val_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      ABSL_DCHECK(_impl_.value_ != nullptr);
      _impl_.value_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      ABSL_DCHECK(_impl_.coupon_start_date_ != nullptr);
      _impl_.coupon_start_date_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      ABSL_DCHECK(_impl_.coupon_end_date_ != nullptr);
      _impl_.coupon_end_date_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      ABSL_DCHECK(_impl_.coupon_interest_rate_ != nullptr);
      _impl_.coupon_interest_rate_->Clear();
    }
  }
  ::memset(&_impl_.event_number_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.coupon_period_) -
      reinterpret_cast<char*>(&_impl_.event_number_)) + sizeof(_impl_.coupon_period_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GetBondEventsResponse_BondEvent::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GetBondEventsResponse_BondEvent& this_ = static_cast<const GetBondEventsResponse_BondEvent&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GetBondEventsResponse_BondEvent::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GetBondEventsResponse_BondEvent& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.GetBondEventsResponse.BondEvent)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string instrument_id = 2;
          if (!this_._internal_instrument_id().empty()) {
            const std::string& _s = this_._internal_instrument_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.GetBondEventsResponse.BondEvent.instrument_id");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // int32 event_number = 3;
          if (this_._internal_event_number() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<3>(
                    stream, this_._internal_event_number(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .google.protobuf.Timestamp event_date = 4;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                4, *this_._impl_.event_date_, this_._impl_.event_date_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.GetBondEventsRequest.EventType event_type = 5;
          if (this_._internal_event_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                5, this_._internal_event_type(), target);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation event_total_vol = 6;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                6, *this_._impl_.event_total_vol_, this_._impl_.event_total_vol_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Timestamp fix_date = 7;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                7, *this_._impl_.fix_date_, this_._impl_.fix_date_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Timestamp rate_date = 8;
          if (cached_has_bits & 0x00000008u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                8, *this_._impl_.rate_date_, this_._impl_.rate_date_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Timestamp default_date = 9;
          if (cached_has_bits & 0x00000010u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                9, *this_._impl_.default_date_, this_._impl_.default_date_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Timestamp real_pay_date = 10;
          if (cached_has_bits & 0x00000020u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                10, *this_._impl_.real_pay_date_, this_._impl_.real_pay_date_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Timestamp pay_date = 11;
          if (cached_has_bits & 0x00000040u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                11, *this_._impl_.pay_date_, this_._impl_.pay_date_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.MoneyValue pay_one_bond = 12;
          if (cached_has_bits & 0x00000080u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                12, *this_._impl_.pay_one_bond_, this_._impl_.pay_one_bond_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.MoneyValue money_flow_val = 13;
          if (cached_has_bits & 0x00000100u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                13, *this_._impl_.money_flow_val_, this_._impl_.money_flow_val_->GetCachedSize(), target,
                stream);
          }

          // string execution = 14;
          if (!this_._internal_execution().empty()) {
            const std::string& _s = this_._internal_execution();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.GetBondEventsResponse.BondEvent.execution");
            target = stream->WriteStringMaybeAliased(14, _s, target);
          }

          // string operation_type = 15;
          if (!this_._internal_operation_type().empty()) {
            const std::string& _s = this_._internal_operation_type();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.GetBondEventsResponse.BondEvent.operation_type");
            target = stream->WriteStringMaybeAliased(15, _s, target);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation value = 16;
          if (cached_has_bits & 0x00000200u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                16, *this_._impl_.value_, this_._impl_.value_->GetCachedSize(), target,
                stream);
          }

          // string note = 17;
          if (!this_._internal_note().empty()) {
            const std::string& _s = this_._internal_note();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.GetBondEventsResponse.BondEvent.note");
            target = stream->WriteStringMaybeAliased(17, _s, target);
          }

          // string convert_to_fin_tool_id = 18;
          if (!this_._internal_convert_to_fin_tool_id().empty()) {
            const std::string& _s = this_._internal_convert_to_fin_tool_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.GetBondEventsResponse.BondEvent.convert_to_fin_tool_id");
            target = stream->WriteStringMaybeAliased(18, _s, target);
          }

          // .google.protobuf.Timestamp coupon_start_date = 19;
          if (cached_has_bits & 0x00000400u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                19, *this_._impl_.coupon_start_date_, this_._impl_.coupon_start_date_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Timestamp coupon_end_date = 20;
          if (cached_has_bits & 0x00000800u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                20, *this_._impl_.coupon_end_date_, this_._impl_.coupon_end_date_->GetCachedSize(), target,
                stream);
          }

          // int32 coupon_period = 21;
          if (this_._internal_coupon_period() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                21, this_._internal_coupon_period(), target);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation coupon_interest_rate = 22;
          if (cached_has_bits & 0x00001000u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                22, *this_._impl_.coupon_interest_rate_, this_._impl_.coupon_interest_rate_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.GetBondEventsResponse.BondEvent)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GetBondEventsResponse_BondEvent::ByteSizeLong(const MessageLite& base) {
          const GetBondEventsResponse_BondEvent& this_ = static_cast<const GetBondEventsResponse_BondEvent&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GetBondEventsResponse_BondEvent::ByteSizeLong() const {
          const GetBondEventsResponse_BondEvent& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.GetBondEventsResponse.BondEvent)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string instrument_id = 2;
            if (!this_._internal_instrument_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_instrument_id());
            }
            // string execution = 14;
            if (!this_._internal_execution().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_execution());
            }
            // string operation_type = 15;
            if (!this_._internal_operation_type().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_operation_type());
            }
            // string note = 17;
            if (!this_._internal_note().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_note());
            }
            // string convert_to_fin_tool_id = 18;
            if (!this_._internal_convert_to_fin_tool_id().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_convert_to_fin_tool_id());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x000000ffu) {
            // .google.protobuf.Timestamp event_date = 4;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.event_date_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation event_total_vol = 6;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.event_total_vol_);
            }
            // .google.protobuf.Timestamp fix_date = 7;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.fix_date_);
            }
            // .google.protobuf.Timestamp rate_date = 8;
            if (cached_has_bits & 0x00000008u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.rate_date_);
            }
            // .google.protobuf.Timestamp default_date = 9;
            if (cached_has_bits & 0x00000010u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.default_date_);
            }
            // .google.protobuf.Timestamp real_pay_date = 10;
            if (cached_has_bits & 0x00000020u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.real_pay_date_);
            }
            // .google.protobuf.Timestamp pay_date = 11;
            if (cached_has_bits & 0x00000040u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.pay_date_);
            }
            // .tinkoff.public.invest.api.contract.v1.MoneyValue pay_one_bond = 12;
            if (cached_has_bits & 0x00000080u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.pay_one_bond_);
            }
          }
          if (cached_has_bits & 0x00001f00u) {
            // .tinkoff.public.invest.api.contract.v1.MoneyValue money_flow_val = 13;
            if (cached_has_bits & 0x00000100u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.money_flow_val_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation value = 16;
            if (cached_has_bits & 0x00000200u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.value_);
            }
            // .google.protobuf.Timestamp coupon_start_date = 19;
            if (cached_has_bits & 0x00000400u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.coupon_start_date_);
            }
            // .google.protobuf.Timestamp coupon_end_date = 20;
            if (cached_has_bits & 0x00000800u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.coupon_end_date_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation coupon_interest_rate = 22;
            if (cached_has_bits & 0x00001000u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.coupon_interest_rate_);
            }
          }
           {
            // int32 event_number = 3;
            if (this_._internal_event_number() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_event_number());
            }
            // .tinkoff.public.invest.api.contract.v1.GetBondEventsRequest.EventType event_type = 5;
            if (this_._internal_event_type() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_event_type());
            }
            // int32 coupon_period = 21;
            if (this_._internal_coupon_period() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_coupon_period());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GetBondEventsResponse_BondEvent::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GetBondEventsResponse_BondEvent*>(&to_msg);
  auto& from = static_cast<const GetBondEventsResponse_BondEvent&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.GetBondEventsResponse.BondEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_instrument_id().empty()) {
    _this->_internal_set_instrument_id(from._internal_instrument_id());
  }
  if (!from._internal_execution().empty()) {
    _this->_internal_set_execution(from._internal_execution());
  }
  if (!from._internal_operation_type().empty()) {
    _this->_internal_set_operation_type(from._internal_operation_type());
  }
  if (!from._internal_note().empty()) {
    _this->_internal_set_note(from._internal_note());
  }
  if (!from._internal_convert_to_fin_tool_id().empty()) {
    _this->_internal_set_convert_to_fin_tool_id(from._internal_convert_to_fin_tool_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.event_date_ != nullptr);
      if (_this->_impl_.event_date_ == nullptr) {
        _this->_impl_.event_date_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.event_date_);
      } else {
        _this->_impl_.event_date_->MergeFrom(*from._impl_.event_date_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.event_total_vol_ != nullptr);
      if (_this->_impl_.event_total_vol_ == nullptr) {
        _this->_impl_.event_total_vol_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.event_total_vol_);
      } else {
        _this->_impl_.event_total_vol_->MergeFrom(*from._impl_.event_total_vol_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.fix_date_ != nullptr);
      if (_this->_impl_.fix_date_ == nullptr) {
        _this->_impl_.fix_date_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.fix_date_);
      } else {
        _this->_impl_.fix_date_->MergeFrom(*from._impl_.fix_date_);
      }
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(from._impl_.rate_date_ != nullptr);
      if (_this->_impl_.rate_date_ == nullptr) {
        _this->_impl_.rate_date_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.rate_date_);
      } else {
        _this->_impl_.rate_date_->MergeFrom(*from._impl_.rate_date_);
      }
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(from._impl_.default_date_ != nullptr);
      if (_this->_impl_.default_date_ == nullptr) {
        _this->_impl_.default_date_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.default_date_);
      } else {
        _this->_impl_.default_date_->MergeFrom(*from._impl_.default_date_);
      }
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(from._impl_.real_pay_date_ != nullptr);
      if (_this->_impl_.real_pay_date_ == nullptr) {
        _this->_impl_.real_pay_date_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.real_pay_date_);
      } else {
        _this->_impl_.real_pay_date_->MergeFrom(*from._impl_.real_pay_date_);
      }
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(from._impl_.pay_date_ != nullptr);
      if (_this->_impl_.pay_date_ == nullptr) {
        _this->_impl_.pay_date_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.pay_date_);
      } else {
        _this->_impl_.pay_date_->MergeFrom(*from._impl_.pay_date_);
      }
    }
    if (cached_has_bits & 0x00000080u) {
      ABSL_DCHECK(from._impl_.pay_one_bond_ != nullptr);
      if (_this->_impl_.pay_one_bond_ == nullptr) {
        _this->_impl_.pay_one_bond_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(arena, *from._impl_.pay_one_bond_);
      } else {
        _this->_impl_.pay_one_bond_->MergeFrom(*from._impl_.pay_one_bond_);
      }
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      ABSL_DCHECK(from._impl_.money_flow_val_ != nullptr);
      if (_this->_impl_.money_flow_val_ == nullptr) {
        _this->_impl_.money_flow_val_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(arena, *from._impl_.money_flow_val_);
      } else {
        _this->_impl_.money_flow_val_->MergeFrom(*from._impl_.money_flow_val_);
      }
    }
    if (cached_has_bits & 0x00000200u) {
      ABSL_DCHECK(from._impl_.value_ != nullptr);
      if (_this->_impl_.value_ == nullptr) {
        _this->_impl_.value_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.value_);
      } else {
        _this->_impl_.value_->MergeFrom(*from._impl_.value_);
      }
    }
    if (cached_has_bits & 0x00000400u) {
      ABSL_DCHECK(from._impl_.coupon_start_date_ != nullptr);
      if (_this->_impl_.coupon_start_date_ == nullptr) {
        _this->_impl_.coupon_start_date_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.coupon_start_date_);
      } else {
        _this->_impl_.coupon_start_date_->MergeFrom(*from._impl_.coupon_start_date_);
      }
    }
    if (cached_has_bits & 0x00000800u) {
      ABSL_DCHECK(from._impl_.coupon_end_date_ != nullptr);
      if (_this->_impl_.coupon_end_date_ == nullptr) {
        _this->_impl_.coupon_end_date_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.coupon_end_date_);
      } else {
        _this->_impl_.coupon_end_date_->MergeFrom(*from._impl_.coupon_end_date_);
      }
    }
    if (cached_has_bits & 0x00001000u) {
      ABSL_DCHECK(from._impl_.coupon_interest_rate_ != nullptr);
      if (_this->_impl_.coupon_interest_rate_ == nullptr) {
        _this->_impl_.coupon_interest_rate_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.coupon_interest_rate_);
      } else {
        _this->_impl_.coupon_interest_rate_->MergeFrom(*from._impl_.coupon_interest_rate_);
      }
    }
  }
  if (from._internal_event_number() != 0) {
    _this->_impl_.event_number_ = from._impl_.event_number_;
  }
  if (from._internal_event_type() != 0) {
    _this->_impl_.event_type_ = from._impl_.event_type_;
  }
  if (from._internal_coupon_period() != 0) {
    _this->_impl_.coupon_period_ = from._impl_.coupon_period_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetBondEventsResponse_BondEvent::CopyFrom(const GetBondEventsResponse_BondEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.GetBondEventsResponse.BondEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GetBondEventsResponse_BondEvent::InternalSwap(GetBondEventsResponse_BondEvent* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.instrument_id_, &other->_impl_.instrument_id_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.execution_, &other->_impl_.execution_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.operation_type_, &other->_impl_.operation_type_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.note_, &other->_impl_.note_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.convert_to_fin_tool_id_, &other->_impl_.convert_to_fin_tool_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.coupon_period_)
      + sizeof(GetBondEventsResponse_BondEvent::_impl_.coupon_period_)
      - PROTOBUF_FIELD_OFFSET(GetBondEventsResponse_BondEvent, _impl_.event_date_)>(
          reinterpret_cast<char*>(&_impl_.event_date_),
          reinterpret_cast<char*>(&other->_impl_.event_date_));
}

::google::protobuf::Metadata GetBondEventsResponse_BondEvent::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GetBondEventsResponse::_Internal {
 public:
};

GetBondEventsResponse::GetBondEventsResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.GetBondEventsResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetBondEventsResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse& from_msg)
      : events_{visibility, arena, from.events_},
        _cached_size_{0} {}

GetBondEventsResponse::GetBondEventsResponse(
    ::google::protobuf::Arena* arena,
    const GetBondEventsResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GetBondEventsResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.GetBondEventsResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetBondEventsResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : events_{visibility, arena},
        _cached_size_{0} {}

inline void GetBondEventsResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
GetBondEventsResponse::~GetBondEventsResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.GetBondEventsResponse)
  SharedDtor(*this);
}
inline void GetBondEventsResponse::SharedDtor(MessageLite& self) {
  GetBondEventsResponse& this_ = static_cast<GetBondEventsResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* GetBondEventsResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) GetBondEventsResponse(arena);
}
constexpr auto GetBondEventsResponse::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(GetBondEventsResponse, _impl_.events_) +
          decltype(GetBondEventsResponse::_impl_.events_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(GetBondEventsResponse), alignof(GetBondEventsResponse), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&GetBondEventsResponse::PlacementNew_,
                                 sizeof(GetBondEventsResponse),
                                 alignof(GetBondEventsResponse));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull GetBondEventsResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_GetBondEventsResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &GetBondEventsResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<GetBondEventsResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &GetBondEventsResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<GetBondEventsResponse>(), &GetBondEventsResponse::ByteSizeLong,
            &GetBondEventsResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(GetBondEventsResponse, _impl_._cached_size_),
        false,
    },
    &GetBondEventsResponse::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* GetBondEventsResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> GetBondEventsResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .tinkoff.public.invest.api.contract.v1.GetBondEventsResponse.BondEvent events = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetBondEventsResponse, _impl_.events_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .tinkoff.public.invest.api.contract.v1.GetBondEventsResponse.BondEvent events = 1;
    {PROTOBUF_FIELD_OFFSET(GetBondEventsResponse, _impl_.events_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::GetBondEventsResponse_BondEvent>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void GetBondEventsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.GetBondEventsResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.events_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GetBondEventsResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GetBondEventsResponse& this_ = static_cast<const GetBondEventsResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GetBondEventsResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GetBondEventsResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.GetBondEventsResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .tinkoff.public.invest.api.contract.v1.GetBondEventsResponse.BondEvent events = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_events_size());
               i < n; i++) {
            const auto& repfield = this_._internal_events().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.GetBondEventsResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GetBondEventsResponse::ByteSizeLong(const MessageLite& base) {
          const GetBondEventsResponse& this_ = static_cast<const GetBondEventsResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GetBondEventsResponse::ByteSizeLong() const {
          const GetBondEventsResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.GetBondEventsResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .tinkoff.public.invest.api.contract.v1.GetBondEventsResponse.BondEvent events = 1;
            {
              total_size += 1UL * this_._internal_events_size();
              for (const auto& msg : this_._internal_events()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GetBondEventsResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GetBondEventsResponse*>(&to_msg);
  auto& from = static_cast<const GetBondEventsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.GetBondEventsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_events()->MergeFrom(
      from._internal_events());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetBondEventsResponse::CopyFrom(const GetBondEventsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.GetBondEventsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GetBondEventsResponse::InternalSwap(GetBondEventsResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.events_.InternalSwap(&other->_impl_.events_);
}

::google::protobuf::Metadata GetBondEventsResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Coupon::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Coupon>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Coupon, _impl_._has_bits_);
};

void Coupon::clear_coupon_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.coupon_date_ != nullptr) _impl_.coupon_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Coupon::clear_fix_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.fix_date_ != nullptr) _impl_.fix_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void Coupon::clear_pay_one_bond() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.pay_one_bond_ != nullptr) _impl_.pay_one_bond_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void Coupon::clear_coupon_start_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.coupon_start_date_ != nullptr) _impl_.coupon_start_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void Coupon::clear_coupon_end_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.coupon_end_date_ != nullptr) _impl_.coupon_end_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
Coupon::Coupon(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.Coupon)
}
inline PROTOBUF_NDEBUG_INLINE Coupon::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::Coupon& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        figi_(arena, from.figi_) {}

Coupon::Coupon(
    ::google::protobuf::Arena* arena,
    const Coupon& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Coupon* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.coupon_date_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.coupon_date_)
                        : nullptr;
  _impl_.fix_date_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.fix_date_)
                        : nullptr;
  _impl_.pay_one_bond_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(
                              arena, *from._impl_.pay_one_bond_)
                        : nullptr;
  _impl_.coupon_start_date_ = (cached_has_bits & 0x00000008u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.coupon_start_date_)
                        : nullptr;
  _impl_.coupon_end_date_ = (cached_has_bits & 0x00000010u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.coupon_end_date_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, coupon_number_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, coupon_number_),
           offsetof(Impl_, coupon_period_) -
               offsetof(Impl_, coupon_number_) +
               sizeof(Impl_::coupon_period_));

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.Coupon)
}
inline PROTOBUF_NDEBUG_INLINE Coupon::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        figi_(arena) {}

inline void Coupon::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, coupon_date_),
           0,
           offsetof(Impl_, coupon_period_) -
               offsetof(Impl_, coupon_date_) +
               sizeof(Impl_::coupon_period_));
}
Coupon::~Coupon() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.Coupon)
  SharedDtor(*this);
}
inline void Coupon::SharedDtor(MessageLite& self) {
  Coupon& this_ = static_cast<Coupon&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.figi_.Destroy();
  delete this_._impl_.coupon_date_;
  delete this_._impl_.fix_date_;
  delete this_._impl_.pay_one_bond_;
  delete this_._impl_.coupon_start_date_;
  delete this_._impl_.coupon_end_date_;
  this_._impl_.~Impl_();
}

inline void* Coupon::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Coupon(arena);
}
constexpr auto Coupon::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Coupon),
                                            alignof(Coupon));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Coupon::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Coupon_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Coupon::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Coupon>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Coupon::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Coupon>(), &Coupon::ByteSizeLong,
            &Coupon::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Coupon, _impl_._cached_size_),
        false,
    },
    &Coupon::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Coupon::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 9, 5, 65, 2> Coupon::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Coupon, _impl_._has_bits_),
    0, // no _extensions_
    9, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966784,  // skipmap
    offsetof(decltype(_table_), field_entries),
    9,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Coupon>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string figi = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Coupon, _impl_.figi_)}},
    // .google.protobuf.Timestamp coupon_date = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(Coupon, _impl_.coupon_date_)}},
    // int64 coupon_number = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint64_t, offsetof(Coupon, _impl_.coupon_number_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(Coupon, _impl_.coupon_number_)}},
    // .google.protobuf.Timestamp fix_date = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 1, 1, PROTOBUF_FIELD_OFFSET(Coupon, _impl_.fix_date_)}},
    // .tinkoff.public.invest.api.contract.v1.MoneyValue pay_one_bond = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 2, 2, PROTOBUF_FIELD_OFFSET(Coupon, _impl_.pay_one_bond_)}},
    // .tinkoff.public.invest.api.contract.v1.CouponType coupon_type = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Coupon, _impl_.coupon_type_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(Coupon, _impl_.coupon_type_)}},
    // .google.protobuf.Timestamp coupon_start_date = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 3, 3, PROTOBUF_FIELD_OFFSET(Coupon, _impl_.coupon_start_date_)}},
    // .google.protobuf.Timestamp coupon_end_date = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 4, 4, PROTOBUF_FIELD_OFFSET(Coupon, _impl_.coupon_end_date_)}},
    // int32 coupon_period = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Coupon, _impl_.coupon_period_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(Coupon, _impl_.coupon_period_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string figi = 1;
    {PROTOBUF_FIELD_OFFSET(Coupon, _impl_.figi_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Timestamp coupon_date = 2;
    {PROTOBUF_FIELD_OFFSET(Coupon, _impl_.coupon_date_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int64 coupon_number = 3;
    {PROTOBUF_FIELD_OFFSET(Coupon, _impl_.coupon_number_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // .google.protobuf.Timestamp fix_date = 4;
    {PROTOBUF_FIELD_OFFSET(Coupon, _impl_.fix_date_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.MoneyValue pay_one_bond = 5;
    {PROTOBUF_FIELD_OFFSET(Coupon, _impl_.pay_one_bond_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.CouponType coupon_type = 6;
    {PROTOBUF_FIELD_OFFSET(Coupon, _impl_.coupon_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .google.protobuf.Timestamp coupon_start_date = 7;
    {PROTOBUF_FIELD_OFFSET(Coupon, _impl_.coupon_start_date_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp coupon_end_date = 8;
    {PROTOBUF_FIELD_OFFSET(Coupon, _impl_.coupon_end_date_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 coupon_period = 9;
    {PROTOBUF_FIELD_OFFSET(Coupon, _impl_.coupon_period_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::MoneyValue>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\54\4\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "tinkoff.public.invest.api.contract.v1.Coupon"
    "figi"
  }},
};

PROTOBUF_NOINLINE void Coupon::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.Coupon)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.figi_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.coupon_date_ != nullptr);
      _impl_.coupon_date_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.fix_date_ != nullptr);
      _impl_.fix_date_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.pay_one_bond_ != nullptr);
      _impl_.pay_one_bond_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.coupon_start_date_ != nullptr);
      _impl_.coupon_start_date_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.coupon_end_date_ != nullptr);
      _impl_.coupon_end_date_->Clear();
    }
  }
  ::memset(&_impl_.coupon_number_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.coupon_period_) -
      reinterpret_cast<char*>(&_impl_.coupon_number_)) + sizeof(_impl_.coupon_period_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Coupon::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Coupon& this_ = static_cast<const Coupon&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Coupon::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Coupon& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.Coupon)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string figi = 1;
          if (!this_._internal_figi().empty()) {
            const std::string& _s = this_._internal_figi();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Coupon.figi");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .google.protobuf.Timestamp coupon_date = 2;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.coupon_date_, this_._impl_.coupon_date_->GetCachedSize(), target,
                stream);
          }

          // int64 coupon_number = 3;
          if (this_._internal_coupon_number() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt64ToArrayWithField<3>(
                    stream, this_._internal_coupon_number(), target);
          }

          // .google.protobuf.Timestamp fix_date = 4;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                4, *this_._impl_.fix_date_, this_._impl_.fix_date_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.MoneyValue pay_one_bond = 5;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                5, *this_._impl_.pay_one_bond_, this_._impl_.pay_one_bond_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.CouponType coupon_type = 6;
          if (this_._internal_coupon_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                6, this_._internal_coupon_type(), target);
          }

          // .google.protobuf.Timestamp coupon_start_date = 7;
          if (cached_has_bits & 0x00000008u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                7, *this_._impl_.coupon_start_date_, this_._impl_.coupon_start_date_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Timestamp coupon_end_date = 8;
          if (cached_has_bits & 0x00000010u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                8, *this_._impl_.coupon_end_date_, this_._impl_.coupon_end_date_->GetCachedSize(), target,
                stream);
          }

          // int32 coupon_period = 9;
          if (this_._internal_coupon_period() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<9>(
                    stream, this_._internal_coupon_period(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.Coupon)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Coupon::ByteSizeLong(const MessageLite& base) {
          const Coupon& this_ = static_cast<const Coupon&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Coupon::ByteSizeLong() const {
          const Coupon& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.Coupon)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string figi = 1;
            if (!this_._internal_figi().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_figi());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x0000001fu) {
            // .google.protobuf.Timestamp coupon_date = 2;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.coupon_date_);
            }
            // .google.protobuf.Timestamp fix_date = 4;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.fix_date_);
            }
            // .tinkoff.public.invest.api.contract.v1.MoneyValue pay_one_bond = 5;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.pay_one_bond_);
            }
            // .google.protobuf.Timestamp coupon_start_date = 7;
            if (cached_has_bits & 0x00000008u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.coupon_start_date_);
            }
            // .google.protobuf.Timestamp coupon_end_date = 8;
            if (cached_has_bits & 0x00000010u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.coupon_end_date_);
            }
          }
           {
            // int64 coupon_number = 3;
            if (this_._internal_coupon_number() != 0) {
              total_size += ::_pbi::WireFormatLite::Int64SizePlusOne(
                  this_._internal_coupon_number());
            }
            // .tinkoff.public.invest.api.contract.v1.CouponType coupon_type = 6;
            if (this_._internal_coupon_type() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_coupon_type());
            }
            // int32 coupon_period = 9;
            if (this_._internal_coupon_period() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_coupon_period());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Coupon::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Coupon*>(&to_msg);
  auto& from = static_cast<const Coupon&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.Coupon)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.coupon_date_ != nullptr);
      if (_this->_impl_.coupon_date_ == nullptr) {
        _this->_impl_.coupon_date_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.coupon_date_);
      } else {
        _this->_impl_.coupon_date_->MergeFrom(*from._impl_.coupon_date_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.fix_date_ != nullptr);
      if (_this->_impl_.fix_date_ == nullptr) {
        _this->_impl_.fix_date_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.fix_date_);
      } else {
        _this->_impl_.fix_date_->MergeFrom(*from._impl_.fix_date_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.pay_one_bond_ != nullptr);
      if (_this->_impl_.pay_one_bond_ == nullptr) {
        _this->_impl_.pay_one_bond_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(arena, *from._impl_.pay_one_bond_);
      } else {
        _this->_impl_.pay_one_bond_->MergeFrom(*from._impl_.pay_one_bond_);
      }
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(from._impl_.coupon_start_date_ != nullptr);
      if (_this->_impl_.coupon_start_date_ == nullptr) {
        _this->_impl_.coupon_start_date_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.coupon_start_date_);
      } else {
        _this->_impl_.coupon_start_date_->MergeFrom(*from._impl_.coupon_start_date_);
      }
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(from._impl_.coupon_end_date_ != nullptr);
      if (_this->_impl_.coupon_end_date_ == nullptr) {
        _this->_impl_.coupon_end_date_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.coupon_end_date_);
      } else {
        _this->_impl_.coupon_end_date_->MergeFrom(*from._impl_.coupon_end_date_);
      }
    }
  }
  if (from._internal_coupon_number() != 0) {
    _this->_impl_.coupon_number_ = from._impl_.coupon_number_;
  }
  if (from._internal_coupon_type() != 0) {
    _this->_impl_.coupon_type_ = from._impl_.coupon_type_;
  }
  if (from._internal_coupon_period() != 0) {
    _this->_impl_.coupon_period_ = from._impl_.coupon_period_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Coupon::CopyFrom(const Coupon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.Coupon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Coupon::InternalSwap(Coupon* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.figi_, &other->_impl_.figi_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Coupon, _impl_.coupon_period_)
      + sizeof(Coupon::_impl_.coupon_period_)
      - PROTOBUF_FIELD_OFFSET(Coupon, _impl_.coupon_date_)>(
          reinterpret_cast<char*>(&_impl_.coupon_date_),
          reinterpret_cast<char*>(&other->_impl_.coupon_date_));
}

::google::protobuf::Metadata Coupon::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CurrencyResponse::_Internal {
 public:
  using HasBits =
      decltype(std::declval<CurrencyResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(CurrencyResponse, _impl_._has_bits_);
};

CurrencyResponse::CurrencyResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.CurrencyResponse)
}
inline PROTOBUF_NDEBUG_INLINE CurrencyResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::CurrencyResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

CurrencyResponse::CurrencyResponse(
    ::google::protobuf::Arena* arena,
    const CurrencyResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CurrencyResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.instrument_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Currency>(
                              arena, *from._impl_.instrument_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.CurrencyResponse)
}
inline PROTOBUF_NDEBUG_INLINE CurrencyResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void CurrencyResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.instrument_ = {};
}
CurrencyResponse::~CurrencyResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.CurrencyResponse)
  SharedDtor(*this);
}
inline void CurrencyResponse::SharedDtor(MessageLite& self) {
  CurrencyResponse& this_ = static_cast<CurrencyResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.instrument_;
  this_._impl_.~Impl_();
}

inline void* CurrencyResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) CurrencyResponse(arena);
}
constexpr auto CurrencyResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(CurrencyResponse),
                                            alignof(CurrencyResponse));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull CurrencyResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_CurrencyResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &CurrencyResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<CurrencyResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &CurrencyResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<CurrencyResponse>(), &CurrencyResponse::ByteSizeLong,
            &CurrencyResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(CurrencyResponse, _impl_._cached_size_),
        false,
    },
    &CurrencyResponse::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* CurrencyResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> CurrencyResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(CurrencyResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::CurrencyResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .tinkoff.public.invest.api.contract.v1.Currency instrument = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(CurrencyResponse, _impl_.instrument_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .tinkoff.public.invest.api.contract.v1.Currency instrument = 1;
    {PROTOBUF_FIELD_OFFSET(CurrencyResponse, _impl_.instrument_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Currency>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void CurrencyResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.CurrencyResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.instrument_ != nullptr);
    _impl_.instrument_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* CurrencyResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const CurrencyResponse& this_ = static_cast<const CurrencyResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* CurrencyResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const CurrencyResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.CurrencyResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .tinkoff.public.invest.api.contract.v1.Currency instrument = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.instrument_, this_._impl_.instrument_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.CurrencyResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t CurrencyResponse::ByteSizeLong(const MessageLite& base) {
          const CurrencyResponse& this_ = static_cast<const CurrencyResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t CurrencyResponse::ByteSizeLong() const {
          const CurrencyResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.CurrencyResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .tinkoff.public.invest.api.contract.v1.Currency instrument = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.instrument_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void CurrencyResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CurrencyResponse*>(&to_msg);
  auto& from = static_cast<const CurrencyResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.CurrencyResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.instrument_ != nullptr);
    if (_this->_impl_.instrument_ == nullptr) {
      _this->_impl_.instrument_ =
          ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Currency>(arena, *from._impl_.instrument_);
    } else {
      _this->_impl_.instrument_->MergeFrom(*from._impl_.instrument_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CurrencyResponse::CopyFrom(const CurrencyResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.CurrencyResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CurrencyResponse::InternalSwap(CurrencyResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.instrument_, other->_impl_.instrument_);
}

::google::protobuf::Metadata CurrencyResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CurrenciesResponse::_Internal {
 public:
};

CurrenciesResponse::CurrenciesResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.CurrenciesResponse)
}
inline PROTOBUF_NDEBUG_INLINE CurrenciesResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::CurrenciesResponse& from_msg)
      : instruments_{visibility, arena, from.instruments_},
        _cached_size_{0} {}

CurrenciesResponse::CurrenciesResponse(
    ::google::protobuf::Arena* arena,
    const CurrenciesResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CurrenciesResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.CurrenciesResponse)
}
inline PROTOBUF_NDEBUG_INLINE CurrenciesResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : instruments_{visibility, arena},
        _cached_size_{0} {}

inline void CurrenciesResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
CurrenciesResponse::~CurrenciesResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.CurrenciesResponse)
  SharedDtor(*this);
}
inline void CurrenciesResponse::SharedDtor(MessageLite& self) {
  CurrenciesResponse& this_ = static_cast<CurrenciesResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* CurrenciesResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) CurrenciesResponse(arena);
}
constexpr auto CurrenciesResponse::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(CurrenciesResponse, _impl_.instruments_) +
          decltype(CurrenciesResponse::_impl_.instruments_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(CurrenciesResponse), alignof(CurrenciesResponse), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&CurrenciesResponse::PlacementNew_,
                                 sizeof(CurrenciesResponse),
                                 alignof(CurrenciesResponse));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull CurrenciesResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_CurrenciesResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &CurrenciesResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<CurrenciesResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &CurrenciesResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<CurrenciesResponse>(), &CurrenciesResponse::ByteSizeLong,
            &CurrenciesResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(CurrenciesResponse, _impl_._cached_size_),
        false,
    },
    &CurrenciesResponse::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* CurrenciesResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> CurrenciesResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::CurrenciesResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .tinkoff.public.invest.api.contract.v1.Currency instruments = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(CurrenciesResponse, _impl_.instruments_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .tinkoff.public.invest.api.contract.v1.Currency instruments = 1;
    {PROTOBUF_FIELD_OFFSET(CurrenciesResponse, _impl_.instruments_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Currency>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void CurrenciesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.CurrenciesResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instruments_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* CurrenciesResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const CurrenciesResponse& this_ = static_cast<const CurrenciesResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* CurrenciesResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const CurrenciesResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.CurrenciesResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .tinkoff.public.invest.api.contract.v1.Currency instruments = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_instruments_size());
               i < n; i++) {
            const auto& repfield = this_._internal_instruments().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.CurrenciesResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t CurrenciesResponse::ByteSizeLong(const MessageLite& base) {
          const CurrenciesResponse& this_ = static_cast<const CurrenciesResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t CurrenciesResponse::ByteSizeLong() const {
          const CurrenciesResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.CurrenciesResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .tinkoff.public.invest.api.contract.v1.Currency instruments = 1;
            {
              total_size += 1UL * this_._internal_instruments_size();
              for (const auto& msg : this_._internal_instruments()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void CurrenciesResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CurrenciesResponse*>(&to_msg);
  auto& from = static_cast<const CurrenciesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.CurrenciesResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_instruments()->MergeFrom(
      from._internal_instruments());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CurrenciesResponse::CopyFrom(const CurrenciesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.CurrenciesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CurrenciesResponse::InternalSwap(CurrenciesResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.instruments_.InternalSwap(&other->_impl_.instruments_);
}

::google::protobuf::Metadata CurrenciesResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class EtfResponse::_Internal {
 public:
  using HasBits =
      decltype(std::declval<EtfResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(EtfResponse, _impl_._has_bits_);
};

EtfResponse::EtfResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.EtfResponse)
}
inline PROTOBUF_NDEBUG_INLINE EtfResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::EtfResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

EtfResponse::EtfResponse(
    ::google::protobuf::Arena* arena,
    const EtfResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  EtfResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.instrument_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Etf>(
                              arena, *from._impl_.instrument_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.EtfResponse)
}
inline PROTOBUF_NDEBUG_INLINE EtfResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void EtfResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.instrument_ = {};
}
EtfResponse::~EtfResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.EtfResponse)
  SharedDtor(*this);
}
inline void EtfResponse::SharedDtor(MessageLite& self) {
  EtfResponse& this_ = static_cast<EtfResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.instrument_;
  this_._impl_.~Impl_();
}

inline void* EtfResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) EtfResponse(arena);
}
constexpr auto EtfResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(EtfResponse),
                                            alignof(EtfResponse));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull EtfResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_EtfResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &EtfResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<EtfResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &EtfResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<EtfResponse>(), &EtfResponse::ByteSizeLong,
            &EtfResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(EtfResponse, _impl_._cached_size_),
        false,
    },
    &EtfResponse::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* EtfResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> EtfResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(EtfResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::EtfResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .tinkoff.public.invest.api.contract.v1.Etf instrument = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(EtfResponse, _impl_.instrument_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .tinkoff.public.invest.api.contract.v1.Etf instrument = 1;
    {PROTOBUF_FIELD_OFFSET(EtfResponse, _impl_.instrument_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Etf>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void EtfResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.EtfResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.instrument_ != nullptr);
    _impl_.instrument_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* EtfResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const EtfResponse& this_ = static_cast<const EtfResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* EtfResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const EtfResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.EtfResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .tinkoff.public.invest.api.contract.v1.Etf instrument = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.instrument_, this_._impl_.instrument_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.EtfResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t EtfResponse::ByteSizeLong(const MessageLite& base) {
          const EtfResponse& this_ = static_cast<const EtfResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t EtfResponse::ByteSizeLong() const {
          const EtfResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.EtfResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .tinkoff.public.invest.api.contract.v1.Etf instrument = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.instrument_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void EtfResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<EtfResponse*>(&to_msg);
  auto& from = static_cast<const EtfResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.EtfResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.instrument_ != nullptr);
    if (_this->_impl_.instrument_ == nullptr) {
      _this->_impl_.instrument_ =
          ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Etf>(arena, *from._impl_.instrument_);
    } else {
      _this->_impl_.instrument_->MergeFrom(*from._impl_.instrument_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EtfResponse::CopyFrom(const EtfResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.EtfResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void EtfResponse::InternalSwap(EtfResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.instrument_, other->_impl_.instrument_);
}

::google::protobuf::Metadata EtfResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class EtfsResponse::_Internal {
 public:
};

EtfsResponse::EtfsResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.EtfsResponse)
}
inline PROTOBUF_NDEBUG_INLINE EtfsResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::EtfsResponse& from_msg)
      : instruments_{visibility, arena, from.instruments_},
        _cached_size_{0} {}

EtfsResponse::EtfsResponse(
    ::google::protobuf::Arena* arena,
    const EtfsResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  EtfsResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.EtfsResponse)
}
inline PROTOBUF_NDEBUG_INLINE EtfsResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : instruments_{visibility, arena},
        _cached_size_{0} {}

inline void EtfsResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
EtfsResponse::~EtfsResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.EtfsResponse)
  SharedDtor(*this);
}
inline void EtfsResponse::SharedDtor(MessageLite& self) {
  EtfsResponse& this_ = static_cast<EtfsResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* EtfsResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) EtfsResponse(arena);
}
constexpr auto EtfsResponse::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(EtfsResponse, _impl_.instruments_) +
          decltype(EtfsResponse::_impl_.instruments_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(EtfsResponse), alignof(EtfsResponse), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&EtfsResponse::PlacementNew_,
                                 sizeof(EtfsResponse),
                                 alignof(EtfsResponse));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull EtfsResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_EtfsResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &EtfsResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<EtfsResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &EtfsResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<EtfsResponse>(), &EtfsResponse::ByteSizeLong,
            &EtfsResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(EtfsResponse, _impl_._cached_size_),
        false,
    },
    &EtfsResponse::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* EtfsResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> EtfsResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::EtfsResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .tinkoff.public.invest.api.contract.v1.Etf instruments = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(EtfsResponse, _impl_.instruments_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .tinkoff.public.invest.api.contract.v1.Etf instruments = 1;
    {PROTOBUF_FIELD_OFFSET(EtfsResponse, _impl_.instruments_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Etf>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void EtfsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.EtfsResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instruments_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* EtfsResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const EtfsResponse& this_ = static_cast<const EtfsResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* EtfsResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const EtfsResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.EtfsResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .tinkoff.public.invest.api.contract.v1.Etf instruments = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_instruments_size());
               i < n; i++) {
            const auto& repfield = this_._internal_instruments().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.EtfsResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t EtfsResponse::ByteSizeLong(const MessageLite& base) {
          const EtfsResponse& this_ = static_cast<const EtfsResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t EtfsResponse::ByteSizeLong() const {
          const EtfsResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.EtfsResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .tinkoff.public.invest.api.contract.v1.Etf instruments = 1;
            {
              total_size += 1UL * this_._internal_instruments_size();
              for (const auto& msg : this_._internal_instruments()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void EtfsResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<EtfsResponse*>(&to_msg);
  auto& from = static_cast<const EtfsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.EtfsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_instruments()->MergeFrom(
      from._internal_instruments());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EtfsResponse::CopyFrom(const EtfsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.EtfsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void EtfsResponse::InternalSwap(EtfsResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.instruments_.InternalSwap(&other->_impl_.instruments_);
}

::google::protobuf::Metadata EtfsResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class FutureResponse::_Internal {
 public:
  using HasBits =
      decltype(std::declval<FutureResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(FutureResponse, _impl_._has_bits_);
};

FutureResponse::FutureResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.FutureResponse)
}
inline PROTOBUF_NDEBUG_INLINE FutureResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::FutureResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

FutureResponse::FutureResponse(
    ::google::protobuf::Arena* arena,
    const FutureResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  FutureResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.instrument_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Future>(
                              arena, *from._impl_.instrument_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.FutureResponse)
}
inline PROTOBUF_NDEBUG_INLINE FutureResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void FutureResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.instrument_ = {};
}
FutureResponse::~FutureResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.FutureResponse)
  SharedDtor(*this);
}
inline void FutureResponse::SharedDtor(MessageLite& self) {
  FutureResponse& this_ = static_cast<FutureResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.instrument_;
  this_._impl_.~Impl_();
}

inline void* FutureResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) FutureResponse(arena);
}
constexpr auto FutureResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(FutureResponse),
                                            alignof(FutureResponse));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull FutureResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_FutureResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &FutureResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<FutureResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &FutureResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<FutureResponse>(), &FutureResponse::ByteSizeLong,
            &FutureResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(FutureResponse, _impl_._cached_size_),
        false,
    },
    &FutureResponse::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* FutureResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> FutureResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(FutureResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::FutureResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .tinkoff.public.invest.api.contract.v1.Future instrument = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(FutureResponse, _impl_.instrument_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .tinkoff.public.invest.api.contract.v1.Future instrument = 1;
    {PROTOBUF_FIELD_OFFSET(FutureResponse, _impl_.instrument_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Future>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void FutureResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.FutureResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.instrument_ != nullptr);
    _impl_.instrument_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* FutureResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const FutureResponse& this_ = static_cast<const FutureResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* FutureResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const FutureResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.FutureResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .tinkoff.public.invest.api.contract.v1.Future instrument = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.instrument_, this_._impl_.instrument_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.FutureResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t FutureResponse::ByteSizeLong(const MessageLite& base) {
          const FutureResponse& this_ = static_cast<const FutureResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t FutureResponse::ByteSizeLong() const {
          const FutureResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.FutureResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .tinkoff.public.invest.api.contract.v1.Future instrument = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.instrument_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void FutureResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<FutureResponse*>(&to_msg);
  auto& from = static_cast<const FutureResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.FutureResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.instrument_ != nullptr);
    if (_this->_impl_.instrument_ == nullptr) {
      _this->_impl_.instrument_ =
          ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Future>(arena, *from._impl_.instrument_);
    } else {
      _this->_impl_.instrument_->MergeFrom(*from._impl_.instrument_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FutureResponse::CopyFrom(const FutureResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.FutureResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void FutureResponse::InternalSwap(FutureResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.instrument_, other->_impl_.instrument_);
}

::google::protobuf::Metadata FutureResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class FuturesResponse::_Internal {
 public:
};

FuturesResponse::FuturesResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.FuturesResponse)
}
inline PROTOBUF_NDEBUG_INLINE FuturesResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::FuturesResponse& from_msg)
      : instruments_{visibility, arena, from.instruments_},
        _cached_size_{0} {}

FuturesResponse::FuturesResponse(
    ::google::protobuf::Arena* arena,
    const FuturesResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  FuturesResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.FuturesResponse)
}
inline PROTOBUF_NDEBUG_INLINE FuturesResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : instruments_{visibility, arena},
        _cached_size_{0} {}

inline void FuturesResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
FuturesResponse::~FuturesResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.FuturesResponse)
  SharedDtor(*this);
}
inline void FuturesResponse::SharedDtor(MessageLite& self) {
  FuturesResponse& this_ = static_cast<FuturesResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* FuturesResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) FuturesResponse(arena);
}
constexpr auto FuturesResponse::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(FuturesResponse, _impl_.instruments_) +
          decltype(FuturesResponse::_impl_.instruments_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(FuturesResponse), alignof(FuturesResponse), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&FuturesResponse::PlacementNew_,
                                 sizeof(FuturesResponse),
                                 alignof(FuturesResponse));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull FuturesResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_FuturesResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &FuturesResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<FuturesResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &FuturesResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<FuturesResponse>(), &FuturesResponse::ByteSizeLong,
            &FuturesResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(FuturesResponse, _impl_._cached_size_),
        false,
    },
    &FuturesResponse::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* FuturesResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> FuturesResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::FuturesResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .tinkoff.public.invest.api.contract.v1.Future instruments = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(FuturesResponse, _impl_.instruments_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .tinkoff.public.invest.api.contract.v1.Future instruments = 1;
    {PROTOBUF_FIELD_OFFSET(FuturesResponse, _impl_.instruments_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Future>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void FuturesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.FuturesResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instruments_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* FuturesResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const FuturesResponse& this_ = static_cast<const FuturesResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* FuturesResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const FuturesResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.FuturesResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .tinkoff.public.invest.api.contract.v1.Future instruments = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_instruments_size());
               i < n; i++) {
            const auto& repfield = this_._internal_instruments().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.FuturesResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t FuturesResponse::ByteSizeLong(const MessageLite& base) {
          const FuturesResponse& this_ = static_cast<const FuturesResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t FuturesResponse::ByteSizeLong() const {
          const FuturesResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.FuturesResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .tinkoff.public.invest.api.contract.v1.Future instruments = 1;
            {
              total_size += 1UL * this_._internal_instruments_size();
              for (const auto& msg : this_._internal_instruments()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void FuturesResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<FuturesResponse*>(&to_msg);
  auto& from = static_cast<const FuturesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.FuturesResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_instruments()->MergeFrom(
      from._internal_instruments());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FuturesResponse::CopyFrom(const FuturesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.FuturesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void FuturesResponse::InternalSwap(FuturesResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.instruments_.InternalSwap(&other->_impl_.instruments_);
}

::google::protobuf::Metadata FuturesResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class OptionResponse::_Internal {
 public:
  using HasBits =
      decltype(std::declval<OptionResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(OptionResponse, _impl_._has_bits_);
};

OptionResponse::OptionResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.OptionResponse)
}
inline PROTOBUF_NDEBUG_INLINE OptionResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::OptionResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

OptionResponse::OptionResponse(
    ::google::protobuf::Arena* arena,
    const OptionResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  OptionResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.instrument_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Option>(
                              arena, *from._impl_.instrument_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.OptionResponse)
}
inline PROTOBUF_NDEBUG_INLINE OptionResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void OptionResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.instrument_ = {};
}
OptionResponse::~OptionResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.OptionResponse)
  SharedDtor(*this);
}
inline void OptionResponse::SharedDtor(MessageLite& self) {
  OptionResponse& this_ = static_cast<OptionResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.instrument_;
  this_._impl_.~Impl_();
}

inline void* OptionResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) OptionResponse(arena);
}
constexpr auto OptionResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(OptionResponse),
                                            alignof(OptionResponse));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull OptionResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_OptionResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &OptionResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<OptionResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &OptionResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<OptionResponse>(), &OptionResponse::ByteSizeLong,
            &OptionResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(OptionResponse, _impl_._cached_size_),
        false,
    },
    &OptionResponse::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* OptionResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> OptionResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(OptionResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::OptionResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .tinkoff.public.invest.api.contract.v1.Option instrument = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(OptionResponse, _impl_.instrument_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .tinkoff.public.invest.api.contract.v1.Option instrument = 1;
    {PROTOBUF_FIELD_OFFSET(OptionResponse, _impl_.instrument_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Option>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void OptionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.OptionResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.instrument_ != nullptr);
    _impl_.instrument_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* OptionResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const OptionResponse& this_ = static_cast<const OptionResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* OptionResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const OptionResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.OptionResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .tinkoff.public.invest.api.contract.v1.Option instrument = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.instrument_, this_._impl_.instrument_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.OptionResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t OptionResponse::ByteSizeLong(const MessageLite& base) {
          const OptionResponse& this_ = static_cast<const OptionResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t OptionResponse::ByteSizeLong() const {
          const OptionResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.OptionResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .tinkoff.public.invest.api.contract.v1.Option instrument = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.instrument_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void OptionResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<OptionResponse*>(&to_msg);
  auto& from = static_cast<const OptionResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.OptionResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.instrument_ != nullptr);
    if (_this->_impl_.instrument_ == nullptr) {
      _this->_impl_.instrument_ =
          ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Option>(arena, *from._impl_.instrument_);
    } else {
      _this->_impl_.instrument_->MergeFrom(*from._impl_.instrument_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void OptionResponse::CopyFrom(const OptionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.OptionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void OptionResponse::InternalSwap(OptionResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.instrument_, other->_impl_.instrument_);
}

::google::protobuf::Metadata OptionResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class OptionsResponse::_Internal {
 public:
};

OptionsResponse::OptionsResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.OptionsResponse)
}
inline PROTOBUF_NDEBUG_INLINE OptionsResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::OptionsResponse& from_msg)
      : instruments_{visibility, arena, from.instruments_},
        _cached_size_{0} {}

OptionsResponse::OptionsResponse(
    ::google::protobuf::Arena* arena,
    const OptionsResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  OptionsResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.OptionsResponse)
}
inline PROTOBUF_NDEBUG_INLINE OptionsResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : instruments_{visibility, arena},
        _cached_size_{0} {}

inline void OptionsResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
OptionsResponse::~OptionsResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.OptionsResponse)
  SharedDtor(*this);
}
inline void OptionsResponse::SharedDtor(MessageLite& self) {
  OptionsResponse& this_ = static_cast<OptionsResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* OptionsResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) OptionsResponse(arena);
}
constexpr auto OptionsResponse::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(OptionsResponse, _impl_.instruments_) +
          decltype(OptionsResponse::_impl_.instruments_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(OptionsResponse), alignof(OptionsResponse), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&OptionsResponse::PlacementNew_,
                                 sizeof(OptionsResponse),
                                 alignof(OptionsResponse));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull OptionsResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_OptionsResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &OptionsResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<OptionsResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &OptionsResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<OptionsResponse>(), &OptionsResponse::ByteSizeLong,
            &OptionsResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(OptionsResponse, _impl_._cached_size_),
        false,
    },
    &OptionsResponse::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* OptionsResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> OptionsResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::OptionsResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .tinkoff.public.invest.api.contract.v1.Option instruments = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(OptionsResponse, _impl_.instruments_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .tinkoff.public.invest.api.contract.v1.Option instruments = 1;
    {PROTOBUF_FIELD_OFFSET(OptionsResponse, _impl_.instruments_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Option>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void OptionsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.OptionsResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instruments_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* OptionsResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const OptionsResponse& this_ = static_cast<const OptionsResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* OptionsResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const OptionsResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.OptionsResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .tinkoff.public.invest.api.contract.v1.Option instruments = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_instruments_size());
               i < n; i++) {
            const auto& repfield = this_._internal_instruments().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.OptionsResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t OptionsResponse::ByteSizeLong(const MessageLite& base) {
          const OptionsResponse& this_ = static_cast<const OptionsResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t OptionsResponse::ByteSizeLong() const {
          const OptionsResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.OptionsResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .tinkoff.public.invest.api.contract.v1.Option instruments = 1;
            {
              total_size += 1UL * this_._internal_instruments_size();
              for (const auto& msg : this_._internal_instruments()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void OptionsResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<OptionsResponse*>(&to_msg);
  auto& from = static_cast<const OptionsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.OptionsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_instruments()->MergeFrom(
      from._internal_instruments());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void OptionsResponse::CopyFrom(const OptionsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.OptionsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void OptionsResponse::InternalSwap(OptionsResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.instruments_.InternalSwap(&other->_impl_.instruments_);
}

::google::protobuf::Metadata OptionsResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Option::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Option>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Option, _impl_._has_bits_);
};

void Option::clear_brand() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.brand_ != nullptr) _impl_.brand_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Option::clear_basic_asset_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.basic_asset_size_ != nullptr) _impl_.basic_asset_size_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void Option::clear_klong() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.klong_ != nullptr) _impl_.klong_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void Option::clear_kshort() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.kshort_ != nullptr) _impl_.kshort_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void Option::clear_dlong() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.dlong_ != nullptr) _impl_.dlong_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void Option::clear_dshort() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.dshort_ != nullptr) _impl_.dshort_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void Option::clear_dlong_min() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.dlong_min_ != nullptr) _impl_.dlong_min_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void Option::clear_dshort_min() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.dshort_min_ != nullptr) _impl_.dshort_min_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void Option::clear_min_price_increment() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.min_price_increment_ != nullptr) _impl_.min_price_increment_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void Option::clear_strike_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.strike_price_ != nullptr) _impl_.strike_price_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void Option::clear_dlong_client() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.dlong_client_ != nullptr) _impl_.dlong_client_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
void Option::clear_dshort_client() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.dshort_client_ != nullptr) _impl_.dshort_client_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
void Option::clear_expiration_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.expiration_date_ != nullptr) _impl_.expiration_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
void Option::clear_first_trade_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.first_trade_date_ != nullptr) _impl_.first_trade_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00002000u;
}
void Option::clear_last_trade_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.last_trade_date_ != nullptr) _impl_.last_trade_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00004000u;
}
void Option::clear_first_1min_candle_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.first_1min_candle_date_ != nullptr) _impl_.first_1min_candle_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00008000u;
}
void Option::clear_first_1day_candle_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.first_1day_candle_date_ != nullptr) _impl_.first_1day_candle_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00010000u;
}
Option::Option(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.Option)
}
inline PROTOBUF_NDEBUG_INLINE Option::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::Option& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        uid_(arena, from.uid_),
        position_uid_(arena, from.position_uid_),
        ticker_(arena, from.ticker_),
        class_code_(arena, from.class_code_),
        basic_asset_position_uid_(arena, from.basic_asset_position_uid_),
        name_(arena, from.name_),
        currency_(arena, from.currency_),
        settlement_currency_(arena, from.settlement_currency_),
        asset_type_(arena, from.asset_type_),
        basic_asset_(arena, from.basic_asset_),
        exchange_(arena, from.exchange_),
        country_of_risk_(arena, from.country_of_risk_),
        country_of_risk_name_(arena, from.country_of_risk_name_),
        sector_(arena, from.sector_) {}

Option::Option(
    ::google::protobuf::Arena* arena,
    const Option& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Option* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.brand_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::BrandData>(
                              arena, *from._impl_.brand_)
                        : nullptr;
  _impl_.basic_asset_size_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.basic_asset_size_)
                        : nullptr;
  _impl_.klong_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.klong_)
                        : nullptr;
  _impl_.kshort_ = (cached_has_bits & 0x00000008u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.kshort_)
                        : nullptr;
  _impl_.dlong_ = (cached_has_bits & 0x00000010u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.dlong_)
                        : nullptr;
  _impl_.dshort_ = (cached_has_bits & 0x00000020u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.dshort_)
                        : nullptr;
  _impl_.dlong_min_ = (cached_has_bits & 0x00000040u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.dlong_min_)
                        : nullptr;
  _impl_.dshort_min_ = (cached_has_bits & 0x00000080u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.dshort_min_)
                        : nullptr;
  _impl_.min_price_increment_ = (cached_has_bits & 0x00000100u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.min_price_increment_)
                        : nullptr;
  _impl_.strike_price_ = (cached_has_bits & 0x00000200u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(
                              arena, *from._impl_.strike_price_)
                        : nullptr;
  _impl_.dlong_client_ = (cached_has_bits & 0x00000400u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.dlong_client_)
                        : nullptr;
  _impl_.dshort_client_ = (cached_has_bits & 0x00000800u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.dshort_client_)
                        : nullptr;
  _impl_.expiration_date_ = (cached_has_bits & 0x00001000u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.expiration_date_)
                        : nullptr;
  _impl_.first_trade_date_ = (cached_has_bits & 0x00002000u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.first_trade_date_)
                        : nullptr;
  _impl_.last_trade_date_ = (cached_has_bits & 0x00004000u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.last_trade_date_)
                        : nullptr;
  _impl_.first_1min_candle_date_ = (cached_has_bits & 0x00008000u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.first_1min_candle_date_)
                        : nullptr;
  _impl_.first_1day_candle_date_ = (cached_has_bits & 0x00010000u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.first_1day_candle_date_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, trading_status_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, trading_status_),
           offsetof(Impl_, api_trade_available_flag_) -
               offsetof(Impl_, trading_status_) +
               sizeof(Impl_::api_trade_available_flag_));

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.Option)
}
inline PROTOBUF_NDEBUG_INLINE Option::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        uid_(arena),
        position_uid_(arena),
        ticker_(arena),
        class_code_(arena),
        basic_asset_position_uid_(arena),
        name_(arena),
        currency_(arena),
        settlement_currency_(arena),
        asset_type_(arena),
        basic_asset_(arena),
        exchange_(arena),
        country_of_risk_(arena),
        country_of_risk_name_(arena),
        sector_(arena) {}

inline void Option::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, brand_),
           0,
           offsetof(Impl_, api_trade_available_flag_) -
               offsetof(Impl_, brand_) +
               sizeof(Impl_::api_trade_available_flag_));
}
Option::~Option() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.Option)
  SharedDtor(*this);
}
inline void Option::SharedDtor(MessageLite& self) {
  Option& this_ = static_cast<Option&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.uid_.Destroy();
  this_._impl_.position_uid_.Destroy();
  this_._impl_.ticker_.Destroy();
  this_._impl_.class_code_.Destroy();
  this_._impl_.basic_asset_position_uid_.Destroy();
  this_._impl_.name_.Destroy();
  this_._impl_.currency_.Destroy();
  this_._impl_.settlement_currency_.Destroy();
  this_._impl_.asset_type_.Destroy();
  this_._impl_.basic_asset_.Destroy();
  this_._impl_.exchange_.Destroy();
  this_._impl_.country_of_risk_.Destroy();
  this_._impl_.country_of_risk_name_.Destroy();
  this_._impl_.sector_.Destroy();
  delete this_._impl_.brand_;
  delete this_._impl_.basic_asset_size_;
  delete this_._impl_.klong_;
  delete this_._impl_.kshort_;
  delete this_._impl_.dlong_;
  delete this_._impl_.dshort_;
  delete this_._impl_.dlong_min_;
  delete this_._impl_.dshort_min_;
  delete this_._impl_.min_price_increment_;
  delete this_._impl_.strike_price_;
  delete this_._impl_.dlong_client_;
  delete this_._impl_.dshort_client_;
  delete this_._impl_.expiration_date_;
  delete this_._impl_.first_trade_date_;
  delete this_._impl_.last_trade_date_;
  delete this_._impl_.first_1min_candle_date_;
  delete this_._impl_.first_1day_candle_date_;
  this_._impl_.~Impl_();
}

inline void* Option::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Option(arena);
}
constexpr auto Option::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Option),
                                            alignof(Option));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Option::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Option_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Option::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Option>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Option::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Option>(), &Option::ByteSizeLong,
            &Option::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Option, _impl_._cached_size_),
        false,
    },
    &Option::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Option::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 47, 17, 249, 53> Option::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Option, _impl_._has_bits_),
    0, // no _extensions_
    409, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    3220176864,  // skipmap
    offsetof(decltype(_table_), field_entries),
    47,  // num_field_entries
    17,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Option>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string uid = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Option, _impl_.uid_)}},
    // string position_uid = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Option, _impl_.position_uid_)}},
    // string ticker = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Option, _impl_.ticker_)}},
    // string class_code = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(Option, _impl_.class_code_)}},
    // string basic_asset_position_uid = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(Option, _impl_.basic_asset_position_uid_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // string settlement_currency = 112;
    {::_pbi::TcParser::FastUS2,
     {1922, 63, 0, PROTOBUF_FIELD_OFFSET(Option, _impl_.settlement_currency_)}},
    // string sector = 161;
    {::_pbi::TcParser::FastUS2,
     {2698, 63, 0, PROTOBUF_FIELD_OFFSET(Option, _impl_.sector_)}},
    // .tinkoff.public.invest.api.contract.v1.BrandData brand = 162;
    {::_pbi::TcParser::FastMtS2,
     {2706, 0, 0, PROTOBUF_FIELD_OFFSET(Option, _impl_.brand_)}},
    // string asset_type = 131;
    {::_pbi::TcParser::FastUS2,
     {2202, 63, 0, PROTOBUF_FIELD_OFFSET(Option, _impl_.asset_type_)}},
    // string basic_asset = 132;
    {::_pbi::TcParser::FastUS2,
     {2210, 63, 0, PROTOBUF_FIELD_OFFSET(Option, _impl_.basic_asset_)}},
    // .tinkoff.public.invest.api.contract.v1.SecurityTradingStatus trading_status = 21;
    {::_pbi::TcParser::FastV32S2,
     {424, 63, 0, PROTOBUF_FIELD_OFFSET(Option, _impl_.trading_status_)}},
    // bool for_qual_investor_flag = 406;
    {::_pbi::TcParser::FastV8S2,
     {6576, 63, 0, PROTOBUF_FIELD_OFFSET(Option, _impl_.for_qual_investor_flag_)}},
    // string country_of_risk = 151;
    {::_pbi::TcParser::FastUS2,
     {2490, 63, 0, PROTOBUF_FIELD_OFFSET(Option, _impl_.country_of_risk_)}},
    // string country_of_risk_name = 152;
    {::_pbi::TcParser::FastUS2,
     {2498, 63, 0, PROTOBUF_FIELD_OFFSET(Option, _impl_.country_of_risk_name_)}},
    // .tinkoff.public.invest.api.contract.v1.OptionDirection direction = 41;
    {::_pbi::TcParser::FastV32S2,
     {712, 63, 0, PROTOBUF_FIELD_OFFSET(Option, _impl_.direction_)}},
    // .tinkoff.public.invest.api.contract.v1.OptionPaymentType payment_type = 42;
    {::_pbi::TcParser::FastV32S2,
     {720, 63, 0, PROTOBUF_FIELD_OFFSET(Option, _impl_.payment_type_)}},
    // .tinkoff.public.invest.api.contract.v1.OptionStyle style = 43;
    {::_pbi::TcParser::FastV32S2,
     {728, 63, 0, PROTOBUF_FIELD_OFFSET(Option, _impl_.style_)}},
    // .tinkoff.public.invest.api.contract.v1.OptionSettlementType settlement_type = 44;
    {::_pbi::TcParser::FastV32S2,
     {736, 63, 0, PROTOBUF_FIELD_OFFSET(Option, _impl_.settlement_type_)}},
    // string exchange = 141;
    {::_pbi::TcParser::FastUS2,
     {2282, 63, 0, PROTOBUF_FIELD_OFFSET(Option, _impl_.exchange_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation kshort = 222;
    {::_pbi::TcParser::FastMtS2,
     {3570, 3, 3, PROTOBUF_FIELD_OFFSET(Option, _impl_.kshort_)}},
    // .tinkoff.public.invest.api.contract.v1.RealExchange real_exchange = 31;
    {::_pbi::TcParser::FastV32S2,
     {504, 63, 0, PROTOBUF_FIELD_OFFSET(Option, _impl_.real_exchange_)}},
  }}, {{
    41, 0, 24,
    65520, 7, 65535, 11, 65535, 11, 61439, 11, 65343, 12, 62463, 14,
    16367, 16, 64767, 19, 65535, 21, 65535, 21, 64510, 21, 48143, 23,
    65279, 30, 65535, 31, 65535, 31, 63999, 31, 16367, 33, 64767, 36,
    65535, 38, 65535, 38, 65535, 38, 65535, 38, 255, 38, 65534, 46,
    65535, 65535
  }}, {{
    // string uid = 1;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.uid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string position_uid = 2;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.position_uid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string ticker = 3;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.ticker_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string class_code = 4;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.class_code_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string basic_asset_position_uid = 5;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.basic_asset_position_uid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public.invest.api.contract.v1.SecurityTradingStatus trading_status = 21;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.trading_status_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .tinkoff.public.invest.api.contract.v1.RealExchange real_exchange = 31;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.real_exchange_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .tinkoff.public.invest.api.contract.v1.OptionDirection direction = 41;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.direction_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .tinkoff.public.invest.api.contract.v1.OptionPaymentType payment_type = 42;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.payment_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .tinkoff.public.invest.api.contract.v1.OptionStyle style = 43;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.style_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .tinkoff.public.invest.api.contract.v1.OptionSettlementType settlement_type = 44;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.settlement_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string name = 101;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string currency = 111;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.currency_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string settlement_currency = 112;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.settlement_currency_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string asset_type = 131;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.asset_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string basic_asset = 132;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.basic_asset_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string exchange = 141;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.exchange_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string country_of_risk = 151;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.country_of_risk_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string country_of_risk_name = 152;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.country_of_risk_name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string sector = 161;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.sector_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public.invest.api.contract.v1.BrandData brand = 162;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.brand_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 lot = 201;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.lot_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .tinkoff.public.invest.api.contract.v1.Quotation basic_asset_size = 211;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.basic_asset_size_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation klong = 221;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.klong_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation kshort = 222;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.kshort_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation dlong = 223;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.dlong_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation dshort = 224;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.dshort_), _Internal::kHasBitsOffset + 5, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation dlong_min = 225;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.dlong_min_), _Internal::kHasBitsOffset + 6, 6,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation dshort_min = 226;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.dshort_min_), _Internal::kHasBitsOffset + 7, 7,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation min_price_increment = 231;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.min_price_increment_), _Internal::kHasBitsOffset + 8, 8,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.MoneyValue strike_price = 241;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.strike_price_), _Internal::kHasBitsOffset + 9, 9,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation dlong_client = 290;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.dlong_client_), _Internal::kHasBitsOffset + 10, 10,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation dshort_client = 291;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.dshort_client_), _Internal::kHasBitsOffset + 11, 11,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp expiration_date = 301;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.expiration_date_), _Internal::kHasBitsOffset + 12, 12,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp first_trade_date = 311;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.first_trade_date_), _Internal::kHasBitsOffset + 13, 13,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp last_trade_date = 312;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.last_trade_date_), _Internal::kHasBitsOffset + 14, 14,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp first_1min_candle_date = 321;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.first_1min_candle_date_), _Internal::kHasBitsOffset + 15, 15,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp first_1day_candle_date = 322;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.first_1day_candle_date_), _Internal::kHasBitsOffset + 16, 16,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool short_enabled_flag = 401;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.short_enabled_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool for_iis_flag = 402;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.for_iis_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool otc_flag = 403;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.otc_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool buy_available_flag = 404;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.buy_available_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool sell_available_flag = 405;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.sell_available_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool for_qual_investor_flag = 406;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.for_qual_investor_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool weekend_flag = 407;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.weekend_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool blocked_tca_flag = 408;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.blocked_tca_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool api_trade_available_flag = 409;
    {PROTOBUF_FIELD_OFFSET(Option, _impl_.api_trade_available_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::BrandData>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::MoneyValue>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\54\3\14\6\12\30\0\0\0\0\0\0\4\10\23\12\13\10\17\24\6\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "tinkoff.public.invest.api.contract.v1.Option"
    "uid"
    "position_uid"
    "ticker"
    "class_code"
    "basic_asset_position_uid"
    "name"
    "currency"
    "settlement_currency"
    "asset_type"
    "basic_asset"
    "exchange"
    "country_of_risk"
    "country_of_risk_name"
    "sector"
  }},
};

PROTOBUF_NOINLINE void Option::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.Option)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uid_.ClearToEmpty();
  _impl_.position_uid_.ClearToEmpty();
  _impl_.ticker_.ClearToEmpty();
  _impl_.class_code_.ClearToEmpty();
  _impl_.basic_asset_position_uid_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.currency_.ClearToEmpty();
  _impl_.settlement_currency_.ClearToEmpty();
  _impl_.asset_type_.ClearToEmpty();
  _impl_.basic_asset_.ClearToEmpty();
  _impl_.exchange_.ClearToEmpty();
  _impl_.country_of_risk_.ClearToEmpty();
  _impl_.country_of_risk_name_.ClearToEmpty();
  _impl_.sector_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.brand_ != nullptr);
      _impl_.brand_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.basic_asset_size_ != nullptr);
      _impl_.basic_asset_size_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.klong_ != nullptr);
      _impl_.klong_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.kshort_ != nullptr);
      _impl_.kshort_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.dlong_ != nullptr);
      _impl_.dlong_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.dshort_ != nullptr);
      _impl_.dshort_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(_impl_.dlong_min_ != nullptr);
      _impl_.dlong_min_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      ABSL_DCHECK(_impl_.dshort_min_ != nullptr);
      _impl_.dshort_min_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      ABSL_DCHECK(_impl_.min_price_increment_ != nullptr);
      _impl_.min_price_increment_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      ABSL_DCHECK(_impl_.strike_price_ != nullptr);
      _impl_.strike_price_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      ABSL_DCHECK(_impl_.dlong_client_ != nullptr);
      _impl_.dlong_client_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      ABSL_DCHECK(_impl_.dshort_client_ != nullptr);
      _impl_.dshort_client_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      ABSL_DCHECK(_impl_.expiration_date_ != nullptr);
      _impl_.expiration_date_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      ABSL_DCHECK(_impl_.first_trade_date_ != nullptr);
      _impl_.first_trade_date_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      ABSL_DCHECK(_impl_.last_trade_date_ != nullptr);
      _impl_.last_trade_date_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      ABSL_DCHECK(_impl_.first_1min_candle_date_ != nullptr);
      _impl_.first_1min_candle_date_->Clear();
    }
  }
  if (cached_has_bits & 0x00010000u) {
    ABSL_DCHECK(_impl_.first_1day_candle_date_ != nullptr);
    _impl_.first_1day_candle_date_->Clear();
  }
  ::memset(&_impl_.trading_status_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.api_trade_available_flag_) -
      reinterpret_cast<char*>(&_impl_.trading_status_)) + sizeof(_impl_.api_trade_available_flag_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Option::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Option& this_ = static_cast<const Option&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Option::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Option& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.Option)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string uid = 1;
          if (!this_._internal_uid().empty()) {
            const std::string& _s = this_._internal_uid();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Option.uid");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string position_uid = 2;
          if (!this_._internal_position_uid().empty()) {
            const std::string& _s = this_._internal_position_uid();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Option.position_uid");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // string ticker = 3;
          if (!this_._internal_ticker().empty()) {
            const std::string& _s = this_._internal_ticker();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Option.ticker");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // string class_code = 4;
          if (!this_._internal_class_code().empty()) {
            const std::string& _s = this_._internal_class_code();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Option.class_code");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          // string basic_asset_position_uid = 5;
          if (!this_._internal_basic_asset_position_uid().empty()) {
            const std::string& _s = this_._internal_basic_asset_position_uid();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Option.basic_asset_position_uid");
            target = stream->WriteStringMaybeAliased(5, _s, target);
          }

          // .tinkoff.public.invest.api.contract.v1.SecurityTradingStatus trading_status = 21;
          if (this_._internal_trading_status() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                21, this_._internal_trading_status(), target);
          }

          // .tinkoff.public.invest.api.contract.v1.RealExchange real_exchange = 31;
          if (this_._internal_real_exchange() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                31, this_._internal_real_exchange(), target);
          }

          // .tinkoff.public.invest.api.contract.v1.OptionDirection direction = 41;
          if (this_._internal_direction() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                41, this_._internal_direction(), target);
          }

          // .tinkoff.public.invest.api.contract.v1.OptionPaymentType payment_type = 42;
          if (this_._internal_payment_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                42, this_._internal_payment_type(), target);
          }

          // .tinkoff.public.invest.api.contract.v1.OptionStyle style = 43;
          if (this_._internal_style() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                43, this_._internal_style(), target);
          }

          // .tinkoff.public.invest.api.contract.v1.OptionSettlementType settlement_type = 44;
          if (this_._internal_settlement_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                44, this_._internal_settlement_type(), target);
          }

          // string name = 101;
          if (!this_._internal_name().empty()) {
            const std::string& _s = this_._internal_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Option.name");
            target = stream->WriteStringMaybeAliased(101, _s, target);
          }

          // string currency = 111;
          if (!this_._internal_currency().empty()) {
            const std::string& _s = this_._internal_currency();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Option.currency");
            target = stream->WriteStringMaybeAliased(111, _s, target);
          }

          // string settlement_currency = 112;
          if (!this_._internal_settlement_currency().empty()) {
            const std::string& _s = this_._internal_settlement_currency();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Option.settlement_currency");
            target = stream->WriteStringMaybeAliased(112, _s, target);
          }

          // string asset_type = 131;
          if (!this_._internal_asset_type().empty()) {
            const std::string& _s = this_._internal_asset_type();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Option.asset_type");
            target = stream->WriteStringMaybeAliased(131, _s, target);
          }

          // string basic_asset = 132;
          if (!this_._internal_basic_asset().empty()) {
            const std::string& _s = this_._internal_basic_asset();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Option.basic_asset");
            target = stream->WriteStringMaybeAliased(132, _s, target);
          }

          // string exchange = 141;
          if (!this_._internal_exchange().empty()) {
            const std::string& _s = this_._internal_exchange();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Option.exchange");
            target = stream->WriteStringMaybeAliased(141, _s, target);
          }

          // string country_of_risk = 151;
          if (!this_._internal_country_of_risk().empty()) {
            const std::string& _s = this_._internal_country_of_risk();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Option.country_of_risk");
            target = stream->WriteStringMaybeAliased(151, _s, target);
          }

          // string country_of_risk_name = 152;
          if (!this_._internal_country_of_risk_name().empty()) {
            const std::string& _s = this_._internal_country_of_risk_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Option.country_of_risk_name");
            target = stream->WriteStringMaybeAliased(152, _s, target);
          }

          // string sector = 161;
          if (!this_._internal_sector().empty()) {
            const std::string& _s = this_._internal_sector();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Option.sector");
            target = stream->WriteStringMaybeAliased(161, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .tinkoff.public.invest.api.contract.v1.BrandData brand = 162;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                162, *this_._impl_.brand_, this_._impl_.brand_->GetCachedSize(), target,
                stream);
          }

          // int32 lot = 201;
          if (this_._internal_lot() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                201, this_._internal_lot(), target);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation basic_asset_size = 211;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                211, *this_._impl_.basic_asset_size_, this_._impl_.basic_asset_size_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation klong = 221;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                221, *this_._impl_.klong_, this_._impl_.klong_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation kshort = 222;
          if (cached_has_bits & 0x00000008u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                222, *this_._impl_.kshort_, this_._impl_.kshort_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation dlong = 223;
          if (cached_has_bits & 0x00000010u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                223, *this_._impl_.dlong_, this_._impl_.dlong_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation dshort = 224;
          if (cached_has_bits & 0x00000020u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                224, *this_._impl_.dshort_, this_._impl_.dshort_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation dlong_min = 225;
          if (cached_has_bits & 0x00000040u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                225, *this_._impl_.dlong_min_, this_._impl_.dlong_min_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation dshort_min = 226;
          if (cached_has_bits & 0x00000080u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                226, *this_._impl_.dshort_min_, this_._impl_.dshort_min_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation min_price_increment = 231;
          if (cached_has_bits & 0x00000100u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                231, *this_._impl_.min_price_increment_, this_._impl_.min_price_increment_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.MoneyValue strike_price = 241;
          if (cached_has_bits & 0x00000200u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                241, *this_._impl_.strike_price_, this_._impl_.strike_price_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation dlong_client = 290;
          if (cached_has_bits & 0x00000400u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                290, *this_._impl_.dlong_client_, this_._impl_.dlong_client_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation dshort_client = 291;
          if (cached_has_bits & 0x00000800u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                291, *this_._impl_.dshort_client_, this_._impl_.dshort_client_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Timestamp expiration_date = 301;
          if (cached_has_bits & 0x00001000u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                301, *this_._impl_.expiration_date_, this_._impl_.expiration_date_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Timestamp first_trade_date = 311;
          if (cached_has_bits & 0x00002000u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                311, *this_._impl_.first_trade_date_, this_._impl_.first_trade_date_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Timestamp last_trade_date = 312;
          if (cached_has_bits & 0x00004000u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                312, *this_._impl_.last_trade_date_, this_._impl_.last_trade_date_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Timestamp first_1min_candle_date = 321;
          if (cached_has_bits & 0x00008000u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                321, *this_._impl_.first_1min_candle_date_, this_._impl_.first_1min_candle_date_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Timestamp first_1day_candle_date = 322;
          if (cached_has_bits & 0x00010000u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                322, *this_._impl_.first_1day_candle_date_, this_._impl_.first_1day_candle_date_->GetCachedSize(), target,
                stream);
          }

          // bool short_enabled_flag = 401;
          if (this_._internal_short_enabled_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                401, this_._internal_short_enabled_flag(), target);
          }

          // bool for_iis_flag = 402;
          if (this_._internal_for_iis_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                402, this_._internal_for_iis_flag(), target);
          }

          // bool otc_flag = 403;
          if (this_._internal_otc_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                403, this_._internal_otc_flag(), target);
          }

          // bool buy_available_flag = 404;
          if (this_._internal_buy_available_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                404, this_._internal_buy_available_flag(), target);
          }

          // bool sell_available_flag = 405;
          if (this_._internal_sell_available_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                405, this_._internal_sell_available_flag(), target);
          }

          // bool for_qual_investor_flag = 406;
          if (this_._internal_for_qual_investor_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                406, this_._internal_for_qual_investor_flag(), target);
          }

          // bool weekend_flag = 407;
          if (this_._internal_weekend_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                407, this_._internal_weekend_flag(), target);
          }

          // bool blocked_tca_flag = 408;
          if (this_._internal_blocked_tca_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                408, this_._internal_blocked_tca_flag(), target);
          }

          // bool api_trade_available_flag = 409;
          if (this_._internal_api_trade_available_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                409, this_._internal_api_trade_available_flag(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.Option)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Option::ByteSizeLong(const MessageLite& base) {
          const Option& this_ = static_cast<const Option&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Option::ByteSizeLong() const {
          const Option& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.Option)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string uid = 1;
            if (!this_._internal_uid().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_uid());
            }
            // string position_uid = 2;
            if (!this_._internal_position_uid().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_position_uid());
            }
            // string ticker = 3;
            if (!this_._internal_ticker().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_ticker());
            }
            // string class_code = 4;
            if (!this_._internal_class_code().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_class_code());
            }
            // string basic_asset_position_uid = 5;
            if (!this_._internal_basic_asset_position_uid().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_basic_asset_position_uid());
            }
            // string name = 101;
            if (!this_._internal_name().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_name());
            }
            // string currency = 111;
            if (!this_._internal_currency().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_currency());
            }
            // string settlement_currency = 112;
            if (!this_._internal_settlement_currency().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_settlement_currency());
            }
            // string asset_type = 131;
            if (!this_._internal_asset_type().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_asset_type());
            }
            // string basic_asset = 132;
            if (!this_._internal_basic_asset().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_basic_asset());
            }
            // string exchange = 141;
            if (!this_._internal_exchange().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_exchange());
            }
            // string country_of_risk = 151;
            if (!this_._internal_country_of_risk().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_country_of_risk());
            }
            // string country_of_risk_name = 152;
            if (!this_._internal_country_of_risk_name().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_country_of_risk_name());
            }
            // string sector = 161;
            if (!this_._internal_sector().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_sector());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x000000ffu) {
            // .tinkoff.public.invest.api.contract.v1.BrandData brand = 162;
            if (cached_has_bits & 0x00000001u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.brand_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation basic_asset_size = 211;
            if (cached_has_bits & 0x00000002u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.basic_asset_size_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation klong = 221;
            if (cached_has_bits & 0x00000004u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.klong_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation kshort = 222;
            if (cached_has_bits & 0x00000008u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.kshort_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation dlong = 223;
            if (cached_has_bits & 0x00000010u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.dlong_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation dshort = 224;
            if (cached_has_bits & 0x00000020u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.dshort_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation dlong_min = 225;
            if (cached_has_bits & 0x00000040u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.dlong_min_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation dshort_min = 226;
            if (cached_has_bits & 0x00000080u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.dshort_min_);
            }
          }
          if (cached_has_bits & 0x0000ff00u) {
            // .tinkoff.public.invest.api.contract.v1.Quotation min_price_increment = 231;
            if (cached_has_bits & 0x00000100u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.min_price_increment_);
            }
            // .tinkoff.public.invest.api.contract.v1.MoneyValue strike_price = 241;
            if (cached_has_bits & 0x00000200u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.strike_price_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation dlong_client = 290;
            if (cached_has_bits & 0x00000400u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.dlong_client_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation dshort_client = 291;
            if (cached_has_bits & 0x00000800u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.dshort_client_);
            }
            // .google.protobuf.Timestamp expiration_date = 301;
            if (cached_has_bits & 0x00001000u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.expiration_date_);
            }
            // .google.protobuf.Timestamp first_trade_date = 311;
            if (cached_has_bits & 0x00002000u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.first_trade_date_);
            }
            // .google.protobuf.Timestamp last_trade_date = 312;
            if (cached_has_bits & 0x00004000u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.last_trade_date_);
            }
            // .google.protobuf.Timestamp first_1min_candle_date = 321;
            if (cached_has_bits & 0x00008000u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.first_1min_candle_date_);
            }
          }
           {
            // .google.protobuf.Timestamp first_1day_candle_date = 322;
            if (cached_has_bits & 0x00010000u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.first_1day_candle_date_);
            }
          }
           {
            // .tinkoff.public.invest.api.contract.v1.SecurityTradingStatus trading_status = 21;
            if (this_._internal_trading_status() != 0) {
              total_size += 2 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_trading_status());
            }
            // .tinkoff.public.invest.api.contract.v1.RealExchange real_exchange = 31;
            if (this_._internal_real_exchange() != 0) {
              total_size += 2 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_real_exchange());
            }
            // .tinkoff.public.invest.api.contract.v1.OptionDirection direction = 41;
            if (this_._internal_direction() != 0) {
              total_size += 2 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_direction());
            }
            // .tinkoff.public.invest.api.contract.v1.OptionPaymentType payment_type = 42;
            if (this_._internal_payment_type() != 0) {
              total_size += 2 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_payment_type());
            }
            // .tinkoff.public.invest.api.contract.v1.OptionStyle style = 43;
            if (this_._internal_style() != 0) {
              total_size += 2 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_style());
            }
            // .tinkoff.public.invest.api.contract.v1.OptionSettlementType settlement_type = 44;
            if (this_._internal_settlement_type() != 0) {
              total_size += 2 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_settlement_type());
            }
            // int32 lot = 201;
            if (this_._internal_lot() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_lot());
            }
            // bool short_enabled_flag = 401;
            if (this_._internal_short_enabled_flag() != 0) {
              total_size += 3;
            }
            // bool for_iis_flag = 402;
            if (this_._internal_for_iis_flag() != 0) {
              total_size += 3;
            }
            // bool otc_flag = 403;
            if (this_._internal_otc_flag() != 0) {
              total_size += 3;
            }
            // bool buy_available_flag = 404;
            if (this_._internal_buy_available_flag() != 0) {
              total_size += 3;
            }
            // bool sell_available_flag = 405;
            if (this_._internal_sell_available_flag() != 0) {
              total_size += 3;
            }
            // bool for_qual_investor_flag = 406;
            if (this_._internal_for_qual_investor_flag() != 0) {
              total_size += 3;
            }
            // bool weekend_flag = 407;
            if (this_._internal_weekend_flag() != 0) {
              total_size += 3;
            }
            // bool blocked_tca_flag = 408;
            if (this_._internal_blocked_tca_flag() != 0) {
              total_size += 3;
            }
            // bool api_trade_available_flag = 409;
            if (this_._internal_api_trade_available_flag() != 0) {
              total_size += 3;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Option::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Option*>(&to_msg);
  auto& from = static_cast<const Option&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.Option)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (!from._internal_position_uid().empty()) {
    _this->_internal_set_position_uid(from._internal_position_uid());
  }
  if (!from._internal_ticker().empty()) {
    _this->_internal_set_ticker(from._internal_ticker());
  }
  if (!from._internal_class_code().empty()) {
    _this->_internal_set_class_code(from._internal_class_code());
  }
  if (!from._internal_basic_asset_position_uid().empty()) {
    _this->_internal_set_basic_asset_position_uid(from._internal_basic_asset_position_uid());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_currency().empty()) {
    _this->_internal_set_currency(from._internal_currency());
  }
  if (!from._internal_settlement_currency().empty()) {
    _this->_internal_set_settlement_currency(from._internal_settlement_currency());
  }
  if (!from._internal_asset_type().empty()) {
    _this->_internal_set_asset_type(from._internal_asset_type());
  }
  if (!from._internal_basic_asset().empty()) {
    _this->_internal_set_basic_asset(from._internal_basic_asset());
  }
  if (!from._internal_exchange().empty()) {
    _this->_internal_set_exchange(from._internal_exchange());
  }
  if (!from._internal_country_of_risk().empty()) {
    _this->_internal_set_country_of_risk(from._internal_country_of_risk());
  }
  if (!from._internal_country_of_risk_name().empty()) {
    _this->_internal_set_country_of_risk_name(from._internal_country_of_risk_name());
  }
  if (!from._internal_sector().empty()) {
    _this->_internal_set_sector(from._internal_sector());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.brand_ != nullptr);
      if (_this->_impl_.brand_ == nullptr) {
        _this->_impl_.brand_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::BrandData>(arena, *from._impl_.brand_);
      } else {
        _this->_impl_.brand_->MergeFrom(*from._impl_.brand_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.basic_asset_size_ != nullptr);
      if (_this->_impl_.basic_asset_size_ == nullptr) {
        _this->_impl_.basic_asset_size_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.basic_asset_size_);
      } else {
        _this->_impl_.basic_asset_size_->MergeFrom(*from._impl_.basic_asset_size_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.klong_ != nullptr);
      if (_this->_impl_.klong_ == nullptr) {
        _this->_impl_.klong_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.klong_);
      } else {
        _this->_impl_.klong_->MergeFrom(*from._impl_.klong_);
      }
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(from._impl_.kshort_ != nullptr);
      if (_this->_impl_.kshort_ == nullptr) {
        _this->_impl_.kshort_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.kshort_);
      } else {
        _this->_impl_.kshort_->MergeFrom(*from._impl_.kshort_);
      }
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(from._impl_.dlong_ != nullptr);
      if (_this->_impl_.dlong_ == nullptr) {
        _this->_impl_.dlong_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.dlong_);
      } else {
        _this->_impl_.dlong_->MergeFrom(*from._impl_.dlong_);
      }
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(from._impl_.dshort_ != nullptr);
      if (_this->_impl_.dshort_ == nullptr) {
        _this->_impl_.dshort_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.dshort_);
      } else {
        _this->_impl_.dshort_->MergeFrom(*from._impl_.dshort_);
      }
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(from._impl_.dlong_min_ != nullptr);
      if (_this->_impl_.dlong_min_ == nullptr) {
        _this->_impl_.dlong_min_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.dlong_min_);
      } else {
        _this->_impl_.dlong_min_->MergeFrom(*from._impl_.dlong_min_);
      }
    }
    if (cached_has_bits & 0x00000080u) {
      ABSL_DCHECK(from._impl_.dshort_min_ != nullptr);
      if (_this->_impl_.dshort_min_ == nullptr) {
        _this->_impl_.dshort_min_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.dshort_min_);
      } else {
        _this->_impl_.dshort_min_->MergeFrom(*from._impl_.dshort_min_);
      }
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      ABSL_DCHECK(from._impl_.min_price_increment_ != nullptr);
      if (_this->_impl_.min_price_increment_ == nullptr) {
        _this->_impl_.min_price_increment_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.min_price_increment_);
      } else {
        _this->_impl_.min_price_increment_->MergeFrom(*from._impl_.min_price_increment_);
      }
    }
    if (cached_has_bits & 0x00000200u) {
      ABSL_DCHECK(from._impl_.strike_price_ != nullptr);
      if (_this->_impl_.strike_price_ == nullptr) {
        _this->_impl_.strike_price_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(arena, *from._impl_.strike_price_);
      } else {
        _this->_impl_.strike_price_->MergeFrom(*from._impl_.strike_price_);
      }
    }
    if (cached_has_bits & 0x00000400u) {
      ABSL_DCHECK(from._impl_.dlong_client_ != nullptr);
      if (_this->_impl_.dlong_client_ == nullptr) {
        _this->_impl_.dlong_client_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.dlong_client_);
      } else {
        _this->_impl_.dlong_client_->MergeFrom(*from._impl_.dlong_client_);
      }
    }
    if (cached_has_bits & 0x00000800u) {
      ABSL_DCHECK(from._impl_.dshort_client_ != nullptr);
      if (_this->_impl_.dshort_client_ == nullptr) {
        _this->_impl_.dshort_client_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.dshort_client_);
      } else {
        _this->_impl_.dshort_client_->MergeFrom(*from._impl_.dshort_client_);
      }
    }
    if (cached_has_bits & 0x00001000u) {
      ABSL_DCHECK(from._impl_.expiration_date_ != nullptr);
      if (_this->_impl_.expiration_date_ == nullptr) {
        _this->_impl_.expiration_date_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.expiration_date_);
      } else {
        _this->_impl_.expiration_date_->MergeFrom(*from._impl_.expiration_date_);
      }
    }
    if (cached_has_bits & 0x00002000u) {
      ABSL_DCHECK(from._impl_.first_trade_date_ != nullptr);
      if (_this->_impl_.first_trade_date_ == nullptr) {
        _this->_impl_.first_trade_date_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.first_trade_date_);
      } else {
        _this->_impl_.first_trade_date_->MergeFrom(*from._impl_.first_trade_date_);
      }
    }
    if (cached_has_bits & 0x00004000u) {
      ABSL_DCHECK(from._impl_.last_trade_date_ != nullptr);
      if (_this->_impl_.last_trade_date_ == nullptr) {
        _this->_impl_.last_trade_date_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.last_trade_date_);
      } else {
        _this->_impl_.last_trade_date_->MergeFrom(*from._impl_.last_trade_date_);
      }
    }
    if (cached_has_bits & 0x00008000u) {
      ABSL_DCHECK(from._impl_.first_1min_candle_date_ != nullptr);
      if (_this->_impl_.first_1min_candle_date_ == nullptr) {
        _this->_impl_.first_1min_candle_date_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.first_1min_candle_date_);
      } else {
        _this->_impl_.first_1min_candle_date_->MergeFrom(*from._impl_.first_1min_candle_date_);
      }
    }
  }
  if (cached_has_bits & 0x00010000u) {
    ABSL_DCHECK(from._impl_.first_1day_candle_date_ != nullptr);
    if (_this->_impl_.first_1day_candle_date_ == nullptr) {
      _this->_impl_.first_1day_candle_date_ =
          ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.first_1day_candle_date_);
    } else {
      _this->_impl_.first_1day_candle_date_->MergeFrom(*from._impl_.first_1day_candle_date_);
    }
  }
  if (from._internal_trading_status() != 0) {
    _this->_impl_.trading_status_ = from._impl_.trading_status_;
  }
  if (from._internal_real_exchange() != 0) {
    _this->_impl_.real_exchange_ = from._impl_.real_exchange_;
  }
  if (from._internal_direction() != 0) {
    _this->_impl_.direction_ = from._impl_.direction_;
  }
  if (from._internal_payment_type() != 0) {
    _this->_impl_.payment_type_ = from._impl_.payment_type_;
  }
  if (from._internal_style() != 0) {
    _this->_impl_.style_ = from._impl_.style_;
  }
  if (from._internal_settlement_type() != 0) {
    _this->_impl_.settlement_type_ = from._impl_.settlement_type_;
  }
  if (from._internal_lot() != 0) {
    _this->_impl_.lot_ = from._impl_.lot_;
  }
  if (from._internal_short_enabled_flag() != 0) {
    _this->_impl_.short_enabled_flag_ = from._impl_.short_enabled_flag_;
  }
  if (from._internal_for_iis_flag() != 0) {
    _this->_impl_.for_iis_flag_ = from._impl_.for_iis_flag_;
  }
  if (from._internal_otc_flag() != 0) {
    _this->_impl_.otc_flag_ = from._impl_.otc_flag_;
  }
  if (from._internal_buy_available_flag() != 0) {
    _this->_impl_.buy_available_flag_ = from._impl_.buy_available_flag_;
  }
  if (from._internal_sell_available_flag() != 0) {
    _this->_impl_.sell_available_flag_ = from._impl_.sell_available_flag_;
  }
  if (from._internal_for_qual_investor_flag() != 0) {
    _this->_impl_.for_qual_investor_flag_ = from._impl_.for_qual_investor_flag_;
  }
  if (from._internal_weekend_flag() != 0) {
    _this->_impl_.weekend_flag_ = from._impl_.weekend_flag_;
  }
  if (from._internal_blocked_tca_flag() != 0) {
    _this->_impl_.blocked_tca_flag_ = from._impl_.blocked_tca_flag_;
  }
  if (from._internal_api_trade_available_flag() != 0) {
    _this->_impl_.api_trade_available_flag_ = from._impl_.api_trade_available_flag_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Option::CopyFrom(const Option& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.Option)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Option::InternalSwap(Option* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.uid_, &other->_impl_.uid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.position_uid_, &other->_impl_.position_uid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ticker_, &other->_impl_.ticker_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.class_code_, &other->_impl_.class_code_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.basic_asset_position_uid_, &other->_impl_.basic_asset_position_uid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.currency_, &other->_impl_.currency_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.settlement_currency_, &other->_impl_.settlement_currency_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.asset_type_, &other->_impl_.asset_type_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.basic_asset_, &other->_impl_.basic_asset_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.exchange_, &other->_impl_.exchange_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.country_of_risk_, &other->_impl_.country_of_risk_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.country_of_risk_name_, &other->_impl_.country_of_risk_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sector_, &other->_impl_.sector_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Option, _impl_.api_trade_available_flag_)
      + sizeof(Option::_impl_.api_trade_available_flag_)
      - PROTOBUF_FIELD_OFFSET(Option, _impl_.brand_)>(
          reinterpret_cast<char*>(&_impl_.brand_),
          reinterpret_cast<char*>(&other->_impl_.brand_));
}

::google::protobuf::Metadata Option::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class ShareResponse::_Internal {
 public:
  using HasBits =
      decltype(std::declval<ShareResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(ShareResponse, _impl_._has_bits_);
};

ShareResponse::ShareResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.ShareResponse)
}
inline PROTOBUF_NDEBUG_INLINE ShareResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::ShareResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

ShareResponse::ShareResponse(
    ::google::protobuf::Arena* arena,
    const ShareResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  ShareResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.instrument_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Share>(
                              arena, *from._impl_.instrument_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.ShareResponse)
}
inline PROTOBUF_NDEBUG_INLINE ShareResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void ShareResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.instrument_ = {};
}
ShareResponse::~ShareResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.ShareResponse)
  SharedDtor(*this);
}
inline void ShareResponse::SharedDtor(MessageLite& self) {
  ShareResponse& this_ = static_cast<ShareResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.instrument_;
  this_._impl_.~Impl_();
}

inline void* ShareResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) ShareResponse(arena);
}
constexpr auto ShareResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(ShareResponse),
                                            alignof(ShareResponse));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull ShareResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_ShareResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &ShareResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<ShareResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &ShareResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<ShareResponse>(), &ShareResponse::ByteSizeLong,
            &ShareResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(ShareResponse, _impl_._cached_size_),
        false,
    },
    &ShareResponse::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* ShareResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> ShareResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(ShareResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::ShareResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .tinkoff.public.invest.api.contract.v1.Share instrument = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(ShareResponse, _impl_.instrument_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .tinkoff.public.invest.api.contract.v1.Share instrument = 1;
    {PROTOBUF_FIELD_OFFSET(ShareResponse, _impl_.instrument_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Share>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void ShareResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.ShareResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.instrument_ != nullptr);
    _impl_.instrument_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* ShareResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const ShareResponse& this_ = static_cast<const ShareResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* ShareResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const ShareResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.ShareResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .tinkoff.public.invest.api.contract.v1.Share instrument = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.instrument_, this_._impl_.instrument_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.ShareResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t ShareResponse::ByteSizeLong(const MessageLite& base) {
          const ShareResponse& this_ = static_cast<const ShareResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t ShareResponse::ByteSizeLong() const {
          const ShareResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.ShareResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .tinkoff.public.invest.api.contract.v1.Share instrument = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.instrument_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void ShareResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<ShareResponse*>(&to_msg);
  auto& from = static_cast<const ShareResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.ShareResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.instrument_ != nullptr);
    if (_this->_impl_.instrument_ == nullptr) {
      _this->_impl_.instrument_ =
          ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Share>(arena, *from._impl_.instrument_);
    } else {
      _this->_impl_.instrument_->MergeFrom(*from._impl_.instrument_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void ShareResponse::CopyFrom(const ShareResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.ShareResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void ShareResponse::InternalSwap(ShareResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.instrument_, other->_impl_.instrument_);
}

::google::protobuf::Metadata ShareResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class SharesResponse::_Internal {
 public:
};

SharesResponse::SharesResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.SharesResponse)
}
inline PROTOBUF_NDEBUG_INLINE SharesResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::SharesResponse& from_msg)
      : instruments_{visibility, arena, from.instruments_},
        _cached_size_{0} {}

SharesResponse::SharesResponse(
    ::google::protobuf::Arena* arena,
    const SharesResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharesResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.SharesResponse)
}
inline PROTOBUF_NDEBUG_INLINE SharesResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : instruments_{visibility, arena},
        _cached_size_{0} {}

inline void SharesResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
SharesResponse::~SharesResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.SharesResponse)
  SharedDtor(*this);
}
inline void SharesResponse::SharedDtor(MessageLite& self) {
  SharesResponse& this_ = static_cast<SharesResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* SharesResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) SharesResponse(arena);
}
constexpr auto SharesResponse::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(SharesResponse, _impl_.instruments_) +
          decltype(SharesResponse::_impl_.instruments_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(SharesResponse), alignof(SharesResponse), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&SharesResponse::PlacementNew_,
                                 sizeof(SharesResponse),
                                 alignof(SharesResponse));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull SharesResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_SharesResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &SharesResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<SharesResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &SharesResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<SharesResponse>(), &SharesResponse::ByteSizeLong,
            &SharesResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(SharesResponse, _impl_._cached_size_),
        false,
    },
    &SharesResponse::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* SharesResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> SharesResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::SharesResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .tinkoff.public.invest.api.contract.v1.Share instruments = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(SharesResponse, _impl_.instruments_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .tinkoff.public.invest.api.contract.v1.Share instruments = 1;
    {PROTOBUF_FIELD_OFFSET(SharesResponse, _impl_.instruments_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Share>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void SharesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.SharesResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instruments_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* SharesResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const SharesResponse& this_ = static_cast<const SharesResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* SharesResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const SharesResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.SharesResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .tinkoff.public.invest.api.contract.v1.Share instruments = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_instruments_size());
               i < n; i++) {
            const auto& repfield = this_._internal_instruments().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.SharesResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t SharesResponse::ByteSizeLong(const MessageLite& base) {
          const SharesResponse& this_ = static_cast<const SharesResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t SharesResponse::ByteSizeLong() const {
          const SharesResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.SharesResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .tinkoff.public.invest.api.contract.v1.Share instruments = 1;
            {
              total_size += 1UL * this_._internal_instruments_size();
              for (const auto& msg : this_._internal_instruments()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void SharesResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<SharesResponse*>(&to_msg);
  auto& from = static_cast<const SharesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.SharesResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_instruments()->MergeFrom(
      from._internal_instruments());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void SharesResponse::CopyFrom(const SharesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.SharesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void SharesResponse::InternalSwap(SharesResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.instruments_.InternalSwap(&other->_impl_.instruments_);
}

::google::protobuf::Metadata SharesResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Bond::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Bond>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Bond, _impl_._has_bits_);
};

void Bond::clear_klong() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.klong_ != nullptr) _impl_.klong_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Bond::clear_kshort() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.kshort_ != nullptr) _impl_.kshort_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void Bond::clear_dlong() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.dlong_ != nullptr) _impl_.dlong_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void Bond::clear_dshort() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.dshort_ != nullptr) _impl_.dshort_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void Bond::clear_dlong_min() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.dlong_min_ != nullptr) _impl_.dlong_min_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void Bond::clear_dshort_min() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.dshort_min_ != nullptr) _impl_.dshort_min_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void Bond::clear_maturity_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.maturity_date_ != nullptr) _impl_.maturity_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void Bond::clear_nominal() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.nominal_ != nullptr) _impl_.nominal_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void Bond::clear_initial_nominal() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.initial_nominal_ != nullptr) _impl_.initial_nominal_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void Bond::clear_state_reg_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.state_reg_date_ != nullptr) _impl_.state_reg_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void Bond::clear_placement_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.placement_date_ != nullptr) _impl_.placement_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
void Bond::clear_placement_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.placement_price_ != nullptr) _impl_.placement_price_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
void Bond::clear_aci_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.aci_value_ != nullptr) _impl_.aci_value_->Clear();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
void Bond::clear_min_price_increment() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.min_price_increment_ != nullptr) _impl_.min_price_increment_->Clear();
  _impl_._has_bits_[0] &= ~0x00002000u;
}
void Bond::clear_first_1min_candle_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.first_1min_candle_date_ != nullptr) _impl_.first_1min_candle_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00004000u;
}
void Bond::clear_first_1day_candle_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.first_1day_candle_date_ != nullptr) _impl_.first_1day_candle_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00008000u;
}
void Bond::clear_brand() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.brand_ != nullptr) _impl_.brand_->Clear();
  _impl_._has_bits_[0] &= ~0x00010000u;
}
void Bond::clear_call_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.call_date_ != nullptr) _impl_.call_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00020000u;
}
void Bond::clear_dlong_client() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.dlong_client_ != nullptr) _impl_.dlong_client_->Clear();
  _impl_._has_bits_[0] &= ~0x00040000u;
}
void Bond::clear_dshort_client() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.dshort_client_ != nullptr) _impl_.dshort_client_->Clear();
  _impl_._has_bits_[0] &= ~0x00080000u;
}
Bond::Bond(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.Bond)
}
inline PROTOBUF_NDEBUG_INLINE Bond::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::Bond& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        figi_(arena, from.figi_),
        ticker_(arena, from.ticker_),
        class_code_(arena, from.class_code_),
        isin_(arena, from.isin_),
        currency_(arena, from.currency_),
        name_(arena, from.name_),
        exchange_(arena, from.exchange_),
        country_of_risk_(arena, from.country_of_risk_),
        country_of_risk_name_(arena, from.country_of_risk_name_),
        sector_(arena, from.sector_),
        issue_kind_(arena, from.issue_kind_),
        uid_(arena, from.uid_),
        position_uid_(arena, from.position_uid_),
        asset_uid_(arena, from.asset_uid_) {}

Bond::Bond(
    ::google::protobuf::Arena* arena,
    const Bond& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Bond* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.klong_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.klong_)
                        : nullptr;
  _impl_.kshort_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.kshort_)
                        : nullptr;
  _impl_.dlong_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.dlong_)
                        : nullptr;
  _impl_.dshort_ = (cached_has_bits & 0x00000008u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.dshort_)
                        : nullptr;
  _impl_.dlong_min_ = (cached_has_bits & 0x00000010u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.dlong_min_)
                        : nullptr;
  _impl_.dshort_min_ = (cached_has_bits & 0x00000020u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.dshort_min_)
                        : nullptr;
  _impl_.maturity_date_ = (cached_has_bits & 0x00000040u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.maturity_date_)
                        : nullptr;
  _impl_.nominal_ = (cached_has_bits & 0x00000080u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(
                              arena, *from._impl_.nominal_)
                        : nullptr;
  _impl_.initial_nominal_ = (cached_has_bits & 0x00000100u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(
                              arena, *from._impl_.initial_nominal_)
                        : nullptr;
  _impl_.state_reg_date_ = (cached_has_bits & 0x00000200u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.state_reg_date_)
                        : nullptr;
  _impl_.placement_date_ = (cached_has_bits & 0x00000400u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.placement_date_)
                        : nullptr;
  _impl_.placement_price_ = (cached_has_bits & 0x00000800u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(
                              arena, *from._impl_.placement_price_)
                        : nullptr;
  _impl_.aci_value_ = (cached_has_bits & 0x00001000u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(
                              arena, *from._impl_.aci_value_)
                        : nullptr;
  _impl_.min_price_increment_ = (cached_has_bits & 0x00002000u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.min_price_increment_)
                        : nullptr;
  _impl_.first_1min_candle_date_ = (cached_has_bits & 0x00004000u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.first_1min_candle_date_)
                        : nullptr;
  _impl_.first_1day_candle_date_ = (cached_has_bits & 0x00008000u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.first_1day_candle_date_)
                        : nullptr;
  _impl_.brand_ = (cached_has_bits & 0x00010000u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::BrandData>(
                              arena, *from._impl_.brand_)
                        : nullptr;
  _impl_.call_date_ = (cached_has_bits & 0x00020000u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.call_date_)
                        : nullptr;
  _impl_.dlong_client_ = (cached_has_bits & 0x00040000u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.dlong_client_)
                        : nullptr;
  _impl_.dshort_client_ = (cached_has_bits & 0x00080000u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.dshort_client_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, lot_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, lot_),
           offsetof(Impl_, bond_type_) -
               offsetof(Impl_, lot_) +
               sizeof(Impl_::bond_type_));

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.Bond)
}
inline PROTOBUF_NDEBUG_INLINE Bond::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        figi_(arena),
        ticker_(arena),
        class_code_(arena),
        isin_(arena),
        currency_(arena),
        name_(arena),
        exchange_(arena),
        country_of_risk_(arena),
        country_of_risk_name_(arena),
        sector_(arena),
        issue_kind_(arena),
        uid_(arena),
        position_uid_(arena),
        asset_uid_(arena) {}

inline void Bond::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, klong_),
           0,
           offsetof(Impl_, bond_type_) -
               offsetof(Impl_, klong_) +
               sizeof(Impl_::bond_type_));
}
Bond::~Bond() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.Bond)
  SharedDtor(*this);
}
inline void Bond::SharedDtor(MessageLite& self) {
  Bond& this_ = static_cast<Bond&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.figi_.Destroy();
  this_._impl_.ticker_.Destroy();
  this_._impl_.class_code_.Destroy();
  this_._impl_.isin_.Destroy();
  this_._impl_.currency_.Destroy();
  this_._impl_.name_.Destroy();
  this_._impl_.exchange_.Destroy();
  this_._impl_.country_of_risk_.Destroy();
  this_._impl_.country_of_risk_name_.Destroy();
  this_._impl_.sector_.Destroy();
  this_._impl_.issue_kind_.Destroy();
  this_._impl_.uid_.Destroy();
  this_._impl_.position_uid_.Destroy();
  this_._impl_.asset_uid_.Destroy();
  delete this_._impl_.klong_;
  delete this_._impl_.kshort_;
  delete this_._impl_.dlong_;
  delete this_._impl_.dshort_;
  delete this_._impl_.dlong_min_;
  delete this_._impl_.dshort_min_;
  delete this_._impl_.maturity_date_;
  delete this_._impl_.nominal_;
  delete this_._impl_.initial_nominal_;
  delete this_._impl_.state_reg_date_;
  delete this_._impl_.placement_date_;
  delete this_._impl_.placement_price_;
  delete this_._impl_.aci_value_;
  delete this_._impl_.min_price_increment_;
  delete this_._impl_.first_1min_candle_date_;
  delete this_._impl_.first_1day_candle_date_;
  delete this_._impl_.brand_;
  delete this_._impl_.call_date_;
  delete this_._impl_.dlong_client_;
  delete this_._impl_.dshort_client_;
  this_._impl_.~Impl_();
}

inline void* Bond::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Bond(arena);
}
constexpr auto Bond::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Bond),
                                            alignof(Bond));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Bond::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Bond_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Bond::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Bond>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Bond::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Bond>(), &Bond::ByteSizeLong,
            &Bond::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Bond, _impl_._cached_size_),
        false,
    },
    &Bond::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Bond::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 56, 20, 226, 13> Bond::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Bond, _impl_._has_bits_),
    0, // no _extensions_
    91, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    8192,  // skipmap
    offsetof(decltype(_table_), field_entries),
    56,  // num_field_entries
    20,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Bond>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string figi = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Bond, _impl_.figi_)}},
    // string ticker = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Bond, _impl_.ticker_)}},
    // string class_code = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Bond, _impl_.class_code_)}},
    // string isin = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(Bond, _impl_.isin_)}},
    // int32 lot = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Bond, _impl_.lot_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(Bond, _impl_.lot_)}},
    // string currency = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(Bond, _impl_.currency_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation klong = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 0, 0, PROTOBUF_FIELD_OFFSET(Bond, _impl_.klong_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation kshort = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 1, 1, PROTOBUF_FIELD_OFFSET(Bond, _impl_.kshort_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation dlong = 9;
    {::_pbi::TcParser::FastMtS1,
     {74, 2, 2, PROTOBUF_FIELD_OFFSET(Bond, _impl_.dlong_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation dshort = 10;
    {::_pbi::TcParser::FastMtS1,
     {82, 3, 3, PROTOBUF_FIELD_OFFSET(Bond, _impl_.dshort_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation dlong_min = 11;
    {::_pbi::TcParser::FastMtS1,
     {90, 4, 4, PROTOBUF_FIELD_OFFSET(Bond, _impl_.dlong_min_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation dshort_min = 12;
    {::_pbi::TcParser::FastMtS1,
     {98, 5, 5, PROTOBUF_FIELD_OFFSET(Bond, _impl_.dshort_min_)}},
    // bool short_enabled_flag = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Bond, _impl_.short_enabled_flag_), 63>(),
     {104, 63, 0, PROTOBUF_FIELD_OFFSET(Bond, _impl_.short_enabled_flag_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // string name = 15;
    {::_pbi::TcParser::FastUS1,
     {122, 63, 0, PROTOBUF_FIELD_OFFSET(Bond, _impl_.name_)}},
    // string exchange = 16;
    {::_pbi::TcParser::FastUS2,
     {386, 63, 0, PROTOBUF_FIELD_OFFSET(Bond, _impl_.exchange_)}},
    // int32 coupon_quantity_per_year = 17;
    {::_pbi::TcParser::FastV32S2,
     {392, 63, 0, PROTOBUF_FIELD_OFFSET(Bond, _impl_.coupon_quantity_per_year_)}},
    // .google.protobuf.Timestamp maturity_date = 18;
    {::_pbi::TcParser::FastMtS2,
     {402, 6, 6, PROTOBUF_FIELD_OFFSET(Bond, _impl_.maturity_date_)}},
    // .tinkoff.public.invest.api.contract.v1.MoneyValue nominal = 19;
    {::_pbi::TcParser::FastMtS2,
     {410, 7, 7, PROTOBUF_FIELD_OFFSET(Bond, _impl_.nominal_)}},
    // .tinkoff.public.invest.api.contract.v1.MoneyValue initial_nominal = 20;
    {::_pbi::TcParser::FastMtS2,
     {418, 8, 8, PROTOBUF_FIELD_OFFSET(Bond, _impl_.initial_nominal_)}},
    // .google.protobuf.Timestamp state_reg_date = 21;
    {::_pbi::TcParser::FastMtS2,
     {426, 9, 9, PROTOBUF_FIELD_OFFSET(Bond, _impl_.state_reg_date_)}},
    // .google.protobuf.Timestamp placement_date = 22;
    {::_pbi::TcParser::FastMtS2,
     {434, 10, 10, PROTOBUF_FIELD_OFFSET(Bond, _impl_.placement_date_)}},
    // .tinkoff.public.invest.api.contract.v1.MoneyValue placement_price = 23;
    {::_pbi::TcParser::FastMtS2,
     {442, 11, 11, PROTOBUF_FIELD_OFFSET(Bond, _impl_.placement_price_)}},
    // .tinkoff.public.invest.api.contract.v1.MoneyValue aci_value = 24;
    {::_pbi::TcParser::FastMtS2,
     {450, 12, 12, PROTOBUF_FIELD_OFFSET(Bond, _impl_.aci_value_)}},
    // string country_of_risk = 25;
    {::_pbi::TcParser::FastUS2,
     {458, 63, 0, PROTOBUF_FIELD_OFFSET(Bond, _impl_.country_of_risk_)}},
    // string country_of_risk_name = 26;
    {::_pbi::TcParser::FastUS2,
     {466, 63, 0, PROTOBUF_FIELD_OFFSET(Bond, _impl_.country_of_risk_name_)}},
    // string sector = 27;
    {::_pbi::TcParser::FastUS2,
     {474, 63, 0, PROTOBUF_FIELD_OFFSET(Bond, _impl_.sector_)}},
    // string issue_kind = 28;
    {::_pbi::TcParser::FastUS2,
     {482, 63, 0, PROTOBUF_FIELD_OFFSET(Bond, _impl_.issue_kind_)}},
    // int64 issue_size = 29;
    {::_pbi::TcParser::FastV64S2,
     {488, 63, 0, PROTOBUF_FIELD_OFFSET(Bond, _impl_.issue_size_)}},
    // int64 issue_size_plan = 30;
    {::_pbi::TcParser::FastV64S2,
     {496, 63, 0, PROTOBUF_FIELD_OFFSET(Bond, _impl_.issue_size_plan_)}},
    // .tinkoff.public.invest.api.contract.v1.SecurityTradingStatus trading_status = 31;
    {::_pbi::TcParser::FastV32S2,
     {504, 63, 0, PROTOBUF_FIELD_OFFSET(Bond, _impl_.trading_status_)}},
  }}, {{
    33, 0, 4,
    63488, 31, 3843, 42, 65518, 52, 63999, 54,
    65535, 65535
  }}, {{
    // string figi = 1;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.figi_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string ticker = 2;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.ticker_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string class_code = 3;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.class_code_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string isin = 4;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.isin_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 lot = 5;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.lot_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string currency = 6;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.currency_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public.invest.api.contract.v1.Quotation klong = 7;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.klong_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation kshort = 8;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.kshort_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation dlong = 9;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.dlong_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation dshort = 10;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.dshort_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation dlong_min = 11;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.dlong_min_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation dshort_min = 12;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.dshort_min_), _Internal::kHasBitsOffset + 5, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool short_enabled_flag = 13;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.short_enabled_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string name = 15;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string exchange = 16;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.exchange_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 coupon_quantity_per_year = 17;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.coupon_quantity_per_year_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .google.protobuf.Timestamp maturity_date = 18;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.maturity_date_), _Internal::kHasBitsOffset + 6, 6,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.MoneyValue nominal = 19;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.nominal_), _Internal::kHasBitsOffset + 7, 7,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.MoneyValue initial_nominal = 20;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.initial_nominal_), _Internal::kHasBitsOffset + 8, 8,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp state_reg_date = 21;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.state_reg_date_), _Internal::kHasBitsOffset + 9, 9,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp placement_date = 22;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.placement_date_), _Internal::kHasBitsOffset + 10, 10,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.MoneyValue placement_price = 23;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.placement_price_), _Internal::kHasBitsOffset + 11, 11,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.MoneyValue aci_value = 24;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.aci_value_), _Internal::kHasBitsOffset + 12, 12,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string country_of_risk = 25;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.country_of_risk_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string country_of_risk_name = 26;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.country_of_risk_name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string sector = 27;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.sector_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string issue_kind = 28;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.issue_kind_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int64 issue_size = 29;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.issue_size_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // int64 issue_size_plan = 30;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.issue_size_plan_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // .tinkoff.public.invest.api.contract.v1.SecurityTradingStatus trading_status = 31;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.trading_status_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // bool otc_flag = 32;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.otc_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool buy_available_flag = 33;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.buy_available_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool sell_available_flag = 34;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.sell_available_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool floating_coupon_flag = 35;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.floating_coupon_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool perpetual_flag = 36;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.perpetual_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool amortization_flag = 37;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.amortization_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .tinkoff.public.invest.api.contract.v1.Quotation min_price_increment = 38;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.min_price_increment_), _Internal::kHasBitsOffset + 13, 13,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool api_trade_available_flag = 39;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.api_trade_available_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string uid = 40;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.uid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public.invest.api.contract.v1.RealExchange real_exchange = 41;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.real_exchange_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string position_uid = 42;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.position_uid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string asset_uid = 43;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.asset_uid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool for_iis_flag = 51;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.for_iis_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool for_qual_investor_flag = 52;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.for_qual_investor_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool weekend_flag = 53;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.weekend_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool blocked_tca_flag = 54;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.blocked_tca_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool subordinated_flag = 55;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.subordinated_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool liquidity_flag = 56;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.liquidity_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .google.protobuf.Timestamp first_1min_candle_date = 61;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.first_1min_candle_date_), _Internal::kHasBitsOffset + 14, 14,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp first_1day_candle_date = 62;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.first_1day_candle_date_), _Internal::kHasBitsOffset + 15, 15,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.RiskLevel risk_level = 63;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.risk_level_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .tinkoff.public.invest.api.contract.v1.BrandData brand = 64;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.brand_), _Internal::kHasBitsOffset + 16, 16,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.BondType bond_type = 65;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.bond_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .google.protobuf.Timestamp call_date = 69;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.call_date_), _Internal::kHasBitsOffset + 17, 17,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation dlong_client = 90;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.dlong_client_), _Internal::kHasBitsOffset + 18, 18,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation dshort_client = 91;
    {PROTOBUF_FIELD_OFFSET(Bond, _impl_.dshort_client_), _Internal::kHasBitsOffset + 19, 19,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::MoneyValue>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::MoneyValue>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::MoneyValue>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::MoneyValue>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::BrandData>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
  }}, {{
    "\52\4\6\12\4\0\10\0\0\0\0\0\0\0\4\10\0\0\0\0\0\0\0\0\17\24\6\12\0\0\0\0\0\0\0\0\0\0\0\3\0\14\11\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "tinkoff.public.invest.api.contract.v1.Bond"
    "figi"
    "ticker"
    "class_code"
    "isin"
    "currency"
    "name"
    "exchange"
    "country_of_risk"
    "country_of_risk_name"
    "sector"
    "issue_kind"
    "uid"
    "position_uid"
    "asset_uid"
  }},
};

PROTOBUF_NOINLINE void Bond::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.Bond)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.figi_.ClearToEmpty();
  _impl_.ticker_.ClearToEmpty();
  _impl_.class_code_.ClearToEmpty();
  _impl_.isin_.ClearToEmpty();
  _impl_.currency_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.exchange_.ClearToEmpty();
  _impl_.country_of_risk_.ClearToEmpty();
  _impl_.country_of_risk_name_.ClearToEmpty();
  _impl_.sector_.ClearToEmpty();
  _impl_.issue_kind_.ClearToEmpty();
  _impl_.uid_.ClearToEmpty();
  _impl_.position_uid_.ClearToEmpty();
  _impl_.asset_uid_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.klong_ != nullptr);
      _impl_.klong_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.kshort_ != nullptr);
      _impl_.kshort_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.dlong_ != nullptr);
      _impl_.dlong_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.dshort_ != nullptr);
      _impl_.dshort_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.dlong_min_ != nullptr);
      _impl_.dlong_min_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.dshort_min_ != nullptr);
      _impl_.dshort_min_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(_impl_.maturity_date_ != nullptr);
      _impl_.maturity_date_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      ABSL_DCHECK(_impl_.nominal_ != nullptr);
      _impl_.nominal_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      ABSL_DCHECK(_impl_.initial_nominal_ != nullptr);
      _impl_.initial_nominal_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      ABSL_DCHECK(_impl_.state_reg_date_ != nullptr);
      _impl_.state_reg_date_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      ABSL_DCHECK(_impl_.placement_date_ != nullptr);
      _impl_.placement_date_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      ABSL_DCHECK(_impl_.placement_price_ != nullptr);
      _impl_.placement_price_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      ABSL_DCHECK(_impl_.aci_value_ != nullptr);
      _impl_.aci_value_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      ABSL_DCHECK(_impl_.min_price_increment_ != nullptr);
      _impl_.min_price_increment_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      ABSL_DCHECK(_impl_.first_1min_candle_date_ != nullptr);
      _impl_.first_1min_candle_date_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      ABSL_DCHECK(_impl_.first_1day_candle_date_ != nullptr);
      _impl_.first_1day_candle_date_->Clear();
    }
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      ABSL_DCHECK(_impl_.brand_ != nullptr);
      _impl_.brand_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      ABSL_DCHECK(_impl_.call_date_ != nullptr);
      _impl_.call_date_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      ABSL_DCHECK(_impl_.dlong_client_ != nullptr);
      _impl_.dlong_client_->Clear();
    }
    if (cached_has_bits & 0x00080000u) {
      ABSL_DCHECK(_impl_.dshort_client_ != nullptr);
      _impl_.dshort_client_->Clear();
    }
  }
  ::memset(&_impl_.lot_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.bond_type_) -
      reinterpret_cast<char*>(&_impl_.lot_)) + sizeof(_impl_.bond_type_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Bond::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Bond& this_ = static_cast<const Bond&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Bond::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Bond& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.Bond)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string figi = 1;
          if (!this_._internal_figi().empty()) {
            const std::string& _s = this_._internal_figi();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Bond.figi");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string ticker = 2;
          if (!this_._internal_ticker().empty()) {
            const std::string& _s = this_._internal_ticker();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Bond.ticker");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // string class_code = 3;
          if (!this_._internal_class_code().empty()) {
            const std::string& _s = this_._internal_class_code();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Bond.class_code");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // string isin = 4;
          if (!this_._internal_isin().empty()) {
            const std::string& _s = this_._internal_isin();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Bond.isin");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          // int32 lot = 5;
          if (this_._internal_lot() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<5>(
                    stream, this_._internal_lot(), target);
          }

          // string currency = 6;
          if (!this_._internal_currency().empty()) {
            const std::string& _s = this_._internal_currency();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Bond.currency");
            target = stream->WriteStringMaybeAliased(6, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .tinkoff.public.invest.api.contract.v1.Quotation klong = 7;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                7, *this_._impl_.klong_, this_._impl_.klong_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation kshort = 8;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                8, *this_._impl_.kshort_, this_._impl_.kshort_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation dlong = 9;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                9, *this_._impl_.dlong_, this_._impl_.dlong_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation dshort = 10;
          if (cached_has_bits & 0x00000008u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                10, *this_._impl_.dshort_, this_._impl_.dshort_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation dlong_min = 11;
          if (cached_has_bits & 0x00000010u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                11, *this_._impl_.dlong_min_, this_._impl_.dlong_min_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation dshort_min = 12;
          if (cached_has_bits & 0x00000020u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                12, *this_._impl_.dshort_min_, this_._impl_.dshort_min_->GetCachedSize(), target,
                stream);
          }

          // bool short_enabled_flag = 13;
          if (this_._internal_short_enabled_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                13, this_._internal_short_enabled_flag(), target);
          }

          // string name = 15;
          if (!this_._internal_name().empty()) {
            const std::string& _s = this_._internal_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Bond.name");
            target = stream->WriteStringMaybeAliased(15, _s, target);
          }

          // string exchange = 16;
          if (!this_._internal_exchange().empty()) {
            const std::string& _s = this_._internal_exchange();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Bond.exchange");
            target = stream->WriteStringMaybeAliased(16, _s, target);
          }

          // int32 coupon_quantity_per_year = 17;
          if (this_._internal_coupon_quantity_per_year() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                17, this_._internal_coupon_quantity_per_year(), target);
          }

          // .google.protobuf.Timestamp maturity_date = 18;
          if (cached_has_bits & 0x00000040u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                18, *this_._impl_.maturity_date_, this_._impl_.maturity_date_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.MoneyValue nominal = 19;
          if (cached_has_bits & 0x00000080u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                19, *this_._impl_.nominal_, this_._impl_.nominal_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.MoneyValue initial_nominal = 20;
          if (cached_has_bits & 0x00000100u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                20, *this_._impl_.initial_nominal_, this_._impl_.initial_nominal_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Timestamp state_reg_date = 21;
          if (cached_has_bits & 0x00000200u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                21, *this_._impl_.state_reg_date_, this_._impl_.state_reg_date_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Timestamp placement_date = 22;
          if (cached_has_bits & 0x00000400u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                22, *this_._impl_.placement_date_, this_._impl_.placement_date_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.MoneyValue placement_price = 23;
          if (cached_has_bits & 0x00000800u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                23, *this_._impl_.placement_price_, this_._impl_.placement_price_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.MoneyValue aci_value = 24;
          if (cached_has_bits & 0x00001000u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                24, *this_._impl_.aci_value_, this_._impl_.aci_value_->GetCachedSize(), target,
                stream);
          }

          // string country_of_risk = 25;
          if (!this_._internal_country_of_risk().empty()) {
            const std::string& _s = this_._internal_country_of_risk();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Bond.country_of_risk");
            target = stream->WriteStringMaybeAliased(25, _s, target);
          }

          // string country_of_risk_name = 26;
          if (!this_._internal_country_of_risk_name().empty()) {
            const std::string& _s = this_._internal_country_of_risk_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Bond.country_of_risk_name");
            target = stream->WriteStringMaybeAliased(26, _s, target);
          }

          // string sector = 27;
          if (!this_._internal_sector().empty()) {
            const std::string& _s = this_._internal_sector();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Bond.sector");
            target = stream->WriteStringMaybeAliased(27, _s, target);
          }

          // string issue_kind = 28;
          if (!this_._internal_issue_kind().empty()) {
            const std::string& _s = this_._internal_issue_kind();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Bond.issue_kind");
            target = stream->WriteStringMaybeAliased(28, _s, target);
          }

          // int64 issue_size = 29;
          if (this_._internal_issue_size() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(
                29, this_._internal_issue_size(), target);
          }

          // int64 issue_size_plan = 30;
          if (this_._internal_issue_size_plan() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(
                30, this_._internal_issue_size_plan(), target);
          }

          // .tinkoff.public.invest.api.contract.v1.SecurityTradingStatus trading_status = 31;
          if (this_._internal_trading_status() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                31, this_._internal_trading_status(), target);
          }

          // bool otc_flag = 32;
          if (this_._internal_otc_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                32, this_._internal_otc_flag(), target);
          }

          // bool buy_available_flag = 33;
          if (this_._internal_buy_available_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                33, this_._internal_buy_available_flag(), target);
          }

          // bool sell_available_flag = 34;
          if (this_._internal_sell_available_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                34, this_._internal_sell_available_flag(), target);
          }

          // bool floating_coupon_flag = 35;
          if (this_._internal_floating_coupon_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                35, this_._internal_floating_coupon_flag(), target);
          }

          // bool perpetual_flag = 36;
          if (this_._internal_perpetual_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                36, this_._internal_perpetual_flag(), target);
          }

          // bool amortization_flag = 37;
          if (this_._internal_amortization_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                37, this_._internal_amortization_flag(), target);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation min_price_increment = 38;
          if (cached_has_bits & 0x00002000u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                38, *this_._impl_.min_price_increment_, this_._impl_.min_price_increment_->GetCachedSize(), target,
                stream);
          }

          // bool api_trade_available_flag = 39;
          if (this_._internal_api_trade_available_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                39, this_._internal_api_trade_available_flag(), target);
          }

          // string uid = 40;
          if (!this_._internal_uid().empty()) {
            const std::string& _s = this_._internal_uid();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Bond.uid");
            target = stream->WriteStringMaybeAliased(40, _s, target);
          }

          // .tinkoff.public.invest.api.contract.v1.RealExchange real_exchange = 41;
          if (this_._internal_real_exchange() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                41, this_._internal_real_exchange(), target);
          }

          // string position_uid = 42;
          if (!this_._internal_position_uid().empty()) {
            const std::string& _s = this_._internal_position_uid();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Bond.position_uid");
            target = stream->WriteStringMaybeAliased(42, _s, target);
          }

          // string asset_uid = 43;
          if (!this_._internal_asset_uid().empty()) {
            const std::string& _s = this_._internal_asset_uid();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Bond.asset_uid");
            target = stream->WriteStringMaybeAliased(43, _s, target);
          }

          // bool for_iis_flag = 51;
          if (this_._internal_for_iis_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                51, this_._internal_for_iis_flag(), target);
          }

          // bool for_qual_investor_flag = 52;
          if (this_._internal_for_qual_investor_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                52, this_._internal_for_qual_investor_flag(), target);
          }

          // bool weekend_flag = 53;
          if (this_._internal_weekend_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                53, this_._internal_weekend_flag(), target);
          }

          // bool blocked_tca_flag = 54;
          if (this_._internal_blocked_tca_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                54, this_._internal_blocked_tca_flag(), target);
          }

          // bool subordinated_flag = 55;
          if (this_._internal_subordinated_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                55, this_._internal_subordinated_flag(), target);
          }

          // bool liquidity_flag = 56;
          if (this_._internal_liquidity_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                56, this_._internal_liquidity_flag(), target);
          }

          // .google.protobuf.Timestamp first_1min_candle_date = 61;
          if (cached_has_bits & 0x00004000u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                61, *this_._impl_.first_1min_candle_date_, this_._impl_.first_1min_candle_date_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Timestamp first_1day_candle_date = 62;
          if (cached_has_bits & 0x00008000u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                62, *this_._impl_.first_1day_candle_date_, this_._impl_.first_1day_candle_date_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.RiskLevel risk_level = 63;
          if (this_._internal_risk_level() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                63, this_._internal_risk_level(), target);
          }

          // .tinkoff.public.invest.api.contract.v1.BrandData brand = 64;
          if (cached_has_bits & 0x00010000u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                64, *this_._impl_.brand_, this_._impl_.brand_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.BondType bond_type = 65;
          if (this_._internal_bond_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                65, this_._internal_bond_type(), target);
          }

          // .google.protobuf.Timestamp call_date = 69;
          if (cached_has_bits & 0x00020000u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                69, *this_._impl_.call_date_, this_._impl_.call_date_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation dlong_client = 90;
          if (cached_has_bits & 0x00040000u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                90, *this_._impl_.dlong_client_, this_._impl_.dlong_client_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation dshort_client = 91;
          if (cached_has_bits & 0x00080000u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                91, *this_._impl_.dshort_client_, this_._impl_.dshort_client_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.Bond)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Bond::ByteSizeLong(const MessageLite& base) {
          const Bond& this_ = static_cast<const Bond&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Bond::ByteSizeLong() const {
          const Bond& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.Bond)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string figi = 1;
            if (!this_._internal_figi().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_figi());
            }
            // string ticker = 2;
            if (!this_._internal_ticker().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_ticker());
            }
            // string class_code = 3;
            if (!this_._internal_class_code().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_class_code());
            }
            // string isin = 4;
            if (!this_._internal_isin().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_isin());
            }
            // string currency = 6;
            if (!this_._internal_currency().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_currency());
            }
            // string name = 15;
            if (!this_._internal_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_name());
            }
            // string exchange = 16;
            if (!this_._internal_exchange().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_exchange());
            }
            // string country_of_risk = 25;
            if (!this_._internal_country_of_risk().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_country_of_risk());
            }
            // string country_of_risk_name = 26;
            if (!this_._internal_country_of_risk_name().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_country_of_risk_name());
            }
            // string sector = 27;
            if (!this_._internal_sector().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_sector());
            }
            // string issue_kind = 28;
            if (!this_._internal_issue_kind().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_issue_kind());
            }
            // string uid = 40;
            if (!this_._internal_uid().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_uid());
            }
            // string position_uid = 42;
            if (!this_._internal_position_uid().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_position_uid());
            }
            // string asset_uid = 43;
            if (!this_._internal_asset_uid().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_asset_uid());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x000000ffu) {
            // .tinkoff.public.invest.api.contract.v1.Quotation klong = 7;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.klong_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation kshort = 8;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.kshort_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation dlong = 9;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.dlong_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation dshort = 10;
            if (cached_has_bits & 0x00000008u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.dshort_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation dlong_min = 11;
            if (cached_has_bits & 0x00000010u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.dlong_min_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation dshort_min = 12;
            if (cached_has_bits & 0x00000020u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.dshort_min_);
            }
            // .google.protobuf.Timestamp maturity_date = 18;
            if (cached_has_bits & 0x00000040u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.maturity_date_);
            }
            // .tinkoff.public.invest.api.contract.v1.MoneyValue nominal = 19;
            if (cached_has_bits & 0x00000080u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.nominal_);
            }
          }
          if (cached_has_bits & 0x0000ff00u) {
            // .tinkoff.public.invest.api.contract.v1.MoneyValue initial_nominal = 20;
            if (cached_has_bits & 0x00000100u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.initial_nominal_);
            }
            // .google.protobuf.Timestamp state_reg_date = 21;
            if (cached_has_bits & 0x00000200u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.state_reg_date_);
            }
            // .google.protobuf.Timestamp placement_date = 22;
            if (cached_has_bits & 0x00000400u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.placement_date_);
            }
            // .tinkoff.public.invest.api.contract.v1.MoneyValue placement_price = 23;
            if (cached_has_bits & 0x00000800u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.placement_price_);
            }
            // .tinkoff.public.invest.api.contract.v1.MoneyValue aci_value = 24;
            if (cached_has_bits & 0x00001000u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.aci_value_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation min_price_increment = 38;
            if (cached_has_bits & 0x00002000u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.min_price_increment_);
            }
            // .google.protobuf.Timestamp first_1min_candle_date = 61;
            if (cached_has_bits & 0x00004000u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.first_1min_candle_date_);
            }
            // .google.protobuf.Timestamp first_1day_candle_date = 62;
            if (cached_has_bits & 0x00008000u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.first_1day_candle_date_);
            }
          }
          if (cached_has_bits & 0x000f0000u) {
            // .tinkoff.public.invest.api.contract.v1.BrandData brand = 64;
            if (cached_has_bits & 0x00010000u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.brand_);
            }
            // .google.protobuf.Timestamp call_date = 69;
            if (cached_has_bits & 0x00020000u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.call_date_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation dlong_client = 90;
            if (cached_has_bits & 0x00040000u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.dlong_client_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation dshort_client = 91;
            if (cached_has_bits & 0x00080000u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.dshort_client_);
            }
          }
           {
            // int32 lot = 5;
            if (this_._internal_lot() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_lot());
            }
            // int32 coupon_quantity_per_year = 17;
            if (this_._internal_coupon_quantity_per_year() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_coupon_quantity_per_year());
            }
            // bool short_enabled_flag = 13;
            if (this_._internal_short_enabled_flag() != 0) {
              total_size += 2;
            }
            // bool otc_flag = 32;
            if (this_._internal_otc_flag() != 0) {
              total_size += 3;
            }
            // bool buy_available_flag = 33;
            if (this_._internal_buy_available_flag() != 0) {
              total_size += 3;
            }
            // bool sell_available_flag = 34;
            if (this_._internal_sell_available_flag() != 0) {
              total_size += 3;
            }
            // .tinkoff.public.invest.api.contract.v1.SecurityTradingStatus trading_status = 31;
            if (this_._internal_trading_status() != 0) {
              total_size += 2 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_trading_status());
            }
            // int64 issue_size = 29;
            if (this_._internal_issue_size() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                              this_._internal_issue_size());
            }
            // int64 issue_size_plan = 30;
            if (this_._internal_issue_size_plan() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                              this_._internal_issue_size_plan());
            }
            // bool floating_coupon_flag = 35;
            if (this_._internal_floating_coupon_flag() != 0) {
              total_size += 3;
            }
            // bool perpetual_flag = 36;
            if (this_._internal_perpetual_flag() != 0) {
              total_size += 3;
            }
            // bool amortization_flag = 37;
            if (this_._internal_amortization_flag() != 0) {
              total_size += 3;
            }
            // bool api_trade_available_flag = 39;
            if (this_._internal_api_trade_available_flag() != 0) {
              total_size += 3;
            }
            // .tinkoff.public.invest.api.contract.v1.RealExchange real_exchange = 41;
            if (this_._internal_real_exchange() != 0) {
              total_size += 2 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_real_exchange());
            }
            // bool for_iis_flag = 51;
            if (this_._internal_for_iis_flag() != 0) {
              total_size += 3;
            }
            // bool for_qual_investor_flag = 52;
            if (this_._internal_for_qual_investor_flag() != 0) {
              total_size += 3;
            }
            // bool weekend_flag = 53;
            if (this_._internal_weekend_flag() != 0) {
              total_size += 3;
            }
            // bool blocked_tca_flag = 54;
            if (this_._internal_blocked_tca_flag() != 0) {
              total_size += 3;
            }
            // bool subordinated_flag = 55;
            if (this_._internal_subordinated_flag() != 0) {
              total_size += 3;
            }
            // bool liquidity_flag = 56;
            if (this_._internal_liquidity_flag() != 0) {
              total_size += 3;
            }
            // .tinkoff.public.invest.api.contract.v1.RiskLevel risk_level = 63;
            if (this_._internal_risk_level() != 0) {
              total_size += 2 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_risk_level());
            }
            // .tinkoff.public.invest.api.contract.v1.BondType bond_type = 65;
            if (this_._internal_bond_type() != 0) {
              total_size += 2 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_bond_type());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Bond::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Bond*>(&to_msg);
  auto& from = static_cast<const Bond&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.Bond)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_ticker().empty()) {
    _this->_internal_set_ticker(from._internal_ticker());
  }
  if (!from._internal_class_code().empty()) {
    _this->_internal_set_class_code(from._internal_class_code());
  }
  if (!from._internal_isin().empty()) {
    _this->_internal_set_isin(from._internal_isin());
  }
  if (!from._internal_currency().empty()) {
    _this->_internal_set_currency(from._internal_currency());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_exchange().empty()) {
    _this->_internal_set_exchange(from._internal_exchange());
  }
  if (!from._internal_country_of_risk().empty()) {
    _this->_internal_set_country_of_risk(from._internal_country_of_risk());
  }
  if (!from._internal_country_of_risk_name().empty()) {
    _this->_internal_set_country_of_risk_name(from._internal_country_of_risk_name());
  }
  if (!from._internal_sector().empty()) {
    _this->_internal_set_sector(from._internal_sector());
  }
  if (!from._internal_issue_kind().empty()) {
    _this->_internal_set_issue_kind(from._internal_issue_kind());
  }
  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (!from._internal_position_uid().empty()) {
    _this->_internal_set_position_uid(from._internal_position_uid());
  }
  if (!from._internal_asset_uid().empty()) {
    _this->_internal_set_asset_uid(from._internal_asset_uid());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.klong_ != nullptr);
      if (_this->_impl_.klong_ == nullptr) {
        _this->_impl_.klong_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.klong_);
      } else {
        _this->_impl_.klong_->MergeFrom(*from._impl_.klong_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.kshort_ != nullptr);
      if (_this->_impl_.kshort_ == nullptr) {
        _this->_impl_.kshort_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.kshort_);
      } else {
        _this->_impl_.kshort_->MergeFrom(*from._impl_.kshort_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.dlong_ != nullptr);
      if (_this->_impl_.dlong_ == nullptr) {
        _this->_impl_.dlong_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.dlong_);
      } else {
        _this->_impl_.dlong_->MergeFrom(*from._impl_.dlong_);
      }
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(from._impl_.dshort_ != nullptr);
      if (_this->_impl_.dshort_ == nullptr) {
        _this->_impl_.dshort_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.dshort_);
      } else {
        _this->_impl_.dshort_->MergeFrom(*from._impl_.dshort_);
      }
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(from._impl_.dlong_min_ != nullptr);
      if (_this->_impl_.dlong_min_ == nullptr) {
        _this->_impl_.dlong_min_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.dlong_min_);
      } else {
        _this->_impl_.dlong_min_->MergeFrom(*from._impl_.dlong_min_);
      }
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(from._impl_.dshort_min_ != nullptr);
      if (_this->_impl_.dshort_min_ == nullptr) {
        _this->_impl_.dshort_min_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.dshort_min_);
      } else {
        _this->_impl_.dshort_min_->MergeFrom(*from._impl_.dshort_min_);
      }
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(from._impl_.maturity_date_ != nullptr);
      if (_this->_impl_.maturity_date_ == nullptr) {
        _this->_impl_.maturity_date_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.maturity_date_);
      } else {
        _this->_impl_.maturity_date_->MergeFrom(*from._impl_.maturity_date_);
      }
    }
    if (cached_has_bits & 0x00000080u) {
      ABSL_DCHECK(from._impl_.nominal_ != nullptr);
      if (_this->_impl_.nominal_ == nullptr) {
        _this->_impl_.nominal_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(arena, *from._impl_.nominal_);
      } else {
        _this->_impl_.nominal_->MergeFrom(*from._impl_.nominal_);
      }
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      ABSL_DCHECK(from._impl_.initial_nominal_ != nullptr);
      if (_this->_impl_.initial_nominal_ == nullptr) {
        _this->_impl_.initial_nominal_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(arena, *from._impl_.initial_nominal_);
      } else {
        _this->_impl_.initial_nominal_->MergeFrom(*from._impl_.initial_nominal_);
      }
    }
    if (cached_has_bits & 0x00000200u) {
      ABSL_DCHECK(from._impl_.state_reg_date_ != nullptr);
      if (_this->_impl_.state_reg_date_ == nullptr) {
        _this->_impl_.state_reg_date_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.state_reg_date_);
      } else {
        _this->_impl_.state_reg_date_->MergeFrom(*from._impl_.state_reg_date_);
      }
    }
    if (cached_has_bits & 0x00000400u) {
      ABSL_DCHECK(from._impl_.placement_date_ != nullptr);
      if (_this->_impl_.placement_date_ == nullptr) {
        _this->_impl_.placement_date_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.placement_date_);
      } else {
        _this->_impl_.placement_date_->MergeFrom(*from._impl_.placement_date_);
      }
    }
    if (cached_has_bits & 0x00000800u) {
      ABSL_DCHECK(from._impl_.placement_price_ != nullptr);
      if (_this->_impl_.placement_price_ == nullptr) {
        _this->_impl_.placement_price_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(arena, *from._impl_.placement_price_);
      } else {
        _this->_impl_.placement_price_->MergeFrom(*from._impl_.placement_price_);
      }
    }
    if (cached_has_bits & 0x00001000u) {
      ABSL_DCHECK(from._impl_.aci_value_ != nullptr);
      if (_this->_impl_.aci_value_ == nullptr) {
        _this->_impl_.aci_value_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(arena, *from._impl_.aci_value_);
      } else {
        _this->_impl_.aci_value_->MergeFrom(*from._impl_.aci_value_);
      }
    }
    if (cached_has_bits & 0x00002000u) {
      ABSL_DCHECK(from._impl_.min_price_increment_ != nullptr);
      if (_this->_impl_.min_price_increment_ == nullptr) {
        _this->_impl_.min_price_increment_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.min_price_increment_);
      } else {
        _this->_impl_.min_price_increment_->MergeFrom(*from._impl_.min_price_increment_);
      }
    }
    if (cached_has_bits & 0x00004000u) {
      ABSL_DCHECK(from._impl_.first_1min_candle_date_ != nullptr);
      if (_this->_impl_.first_1min_candle_date_ == nullptr) {
        _this->_impl_.first_1min_candle_date_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.first_1min_candle_date_);
      } else {
        _this->_impl_.first_1min_candle_date_->MergeFrom(*from._impl_.first_1min_candle_date_);
      }
    }
    if (cached_has_bits & 0x00008000u) {
      ABSL_DCHECK(from._impl_.first_1day_candle_date_ != nullptr);
      if (_this->_impl_.first_1day_candle_date_ == nullptr) {
        _this->_impl_.first_1day_candle_date_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.first_1day_candle_date_);
      } else {
        _this->_impl_.first_1day_candle_date_->MergeFrom(*from._impl_.first_1day_candle_date_);
      }
    }
  }
  if (cached_has_bits & 0x000f0000u) {
    if (cached_has_bits & 0x00010000u) {
      ABSL_DCHECK(from._impl_.brand_ != nullptr);
      if (_this->_impl_.brand_ == nullptr) {
        _this->_impl_.brand_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::BrandData>(arena, *from._impl_.brand_);
      } else {
        _this->_impl_.brand_->MergeFrom(*from._impl_.brand_);
      }
    }
    if (cached_has_bits & 0x00020000u) {
      ABSL_DCHECK(from._impl_.call_date_ != nullptr);
      if (_this->_impl_.call_date_ == nullptr) {
        _this->_impl_.call_date_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.call_date_);
      } else {
        _this->_impl_.call_date_->MergeFrom(*from._impl_.call_date_);
      }
    }
    if (cached_has_bits & 0x00040000u) {
      ABSL_DCHECK(from._impl_.dlong_client_ != nullptr);
      if (_this->_impl_.dlong_client_ == nullptr) {
        _this->_impl_.dlong_client_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.dlong_client_);
      } else {
        _this->_impl_.dlong_client_->MergeFrom(*from._impl_.dlong_client_);
      }
    }
    if (cached_has_bits & 0x00080000u) {
      ABSL_DCHECK(from._impl_.dshort_client_ != nullptr);
      if (_this->_impl_.dshort_client_ == nullptr) {
        _this->_impl_.dshort_client_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.dshort_client_);
      } else {
        _this->_impl_.dshort_client_->MergeFrom(*from._impl_.dshort_client_);
      }
    }
  }
  if (from._internal_lot() != 0) {
    _this->_impl_.lot_ = from._impl_.lot_;
  }
  if (from._internal_coupon_quantity_per_year() != 0) {
    _this->_impl_.coupon_quantity_per_year_ = from._impl_.coupon_quantity_per_year_;
  }
  if (from._internal_short_enabled_flag() != 0) {
    _this->_impl_.short_enabled_flag_ = from._impl_.short_enabled_flag_;
  }
  if (from._internal_otc_flag() != 0) {
    _this->_impl_.otc_flag_ = from._impl_.otc_flag_;
  }
  if (from._internal_buy_available_flag() != 0) {
    _this->_impl_.buy_available_flag_ = from._impl_.buy_available_flag_;
  }
  if (from._internal_sell_available_flag() != 0) {
    _this->_impl_.sell_available_flag_ = from._impl_.sell_available_flag_;
  }
  if (from._internal_trading_status() != 0) {
    _this->_impl_.trading_status_ = from._impl_.trading_status_;
  }
  if (from._internal_issue_size() != 0) {
    _this->_impl_.issue_size_ = from._impl_.issue_size_;
  }
  if (from._internal_issue_size_plan() != 0) {
    _this->_impl_.issue_size_plan_ = from._impl_.issue_size_plan_;
  }
  if (from._internal_floating_coupon_flag() != 0) {
    _this->_impl_.floating_coupon_flag_ = from._impl_.floating_coupon_flag_;
  }
  if (from._internal_perpetual_flag() != 0) {
    _this->_impl_.perpetual_flag_ = from._impl_.perpetual_flag_;
  }
  if (from._internal_amortization_flag() != 0) {
    _this->_impl_.amortization_flag_ = from._impl_.amortization_flag_;
  }
  if (from._internal_api_trade_available_flag() != 0) {
    _this->_impl_.api_trade_available_flag_ = from._impl_.api_trade_available_flag_;
  }
  if (from._internal_real_exchange() != 0) {
    _this->_impl_.real_exchange_ = from._impl_.real_exchange_;
  }
  if (from._internal_for_iis_flag() != 0) {
    _this->_impl_.for_iis_flag_ = from._impl_.for_iis_flag_;
  }
  if (from._internal_for_qual_investor_flag() != 0) {
    _this->_impl_.for_qual_investor_flag_ = from._impl_.for_qual_investor_flag_;
  }
  if (from._internal_weekend_flag() != 0) {
    _this->_impl_.weekend_flag_ = from._impl_.weekend_flag_;
  }
  if (from._internal_blocked_tca_flag() != 0) {
    _this->_impl_.blocked_tca_flag_ = from._impl_.blocked_tca_flag_;
  }
  if (from._internal_subordinated_flag() != 0) {
    _this->_impl_.subordinated_flag_ = from._impl_.subordinated_flag_;
  }
  if (from._internal_liquidity_flag() != 0) {
    _this->_impl_.liquidity_flag_ = from._impl_.liquidity_flag_;
  }
  if (from._internal_risk_level() != 0) {
    _this->_impl_.risk_level_ = from._impl_.risk_level_;
  }
  if (from._internal_bond_type() != 0) {
    _this->_impl_.bond_type_ = from._impl_.bond_type_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Bond::CopyFrom(const Bond& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.Bond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Bond::InternalSwap(Bond* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.figi_, &other->_impl_.figi_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ticker_, &other->_impl_.ticker_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.class_code_, &other->_impl_.class_code_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.isin_, &other->_impl_.isin_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.currency_, &other->_impl_.currency_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.exchange_, &other->_impl_.exchange_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.country_of_risk_, &other->_impl_.country_of_risk_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.country_of_risk_name_, &other->_impl_.country_of_risk_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sector_, &other->_impl_.sector_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.issue_kind_, &other->_impl_.issue_kind_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.uid_, &other->_impl_.uid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.position_uid_, &other->_impl_.position_uid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.asset_uid_, &other->_impl_.asset_uid_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Bond, _impl_.bond_type_)
      + sizeof(Bond::_impl_.bond_type_)
      - PROTOBUF_FIELD_OFFSET(Bond, _impl_.klong_)>(
          reinterpret_cast<char*>(&_impl_.klong_),
          reinterpret_cast<char*>(&other->_impl_.klong_));
}

::google::protobuf::Metadata Bond::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Currency::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Currency>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Currency, _impl_._has_bits_);
};

void Currency::clear_klong() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.klong_ != nullptr) _impl_.klong_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Currency::clear_kshort() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.kshort_ != nullptr) _impl_.kshort_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void Currency::clear_dlong() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.dlong_ != nullptr) _impl_.dlong_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void Currency::clear_dshort() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.dshort_ != nullptr) _impl_.dshort_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void Currency::clear_dlong_min() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.dlong_min_ != nullptr) _impl_.dlong_min_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void Currency::clear_dshort_min() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.dshort_min_ != nullptr) _impl_.dshort_min_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void Currency::clear_nominal() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.nominal_ != nullptr) _impl_.nominal_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void Currency::clear_min_price_increment() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.min_price_increment_ != nullptr) _impl_.min_price_increment_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void Currency::clear_first_1min_candle_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.first_1min_candle_date_ != nullptr) _impl_.first_1min_candle_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void Currency::clear_first_1day_candle_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.first_1day_candle_date_ != nullptr) _impl_.first_1day_candle_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void Currency::clear_brand() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.brand_ != nullptr) _impl_.brand_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
void Currency::clear_dlong_client() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.dlong_client_ != nullptr) _impl_.dlong_client_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
void Currency::clear_dshort_client() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.dshort_client_ != nullptr) _impl_.dshort_client_->Clear();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
Currency::Currency(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.Currency)
}
inline PROTOBUF_NDEBUG_INLINE Currency::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::Currency& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        figi_(arena, from.figi_),
        ticker_(arena, from.ticker_),
        class_code_(arena, from.class_code_),
        isin_(arena, from.isin_),
        currency_(arena, from.currency_),
        name_(arena, from.name_),
        exchange_(arena, from.exchange_),
        country_of_risk_(arena, from.country_of_risk_),
        country_of_risk_name_(arena, from.country_of_risk_name_),
        iso_currency_name_(arena, from.iso_currency_name_),
        uid_(arena, from.uid_),
        position_uid_(arena, from.position_uid_) {}

Currency::Currency(
    ::google::protobuf::Arena* arena,
    const Currency& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Currency* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.klong_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.klong_)
                        : nullptr;
  _impl_.kshort_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.kshort_)
                        : nullptr;
  _impl_.dlong_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.dlong_)
                        : nullptr;
  _impl_.dshort_ = (cached_has_bits & 0x00000008u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.dshort_)
                        : nullptr;
  _impl_.dlong_min_ = (cached_has_bits & 0x00000010u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.dlong_min_)
                        : nullptr;
  _impl_.dshort_min_ = (cached_has_bits & 0x00000020u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.dshort_min_)
                        : nullptr;
  _impl_.nominal_ = (cached_has_bits & 0x00000040u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(
                              arena, *from._impl_.nominal_)
                        : nullptr;
  _impl_.min_price_increment_ = (cached_has_bits & 0x00000080u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.min_price_increment_)
                        : nullptr;
  _impl_.first_1min_candle_date_ = (cached_has_bits & 0x00000100u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.first_1min_candle_date_)
                        : nullptr;
  _impl_.first_1day_candle_date_ = (cached_has_bits & 0x00000200u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.first_1day_candle_date_)
                        : nullptr;
  _impl_.brand_ = (cached_has_bits & 0x00000400u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::BrandData>(
                              arena, *from._impl_.brand_)
                        : nullptr;
  _impl_.dlong_client_ = (cached_has_bits & 0x00000800u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.dlong_client_)
                        : nullptr;
  _impl_.dshort_client_ = (cached_has_bits & 0x00001000u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.dshort_client_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, lot_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, lot_),
           offsetof(Impl_, blocked_tca_flag_) -
               offsetof(Impl_, lot_) +
               sizeof(Impl_::blocked_tca_flag_));

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.Currency)
}
inline PROTOBUF_NDEBUG_INLINE Currency::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        figi_(arena),
        ticker_(arena),
        class_code_(arena),
        isin_(arena),
        currency_(arena),
        name_(arena),
        exchange_(arena),
        country_of_risk_(arena),
        country_of_risk_name_(arena),
        iso_currency_name_(arena),
        uid_(arena),
        position_uid_(arena) {}

inline void Currency::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, klong_),
           0,
           offsetof(Impl_, blocked_tca_flag_) -
               offsetof(Impl_, klong_) +
               sizeof(Impl_::blocked_tca_flag_));
}
Currency::~Currency() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.Currency)
  SharedDtor(*this);
}
inline void Currency::SharedDtor(MessageLite& self) {
  Currency& this_ = static_cast<Currency&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.figi_.Destroy();
  this_._impl_.ticker_.Destroy();
  this_._impl_.class_code_.Destroy();
  this_._impl_.isin_.Destroy();
  this_._impl_.currency_.Destroy();
  this_._impl_.name_.Destroy();
  this_._impl_.exchange_.Destroy();
  this_._impl_.country_of_risk_.Destroy();
  this_._impl_.country_of_risk_name_.Destroy();
  this_._impl_.iso_currency_name_.Destroy();
  this_._impl_.uid_.Destroy();
  this_._impl_.position_uid_.Destroy();
  delete this_._impl_.klong_;
  delete this_._impl_.kshort_;
  delete this_._impl_.dlong_;
  delete this_._impl_.dshort_;
  delete this_._impl_.dlong_min_;
  delete this_._impl_.dshort_min_;
  delete this_._impl_.nominal_;
  delete this_._impl_.min_price_increment_;
  delete this_._impl_.first_1min_candle_date_;
  delete this_._impl_.first_1day_candle_date_;
  delete this_._impl_.brand_;
  delete this_._impl_.dlong_client_;
  delete this_._impl_.dshort_client_;
  this_._impl_.~Impl_();
}

inline void* Currency::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Currency(arena);
}
constexpr auto Currency::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Currency),
                                            alignof(Currency));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Currency::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Currency_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Currency::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Currency>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Currency::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Currency>(), &Currency::ByteSizeLong,
            &Currency::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Currency, _impl_._cached_size_),
        false,
    },
    &Currency::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Currency::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 37, 13, 198, 13> Currency::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Currency, _impl_._has_bits_),
    0, // no _extensions_
    91, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    3758104576,  // skipmap
    offsetof(decltype(_table_), field_entries),
    37,  // num_field_entries
    13,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Currency>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string figi = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Currency, _impl_.figi_)}},
    // string ticker = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Currency, _impl_.ticker_)}},
    // string class_code = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Currency, _impl_.class_code_)}},
    // string isin = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(Currency, _impl_.isin_)}},
    // int32 lot = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Currency, _impl_.lot_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(Currency, _impl_.lot_)}},
    // string currency = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(Currency, _impl_.currency_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation klong = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 0, 0, PROTOBUF_FIELD_OFFSET(Currency, _impl_.klong_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation kshort = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 1, 1, PROTOBUF_FIELD_OFFSET(Currency, _impl_.kshort_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation dlong = 9;
    {::_pbi::TcParser::FastMtS1,
     {74, 2, 2, PROTOBUF_FIELD_OFFSET(Currency, _impl_.dlong_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation dshort = 10;
    {::_pbi::TcParser::FastMtS1,
     {82, 3, 3, PROTOBUF_FIELD_OFFSET(Currency, _impl_.dshort_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation dlong_min = 11;
    {::_pbi::TcParser::FastMtS1,
     {90, 4, 4, PROTOBUF_FIELD_OFFSET(Currency, _impl_.dlong_min_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation dshort_min = 12;
    {::_pbi::TcParser::FastMtS1,
     {98, 5, 5, PROTOBUF_FIELD_OFFSET(Currency, _impl_.dshort_min_)}},
    // bool short_enabled_flag = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Currency, _impl_.short_enabled_flag_), 63>(),
     {104, 63, 0, PROTOBUF_FIELD_OFFSET(Currency, _impl_.short_enabled_flag_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // string name = 15;
    {::_pbi::TcParser::FastUS1,
     {122, 63, 0, PROTOBUF_FIELD_OFFSET(Currency, _impl_.name_)}},
    // string exchange = 16;
    {::_pbi::TcParser::FastUS2,
     {386, 63, 0, PROTOBUF_FIELD_OFFSET(Currency, _impl_.exchange_)}},
    // .tinkoff.public.invest.api.contract.v1.MoneyValue nominal = 17;
    {::_pbi::TcParser::FastMtS2,
     {394, 6, 6, PROTOBUF_FIELD_OFFSET(Currency, _impl_.nominal_)}},
    // string country_of_risk = 18;
    {::_pbi::TcParser::FastUS2,
     {402, 63, 0, PROTOBUF_FIELD_OFFSET(Currency, _impl_.country_of_risk_)}},
    // string country_of_risk_name = 19;
    {::_pbi::TcParser::FastUS2,
     {410, 63, 0, PROTOBUF_FIELD_OFFSET(Currency, _impl_.country_of_risk_name_)}},
    // .tinkoff.public.invest.api.contract.v1.SecurityTradingStatus trading_status = 20;
    {::_pbi::TcParser::FastV32S2,
     {416, 63, 0, PROTOBUF_FIELD_OFFSET(Currency, _impl_.trading_status_)}},
    // bool otc_flag = 21;
    {::_pbi::TcParser::FastV8S2,
     {424, 63, 0, PROTOBUF_FIELD_OFFSET(Currency, _impl_.otc_flag_)}},
    // bool buy_available_flag = 22;
    {::_pbi::TcParser::FastV8S2,
     {432, 63, 0, PROTOBUF_FIELD_OFFSET(Currency, _impl_.buy_available_flag_)}},
    // bool sell_available_flag = 23;
    {::_pbi::TcParser::FastV8S2,
     {440, 63, 0, PROTOBUF_FIELD_OFFSET(Currency, _impl_.sell_available_flag_)}},
    // string iso_currency_name = 24;
    {::_pbi::TcParser::FastUS2,
     {450, 63, 0, PROTOBUF_FIELD_OFFSET(Currency, _impl_.iso_currency_name_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation min_price_increment = 25;
    {::_pbi::TcParser::FastMtS2,
     {458, 7, 7, PROTOBUF_FIELD_OFFSET(Currency, _impl_.min_price_increment_)}},
    // bool api_trade_available_flag = 26;
    {::_pbi::TcParser::FastV8S2,
     {464, 63, 0, PROTOBUF_FIELD_OFFSET(Currency, _impl_.api_trade_available_flag_)}},
    // string uid = 27;
    {::_pbi::TcParser::FastUS2,
     {474, 63, 0, PROTOBUF_FIELD_OFFSET(Currency, _impl_.uid_)}},
    // .tinkoff.public.invest.api.contract.v1.RealExchange real_exchange = 28;
    {::_pbi::TcParser::FastV32S2,
     {480, 63, 0, PROTOBUF_FIELD_OFFSET(Currency, _impl_.real_exchange_)}},
    // string position_uid = 29;
    {::_pbi::TcParser::FastUS2,
     {490, 63, 0, PROTOBUF_FIELD_OFFSET(Currency, _impl_.position_uid_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    41, 0, 4,
    18430, 28, 65526, 33, 65535, 35, 65529, 35,
    65535, 65535
  }}, {{
    // string figi = 1;
    {PROTOBUF_FIELD_OFFSET(Currency, _impl_.figi_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string ticker = 2;
    {PROTOBUF_FIELD_OFFSET(Currency, _impl_.ticker_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string class_code = 3;
    {PROTOBUF_FIELD_OFFSET(Currency, _impl_.class_code_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string isin = 4;
    {PROTOBUF_FIELD_OFFSET(Currency, _impl_.isin_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 lot = 5;
    {PROTOBUF_FIELD_OFFSET(Currency, _impl_.lot_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string currency = 6;
    {PROTOBUF_FIELD_OFFSET(Currency, _impl_.currency_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public.invest.api.contract.v1.Quotation klong = 7;
    {PROTOBUF_FIELD_OFFSET(Currency, _impl_.klong_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation kshort = 8;
    {PROTOBUF_FIELD_OFFSET(Currency, _impl_.kshort_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation dlong = 9;
    {PROTOBUF_FIELD_OFFSET(Currency, _impl_.dlong_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation dshort = 10;
    {PROTOBUF_FIELD_OFFSET(Currency, _impl_.dshort_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation dlong_min = 11;
    {PROTOBUF_FIELD_OFFSET(Currency, _impl_.dlong_min_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation dshort_min = 12;
    {PROTOBUF_FIELD_OFFSET(Currency, _impl_.dshort_min_), _Internal::kHasBitsOffset + 5, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool short_enabled_flag = 13;
    {PROTOBUF_FIELD_OFFSET(Currency, _impl_.short_enabled_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string name = 15;
    {PROTOBUF_FIELD_OFFSET(Currency, _impl_.name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string exchange = 16;
    {PROTOBUF_FIELD_OFFSET(Currency, _impl_.exchange_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public.invest.api.contract.v1.MoneyValue nominal = 17;
    {PROTOBUF_FIELD_OFFSET(Currency, _impl_.nominal_), _Internal::kHasBitsOffset + 6, 6,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string country_of_risk = 18;
    {PROTOBUF_FIELD_OFFSET(Currency, _impl_.country_of_risk_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string country_of_risk_name = 19;
    {PROTOBUF_FIELD_OFFSET(Currency, _impl_.country_of_risk_name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public.invest.api.contract.v1.SecurityTradingStatus trading_status = 20;
    {PROTOBUF_FIELD_OFFSET(Currency, _impl_.trading_status_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // bool otc_flag = 21;
    {PROTOBUF_FIELD_OFFSET(Currency, _impl_.otc_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool buy_available_flag = 22;
    {PROTOBUF_FIELD_OFFSET(Currency, _impl_.buy_available_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool sell_available_flag = 23;
    {PROTOBUF_FIELD_OFFSET(Currency, _impl_.sell_available_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string iso_currency_name = 24;
    {PROTOBUF_FIELD_OFFSET(Currency, _impl_.iso_currency_name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public.invest.api.contract.v1.Quotation min_price_increment = 25;
    {PROTOBUF_FIELD_OFFSET(Currency, _impl_.min_price_increment_), _Internal::kHasBitsOffset + 7, 7,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool api_trade_available_flag = 26;
    {PROTOBUF_FIELD_OFFSET(Currency, _impl_.api_trade_available_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string uid = 27;
    {PROTOBUF_FIELD_OFFSET(Currency, _impl_.uid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public.invest.api.contract.v1.RealExchange real_exchange = 28;
    {PROTOBUF_FIELD_OFFSET(Currency, _impl_.real_exchange_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string position_uid = 29;
    {PROTOBUF_FIELD_OFFSET(Currency, _impl_.position_uid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool for_iis_flag = 41;
    {PROTOBUF_FIELD_OFFSET(Currency, _impl_.for_iis_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool for_qual_investor_flag = 52;
    {PROTOBUF_FIELD_OFFSET(Currency, _impl_.for_qual_investor_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool weekend_flag = 53;
    {PROTOBUF_FIELD_OFFSET(Currency, _impl_.weekend_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool blocked_tca_flag = 54;
    {PROTOBUF_FIELD_OFFSET(Currency, _impl_.blocked_tca_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .google.protobuf.Timestamp first_1min_candle_date = 56;
    {PROTOBUF_FIELD_OFFSET(Currency, _impl_.first_1min_candle_date_), _Internal::kHasBitsOffset + 8, 8,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp first_1day_candle_date = 57;
    {PROTOBUF_FIELD_OFFSET(Currency, _impl_.first_1day_candle_date_), _Internal::kHasBitsOffset + 9, 9,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.BrandData brand = 60;
    {PROTOBUF_FIELD_OFFSET(Currency, _impl_.brand_), _Internal::kHasBitsOffset + 10, 10,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation dlong_client = 90;
    {PROTOBUF_FIELD_OFFSET(Currency, _impl_.dlong_client_), _Internal::kHasBitsOffset + 11, 11,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation dshort_client = 91;
    {PROTOBUF_FIELD_OFFSET(Currency, _impl_.dshort_client_), _Internal::kHasBitsOffset + 12, 12,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::MoneyValue>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::BrandData>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
  }}, {{
    "\56\4\6\12\4\0\10\0\0\0\0\0\0\0\4\10\0\17\24\0\0\0\0\21\0\0\3\0\14\0\0\0\0\0\0\0\0\0\0\0"
    "tinkoff.public.invest.api.contract.v1.Currency"
    "figi"
    "ticker"
    "class_code"
    "isin"
    "currency"
    "name"
    "exchange"
    "country_of_risk"
    "country_of_risk_name"
    "iso_currency_name"
    "uid"
    "position_uid"
  }},
};

PROTOBUF_NOINLINE void Currency::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.Currency)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.figi_.ClearToEmpty();
  _impl_.ticker_.ClearToEmpty();
  _impl_.class_code_.ClearToEmpty();
  _impl_.isin_.ClearToEmpty();
  _impl_.currency_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.exchange_.ClearToEmpty();
  _impl_.country_of_risk_.ClearToEmpty();
  _impl_.country_of_risk_name_.ClearToEmpty();
  _impl_.iso_currency_name_.ClearToEmpty();
  _impl_.uid_.ClearToEmpty();
  _impl_.position_uid_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.klong_ != nullptr);
      _impl_.klong_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.kshort_ != nullptr);
      _impl_.kshort_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.dlong_ != nullptr);
      _impl_.dlong_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.dshort_ != nullptr);
      _impl_.dshort_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.dlong_min_ != nullptr);
      _impl_.dlong_min_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.dshort_min_ != nullptr);
      _impl_.dshort_min_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(_impl_.nominal_ != nullptr);
      _impl_.nominal_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      ABSL_DCHECK(_impl_.min_price_increment_ != nullptr);
      _impl_.min_price_increment_->Clear();
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      ABSL_DCHECK(_impl_.first_1min_candle_date_ != nullptr);
      _impl_.first_1min_candle_date_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      ABSL_DCHECK(_impl_.first_1day_candle_date_ != nullptr);
      _impl_.first_1day_candle_date_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      ABSL_DCHECK(_impl_.brand_ != nullptr);
      _impl_.brand_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      ABSL_DCHECK(_impl_.dlong_client_ != nullptr);
      _impl_.dlong_client_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      ABSL_DCHECK(_impl_.dshort_client_ != nullptr);
      _impl_.dshort_client_->Clear();
    }
  }
  ::memset(&_impl_.lot_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.blocked_tca_flag_) -
      reinterpret_cast<char*>(&_impl_.lot_)) + sizeof(_impl_.blocked_tca_flag_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Currency::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Currency& this_ = static_cast<const Currency&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Currency::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Currency& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.Currency)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string figi = 1;
          if (!this_._internal_figi().empty()) {
            const std::string& _s = this_._internal_figi();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Currency.figi");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string ticker = 2;
          if (!this_._internal_ticker().empty()) {
            const std::string& _s = this_._internal_ticker();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Currency.ticker");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // string class_code = 3;
          if (!this_._internal_class_code().empty()) {
            const std::string& _s = this_._internal_class_code();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Currency.class_code");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // string isin = 4;
          if (!this_._internal_isin().empty()) {
            const std::string& _s = this_._internal_isin();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Currency.isin");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          // int32 lot = 5;
          if (this_._internal_lot() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<5>(
                    stream, this_._internal_lot(), target);
          }

          // string currency = 6;
          if (!this_._internal_currency().empty()) {
            const std::string& _s = this_._internal_currency();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Currency.currency");
            target = stream->WriteStringMaybeAliased(6, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .tinkoff.public.invest.api.contract.v1.Quotation klong = 7;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                7, *this_._impl_.klong_, this_._impl_.klong_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation kshort = 8;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                8, *this_._impl_.kshort_, this_._impl_.kshort_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation dlong = 9;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                9, *this_._impl_.dlong_, this_._impl_.dlong_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation dshort = 10;
          if (cached_has_bits & 0x00000008u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                10, *this_._impl_.dshort_, this_._impl_.dshort_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation dlong_min = 11;
          if (cached_has_bits & 0x00000010u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                11, *this_._impl_.dlong_min_, this_._impl_.dlong_min_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation dshort_min = 12;
          if (cached_has_bits & 0x00000020u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                12, *this_._impl_.dshort_min_, this_._impl_.dshort_min_->GetCachedSize(), target,
                stream);
          }

          // bool short_enabled_flag = 13;
          if (this_._internal_short_enabled_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                13, this_._internal_short_enabled_flag(), target);
          }

          // string name = 15;
          if (!this_._internal_name().empty()) {
            const std::string& _s = this_._internal_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Currency.name");
            target = stream->WriteStringMaybeAliased(15, _s, target);
          }

          // string exchange = 16;
          if (!this_._internal_exchange().empty()) {
            const std::string& _s = this_._internal_exchange();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Currency.exchange");
            target = stream->WriteStringMaybeAliased(16, _s, target);
          }

          // .tinkoff.public.invest.api.contract.v1.MoneyValue nominal = 17;
          if (cached_has_bits & 0x00000040u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                17, *this_._impl_.nominal_, this_._impl_.nominal_->GetCachedSize(), target,
                stream);
          }

          // string country_of_risk = 18;
          if (!this_._internal_country_of_risk().empty()) {
            const std::string& _s = this_._internal_country_of_risk();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Currency.country_of_risk");
            target = stream->WriteStringMaybeAliased(18, _s, target);
          }

          // string country_of_risk_name = 19;
          if (!this_._internal_country_of_risk_name().empty()) {
            const std::string& _s = this_._internal_country_of_risk_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Currency.country_of_risk_name");
            target = stream->WriteStringMaybeAliased(19, _s, target);
          }

          // .tinkoff.public.invest.api.contract.v1.SecurityTradingStatus trading_status = 20;
          if (this_._internal_trading_status() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                20, this_._internal_trading_status(), target);
          }

          // bool otc_flag = 21;
          if (this_._internal_otc_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                21, this_._internal_otc_flag(), target);
          }

          // bool buy_available_flag = 22;
          if (this_._internal_buy_available_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                22, this_._internal_buy_available_flag(), target);
          }

          // bool sell_available_flag = 23;
          if (this_._internal_sell_available_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                23, this_._internal_sell_available_flag(), target);
          }

          // string iso_currency_name = 24;
          if (!this_._internal_iso_currency_name().empty()) {
            const std::string& _s = this_._internal_iso_currency_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Currency.iso_currency_name");
            target = stream->WriteStringMaybeAliased(24, _s, target);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation min_price_increment = 25;
          if (cached_has_bits & 0x00000080u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                25, *this_._impl_.min_price_increment_, this_._impl_.min_price_increment_->GetCachedSize(), target,
                stream);
          }

          // bool api_trade_available_flag = 26;
          if (this_._internal_api_trade_available_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                26, this_._internal_api_trade_available_flag(), target);
          }

          // string uid = 27;
          if (!this_._internal_uid().empty()) {
            const std::string& _s = this_._internal_uid();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Currency.uid");
            target = stream->WriteStringMaybeAliased(27, _s, target);
          }

          // .tinkoff.public.invest.api.contract.v1.RealExchange real_exchange = 28;
          if (this_._internal_real_exchange() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                28, this_._internal_real_exchange(), target);
          }

          // string position_uid = 29;
          if (!this_._internal_position_uid().empty()) {
            const std::string& _s = this_._internal_position_uid();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Currency.position_uid");
            target = stream->WriteStringMaybeAliased(29, _s, target);
          }

          // bool for_iis_flag = 41;
          if (this_._internal_for_iis_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                41, this_._internal_for_iis_flag(), target);
          }

          // bool for_qual_investor_flag = 52;
          if (this_._internal_for_qual_investor_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                52, this_._internal_for_qual_investor_flag(), target);
          }

          // bool weekend_flag = 53;
          if (this_._internal_weekend_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                53, this_._internal_weekend_flag(), target);
          }

          // bool blocked_tca_flag = 54;
          if (this_._internal_blocked_tca_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                54, this_._internal_blocked_tca_flag(), target);
          }

          // .google.protobuf.Timestamp first_1min_candle_date = 56;
          if (cached_has_bits & 0x00000100u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                56, *this_._impl_.first_1min_candle_date_, this_._impl_.first_1min_candle_date_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Timestamp first_1day_candle_date = 57;
          if (cached_has_bits & 0x00000200u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                57, *this_._impl_.first_1day_candle_date_, this_._impl_.first_1day_candle_date_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.BrandData brand = 60;
          if (cached_has_bits & 0x00000400u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                60, *this_._impl_.brand_, this_._impl_.brand_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation dlong_client = 90;
          if (cached_has_bits & 0x00000800u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                90, *this_._impl_.dlong_client_, this_._impl_.dlong_client_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation dshort_client = 91;
          if (cached_has_bits & 0x00001000u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                91, *this_._impl_.dshort_client_, this_._impl_.dshort_client_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.Currency)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Currency::ByteSizeLong(const MessageLite& base) {
          const Currency& this_ = static_cast<const Currency&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Currency::ByteSizeLong() const {
          const Currency& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.Currency)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string figi = 1;
            if (!this_._internal_figi().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_figi());
            }
            // string ticker = 2;
            if (!this_._internal_ticker().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_ticker());
            }
            // string class_code = 3;
            if (!this_._internal_class_code().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_class_code());
            }
            // string isin = 4;
            if (!this_._internal_isin().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_isin());
            }
            // string currency = 6;
            if (!this_._internal_currency().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_currency());
            }
            // string name = 15;
            if (!this_._internal_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_name());
            }
            // string exchange = 16;
            if (!this_._internal_exchange().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_exchange());
            }
            // string country_of_risk = 18;
            if (!this_._internal_country_of_risk().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_country_of_risk());
            }
            // string country_of_risk_name = 19;
            if (!this_._internal_country_of_risk_name().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_country_of_risk_name());
            }
            // string iso_currency_name = 24;
            if (!this_._internal_iso_currency_name().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_iso_currency_name());
            }
            // string uid = 27;
            if (!this_._internal_uid().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_uid());
            }
            // string position_uid = 29;
            if (!this_._internal_position_uid().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_position_uid());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x000000ffu) {
            // .tinkoff.public.invest.api.contract.v1.Quotation klong = 7;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.klong_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation kshort = 8;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.kshort_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation dlong = 9;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.dlong_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation dshort = 10;
            if (cached_has_bits & 0x00000008u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.dshort_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation dlong_min = 11;
            if (cached_has_bits & 0x00000010u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.dlong_min_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation dshort_min = 12;
            if (cached_has_bits & 0x00000020u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.dshort_min_);
            }
            // .tinkoff.public.invest.api.contract.v1.MoneyValue nominal = 17;
            if (cached_has_bits & 0x00000040u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.nominal_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation min_price_increment = 25;
            if (cached_has_bits & 0x00000080u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.min_price_increment_);
            }
          }
          if (cached_has_bits & 0x00001f00u) {
            // .google.protobuf.Timestamp first_1min_candle_date = 56;
            if (cached_has_bits & 0x00000100u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.first_1min_candle_date_);
            }
            // .google.protobuf.Timestamp first_1day_candle_date = 57;
            if (cached_has_bits & 0x00000200u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.first_1day_candle_date_);
            }
            // .tinkoff.public.invest.api.contract.v1.BrandData brand = 60;
            if (cached_has_bits & 0x00000400u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.brand_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation dlong_client = 90;
            if (cached_has_bits & 0x00000800u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.dlong_client_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation dshort_client = 91;
            if (cached_has_bits & 0x00001000u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.dshort_client_);
            }
          }
           {
            // int32 lot = 5;
            if (this_._internal_lot() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_lot());
            }
            // bool short_enabled_flag = 13;
            if (this_._internal_short_enabled_flag() != 0) {
              total_size += 2;
            }
            // bool otc_flag = 21;
            if (this_._internal_otc_flag() != 0) {
              total_size += 3;
            }
            // bool buy_available_flag = 22;
            if (this_._internal_buy_available_flag() != 0) {
              total_size += 3;
            }
            // bool sell_available_flag = 23;
            if (this_._internal_sell_available_flag() != 0) {
              total_size += 3;
            }
            // .tinkoff.public.invest.api.contract.v1.SecurityTradingStatus trading_status = 20;
            if (this_._internal_trading_status() != 0) {
              total_size += 2 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_trading_status());
            }
            // .tinkoff.public.invest.api.contract.v1.RealExchange real_exchange = 28;
            if (this_._internal_real_exchange() != 0) {
              total_size += 2 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_real_exchange());
            }
            // bool api_trade_available_flag = 26;
            if (this_._internal_api_trade_available_flag() != 0) {
              total_size += 3;
            }
            // bool for_iis_flag = 41;
            if (this_._internal_for_iis_flag() != 0) {
              total_size += 3;
            }
            // bool for_qual_investor_flag = 52;
            if (this_._internal_for_qual_investor_flag() != 0) {
              total_size += 3;
            }
            // bool weekend_flag = 53;
            if (this_._internal_weekend_flag() != 0) {
              total_size += 3;
            }
            // bool blocked_tca_flag = 54;
            if (this_._internal_blocked_tca_flag() != 0) {
              total_size += 3;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Currency::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Currency*>(&to_msg);
  auto& from = static_cast<const Currency&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.Currency)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_ticker().empty()) {
    _this->_internal_set_ticker(from._internal_ticker());
  }
  if (!from._internal_class_code().empty()) {
    _this->_internal_set_class_code(from._internal_class_code());
  }
  if (!from._internal_isin().empty()) {
    _this->_internal_set_isin(from._internal_isin());
  }
  if (!from._internal_currency().empty()) {
    _this->_internal_set_currency(from._internal_currency());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_exchange().empty()) {
    _this->_internal_set_exchange(from._internal_exchange());
  }
  if (!from._internal_country_of_risk().empty()) {
    _this->_internal_set_country_of_risk(from._internal_country_of_risk());
  }
  if (!from._internal_country_of_risk_name().empty()) {
    _this->_internal_set_country_of_risk_name(from._internal_country_of_risk_name());
  }
  if (!from._internal_iso_currency_name().empty()) {
    _this->_internal_set_iso_currency_name(from._internal_iso_currency_name());
  }
  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (!from._internal_position_uid().empty()) {
    _this->_internal_set_position_uid(from._internal_position_uid());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.klong_ != nullptr);
      if (_this->_impl_.klong_ == nullptr) {
        _this->_impl_.klong_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.klong_);
      } else {
        _this->_impl_.klong_->MergeFrom(*from._impl_.klong_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.kshort_ != nullptr);
      if (_this->_impl_.kshort_ == nullptr) {
        _this->_impl_.kshort_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.kshort_);
      } else {
        _this->_impl_.kshort_->MergeFrom(*from._impl_.kshort_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.dlong_ != nullptr);
      if (_this->_impl_.dlong_ == nullptr) {
        _this->_impl_.dlong_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.dlong_);
      } else {
        _this->_impl_.dlong_->MergeFrom(*from._impl_.dlong_);
      }
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(from._impl_.dshort_ != nullptr);
      if (_this->_impl_.dshort_ == nullptr) {
        _this->_impl_.dshort_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.dshort_);
      } else {
        _this->_impl_.dshort_->MergeFrom(*from._impl_.dshort_);
      }
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(from._impl_.dlong_min_ != nullptr);
      if (_this->_impl_.dlong_min_ == nullptr) {
        _this->_impl_.dlong_min_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.dlong_min_);
      } else {
        _this->_impl_.dlong_min_->MergeFrom(*from._impl_.dlong_min_);
      }
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(from._impl_.dshort_min_ != nullptr);
      if (_this->_impl_.dshort_min_ == nullptr) {
        _this->_impl_.dshort_min_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.dshort_min_);
      } else {
        _this->_impl_.dshort_min_->MergeFrom(*from._impl_.dshort_min_);
      }
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(from._impl_.nominal_ != nullptr);
      if (_this->_impl_.nominal_ == nullptr) {
        _this->_impl_.nominal_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(arena, *from._impl_.nominal_);
      } else {
        _this->_impl_.nominal_->MergeFrom(*from._impl_.nominal_);
      }
    }
    if (cached_has_bits & 0x00000080u) {
      ABSL_DCHECK(from._impl_.min_price_increment_ != nullptr);
      if (_this->_impl_.min_price_increment_ == nullptr) {
        _this->_impl_.min_price_increment_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.min_price_increment_);
      } else {
        _this->_impl_.min_price_increment_->MergeFrom(*from._impl_.min_price_increment_);
      }
    }
  }
  if (cached_has_bits & 0x00001f00u) {
    if (cached_has_bits & 0x00000100u) {
      ABSL_DCHECK(from._impl_.first_1min_candle_date_ != nullptr);
      if (_this->_impl_.first_1min_candle_date_ == nullptr) {
        _this->_impl_.first_1min_candle_date_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.first_1min_candle_date_);
      } else {
        _this->_impl_.first_1min_candle_date_->MergeFrom(*from._impl_.first_1min_candle_date_);
      }
    }
    if (cached_has_bits & 0x00000200u) {
      ABSL_DCHECK(from._impl_.first_1day_candle_date_ != nullptr);
      if (_this->_impl_.first_1day_candle_date_ == nullptr) {
        _this->_impl_.first_1day_candle_date_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.first_1day_candle_date_);
      } else {
        _this->_impl_.first_1day_candle_date_->MergeFrom(*from._impl_.first_1day_candle_date_);
      }
    }
    if (cached_has_bits & 0x00000400u) {
      ABSL_DCHECK(from._impl_.brand_ != nullptr);
      if (_this->_impl_.brand_ == nullptr) {
        _this->_impl_.brand_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::BrandData>(arena, *from._impl_.brand_);
      } else {
        _this->_impl_.brand_->MergeFrom(*from._impl_.brand_);
      }
    }
    if (cached_has_bits & 0x00000800u) {
      ABSL_DCHECK(from._impl_.dlong_client_ != nullptr);
      if (_this->_impl_.dlong_client_ == nullptr) {
        _this->_impl_.dlong_client_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.dlong_client_);
      } else {
        _this->_impl_.dlong_client_->MergeFrom(*from._impl_.dlong_client_);
      }
    }
    if (cached_has_bits & 0x00001000u) {
      ABSL_DCHECK(from._impl_.dshort_client_ != nullptr);
      if (_this->_impl_.dshort_client_ == nullptr) {
        _this->_impl_.dshort_client_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.dshort_client_);
      } else {
        _this->_impl_.dshort_client_->MergeFrom(*from._impl_.dshort_client_);
      }
    }
  }
  if (from._internal_lot() != 0) {
    _this->_impl_.lot_ = from._impl_.lot_;
  }
  if (from._internal_short_enabled_flag() != 0) {
    _this->_impl_.short_enabled_flag_ = from._impl_.short_enabled_flag_;
  }
  if (from._internal_otc_flag() != 0) {
    _this->_impl_.otc_flag_ = from._impl_.otc_flag_;
  }
  if (from._internal_buy_available_flag() != 0) {
    _this->_impl_.buy_available_flag_ = from._impl_.buy_available_flag_;
  }
  if (from._internal_sell_available_flag() != 0) {
    _this->_impl_.sell_available_flag_ = from._impl_.sell_available_flag_;
  }
  if (from._internal_trading_status() != 0) {
    _this->_impl_.trading_status_ = from._impl_.trading_status_;
  }
  if (from._internal_real_exchange() != 0) {
    _this->_impl_.real_exchange_ = from._impl_.real_exchange_;
  }
  if (from._internal_api_trade_available_flag() != 0) {
    _this->_impl_.api_trade_available_flag_ = from._impl_.api_trade_available_flag_;
  }
  if (from._internal_for_iis_flag() != 0) {
    _this->_impl_.for_iis_flag_ = from._impl_.for_iis_flag_;
  }
  if (from._internal_for_qual_investor_flag() != 0) {
    _this->_impl_.for_qual_investor_flag_ = from._impl_.for_qual_investor_flag_;
  }
  if (from._internal_weekend_flag() != 0) {
    _this->_impl_.weekend_flag_ = from._impl_.weekend_flag_;
  }
  if (from._internal_blocked_tca_flag() != 0) {
    _this->_impl_.blocked_tca_flag_ = from._impl_.blocked_tca_flag_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Currency::CopyFrom(const Currency& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.Currency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Currency::InternalSwap(Currency* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.figi_, &other->_impl_.figi_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ticker_, &other->_impl_.ticker_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.class_code_, &other->_impl_.class_code_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.isin_, &other->_impl_.isin_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.currency_, &other->_impl_.currency_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.exchange_, &other->_impl_.exchange_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.country_of_risk_, &other->_impl_.country_of_risk_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.country_of_risk_name_, &other->_impl_.country_of_risk_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.iso_currency_name_, &other->_impl_.iso_currency_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.uid_, &other->_impl_.uid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.position_uid_, &other->_impl_.position_uid_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Currency, _impl_.blocked_tca_flag_)
      + sizeof(Currency::_impl_.blocked_tca_flag_)
      - PROTOBUF_FIELD_OFFSET(Currency, _impl_.klong_)>(
          reinterpret_cast<char*>(&_impl_.klong_),
          reinterpret_cast<char*>(&other->_impl_.klong_));
}

::google::protobuf::Metadata Currency::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Etf::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Etf>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Etf, _impl_._has_bits_);
};

void Etf::clear_klong() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.klong_ != nullptr) _impl_.klong_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Etf::clear_kshort() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.kshort_ != nullptr) _impl_.kshort_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void Etf::clear_dlong() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.dlong_ != nullptr) _impl_.dlong_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void Etf::clear_dshort() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.dshort_ != nullptr) _impl_.dshort_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void Etf::clear_dlong_min() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.dlong_min_ != nullptr) _impl_.dlong_min_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void Etf::clear_dshort_min() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.dshort_min_ != nullptr) _impl_.dshort_min_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void Etf::clear_fixed_commission() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.fixed_commission_ != nullptr) _impl_.fixed_commission_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void Etf::clear_released_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.released_date_ != nullptr) _impl_.released_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void Etf::clear_num_shares() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.num_shares_ != nullptr) _impl_.num_shares_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void Etf::clear_min_price_increment() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.min_price_increment_ != nullptr) _impl_.min_price_increment_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void Etf::clear_first_1min_candle_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.first_1min_candle_date_ != nullptr) _impl_.first_1min_candle_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
void Etf::clear_first_1day_candle_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.first_1day_candle_date_ != nullptr) _impl_.first_1day_candle_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
void Etf::clear_brand() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.brand_ != nullptr) _impl_.brand_->Clear();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
void Etf::clear_dlong_client() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.dlong_client_ != nullptr) _impl_.dlong_client_->Clear();
  _impl_._has_bits_[0] &= ~0x00002000u;
}
void Etf::clear_dshort_client() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.dshort_client_ != nullptr) _impl_.dshort_client_->Clear();
  _impl_._has_bits_[0] &= ~0x00004000u;
}
Etf::Etf(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.Etf)
}
inline PROTOBUF_NDEBUG_INLINE Etf::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::Etf& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        figi_(arena, from.figi_),
        ticker_(arena, from.ticker_),
        class_code_(arena, from.class_code_),
        isin_(arena, from.isin_),
        currency_(arena, from.currency_),
        name_(arena, from.name_),
        exchange_(arena, from.exchange_),
        focus_type_(arena, from.focus_type_),
        country_of_risk_(arena, from.country_of_risk_),
        country_of_risk_name_(arena, from.country_of_risk_name_),
        sector_(arena, from.sector_),
        rebalancing_freq_(arena, from.rebalancing_freq_),
        uid_(arena, from.uid_),
        position_uid_(arena, from.position_uid_),
        asset_uid_(arena, from.asset_uid_) {}

Etf::Etf(
    ::google::protobuf::Arena* arena,
    const Etf& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Etf* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.klong_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.klong_)
                        : nullptr;
  _impl_.kshort_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.kshort_)
                        : nullptr;
  _impl_.dlong_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.dlong_)
                        : nullptr;
  _impl_.dshort_ = (cached_has_bits & 0x00000008u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.dshort_)
                        : nullptr;
  _impl_.dlong_min_ = (cached_has_bits & 0x00000010u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.dlong_min_)
                        : nullptr;
  _impl_.dshort_min_ = (cached_has_bits & 0x00000020u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.dshort_min_)
                        : nullptr;
  _impl_.fixed_commission_ = (cached_has_bits & 0x00000040u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.fixed_commission_)
                        : nullptr;
  _impl_.released_date_ = (cached_has_bits & 0x00000080u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.released_date_)
                        : nullptr;
  _impl_.num_shares_ = (cached_has_bits & 0x00000100u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.num_shares_)
                        : nullptr;
  _impl_.min_price_increment_ = (cached_has_bits & 0x00000200u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.min_price_increment_)
                        : nullptr;
  _impl_.first_1min_candle_date_ = (cached_has_bits & 0x00000400u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.first_1min_candle_date_)
                        : nullptr;
  _impl_.first_1day_candle_date_ = (cached_has_bits & 0x00000800u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.first_1day_candle_date_)
                        : nullptr;
  _impl_.brand_ = (cached_has_bits & 0x00001000u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::BrandData>(
                              arena, *from._impl_.brand_)
                        : nullptr;
  _impl_.dlong_client_ = (cached_has_bits & 0x00002000u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.dlong_client_)
                        : nullptr;
  _impl_.dshort_client_ = (cached_has_bits & 0x00004000u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.dshort_client_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, lot_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, lot_),
           offsetof(Impl_, liquidity_flag_) -
               offsetof(Impl_, lot_) +
               sizeof(Impl_::liquidity_flag_));

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.Etf)
}
inline PROTOBUF_NDEBUG_INLINE Etf::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        figi_(arena),
        ticker_(arena),
        class_code_(arena),
        isin_(arena),
        currency_(arena),
        name_(arena),
        exchange_(arena),
        focus_type_(arena),
        country_of_risk_(arena),
        country_of_risk_name_(arena),
        sector_(arena),
        rebalancing_freq_(arena),
        uid_(arena),
        position_uid_(arena),
        asset_uid_(arena) {}

inline void Etf::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, klong_),
           0,
           offsetof(Impl_, liquidity_flag_) -
               offsetof(Impl_, klong_) +
               sizeof(Impl_::liquidity_flag_));
}
Etf::~Etf() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.Etf)
  SharedDtor(*this);
}
inline void Etf::SharedDtor(MessageLite& self) {
  Etf& this_ = static_cast<Etf&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.figi_.Destroy();
  this_._impl_.ticker_.Destroy();
  this_._impl_.class_code_.Destroy();
  this_._impl_.isin_.Destroy();
  this_._impl_.currency_.Destroy();
  this_._impl_.name_.Destroy();
  this_._impl_.exchange_.Destroy();
  this_._impl_.focus_type_.Destroy();
  this_._impl_.country_of_risk_.Destroy();
  this_._impl_.country_of_risk_name_.Destroy();
  this_._impl_.sector_.Destroy();
  this_._impl_.rebalancing_freq_.Destroy();
  this_._impl_.uid_.Destroy();
  this_._impl_.position_uid_.Destroy();
  this_._impl_.asset_uid_.Destroy();
  delete this_._impl_.klong_;
  delete this_._impl_.kshort_;
  delete this_._impl_.dlong_;
  delete this_._impl_.dshort_;
  delete this_._impl_.dlong_min_;
  delete this_._impl_.dshort_min_;
  delete this_._impl_.fixed_commission_;
  delete this_._impl_.released_date_;
  delete this_._impl_.num_shares_;
  delete this_._impl_.min_price_increment_;
  delete this_._impl_.first_1min_candle_date_;
  delete this_._impl_.first_1day_candle_date_;
  delete this_._impl_.brand_;
  delete this_._impl_.dlong_client_;
  delete this_._impl_.dshort_client_;
  this_._impl_.~Impl_();
}

inline void* Etf::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Etf(arena);
}
constexpr auto Etf::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Etf),
                                            alignof(Etf));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Etf::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Etf_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Etf::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Etf>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Etf::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Etf>(), &Etf::ByteSizeLong,
            &Etf::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Etf, _impl_._cached_size_),
        false,
    },
    &Etf::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Etf::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 44, 15, 225, 13> Etf::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Etf, _impl_._has_bits_),
    0, // no _extensions_
    91, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    8192,  // skipmap
    offsetof(decltype(_table_), field_entries),
    44,  // num_field_entries
    15,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Etf>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string figi = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Etf, _impl_.figi_)}},
    // string ticker = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Etf, _impl_.ticker_)}},
    // string class_code = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Etf, _impl_.class_code_)}},
    // string isin = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(Etf, _impl_.isin_)}},
    // int32 lot = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Etf, _impl_.lot_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(Etf, _impl_.lot_)}},
    // string currency = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(Etf, _impl_.currency_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation klong = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 0, 0, PROTOBUF_FIELD_OFFSET(Etf, _impl_.klong_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation kshort = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 1, 1, PROTOBUF_FIELD_OFFSET(Etf, _impl_.kshort_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation dlong = 9;
    {::_pbi::TcParser::FastMtS1,
     {74, 2, 2, PROTOBUF_FIELD_OFFSET(Etf, _impl_.dlong_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation dshort = 10;
    {::_pbi::TcParser::FastMtS1,
     {82, 3, 3, PROTOBUF_FIELD_OFFSET(Etf, _impl_.dshort_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation dlong_min = 11;
    {::_pbi::TcParser::FastMtS1,
     {90, 4, 4, PROTOBUF_FIELD_OFFSET(Etf, _impl_.dlong_min_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation dshort_min = 12;
    {::_pbi::TcParser::FastMtS1,
     {98, 5, 5, PROTOBUF_FIELD_OFFSET(Etf, _impl_.dshort_min_)}},
    // bool short_enabled_flag = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Etf, _impl_.short_enabled_flag_), 63>(),
     {104, 63, 0, PROTOBUF_FIELD_OFFSET(Etf, _impl_.short_enabled_flag_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // string name = 15;
    {::_pbi::TcParser::FastUS1,
     {122, 63, 0, PROTOBUF_FIELD_OFFSET(Etf, _impl_.name_)}},
    // string exchange = 16;
    {::_pbi::TcParser::FastUS2,
     {386, 63, 0, PROTOBUF_FIELD_OFFSET(Etf, _impl_.exchange_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation fixed_commission = 17;
    {::_pbi::TcParser::FastMtS2,
     {394, 6, 6, PROTOBUF_FIELD_OFFSET(Etf, _impl_.fixed_commission_)}},
    // string focus_type = 18;
    {::_pbi::TcParser::FastUS2,
     {402, 63, 0, PROTOBUF_FIELD_OFFSET(Etf, _impl_.focus_type_)}},
    // .google.protobuf.Timestamp released_date = 19;
    {::_pbi::TcParser::FastMtS2,
     {410, 7, 7, PROTOBUF_FIELD_OFFSET(Etf, _impl_.released_date_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation num_shares = 20;
    {::_pbi::TcParser::FastMtS2,
     {418, 8, 8, PROTOBUF_FIELD_OFFSET(Etf, _impl_.num_shares_)}},
    // string country_of_risk = 21;
    {::_pbi::TcParser::FastUS2,
     {426, 63, 0, PROTOBUF_FIELD_OFFSET(Etf, _impl_.country_of_risk_)}},
    // string country_of_risk_name = 22;
    {::_pbi::TcParser::FastUS2,
     {434, 63, 0, PROTOBUF_FIELD_OFFSET(Etf, _impl_.country_of_risk_name_)}},
    // string sector = 23;
    {::_pbi::TcParser::FastUS2,
     {442, 63, 0, PROTOBUF_FIELD_OFFSET(Etf, _impl_.sector_)}},
    // string rebalancing_freq = 24;
    {::_pbi::TcParser::FastUS2,
     {450, 63, 0, PROTOBUF_FIELD_OFFSET(Etf, _impl_.rebalancing_freq_)}},
    // .tinkoff.public.invest.api.contract.v1.SecurityTradingStatus trading_status = 25;
    {::_pbi::TcParser::FastV32S2,
     {456, 63, 0, PROTOBUF_FIELD_OFFSET(Etf, _impl_.trading_status_)}},
    // bool otc_flag = 26;
    {::_pbi::TcParser::FastV8S2,
     {464, 63, 0, PROTOBUF_FIELD_OFFSET(Etf, _impl_.otc_flag_)}},
    // bool buy_available_flag = 27;
    {::_pbi::TcParser::FastV8S2,
     {472, 63, 0, PROTOBUF_FIELD_OFFSET(Etf, _impl_.buy_available_flag_)}},
    // bool sell_available_flag = 28;
    {::_pbi::TcParser::FastV8S2,
     {480, 63, 0, PROTOBUF_FIELD_OFFSET(Etf, _impl_.sell_available_flag_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation min_price_increment = 29;
    {::_pbi::TcParser::FastMtS2,
     {490, 9, 9, PROTOBUF_FIELD_OFFSET(Etf, _impl_.min_price_increment_)}},
    // bool api_trade_available_flag = 30;
    {::_pbi::TcParser::FastV8S2,
     {496, 63, 0, PROTOBUF_FIELD_OFFSET(Etf, _impl_.api_trade_available_flag_)}},
    // string uid = 31;
    {::_pbi::TcParser::FastUS2,
     {506, 63, 0, PROTOBUF_FIELD_OFFSET(Etf, _impl_.uid_)}},
  }}, {{
    33, 0, 4,
    57592, 31, 63103, 39, 65535, 42, 63999, 42,
    65535, 65535
  }}, {{
    // string figi = 1;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.figi_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string ticker = 2;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.ticker_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string class_code = 3;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.class_code_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string isin = 4;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.isin_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 lot = 5;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.lot_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string currency = 6;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.currency_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public.invest.api.contract.v1.Quotation klong = 7;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.klong_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation kshort = 8;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.kshort_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation dlong = 9;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.dlong_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation dshort = 10;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.dshort_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation dlong_min = 11;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.dlong_min_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation dshort_min = 12;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.dshort_min_), _Internal::kHasBitsOffset + 5, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool short_enabled_flag = 13;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.short_enabled_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string name = 15;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string exchange = 16;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.exchange_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public.invest.api.contract.v1.Quotation fixed_commission = 17;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.fixed_commission_), _Internal::kHasBitsOffset + 6, 6,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string focus_type = 18;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.focus_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Timestamp released_date = 19;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.released_date_), _Internal::kHasBitsOffset + 7, 7,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation num_shares = 20;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.num_shares_), _Internal::kHasBitsOffset + 8, 8,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string country_of_risk = 21;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.country_of_risk_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string country_of_risk_name = 22;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.country_of_risk_name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string sector = 23;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.sector_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string rebalancing_freq = 24;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.rebalancing_freq_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public.invest.api.contract.v1.SecurityTradingStatus trading_status = 25;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.trading_status_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // bool otc_flag = 26;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.otc_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool buy_available_flag = 27;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.buy_available_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool sell_available_flag = 28;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.sell_available_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .tinkoff.public.invest.api.contract.v1.Quotation min_price_increment = 29;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.min_price_increment_), _Internal::kHasBitsOffset + 9, 9,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool api_trade_available_flag = 30;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.api_trade_available_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string uid = 31;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.uid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public.invest.api.contract.v1.RealExchange real_exchange = 32;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.real_exchange_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string position_uid = 33;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.position_uid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string asset_uid = 34;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.asset_uid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public.invest.api.contract.v1.InstrumentExchangeType instrument_exchange = 35;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.instrument_exchange_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // bool for_iis_flag = 41;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.for_iis_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool for_qual_investor_flag = 42;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.for_qual_investor_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool weekend_flag = 43;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.weekend_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool blocked_tca_flag = 44;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.blocked_tca_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool liquidity_flag = 45;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.liquidity_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .google.protobuf.Timestamp first_1min_candle_date = 56;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.first_1min_candle_date_), _Internal::kHasBitsOffset + 10, 10,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp first_1day_candle_date = 57;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.first_1day_candle_date_), _Internal::kHasBitsOffset + 11, 11,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.BrandData brand = 60;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.brand_), _Internal::kHasBitsOffset + 12, 12,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation dlong_client = 90;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.dlong_client_), _Internal::kHasBitsOffset + 13, 13,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation dshort_client = 91;
    {PROTOBUF_FIELD_OFFSET(Etf, _impl_.dshort_client_), _Internal::kHasBitsOffset + 14, 14,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::BrandData>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
  }}, {{
    "\51\4\6\12\4\0\10\0\0\0\0\0\0\0\4\10\0\12\0\0\17\24\6\20\0\0\0\0\0\0\3\0\14\11\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "tinkoff.public.invest.api.contract.v1.Etf"
    "figi"
    "ticker"
    "class_code"
    "isin"
    "currency"
    "name"
    "exchange"
    "focus_type"
    "country_of_risk"
    "country_of_risk_name"
    "sector"
    "rebalancing_freq"
    "uid"
    "position_uid"
    "asset_uid"
  }},
};

PROTOBUF_NOINLINE void Etf::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.Etf)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.figi_.ClearToEmpty();
  _impl_.ticker_.ClearToEmpty();
  _impl_.class_code_.ClearToEmpty();
  _impl_.isin_.ClearToEmpty();
  _impl_.currency_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.exchange_.ClearToEmpty();
  _impl_.focus_type_.ClearToEmpty();
  _impl_.country_of_risk_.ClearToEmpty();
  _impl_.country_of_risk_name_.ClearToEmpty();
  _impl_.sector_.ClearToEmpty();
  _impl_.rebalancing_freq_.ClearToEmpty();
  _impl_.uid_.ClearToEmpty();
  _impl_.position_uid_.ClearToEmpty();
  _impl_.asset_uid_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.klong_ != nullptr);
      _impl_.klong_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.kshort_ != nullptr);
      _impl_.kshort_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.dlong_ != nullptr);
      _impl_.dlong_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.dshort_ != nullptr);
      _impl_.dshort_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.dlong_min_ != nullptr);
      _impl_.dlong_min_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.dshort_min_ != nullptr);
      _impl_.dshort_min_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(_impl_.fixed_commission_ != nullptr);
      _impl_.fixed_commission_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      ABSL_DCHECK(_impl_.released_date_ != nullptr);
      _impl_.released_date_->Clear();
    }
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      ABSL_DCHECK(_impl_.num_shares_ != nullptr);
      _impl_.num_shares_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      ABSL_DCHECK(_impl_.min_price_increment_ != nullptr);
      _impl_.min_price_increment_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      ABSL_DCHECK(_impl_.first_1min_candle_date_ != nullptr);
      _impl_.first_1min_candle_date_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      ABSL_DCHECK(_impl_.first_1day_candle_date_ != nullptr);
      _impl_.first_1day_candle_date_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      ABSL_DCHECK(_impl_.brand_ != nullptr);
      _impl_.brand_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      ABSL_DCHECK(_impl_.dlong_client_ != nullptr);
      _impl_.dlong_client_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      ABSL_DCHECK(_impl_.dshort_client_ != nullptr);
      _impl_.dshort_client_->Clear();
    }
  }
  ::memset(&_impl_.lot_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.liquidity_flag_) -
      reinterpret_cast<char*>(&_impl_.lot_)) + sizeof(_impl_.liquidity_flag_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Etf::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Etf& this_ = static_cast<const Etf&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Etf::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Etf& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.Etf)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string figi = 1;
          if (!this_._internal_figi().empty()) {
            const std::string& _s = this_._internal_figi();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Etf.figi");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string ticker = 2;
          if (!this_._internal_ticker().empty()) {
            const std::string& _s = this_._internal_ticker();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Etf.ticker");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // string class_code = 3;
          if (!this_._internal_class_code().empty()) {
            const std::string& _s = this_._internal_class_code();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Etf.class_code");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // string isin = 4;
          if (!this_._internal_isin().empty()) {
            const std::string& _s = this_._internal_isin();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Etf.isin");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          // int32 lot = 5;
          if (this_._internal_lot() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<5>(
                    stream, this_._internal_lot(), target);
          }

          // string currency = 6;
          if (!this_._internal_currency().empty()) {
            const std::string& _s = this_._internal_currency();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Etf.currency");
            target = stream->WriteStringMaybeAliased(6, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .tinkoff.public.invest.api.contract.v1.Quotation klong = 7;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                7, *this_._impl_.klong_, this_._impl_.klong_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation kshort = 8;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                8, *this_._impl_.kshort_, this_._impl_.kshort_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation dlong = 9;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                9, *this_._impl_.dlong_, this_._impl_.dlong_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation dshort = 10;
          if (cached_has_bits & 0x00000008u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                10, *this_._impl_.dshort_, this_._impl_.dshort_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation dlong_min = 11;
          if (cached_has_bits & 0x00000010u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                11, *this_._impl_.dlong_min_, this_._impl_.dlong_min_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation dshort_min = 12;
          if (cached_has_bits & 0x00000020u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                12, *this_._impl_.dshort_min_, this_._impl_.dshort_min_->GetCachedSize(), target,
                stream);
          }

          // bool short_enabled_flag = 13;
          if (this_._internal_short_enabled_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                13, this_._internal_short_enabled_flag(), target);
          }

          // string name = 15;
          if (!this_._internal_name().empty()) {
            const std::string& _s = this_._internal_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Etf.name");
            target = stream->WriteStringMaybeAliased(15, _s, target);
          }

          // string exchange = 16;
          if (!this_._internal_exchange().empty()) {
            const std::string& _s = this_._internal_exchange();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Etf.exchange");
            target = stream->WriteStringMaybeAliased(16, _s, target);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation fixed_commission = 17;
          if (cached_has_bits & 0x00000040u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                17, *this_._impl_.fixed_commission_, this_._impl_.fixed_commission_->GetCachedSize(), target,
                stream);
          }

          // string focus_type = 18;
          if (!this_._internal_focus_type().empty()) {
            const std::string& _s = this_._internal_focus_type();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Etf.focus_type");
            target = stream->WriteStringMaybeAliased(18, _s, target);
          }

          // .google.protobuf.Timestamp released_date = 19;
          if (cached_has_bits & 0x00000080u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                19, *this_._impl_.released_date_, this_._impl_.released_date_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation num_shares = 20;
          if (cached_has_bits & 0x00000100u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                20, *this_._impl_.num_shares_, this_._impl_.num_shares_->GetCachedSize(), target,
                stream);
          }

          // string country_of_risk = 21;
          if (!this_._internal_country_of_risk().empty()) {
            const std::string& _s = this_._internal_country_of_risk();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Etf.country_of_risk");
            target = stream->WriteStringMaybeAliased(21, _s, target);
          }

          // string country_of_risk_name = 22;
          if (!this_._internal_country_of_risk_name().empty()) {
            const std::string& _s = this_._internal_country_of_risk_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Etf.country_of_risk_name");
            target = stream->WriteStringMaybeAliased(22, _s, target);
          }

          // string sector = 23;
          if (!this_._internal_sector().empty()) {
            const std::string& _s = this_._internal_sector();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Etf.sector");
            target = stream->WriteStringMaybeAliased(23, _s, target);
          }

          // string rebalancing_freq = 24;
          if (!this_._internal_rebalancing_freq().empty()) {
            const std::string& _s = this_._internal_rebalancing_freq();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Etf.rebalancing_freq");
            target = stream->WriteStringMaybeAliased(24, _s, target);
          }

          // .tinkoff.public.invest.api.contract.v1.SecurityTradingStatus trading_status = 25;
          if (this_._internal_trading_status() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                25, this_._internal_trading_status(), target);
          }

          // bool otc_flag = 26;
          if (this_._internal_otc_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                26, this_._internal_otc_flag(), target);
          }

          // bool buy_available_flag = 27;
          if (this_._internal_buy_available_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                27, this_._internal_buy_available_flag(), target);
          }

          // bool sell_available_flag = 28;
          if (this_._internal_sell_available_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                28, this_._internal_sell_available_flag(), target);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation min_price_increment = 29;
          if (cached_has_bits & 0x00000200u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                29, *this_._impl_.min_price_increment_, this_._impl_.min_price_increment_->GetCachedSize(), target,
                stream);
          }

          // bool api_trade_available_flag = 30;
          if (this_._internal_api_trade_available_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                30, this_._internal_api_trade_available_flag(), target);
          }

          // string uid = 31;
          if (!this_._internal_uid().empty()) {
            const std::string& _s = this_._internal_uid();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Etf.uid");
            target = stream->WriteStringMaybeAliased(31, _s, target);
          }

          // .tinkoff.public.invest.api.contract.v1.RealExchange real_exchange = 32;
          if (this_._internal_real_exchange() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                32, this_._internal_real_exchange(), target);
          }

          // string position_uid = 33;
          if (!this_._internal_position_uid().empty()) {
            const std::string& _s = this_._internal_position_uid();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Etf.position_uid");
            target = stream->WriteStringMaybeAliased(33, _s, target);
          }

          // string asset_uid = 34;
          if (!this_._internal_asset_uid().empty()) {
            const std::string& _s = this_._internal_asset_uid();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Etf.asset_uid");
            target = stream->WriteStringMaybeAliased(34, _s, target);
          }

          // .tinkoff.public.invest.api.contract.v1.InstrumentExchangeType instrument_exchange = 35;
          if (this_._internal_instrument_exchange() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                35, this_._internal_instrument_exchange(), target);
          }

          // bool for_iis_flag = 41;
          if (this_._internal_for_iis_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                41, this_._internal_for_iis_flag(), target);
          }

          // bool for_qual_investor_flag = 42;
          if (this_._internal_for_qual_investor_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                42, this_._internal_for_qual_investor_flag(), target);
          }

          // bool weekend_flag = 43;
          if (this_._internal_weekend_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                43, this_._internal_weekend_flag(), target);
          }

          // bool blocked_tca_flag = 44;
          if (this_._internal_blocked_tca_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                44, this_._internal_blocked_tca_flag(), target);
          }

          // bool liquidity_flag = 45;
          if (this_._internal_liquidity_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                45, this_._internal_liquidity_flag(), target);
          }

          // .google.protobuf.Timestamp first_1min_candle_date = 56;
          if (cached_has_bits & 0x00000400u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                56, *this_._impl_.first_1min_candle_date_, this_._impl_.first_1min_candle_date_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Timestamp first_1day_candle_date = 57;
          if (cached_has_bits & 0x00000800u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                57, *this_._impl_.first_1day_candle_date_, this_._impl_.first_1day_candle_date_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.BrandData brand = 60;
          if (cached_has_bits & 0x00001000u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                60, *this_._impl_.brand_, this_._impl_.brand_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation dlong_client = 90;
          if (cached_has_bits & 0x00002000u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                90, *this_._impl_.dlong_client_, this_._impl_.dlong_client_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation dshort_client = 91;
          if (cached_has_bits & 0x00004000u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                91, *this_._impl_.dshort_client_, this_._impl_.dshort_client_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.Etf)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Etf::ByteSizeLong(const MessageLite& base) {
          const Etf& this_ = static_cast<const Etf&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Etf::ByteSizeLong() const {
          const Etf& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.Etf)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string figi = 1;
            if (!this_._internal_figi().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_figi());
            }
            // string ticker = 2;
            if (!this_._internal_ticker().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_ticker());
            }
            // string class_code = 3;
            if (!this_._internal_class_code().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_class_code());
            }
            // string isin = 4;
            if (!this_._internal_isin().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_isin());
            }
            // string currency = 6;
            if (!this_._internal_currency().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_currency());
            }
            // string name = 15;
            if (!this_._internal_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_name());
            }
            // string exchange = 16;
            if (!this_._internal_exchange().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_exchange());
            }
            // string focus_type = 18;
            if (!this_._internal_focus_type().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_focus_type());
            }
            // string country_of_risk = 21;
            if (!this_._internal_country_of_risk().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_country_of_risk());
            }
            // string country_of_risk_name = 22;
            if (!this_._internal_country_of_risk_name().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_country_of_risk_name());
            }
            // string sector = 23;
            if (!this_._internal_sector().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_sector());
            }
            // string rebalancing_freq = 24;
            if (!this_._internal_rebalancing_freq().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_rebalancing_freq());
            }
            // string uid = 31;
            if (!this_._internal_uid().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_uid());
            }
            // string position_uid = 33;
            if (!this_._internal_position_uid().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_position_uid());
            }
            // string asset_uid = 34;
            if (!this_._internal_asset_uid().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_asset_uid());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x000000ffu) {
            // .tinkoff.public.invest.api.contract.v1.Quotation klong = 7;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.klong_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation kshort = 8;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.kshort_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation dlong = 9;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.dlong_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation dshort = 10;
            if (cached_has_bits & 0x00000008u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.dshort_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation dlong_min = 11;
            if (cached_has_bits & 0x00000010u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.dlong_min_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation dshort_min = 12;
            if (cached_has_bits & 0x00000020u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.dshort_min_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation fixed_commission = 17;
            if (cached_has_bits & 0x00000040u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.fixed_commission_);
            }
            // .google.protobuf.Timestamp released_date = 19;
            if (cached_has_bits & 0x00000080u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.released_date_);
            }
          }
          if (cached_has_bits & 0x00007f00u) {
            // .tinkoff.public.invest.api.contract.v1.Quotation num_shares = 20;
            if (cached_has_bits & 0x00000100u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.num_shares_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation min_price_increment = 29;
            if (cached_has_bits & 0x00000200u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.min_price_increment_);
            }
            // .google.protobuf.Timestamp first_1min_candle_date = 56;
            if (cached_has_bits & 0x00000400u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.first_1min_candle_date_);
            }
            // .google.protobuf.Timestamp first_1day_candle_date = 57;
            if (cached_has_bits & 0x00000800u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.first_1day_candle_date_);
            }
            // .tinkoff.public.invest.api.contract.v1.BrandData brand = 60;
            if (cached_has_bits & 0x00001000u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.brand_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation dlong_client = 90;
            if (cached_has_bits & 0x00002000u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.dlong_client_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation dshort_client = 91;
            if (cached_has_bits & 0x00004000u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.dshort_client_);
            }
          }
           {
            // int32 lot = 5;
            if (this_._internal_lot() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_lot());
            }
            // bool short_enabled_flag = 13;
            if (this_._internal_short_enabled_flag() != 0) {
              total_size += 2;
            }
            // bool otc_flag = 26;
            if (this_._internal_otc_flag() != 0) {
              total_size += 3;
            }
            // bool buy_available_flag = 27;
            if (this_._internal_buy_available_flag() != 0) {
              total_size += 3;
            }
            // bool sell_available_flag = 28;
            if (this_._internal_sell_available_flag() != 0) {
              total_size += 3;
            }
            // .tinkoff.public.invest.api.contract.v1.SecurityTradingStatus trading_status = 25;
            if (this_._internal_trading_status() != 0) {
              total_size += 2 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_trading_status());
            }
            // .tinkoff.public.invest.api.contract.v1.RealExchange real_exchange = 32;
            if (this_._internal_real_exchange() != 0) {
              total_size += 2 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_real_exchange());
            }
            // .tinkoff.public.invest.api.contract.v1.InstrumentExchangeType instrument_exchange = 35;
            if (this_._internal_instrument_exchange() != 0) {
              total_size += 2 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_instrument_exchange());
            }
            // bool api_trade_available_flag = 30;
            if (this_._internal_api_trade_available_flag() != 0) {
              total_size += 3;
            }
            // bool for_iis_flag = 41;
            if (this_._internal_for_iis_flag() != 0) {
              total_size += 3;
            }
            // bool for_qual_investor_flag = 42;
            if (this_._internal_for_qual_investor_flag() != 0) {
              total_size += 3;
            }
            // bool weekend_flag = 43;
            if (this_._internal_weekend_flag() != 0) {
              total_size += 3;
            }
            // bool blocked_tca_flag = 44;
            if (this_._internal_blocked_tca_flag() != 0) {
              total_size += 3;
            }
            // bool liquidity_flag = 45;
            if (this_._internal_liquidity_flag() != 0) {
              total_size += 3;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Etf::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Etf*>(&to_msg);
  auto& from = static_cast<const Etf&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.Etf)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_ticker().empty()) {
    _this->_internal_set_ticker(from._internal_ticker());
  }
  if (!from._internal_class_code().empty()) {
    _this->_internal_set_class_code(from._internal_class_code());
  }
  if (!from._internal_isin().empty()) {
    _this->_internal_set_isin(from._internal_isin());
  }
  if (!from._internal_currency().empty()) {
    _this->_internal_set_currency(from._internal_currency());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_exchange().empty()) {
    _this->_internal_set_exchange(from._internal_exchange());
  }
  if (!from._internal_focus_type().empty()) {
    _this->_internal_set_focus_type(from._internal_focus_type());
  }
  if (!from._internal_country_of_risk().empty()) {
    _this->_internal_set_country_of_risk(from._internal_country_of_risk());
  }
  if (!from._internal_country_of_risk_name().empty()) {
    _this->_internal_set_country_of_risk_name(from._internal_country_of_risk_name());
  }
  if (!from._internal_sector().empty()) {
    _this->_internal_set_sector(from._internal_sector());
  }
  if (!from._internal_rebalancing_freq().empty()) {
    _this->_internal_set_rebalancing_freq(from._internal_rebalancing_freq());
  }
  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (!from._internal_position_uid().empty()) {
    _this->_internal_set_position_uid(from._internal_position_uid());
  }
  if (!from._internal_asset_uid().empty()) {
    _this->_internal_set_asset_uid(from._internal_asset_uid());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.klong_ != nullptr);
      if (_this->_impl_.klong_ == nullptr) {
        _this->_impl_.klong_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.klong_);
      } else {
        _this->_impl_.klong_->MergeFrom(*from._impl_.klong_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.kshort_ != nullptr);
      if (_this->_impl_.kshort_ == nullptr) {
        _this->_impl_.kshort_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.kshort_);
      } else {
        _this->_impl_.kshort_->MergeFrom(*from._impl_.kshort_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.dlong_ != nullptr);
      if (_this->_impl_.dlong_ == nullptr) {
        _this->_impl_.dlong_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.dlong_);
      } else {
        _this->_impl_.dlong_->MergeFrom(*from._impl_.dlong_);
      }
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(from._impl_.dshort_ != nullptr);
      if (_this->_impl_.dshort_ == nullptr) {
        _this->_impl_.dshort_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.dshort_);
      } else {
        _this->_impl_.dshort_->MergeFrom(*from._impl_.dshort_);
      }
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(from._impl_.dlong_min_ != nullptr);
      if (_this->_impl_.dlong_min_ == nullptr) {
        _this->_impl_.dlong_min_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.dlong_min_);
      } else {
        _this->_impl_.dlong_min_->MergeFrom(*from._impl_.dlong_min_);
      }
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(from._impl_.dshort_min_ != nullptr);
      if (_this->_impl_.dshort_min_ == nullptr) {
        _this->_impl_.dshort_min_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.dshort_min_);
      } else {
        _this->_impl_.dshort_min_->MergeFrom(*from._impl_.dshort_min_);
      }
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(from._impl_.fixed_commission_ != nullptr);
      if (_this->_impl_.fixed_commission_ == nullptr) {
        _this->_impl_.fixed_commission_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.fixed_commission_);
      } else {
        _this->_impl_.fixed_commission_->MergeFrom(*from._impl_.fixed_commission_);
      }
    }
    if (cached_has_bits & 0x00000080u) {
      ABSL_DCHECK(from._impl_.released_date_ != nullptr);
      if (_this->_impl_.released_date_ == nullptr) {
        _this->_impl_.released_date_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.released_date_);
      } else {
        _this->_impl_.released_date_->MergeFrom(*from._impl_.released_date_);
      }
    }
  }
  if (cached_has_bits & 0x00007f00u) {
    if (cached_has_bits & 0x00000100u) {
      ABSL_DCHECK(from._impl_.num_shares_ != nullptr);
      if (_this->_impl_.num_shares_ == nullptr) {
        _this->_impl_.num_shares_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.num_shares_);
      } else {
        _this->_impl_.num_shares_->MergeFrom(*from._impl_.num_shares_);
      }
    }
    if (cached_has_bits & 0x00000200u) {
      ABSL_DCHECK(from._impl_.min_price_increment_ != nullptr);
      if (_this->_impl_.min_price_increment_ == nullptr) {
        _this->_impl_.min_price_increment_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.min_price_increment_);
      } else {
        _this->_impl_.min_price_increment_->MergeFrom(*from._impl_.min_price_increment_);
      }
    }
    if (cached_has_bits & 0x00000400u) {
      ABSL_DCHECK(from._impl_.first_1min_candle_date_ != nullptr);
      if (_this->_impl_.first_1min_candle_date_ == nullptr) {
        _this->_impl_.first_1min_candle_date_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.first_1min_candle_date_);
      } else {
        _this->_impl_.first_1min_candle_date_->MergeFrom(*from._impl_.first_1min_candle_date_);
      }
    }
    if (cached_has_bits & 0x00000800u) {
      ABSL_DCHECK(from._impl_.first_1day_candle_date_ != nullptr);
      if (_this->_impl_.first_1day_candle_date_ == nullptr) {
        _this->_impl_.first_1day_candle_date_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.first_1day_candle_date_);
      } else {
        _this->_impl_.first_1day_candle_date_->MergeFrom(*from._impl_.first_1day_candle_date_);
      }
    }
    if (cached_has_bits & 0x00001000u) {
      ABSL_DCHECK(from._impl_.brand_ != nullptr);
      if (_this->_impl_.brand_ == nullptr) {
        _this->_impl_.brand_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::BrandData>(arena, *from._impl_.brand_);
      } else {
        _this->_impl_.brand_->MergeFrom(*from._impl_.brand_);
      }
    }
    if (cached_has_bits & 0x00002000u) {
      ABSL_DCHECK(from._impl_.dlong_client_ != nullptr);
      if (_this->_impl_.dlong_client_ == nullptr) {
        _this->_impl_.dlong_client_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.dlong_client_);
      } else {
        _this->_impl_.dlong_client_->MergeFrom(*from._impl_.dlong_client_);
      }
    }
    if (cached_has_bits & 0x00004000u) {
      ABSL_DCHECK(from._impl_.dshort_client_ != nullptr);
      if (_this->_impl_.dshort_client_ == nullptr) {
        _this->_impl_.dshort_client_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.dshort_client_);
      } else {
        _this->_impl_.dshort_client_->MergeFrom(*from._impl_.dshort_client_);
      }
    }
  }
  if (from._internal_lot() != 0) {
    _this->_impl_.lot_ = from._impl_.lot_;
  }
  if (from._internal_short_enabled_flag() != 0) {
    _this->_impl_.short_enabled_flag_ = from._impl_.short_enabled_flag_;
  }
  if (from._internal_otc_flag() != 0) {
    _this->_impl_.otc_flag_ = from._impl_.otc_flag_;
  }
  if (from._internal_buy_available_flag() != 0) {
    _this->_impl_.buy_available_flag_ = from._impl_.buy_available_flag_;
  }
  if (from._internal_sell_available_flag() != 0) {
    _this->_impl_.sell_available_flag_ = from._impl_.sell_available_flag_;
  }
  if (from._internal_trading_status() != 0) {
    _this->_impl_.trading_status_ = from._impl_.trading_status_;
  }
  if (from._internal_real_exchange() != 0) {
    _this->_impl_.real_exchange_ = from._impl_.real_exchange_;
  }
  if (from._internal_instrument_exchange() != 0) {
    _this->_impl_.instrument_exchange_ = from._impl_.instrument_exchange_;
  }
  if (from._internal_api_trade_available_flag() != 0) {
    _this->_impl_.api_trade_available_flag_ = from._impl_.api_trade_available_flag_;
  }
  if (from._internal_for_iis_flag() != 0) {
    _this->_impl_.for_iis_flag_ = from._impl_.for_iis_flag_;
  }
  if (from._internal_for_qual_investor_flag() != 0) {
    _this->_impl_.for_qual_investor_flag_ = from._impl_.for_qual_investor_flag_;
  }
  if (from._internal_weekend_flag() != 0) {
    _this->_impl_.weekend_flag_ = from._impl_.weekend_flag_;
  }
  if (from._internal_blocked_tca_flag() != 0) {
    _this->_impl_.blocked_tca_flag_ = from._impl_.blocked_tca_flag_;
  }
  if (from._internal_liquidity_flag() != 0) {
    _this->_impl_.liquidity_flag_ = from._impl_.liquidity_flag_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Etf::CopyFrom(const Etf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.Etf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Etf::InternalSwap(Etf* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.figi_, &other->_impl_.figi_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ticker_, &other->_impl_.ticker_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.class_code_, &other->_impl_.class_code_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.isin_, &other->_impl_.isin_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.currency_, &other->_impl_.currency_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.exchange_, &other->_impl_.exchange_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.focus_type_, &other->_impl_.focus_type_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.country_of_risk_, &other->_impl_.country_of_risk_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.country_of_risk_name_, &other->_impl_.country_of_risk_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sector_, &other->_impl_.sector_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.rebalancing_freq_, &other->_impl_.rebalancing_freq_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.uid_, &other->_impl_.uid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.position_uid_, &other->_impl_.position_uid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.asset_uid_, &other->_impl_.asset_uid_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Etf, _impl_.liquidity_flag_)
      + sizeof(Etf::_impl_.liquidity_flag_)
      - PROTOBUF_FIELD_OFFSET(Etf, _impl_.klong_)>(
          reinterpret_cast<char*>(&_impl_.klong_),
          reinterpret_cast<char*>(&other->_impl_.klong_));
}

::google::protobuf::Metadata Etf::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Future::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Future>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Future, _impl_._has_bits_);
};

void Future::clear_klong() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.klong_ != nullptr) _impl_.klong_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Future::clear_kshort() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.kshort_ != nullptr) _impl_.kshort_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void Future::clear_dlong() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.dlong_ != nullptr) _impl_.dlong_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void Future::clear_dshort() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.dshort_ != nullptr) _impl_.dshort_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void Future::clear_dlong_min() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.dlong_min_ != nullptr) _impl_.dlong_min_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void Future::clear_dshort_min() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.dshort_min_ != nullptr) _impl_.dshort_min_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void Future::clear_first_trade_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.first_trade_date_ != nullptr) _impl_.first_trade_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void Future::clear_last_trade_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.last_trade_date_ != nullptr) _impl_.last_trade_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void Future::clear_basic_asset_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.basic_asset_size_ != nullptr) _impl_.basic_asset_size_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void Future::clear_expiration_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.expiration_date_ != nullptr) _impl_.expiration_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void Future::clear_min_price_increment() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.min_price_increment_ != nullptr) _impl_.min_price_increment_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
void Future::clear_first_1min_candle_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.first_1min_candle_date_ != nullptr) _impl_.first_1min_candle_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
void Future::clear_first_1day_candle_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.first_1day_candle_date_ != nullptr) _impl_.first_1day_candle_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
void Future::clear_initial_margin_on_buy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.initial_margin_on_buy_ != nullptr) _impl_.initial_margin_on_buy_->Clear();
  _impl_._has_bits_[0] &= ~0x00002000u;
}
void Future::clear_initial_margin_on_sell() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.initial_margin_on_sell_ != nullptr) _impl_.initial_margin_on_sell_->Clear();
  _impl_._has_bits_[0] &= ~0x00004000u;
}
void Future::clear_min_price_increment_amount() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.min_price_increment_amount_ != nullptr) _impl_.min_price_increment_amount_->Clear();
  _impl_._has_bits_[0] &= ~0x00008000u;
}
void Future::clear_brand() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.brand_ != nullptr) _impl_.brand_->Clear();
  _impl_._has_bits_[0] &= ~0x00010000u;
}
void Future::clear_dlong_client() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.dlong_client_ != nullptr) _impl_.dlong_client_->Clear();
  _impl_._has_bits_[0] &= ~0x00020000u;
}
void Future::clear_dshort_client() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.dshort_client_ != nullptr) _impl_.dshort_client_->Clear();
  _impl_._has_bits_[0] &= ~0x00040000u;
}
Future::Future(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.Future)
}
inline PROTOBUF_NDEBUG_INLINE Future::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::Future& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        figi_(arena, from.figi_),
        ticker_(arena, from.ticker_),
        class_code_(arena, from.class_code_),
        currency_(arena, from.currency_),
        name_(arena, from.name_),
        exchange_(arena, from.exchange_),
        futures_type_(arena, from.futures_type_),
        asset_type_(arena, from.asset_type_),
        basic_asset_(arena, from.basic_asset_),
        country_of_risk_(arena, from.country_of_risk_),
        country_of_risk_name_(arena, from.country_of_risk_name_),
        sector_(arena, from.sector_),
        uid_(arena, from.uid_),
        position_uid_(arena, from.position_uid_),
        basic_asset_position_uid_(arena, from.basic_asset_position_uid_) {}

Future::Future(
    ::google::protobuf::Arena* arena,
    const Future& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Future* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.klong_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.klong_)
                        : nullptr;
  _impl_.kshort_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.kshort_)
                        : nullptr;
  _impl_.dlong_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.dlong_)
                        : nullptr;
  _impl_.dshort_ = (cached_has_bits & 0x00000008u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.dshort_)
                        : nullptr;
  _impl_.dlong_min_ = (cached_has_bits & 0x00000010u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.dlong_min_)
                        : nullptr;
  _impl_.dshort_min_ = (cached_has_bits & 0x00000020u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.dshort_min_)
                        : nullptr;
  _impl_.first_trade_date_ = (cached_has_bits & 0x00000040u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.first_trade_date_)
                        : nullptr;
  _impl_.last_trade_date_ = (cached_has_bits & 0x00000080u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.last_trade_date_)
                        : nullptr;
  _impl_.basic_asset_size_ = (cached_has_bits & 0x00000100u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.basic_asset_size_)
                        : nullptr;
  _impl_.expiration_date_ = (cached_has_bits & 0x00000200u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.expiration_date_)
                        : nullptr;
  _impl_.min_price_increment_ = (cached_has_bits & 0x00000400u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.min_price_increment_)
                        : nullptr;
  _impl_.first_1min_candle_date_ = (cached_has_bits & 0x00000800u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.first_1min_candle_date_)
                        : nullptr;
  _impl_.first_1day_candle_date_ = (cached_has_bits & 0x00001000u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.first_1day_candle_date_)
                        : nullptr;
  _impl_.initial_margin_on_buy_ = (cached_has_bits & 0x00002000u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(
                              arena, *from._impl_.initial_margin_on_buy_)
                        : nullptr;
  _impl_.initial_margin_on_sell_ = (cached_has_bits & 0x00004000u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(
                              arena, *from._impl_.initial_margin_on_sell_)
                        : nullptr;
  _impl_.min_price_increment_amount_ = (cached_has_bits & 0x00008000u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.min_price_increment_amount_)
                        : nullptr;
  _impl_.brand_ = (cached_has_bits & 0x00010000u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::BrandData>(
                              arena, *from._impl_.brand_)
                        : nullptr;
  _impl_.dlong_client_ = (cached_has_bits & 0x00020000u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.dlong_client_)
                        : nullptr;
  _impl_.dshort_client_ = (cached_has_bits & 0x00040000u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.dshort_client_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, lot_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, lot_),
           offsetof(Impl_, blocked_tca_flag_) -
               offsetof(Impl_, lot_) +
               sizeof(Impl_::blocked_tca_flag_));

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.Future)
}
inline PROTOBUF_NDEBUG_INLINE Future::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        figi_(arena),
        ticker_(arena),
        class_code_(arena),
        currency_(arena),
        name_(arena),
        exchange_(arena),
        futures_type_(arena),
        asset_type_(arena),
        basic_asset_(arena),
        country_of_risk_(arena),
        country_of_risk_name_(arena),
        sector_(arena),
        uid_(arena),
        position_uid_(arena),
        basic_asset_position_uid_(arena) {}

inline void Future::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, klong_),
           0,
           offsetof(Impl_, blocked_tca_flag_) -
               offsetof(Impl_, klong_) +
               sizeof(Impl_::blocked_tca_flag_));
}
Future::~Future() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.Future)
  SharedDtor(*this);
}
inline void Future::SharedDtor(MessageLite& self) {
  Future& this_ = static_cast<Future&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.figi_.Destroy();
  this_._impl_.ticker_.Destroy();
  this_._impl_.class_code_.Destroy();
  this_._impl_.currency_.Destroy();
  this_._impl_.name_.Destroy();
  this_._impl_.exchange_.Destroy();
  this_._impl_.futures_type_.Destroy();
  this_._impl_.asset_type_.Destroy();
  this_._impl_.basic_asset_.Destroy();
  this_._impl_.country_of_risk_.Destroy();
  this_._impl_.country_of_risk_name_.Destroy();
  this_._impl_.sector_.Destroy();
  this_._impl_.uid_.Destroy();
  this_._impl_.position_uid_.Destroy();
  this_._impl_.basic_asset_position_uid_.Destroy();
  delete this_._impl_.klong_;
  delete this_._impl_.kshort_;
  delete this_._impl_.dlong_;
  delete this_._impl_.dshort_;
  delete this_._impl_.dlong_min_;
  delete this_._impl_.dshort_min_;
  delete this_._impl_.first_trade_date_;
  delete this_._impl_.last_trade_date_;
  delete this_._impl_.basic_asset_size_;
  delete this_._impl_.expiration_date_;
  delete this_._impl_.min_price_increment_;
  delete this_._impl_.first_1min_candle_date_;
  delete this_._impl_.first_1day_candle_date_;
  delete this_._impl_.initial_margin_on_buy_;
  delete this_._impl_.initial_margin_on_sell_;
  delete this_._impl_.min_price_increment_amount_;
  delete this_._impl_.brand_;
  delete this_._impl_.dlong_client_;
  delete this_._impl_.dshort_client_;
  this_._impl_.~Impl_();
}

inline void* Future::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Future(arena);
}
constexpr auto Future::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Future),
                                            alignof(Future));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Future::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Future_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Future::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Future>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Future::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Future>(), &Future::ByteSizeLong,
            &Future::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Future, _impl_._cached_size_),
        false,
    },
    &Future::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Future::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 46, 19, 246, 13> Future::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Future, _impl_._has_bits_),
    0, // no _extensions_
    91, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    0,  // skipmap
    offsetof(decltype(_table_), field_entries),
    46,  // num_field_entries
    19,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Future>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string figi = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Future, _impl_.figi_)}},
    // string ticker = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Future, _impl_.ticker_)}},
    // string class_code = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Future, _impl_.class_code_)}},
    // int32 lot = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Future, _impl_.lot_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(Future, _impl_.lot_)}},
    // string currency = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(Future, _impl_.currency_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation klong = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 0, 0, PROTOBUF_FIELD_OFFSET(Future, _impl_.klong_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation kshort = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 1, 1, PROTOBUF_FIELD_OFFSET(Future, _impl_.kshort_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation dlong = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 2, 2, PROTOBUF_FIELD_OFFSET(Future, _impl_.dlong_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation dshort = 9;
    {::_pbi::TcParser::FastMtS1,
     {74, 3, 3, PROTOBUF_FIELD_OFFSET(Future, _impl_.dshort_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation dlong_min = 10;
    {::_pbi::TcParser::FastMtS1,
     {82, 4, 4, PROTOBUF_FIELD_OFFSET(Future, _impl_.dlong_min_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation dshort_min = 11;
    {::_pbi::TcParser::FastMtS1,
     {90, 5, 5, PROTOBUF_FIELD_OFFSET(Future, _impl_.dshort_min_)}},
    // bool short_enabled_flag = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Future, _impl_.short_enabled_flag_), 63>(),
     {96, 63, 0, PROTOBUF_FIELD_OFFSET(Future, _impl_.short_enabled_flag_)}},
    // string name = 13;
    {::_pbi::TcParser::FastUS1,
     {106, 63, 0, PROTOBUF_FIELD_OFFSET(Future, _impl_.name_)}},
    // string exchange = 14;
    {::_pbi::TcParser::FastUS1,
     {114, 63, 0, PROTOBUF_FIELD_OFFSET(Future, _impl_.exchange_)}},
    // .google.protobuf.Timestamp first_trade_date = 15;
    {::_pbi::TcParser::FastMtS1,
     {122, 6, 6, PROTOBUF_FIELD_OFFSET(Future, _impl_.first_trade_date_)}},
    // .google.protobuf.Timestamp last_trade_date = 16;
    {::_pbi::TcParser::FastMtS2,
     {386, 7, 7, PROTOBUF_FIELD_OFFSET(Future, _impl_.last_trade_date_)}},
    // string futures_type = 17;
    {::_pbi::TcParser::FastUS2,
     {394, 63, 0, PROTOBUF_FIELD_OFFSET(Future, _impl_.futures_type_)}},
    // string asset_type = 18;
    {::_pbi::TcParser::FastUS2,
     {402, 63, 0, PROTOBUF_FIELD_OFFSET(Future, _impl_.asset_type_)}},
    // string basic_asset = 19;
    {::_pbi::TcParser::FastUS2,
     {410, 63, 0, PROTOBUF_FIELD_OFFSET(Future, _impl_.basic_asset_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation basic_asset_size = 20;
    {::_pbi::TcParser::FastMtS2,
     {418, 8, 8, PROTOBUF_FIELD_OFFSET(Future, _impl_.basic_asset_size_)}},
    // string country_of_risk = 21;
    {::_pbi::TcParser::FastUS2,
     {426, 63, 0, PROTOBUF_FIELD_OFFSET(Future, _impl_.country_of_risk_)}},
    // string country_of_risk_name = 22;
    {::_pbi::TcParser::FastUS2,
     {434, 63, 0, PROTOBUF_FIELD_OFFSET(Future, _impl_.country_of_risk_name_)}},
    // string sector = 23;
    {::_pbi::TcParser::FastUS2,
     {442, 63, 0, PROTOBUF_FIELD_OFFSET(Future, _impl_.sector_)}},
    // .google.protobuf.Timestamp expiration_date = 24;
    {::_pbi::TcParser::FastMtS2,
     {450, 9, 9, PROTOBUF_FIELD_OFFSET(Future, _impl_.expiration_date_)}},
    // .tinkoff.public.invest.api.contract.v1.SecurityTradingStatus trading_status = 25;
    {::_pbi::TcParser::FastV32S2,
     {456, 63, 0, PROTOBUF_FIELD_OFFSET(Future, _impl_.trading_status_)}},
    // bool otc_flag = 26;
    {::_pbi::TcParser::FastV8S2,
     {464, 63, 0, PROTOBUF_FIELD_OFFSET(Future, _impl_.otc_flag_)}},
    // bool buy_available_flag = 27;
    {::_pbi::TcParser::FastV8S2,
     {472, 63, 0, PROTOBUF_FIELD_OFFSET(Future, _impl_.buy_available_flag_)}},
    // bool sell_available_flag = 28;
    {::_pbi::TcParser::FastV8S2,
     {480, 63, 0, PROTOBUF_FIELD_OFFSET(Future, _impl_.sell_available_flag_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation min_price_increment = 29;
    {::_pbi::TcParser::FastMtS2,
     {490, 10, 10, PROTOBUF_FIELD_OFFSET(Future, _impl_.min_price_increment_)}},
    // bool api_trade_available_flag = 30;
    {::_pbi::TcParser::FastV8S2,
     {496, 63, 0, PROTOBUF_FIELD_OFFSET(Future, _impl_.api_trade_available_flag_)}},
    // string uid = 31;
    {::_pbi::TcParser::FastUS2,
     {506, 63, 0, PROTOBUF_FIELD_OFFSET(Future, _impl_.uid_)}},
  }}, {{
    33, 0, 4,
    61692, 32, 3711, 38, 65535, 44, 63999, 44,
    65535, 65535
  }}, {{
    // string figi = 1;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.figi_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string ticker = 2;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.ticker_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string class_code = 3;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.class_code_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 lot = 4;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.lot_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string currency = 5;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.currency_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public.invest.api.contract.v1.Quotation klong = 6;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.klong_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation kshort = 7;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.kshort_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation dlong = 8;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.dlong_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation dshort = 9;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.dshort_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation dlong_min = 10;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.dlong_min_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation dshort_min = 11;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.dshort_min_), _Internal::kHasBitsOffset + 5, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool short_enabled_flag = 12;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.short_enabled_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string name = 13;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string exchange = 14;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.exchange_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Timestamp first_trade_date = 15;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.first_trade_date_), _Internal::kHasBitsOffset + 6, 6,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp last_trade_date = 16;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.last_trade_date_), _Internal::kHasBitsOffset + 7, 7,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string futures_type = 17;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.futures_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string asset_type = 18;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.asset_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string basic_asset = 19;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.basic_asset_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public.invest.api.contract.v1.Quotation basic_asset_size = 20;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.basic_asset_size_), _Internal::kHasBitsOffset + 8, 8,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string country_of_risk = 21;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.country_of_risk_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string country_of_risk_name = 22;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.country_of_risk_name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string sector = 23;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.sector_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Timestamp expiration_date = 24;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.expiration_date_), _Internal::kHasBitsOffset + 9, 9,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.SecurityTradingStatus trading_status = 25;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.trading_status_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // bool otc_flag = 26;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.otc_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool buy_available_flag = 27;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.buy_available_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool sell_available_flag = 28;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.sell_available_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .tinkoff.public.invest.api.contract.v1.Quotation min_price_increment = 29;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.min_price_increment_), _Internal::kHasBitsOffset + 10, 10,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool api_trade_available_flag = 30;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.api_trade_available_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string uid = 31;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.uid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public.invest.api.contract.v1.RealExchange real_exchange = 32;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.real_exchange_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string position_uid = 33;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.position_uid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string basic_asset_position_uid = 34;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.basic_asset_position_uid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool for_iis_flag = 41;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.for_iis_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool for_qual_investor_flag = 42;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.for_qual_investor_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool weekend_flag = 43;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.weekend_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool blocked_tca_flag = 44;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.blocked_tca_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .google.protobuf.Timestamp first_1min_candle_date = 56;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.first_1min_candle_date_), _Internal::kHasBitsOffset + 11, 11,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp first_1day_candle_date = 57;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.first_1day_candle_date_), _Internal::kHasBitsOffset + 12, 12,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.MoneyValue initial_margin_on_buy = 61;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.initial_margin_on_buy_), _Internal::kHasBitsOffset + 13, 13,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.MoneyValue initial_margin_on_sell = 62;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.initial_margin_on_sell_), _Internal::kHasBitsOffset + 14, 14,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation min_price_increment_amount = 63;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.min_price_increment_amount_), _Internal::kHasBitsOffset + 15, 15,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.BrandData brand = 64;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.brand_), _Internal::kHasBitsOffset + 16, 16,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation dlong_client = 90;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.dlong_client_), _Internal::kHasBitsOffset + 17, 17,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation dshort_client = 91;
    {PROTOBUF_FIELD_OFFSET(Future, _impl_.dshort_client_), _Internal::kHasBitsOffset + 18, 18,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::MoneyValue>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::MoneyValue>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::BrandData>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
  }}, {{
    "\54\4\6\12\0\10\0\0\0\0\0\0\0\4\10\0\0\14\12\13\0\17\24\6\0\0\0\0\0\0\0\3\0\14\30\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "tinkoff.public.invest.api.contract.v1.Future"
    "figi"
    "ticker"
    "class_code"
    "currency"
    "name"
    "exchange"
    "futures_type"
    "asset_type"
    "basic_asset"
    "country_of_risk"
    "country_of_risk_name"
    "sector"
    "uid"
    "position_uid"
    "basic_asset_position_uid"
  }},
};

PROTOBUF_NOINLINE void Future::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.Future)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.figi_.ClearToEmpty();
  _impl_.ticker_.ClearToEmpty();
  _impl_.class_code_.ClearToEmpty();
  _impl_.currency_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.exchange_.ClearToEmpty();
  _impl_.futures_type_.ClearToEmpty();
  _impl_.asset_type_.ClearToEmpty();
  _impl_.basic_asset_.ClearToEmpty();
  _impl_.country_of_risk_.ClearToEmpty();
  _impl_.country_of_risk_name_.ClearToEmpty();
  _impl_.sector_.ClearToEmpty();
  _impl_.uid_.ClearToEmpty();
  _impl_.position_uid_.ClearToEmpty();
  _impl_.basic_asset_position_uid_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.klong_ != nullptr);
      _impl_.klong_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.kshort_ != nullptr);
      _impl_.kshort_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.dlong_ != nullptr);
      _impl_.dlong_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.dshort_ != nullptr);
      _impl_.dshort_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.dlong_min_ != nullptr);
      _impl_.dlong_min_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.dshort_min_ != nullptr);
      _impl_.dshort_min_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(_impl_.first_trade_date_ != nullptr);
      _impl_.first_trade_date_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      ABSL_DCHECK(_impl_.last_trade_date_ != nullptr);
      _impl_.last_trade_date_->Clear();
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      ABSL_DCHECK(_impl_.basic_asset_size_ != nullptr);
      _impl_.basic_asset_size_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      ABSL_DCHECK(_impl_.expiration_date_ != nullptr);
      _impl_.expiration_date_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      ABSL_DCHECK(_impl_.min_price_increment_ != nullptr);
      _impl_.min_price_increment_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      ABSL_DCHECK(_impl_.first_1min_candle_date_ != nullptr);
      _impl_.first_1min_candle_date_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      ABSL_DCHECK(_impl_.first_1day_candle_date_ != nullptr);
      _impl_.first_1day_candle_date_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      ABSL_DCHECK(_impl_.initial_margin_on_buy_ != nullptr);
      _impl_.initial_margin_on_buy_->Clear();
    }
    if (cached_has_bits & 0x00004000u) {
      ABSL_DCHECK(_impl_.initial_margin_on_sell_ != nullptr);
      _impl_.initial_margin_on_sell_->Clear();
    }
    if (cached_has_bits & 0x00008000u) {
      ABSL_DCHECK(_impl_.min_price_increment_amount_ != nullptr);
      _impl_.min_price_increment_amount_->Clear();
    }
  }
  if (cached_has_bits & 0x00070000u) {
    if (cached_has_bits & 0x00010000u) {
      ABSL_DCHECK(_impl_.brand_ != nullptr);
      _impl_.brand_->Clear();
    }
    if (cached_has_bits & 0x00020000u) {
      ABSL_DCHECK(_impl_.dlong_client_ != nullptr);
      _impl_.dlong_client_->Clear();
    }
    if (cached_has_bits & 0x00040000u) {
      ABSL_DCHECK(_impl_.dshort_client_ != nullptr);
      _impl_.dshort_client_->Clear();
    }
  }
  ::memset(&_impl_.lot_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.blocked_tca_flag_) -
      reinterpret_cast<char*>(&_impl_.lot_)) + sizeof(_impl_.blocked_tca_flag_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Future::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Future& this_ = static_cast<const Future&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Future::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Future& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.Future)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string figi = 1;
          if (!this_._internal_figi().empty()) {
            const std::string& _s = this_._internal_figi();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Future.figi");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string ticker = 2;
          if (!this_._internal_ticker().empty()) {
            const std::string& _s = this_._internal_ticker();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Future.ticker");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // string class_code = 3;
          if (!this_._internal_class_code().empty()) {
            const std::string& _s = this_._internal_class_code();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Future.class_code");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // int32 lot = 4;
          if (this_._internal_lot() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<4>(
                    stream, this_._internal_lot(), target);
          }

          // string currency = 5;
          if (!this_._internal_currency().empty()) {
            const std::string& _s = this_._internal_currency();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Future.currency");
            target = stream->WriteStringMaybeAliased(5, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .tinkoff.public.invest.api.contract.v1.Quotation klong = 6;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                6, *this_._impl_.klong_, this_._impl_.klong_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation kshort = 7;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                7, *this_._impl_.kshort_, this_._impl_.kshort_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation dlong = 8;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                8, *this_._impl_.dlong_, this_._impl_.dlong_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation dshort = 9;
          if (cached_has_bits & 0x00000008u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                9, *this_._impl_.dshort_, this_._impl_.dshort_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation dlong_min = 10;
          if (cached_has_bits & 0x00000010u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                10, *this_._impl_.dlong_min_, this_._impl_.dlong_min_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation dshort_min = 11;
          if (cached_has_bits & 0x00000020u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                11, *this_._impl_.dshort_min_, this_._impl_.dshort_min_->GetCachedSize(), target,
                stream);
          }

          // bool short_enabled_flag = 12;
          if (this_._internal_short_enabled_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                12, this_._internal_short_enabled_flag(), target);
          }

          // string name = 13;
          if (!this_._internal_name().empty()) {
            const std::string& _s = this_._internal_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Future.name");
            target = stream->WriteStringMaybeAliased(13, _s, target);
          }

          // string exchange = 14;
          if (!this_._internal_exchange().empty()) {
            const std::string& _s = this_._internal_exchange();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Future.exchange");
            target = stream->WriteStringMaybeAliased(14, _s, target);
          }

          // .google.protobuf.Timestamp first_trade_date = 15;
          if (cached_has_bits & 0x00000040u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                15, *this_._impl_.first_trade_date_, this_._impl_.first_trade_date_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Timestamp last_trade_date = 16;
          if (cached_has_bits & 0x00000080u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                16, *this_._impl_.last_trade_date_, this_._impl_.last_trade_date_->GetCachedSize(), target,
                stream);
          }

          // string futures_type = 17;
          if (!this_._internal_futures_type().empty()) {
            const std::string& _s = this_._internal_futures_type();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Future.futures_type");
            target = stream->WriteStringMaybeAliased(17, _s, target);
          }

          // string asset_type = 18;
          if (!this_._internal_asset_type().empty()) {
            const std::string& _s = this_._internal_asset_type();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Future.asset_type");
            target = stream->WriteStringMaybeAliased(18, _s, target);
          }

          // string basic_asset = 19;
          if (!this_._internal_basic_asset().empty()) {
            const std::string& _s = this_._internal_basic_asset();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Future.basic_asset");
            target = stream->WriteStringMaybeAliased(19, _s, target);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation basic_asset_size = 20;
          if (cached_has_bits & 0x00000100u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                20, *this_._impl_.basic_asset_size_, this_._impl_.basic_asset_size_->GetCachedSize(), target,
                stream);
          }

          // string country_of_risk = 21;
          if (!this_._internal_country_of_risk().empty()) {
            const std::string& _s = this_._internal_country_of_risk();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Future.country_of_risk");
            target = stream->WriteStringMaybeAliased(21, _s, target);
          }

          // string country_of_risk_name = 22;
          if (!this_._internal_country_of_risk_name().empty()) {
            const std::string& _s = this_._internal_country_of_risk_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Future.country_of_risk_name");
            target = stream->WriteStringMaybeAliased(22, _s, target);
          }

          // string sector = 23;
          if (!this_._internal_sector().empty()) {
            const std::string& _s = this_._internal_sector();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Future.sector");
            target = stream->WriteStringMaybeAliased(23, _s, target);
          }

          // .google.protobuf.Timestamp expiration_date = 24;
          if (cached_has_bits & 0x00000200u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                24, *this_._impl_.expiration_date_, this_._impl_.expiration_date_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.SecurityTradingStatus trading_status = 25;
          if (this_._internal_trading_status() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                25, this_._internal_trading_status(), target);
          }

          // bool otc_flag = 26;
          if (this_._internal_otc_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                26, this_._internal_otc_flag(), target);
          }

          // bool buy_available_flag = 27;
          if (this_._internal_buy_available_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                27, this_._internal_buy_available_flag(), target);
          }

          // bool sell_available_flag = 28;
          if (this_._internal_sell_available_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                28, this_._internal_sell_available_flag(), target);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation min_price_increment = 29;
          if (cached_has_bits & 0x00000400u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                29, *this_._impl_.min_price_increment_, this_._impl_.min_price_increment_->GetCachedSize(), target,
                stream);
          }

          // bool api_trade_available_flag = 30;
          if (this_._internal_api_trade_available_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                30, this_._internal_api_trade_available_flag(), target);
          }

          // string uid = 31;
          if (!this_._internal_uid().empty()) {
            const std::string& _s = this_._internal_uid();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Future.uid");
            target = stream->WriteStringMaybeAliased(31, _s, target);
          }

          // .tinkoff.public.invest.api.contract.v1.RealExchange real_exchange = 32;
          if (this_._internal_real_exchange() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                32, this_._internal_real_exchange(), target);
          }

          // string position_uid = 33;
          if (!this_._internal_position_uid().empty()) {
            const std::string& _s = this_._internal_position_uid();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Future.position_uid");
            target = stream->WriteStringMaybeAliased(33, _s, target);
          }

          // string basic_asset_position_uid = 34;
          if (!this_._internal_basic_asset_position_uid().empty()) {
            const std::string& _s = this_._internal_basic_asset_position_uid();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Future.basic_asset_position_uid");
            target = stream->WriteStringMaybeAliased(34, _s, target);
          }

          // bool for_iis_flag = 41;
          if (this_._internal_for_iis_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                41, this_._internal_for_iis_flag(), target);
          }

          // bool for_qual_investor_flag = 42;
          if (this_._internal_for_qual_investor_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                42, this_._internal_for_qual_investor_flag(), target);
          }

          // bool weekend_flag = 43;
          if (this_._internal_weekend_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                43, this_._internal_weekend_flag(), target);
          }

          // bool blocked_tca_flag = 44;
          if (this_._internal_blocked_tca_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                44, this_._internal_blocked_tca_flag(), target);
          }

          // .google.protobuf.Timestamp first_1min_candle_date = 56;
          if (cached_has_bits & 0x00000800u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                56, *this_._impl_.first_1min_candle_date_, this_._impl_.first_1min_candle_date_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Timestamp first_1day_candle_date = 57;
          if (cached_has_bits & 0x00001000u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                57, *this_._impl_.first_1day_candle_date_, this_._impl_.first_1day_candle_date_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.MoneyValue initial_margin_on_buy = 61;
          if (cached_has_bits & 0x00002000u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                61, *this_._impl_.initial_margin_on_buy_, this_._impl_.initial_margin_on_buy_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.MoneyValue initial_margin_on_sell = 62;
          if (cached_has_bits & 0x00004000u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                62, *this_._impl_.initial_margin_on_sell_, this_._impl_.initial_margin_on_sell_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation min_price_increment_amount = 63;
          if (cached_has_bits & 0x00008000u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                63, *this_._impl_.min_price_increment_amount_, this_._impl_.min_price_increment_amount_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.BrandData brand = 64;
          if (cached_has_bits & 0x00010000u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                64, *this_._impl_.brand_, this_._impl_.brand_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation dlong_client = 90;
          if (cached_has_bits & 0x00020000u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                90, *this_._impl_.dlong_client_, this_._impl_.dlong_client_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation dshort_client = 91;
          if (cached_has_bits & 0x00040000u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                91, *this_._impl_.dshort_client_, this_._impl_.dshort_client_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.Future)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Future::ByteSizeLong(const MessageLite& base) {
          const Future& this_ = static_cast<const Future&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Future::ByteSizeLong() const {
          const Future& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.Future)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string figi = 1;
            if (!this_._internal_figi().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_figi());
            }
            // string ticker = 2;
            if (!this_._internal_ticker().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_ticker());
            }
            // string class_code = 3;
            if (!this_._internal_class_code().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_class_code());
            }
            // string currency = 5;
            if (!this_._internal_currency().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_currency());
            }
            // string name = 13;
            if (!this_._internal_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_name());
            }
            // string exchange = 14;
            if (!this_._internal_exchange().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_exchange());
            }
            // string futures_type = 17;
            if (!this_._internal_futures_type().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_futures_type());
            }
            // string asset_type = 18;
            if (!this_._internal_asset_type().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_asset_type());
            }
            // string basic_asset = 19;
            if (!this_._internal_basic_asset().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_basic_asset());
            }
            // string country_of_risk = 21;
            if (!this_._internal_country_of_risk().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_country_of_risk());
            }
            // string country_of_risk_name = 22;
            if (!this_._internal_country_of_risk_name().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_country_of_risk_name());
            }
            // string sector = 23;
            if (!this_._internal_sector().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_sector());
            }
            // string uid = 31;
            if (!this_._internal_uid().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_uid());
            }
            // string position_uid = 33;
            if (!this_._internal_position_uid().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_position_uid());
            }
            // string basic_asset_position_uid = 34;
            if (!this_._internal_basic_asset_position_uid().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_basic_asset_position_uid());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x000000ffu) {
            // .tinkoff.public.invest.api.contract.v1.Quotation klong = 6;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.klong_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation kshort = 7;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.kshort_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation dlong = 8;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.dlong_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation dshort = 9;
            if (cached_has_bits & 0x00000008u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.dshort_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation dlong_min = 10;
            if (cached_has_bits & 0x00000010u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.dlong_min_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation dshort_min = 11;
            if (cached_has_bits & 0x00000020u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.dshort_min_);
            }
            // .google.protobuf.Timestamp first_trade_date = 15;
            if (cached_has_bits & 0x00000040u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.first_trade_date_);
            }
            // .google.protobuf.Timestamp last_trade_date = 16;
            if (cached_has_bits & 0x00000080u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.last_trade_date_);
            }
          }
          if (cached_has_bits & 0x0000ff00u) {
            // .tinkoff.public.invest.api.contract.v1.Quotation basic_asset_size = 20;
            if (cached_has_bits & 0x00000100u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.basic_asset_size_);
            }
            // .google.protobuf.Timestamp expiration_date = 24;
            if (cached_has_bits & 0x00000200u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.expiration_date_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation min_price_increment = 29;
            if (cached_has_bits & 0x00000400u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.min_price_increment_);
            }
            // .google.protobuf.Timestamp first_1min_candle_date = 56;
            if (cached_has_bits & 0x00000800u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.first_1min_candle_date_);
            }
            // .google.protobuf.Timestamp first_1day_candle_date = 57;
            if (cached_has_bits & 0x00001000u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.first_1day_candle_date_);
            }
            // .tinkoff.public.invest.api.contract.v1.MoneyValue initial_margin_on_buy = 61;
            if (cached_has_bits & 0x00002000u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.initial_margin_on_buy_);
            }
            // .tinkoff.public.invest.api.contract.v1.MoneyValue initial_margin_on_sell = 62;
            if (cached_has_bits & 0x00004000u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.initial_margin_on_sell_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation min_price_increment_amount = 63;
            if (cached_has_bits & 0x00008000u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.min_price_increment_amount_);
            }
          }
          if (cached_has_bits & 0x00070000u) {
            // .tinkoff.public.invest.api.contract.v1.BrandData brand = 64;
            if (cached_has_bits & 0x00010000u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.brand_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation dlong_client = 90;
            if (cached_has_bits & 0x00020000u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.dlong_client_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation dshort_client = 91;
            if (cached_has_bits & 0x00040000u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.dshort_client_);
            }
          }
           {
            // int32 lot = 4;
            if (this_._internal_lot() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_lot());
            }
            // bool short_enabled_flag = 12;
            if (this_._internal_short_enabled_flag() != 0) {
              total_size += 2;
            }
            // bool otc_flag = 26;
            if (this_._internal_otc_flag() != 0) {
              total_size += 3;
            }
            // bool buy_available_flag = 27;
            if (this_._internal_buy_available_flag() != 0) {
              total_size += 3;
            }
            // bool sell_available_flag = 28;
            if (this_._internal_sell_available_flag() != 0) {
              total_size += 3;
            }
            // .tinkoff.public.invest.api.contract.v1.SecurityTradingStatus trading_status = 25;
            if (this_._internal_trading_status() != 0) {
              total_size += 2 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_trading_status());
            }
            // .tinkoff.public.invest.api.contract.v1.RealExchange real_exchange = 32;
            if (this_._internal_real_exchange() != 0) {
              total_size += 2 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_real_exchange());
            }
            // bool api_trade_available_flag = 30;
            if (this_._internal_api_trade_available_flag() != 0) {
              total_size += 3;
            }
            // bool for_iis_flag = 41;
            if (this_._internal_for_iis_flag() != 0) {
              total_size += 3;
            }
            // bool for_qual_investor_flag = 42;
            if (this_._internal_for_qual_investor_flag() != 0) {
              total_size += 3;
            }
            // bool weekend_flag = 43;
            if (this_._internal_weekend_flag() != 0) {
              total_size += 3;
            }
            // bool blocked_tca_flag = 44;
            if (this_._internal_blocked_tca_flag() != 0) {
              total_size += 3;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Future::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Future*>(&to_msg);
  auto& from = static_cast<const Future&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.Future)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_ticker().empty()) {
    _this->_internal_set_ticker(from._internal_ticker());
  }
  if (!from._internal_class_code().empty()) {
    _this->_internal_set_class_code(from._internal_class_code());
  }
  if (!from._internal_currency().empty()) {
    _this->_internal_set_currency(from._internal_currency());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_exchange().empty()) {
    _this->_internal_set_exchange(from._internal_exchange());
  }
  if (!from._internal_futures_type().empty()) {
    _this->_internal_set_futures_type(from._internal_futures_type());
  }
  if (!from._internal_asset_type().empty()) {
    _this->_internal_set_asset_type(from._internal_asset_type());
  }
  if (!from._internal_basic_asset().empty()) {
    _this->_internal_set_basic_asset(from._internal_basic_asset());
  }
  if (!from._internal_country_of_risk().empty()) {
    _this->_internal_set_country_of_risk(from._internal_country_of_risk());
  }
  if (!from._internal_country_of_risk_name().empty()) {
    _this->_internal_set_country_of_risk_name(from._internal_country_of_risk_name());
  }
  if (!from._internal_sector().empty()) {
    _this->_internal_set_sector(from._internal_sector());
  }
  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (!from._internal_position_uid().empty()) {
    _this->_internal_set_position_uid(from._internal_position_uid());
  }
  if (!from._internal_basic_asset_position_uid().empty()) {
    _this->_internal_set_basic_asset_position_uid(from._internal_basic_asset_position_uid());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.klong_ != nullptr);
      if (_this->_impl_.klong_ == nullptr) {
        _this->_impl_.klong_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.klong_);
      } else {
        _this->_impl_.klong_->MergeFrom(*from._impl_.klong_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.kshort_ != nullptr);
      if (_this->_impl_.kshort_ == nullptr) {
        _this->_impl_.kshort_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.kshort_);
      } else {
        _this->_impl_.kshort_->MergeFrom(*from._impl_.kshort_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.dlong_ != nullptr);
      if (_this->_impl_.dlong_ == nullptr) {
        _this->_impl_.dlong_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.dlong_);
      } else {
        _this->_impl_.dlong_->MergeFrom(*from._impl_.dlong_);
      }
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(from._impl_.dshort_ != nullptr);
      if (_this->_impl_.dshort_ == nullptr) {
        _this->_impl_.dshort_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.dshort_);
      } else {
        _this->_impl_.dshort_->MergeFrom(*from._impl_.dshort_);
      }
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(from._impl_.dlong_min_ != nullptr);
      if (_this->_impl_.dlong_min_ == nullptr) {
        _this->_impl_.dlong_min_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.dlong_min_);
      } else {
        _this->_impl_.dlong_min_->MergeFrom(*from._impl_.dlong_min_);
      }
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(from._impl_.dshort_min_ != nullptr);
      if (_this->_impl_.dshort_min_ == nullptr) {
        _this->_impl_.dshort_min_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.dshort_min_);
      } else {
        _this->_impl_.dshort_min_->MergeFrom(*from._impl_.dshort_min_);
      }
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(from._impl_.first_trade_date_ != nullptr);
      if (_this->_impl_.first_trade_date_ == nullptr) {
        _this->_impl_.first_trade_date_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.first_trade_date_);
      } else {
        _this->_impl_.first_trade_date_->MergeFrom(*from._impl_.first_trade_date_);
      }
    }
    if (cached_has_bits & 0x00000080u) {
      ABSL_DCHECK(from._impl_.last_trade_date_ != nullptr);
      if (_this->_impl_.last_trade_date_ == nullptr) {
        _this->_impl_.last_trade_date_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.last_trade_date_);
      } else {
        _this->_impl_.last_trade_date_->MergeFrom(*from._impl_.last_trade_date_);
      }
    }
  }
  if (cached_has_bits & 0x0000ff00u) {
    if (cached_has_bits & 0x00000100u) {
      ABSL_DCHECK(from._impl_.basic_asset_size_ != nullptr);
      if (_this->_impl_.basic_asset_size_ == nullptr) {
        _this->_impl_.basic_asset_size_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.basic_asset_size_);
      } else {
        _this->_impl_.basic_asset_size_->MergeFrom(*from._impl_.basic_asset_size_);
      }
    }
    if (cached_has_bits & 0x00000200u) {
      ABSL_DCHECK(from._impl_.expiration_date_ != nullptr);
      if (_this->_impl_.expiration_date_ == nullptr) {
        _this->_impl_.expiration_date_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.expiration_date_);
      } else {
        _this->_impl_.expiration_date_->MergeFrom(*from._impl_.expiration_date_);
      }
    }
    if (cached_has_bits & 0x00000400u) {
      ABSL_DCHECK(from._impl_.min_price_increment_ != nullptr);
      if (_this->_impl_.min_price_increment_ == nullptr) {
        _this->_impl_.min_price_increment_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.min_price_increment_);
      } else {
        _this->_impl_.min_price_increment_->MergeFrom(*from._impl_.min_price_increment_);
      }
    }
    if (cached_has_bits & 0x00000800u) {
      ABSL_DCHECK(from._impl_.first_1min_candle_date_ != nullptr);
      if (_this->_impl_.first_1min_candle_date_ == nullptr) {
        _this->_impl_.first_1min_candle_date_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.first_1min_candle_date_);
      } else {
        _this->_impl_.first_1min_candle_date_->MergeFrom(*from._impl_.first_1min_candle_date_);
      }
    }
    if (cached_has_bits & 0x00001000u) {
      ABSL_DCHECK(from._impl_.first_1day_candle_date_ != nullptr);
      if (_this->_impl_.first_1day_candle_date_ == nullptr) {
        _this->_impl_.first_1day_candle_date_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.first_1day_candle_date_);
      } else {
        _this->_impl_.first_1day_candle_date_->MergeFrom(*from._impl_.first_1day_candle_date_);
      }
    }
    if (cached_has_bits & 0x00002000u) {
      ABSL_DCHECK(from._impl_.initial_margin_on_buy_ != nullptr);
      if (_this->_impl_.initial_margin_on_buy_ == nullptr) {
        _this->_impl_.initial_margin_on_buy_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(arena, *from._impl_.initial_margin_on_buy_);
      } else {
        _this->_impl_.initial_margin_on_buy_->MergeFrom(*from._impl_.initial_margin_on_buy_);
      }
    }
    if (cached_has_bits & 0x00004000u) {
      ABSL_DCHECK(from._impl_.initial_margin_on_sell_ != nullptr);
      if (_this->_impl_.initial_margin_on_sell_ == nullptr) {
        _this->_impl_.initial_margin_on_sell_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(arena, *from._impl_.initial_margin_on_sell_);
      } else {
        _this->_impl_.initial_margin_on_sell_->MergeFrom(*from._impl_.initial_margin_on_sell_);
      }
    }
    if (cached_has_bits & 0x00008000u) {
      ABSL_DCHECK(from._impl_.min_price_increment_amount_ != nullptr);
      if (_this->_impl_.min_price_increment_amount_ == nullptr) {
        _this->_impl_.min_price_increment_amount_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.min_price_increment_amount_);
      } else {
        _this->_impl_.min_price_increment_amount_->MergeFrom(*from._impl_.min_price_increment_amount_);
      }
    }
  }
  if (cached_has_bits & 0x00070000u) {
    if (cached_has_bits & 0x00010000u) {
      ABSL_DCHECK(from._impl_.brand_ != nullptr);
      if (_this->_impl_.brand_ == nullptr) {
        _this->_impl_.brand_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::BrandData>(arena, *from._impl_.brand_);
      } else {
        _this->_impl_.brand_->MergeFrom(*from._impl_.brand_);
      }
    }
    if (cached_has_bits & 0x00020000u) {
      ABSL_DCHECK(from._impl_.dlong_client_ != nullptr);
      if (_this->_impl_.dlong_client_ == nullptr) {
        _this->_impl_.dlong_client_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.dlong_client_);
      } else {
        _this->_impl_.dlong_client_->MergeFrom(*from._impl_.dlong_client_);
      }
    }
    if (cached_has_bits & 0x00040000u) {
      ABSL_DCHECK(from._impl_.dshort_client_ != nullptr);
      if (_this->_impl_.dshort_client_ == nullptr) {
        _this->_impl_.dshort_client_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.dshort_client_);
      } else {
        _this->_impl_.dshort_client_->MergeFrom(*from._impl_.dshort_client_);
      }
    }
  }
  if (from._internal_lot() != 0) {
    _this->_impl_.lot_ = from._impl_.lot_;
  }
  if (from._internal_short_enabled_flag() != 0) {
    _this->_impl_.short_enabled_flag_ = from._impl_.short_enabled_flag_;
  }
  if (from._internal_otc_flag() != 0) {
    _this->_impl_.otc_flag_ = from._impl_.otc_flag_;
  }
  if (from._internal_buy_available_flag() != 0) {
    _this->_impl_.buy_available_flag_ = from._impl_.buy_available_flag_;
  }
  if (from._internal_sell_available_flag() != 0) {
    _this->_impl_.sell_available_flag_ = from._impl_.sell_available_flag_;
  }
  if (from._internal_trading_status() != 0) {
    _this->_impl_.trading_status_ = from._impl_.trading_status_;
  }
  if (from._internal_real_exchange() != 0) {
    _this->_impl_.real_exchange_ = from._impl_.real_exchange_;
  }
  if (from._internal_api_trade_available_flag() != 0) {
    _this->_impl_.api_trade_available_flag_ = from._impl_.api_trade_available_flag_;
  }
  if (from._internal_for_iis_flag() != 0) {
    _this->_impl_.for_iis_flag_ = from._impl_.for_iis_flag_;
  }
  if (from._internal_for_qual_investor_flag() != 0) {
    _this->_impl_.for_qual_investor_flag_ = from._impl_.for_qual_investor_flag_;
  }
  if (from._internal_weekend_flag() != 0) {
    _this->_impl_.weekend_flag_ = from._impl_.weekend_flag_;
  }
  if (from._internal_blocked_tca_flag() != 0) {
    _this->_impl_.blocked_tca_flag_ = from._impl_.blocked_tca_flag_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Future::CopyFrom(const Future& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.Future)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Future::InternalSwap(Future* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.figi_, &other->_impl_.figi_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ticker_, &other->_impl_.ticker_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.class_code_, &other->_impl_.class_code_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.currency_, &other->_impl_.currency_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.exchange_, &other->_impl_.exchange_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.futures_type_, &other->_impl_.futures_type_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.asset_type_, &other->_impl_.asset_type_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.basic_asset_, &other->_impl_.basic_asset_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.country_of_risk_, &other->_impl_.country_of_risk_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.country_of_risk_name_, &other->_impl_.country_of_risk_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sector_, &other->_impl_.sector_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.uid_, &other->_impl_.uid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.position_uid_, &other->_impl_.position_uid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.basic_asset_position_uid_, &other->_impl_.basic_asset_position_uid_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Future, _impl_.blocked_tca_flag_)
      + sizeof(Future::_impl_.blocked_tca_flag_)
      - PROTOBUF_FIELD_OFFSET(Future, _impl_.klong_)>(
          reinterpret_cast<char*>(&_impl_.klong_),
          reinterpret_cast<char*>(&other->_impl_.klong_));
}

::google::protobuf::Metadata Future::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Share::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Share>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Share, _impl_._has_bits_);
};

void Share::clear_klong() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.klong_ != nullptr) _impl_.klong_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Share::clear_kshort() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.kshort_ != nullptr) _impl_.kshort_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void Share::clear_dlong() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.dlong_ != nullptr) _impl_.dlong_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void Share::clear_dshort() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.dshort_ != nullptr) _impl_.dshort_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void Share::clear_dlong_min() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.dlong_min_ != nullptr) _impl_.dlong_min_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void Share::clear_dshort_min() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.dshort_min_ != nullptr) _impl_.dshort_min_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void Share::clear_ipo_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.ipo_date_ != nullptr) _impl_.ipo_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void Share::clear_nominal() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.nominal_ != nullptr) _impl_.nominal_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void Share::clear_min_price_increment() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.min_price_increment_ != nullptr) _impl_.min_price_increment_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void Share::clear_first_1min_candle_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.first_1min_candle_date_ != nullptr) _impl_.first_1min_candle_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void Share::clear_first_1day_candle_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.first_1day_candle_date_ != nullptr) _impl_.first_1day_candle_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
void Share::clear_brand() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.brand_ != nullptr) _impl_.brand_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
void Share::clear_dlong_client() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.dlong_client_ != nullptr) _impl_.dlong_client_->Clear();
  _impl_._has_bits_[0] &= ~0x00001000u;
}
void Share::clear_dshort_client() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.dshort_client_ != nullptr) _impl_.dshort_client_->Clear();
  _impl_._has_bits_[0] &= ~0x00002000u;
}
Share::Share(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.Share)
}
inline PROTOBUF_NDEBUG_INLINE Share::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::Share& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        figi_(arena, from.figi_),
        ticker_(arena, from.ticker_),
        class_code_(arena, from.class_code_),
        isin_(arena, from.isin_),
        currency_(arena, from.currency_),
        name_(arena, from.name_),
        exchange_(arena, from.exchange_),
        country_of_risk_(arena, from.country_of_risk_),
        country_of_risk_name_(arena, from.country_of_risk_name_),
        sector_(arena, from.sector_),
        uid_(arena, from.uid_),
        position_uid_(arena, from.position_uid_),
        asset_uid_(arena, from.asset_uid_) {}

Share::Share(
    ::google::protobuf::Arena* arena,
    const Share& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Share* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.klong_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.klong_)
                        : nullptr;
  _impl_.kshort_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.kshort_)
                        : nullptr;
  _impl_.dlong_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.dlong_)
                        : nullptr;
  _impl_.dshort_ = (cached_has_bits & 0x00000008u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.dshort_)
                        : nullptr;
  _impl_.dlong_min_ = (cached_has_bits & 0x00000010u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.dlong_min_)
                        : nullptr;
  _impl_.dshort_min_ = (cached_has_bits & 0x00000020u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.dshort_min_)
                        : nullptr;
  _impl_.ipo_date_ = (cached_has_bits & 0x00000040u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.ipo_date_)
                        : nullptr;
  _impl_.nominal_ = (cached_has_bits & 0x00000080u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(
                              arena, *from._impl_.nominal_)
                        : nullptr;
  _impl_.min_price_increment_ = (cached_has_bits & 0x00000100u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.min_price_increment_)
                        : nullptr;
  _impl_.first_1min_candle_date_ = (cached_has_bits & 0x00000200u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.first_1min_candle_date_)
                        : nullptr;
  _impl_.first_1day_candle_date_ = (cached_has_bits & 0x00000400u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.first_1day_candle_date_)
                        : nullptr;
  _impl_.brand_ = (cached_has_bits & 0x00000800u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::BrandData>(
                              arena, *from._impl_.brand_)
                        : nullptr;
  _impl_.dlong_client_ = (cached_has_bits & 0x00001000u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.dlong_client_)
                        : nullptr;
  _impl_.dshort_client_ = (cached_has_bits & 0x00002000u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.dshort_client_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, issue_size_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, issue_size_),
           offsetof(Impl_, liquidity_flag_) -
               offsetof(Impl_, issue_size_) +
               sizeof(Impl_::liquidity_flag_));

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.Share)
}
inline PROTOBUF_NDEBUG_INLINE Share::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        figi_(arena),
        ticker_(arena),
        class_code_(arena),
        isin_(arena),
        currency_(arena),
        name_(arena),
        exchange_(arena),
        country_of_risk_(arena),
        country_of_risk_name_(arena),
        sector_(arena),
        uid_(arena),
        position_uid_(arena),
        asset_uid_(arena) {}

inline void Share::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, klong_),
           0,
           offsetof(Impl_, liquidity_flag_) -
               offsetof(Impl_, klong_) +
               sizeof(Impl_::liquidity_flag_));
}
Share::~Share() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.Share)
  SharedDtor(*this);
}
inline void Share::SharedDtor(MessageLite& self) {
  Share& this_ = static_cast<Share&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.figi_.Destroy();
  this_._impl_.ticker_.Destroy();
  this_._impl_.class_code_.Destroy();
  this_._impl_.isin_.Destroy();
  this_._impl_.currency_.Destroy();
  this_._impl_.name_.Destroy();
  this_._impl_.exchange_.Destroy();
  this_._impl_.country_of_risk_.Destroy();
  this_._impl_.country_of_risk_name_.Destroy();
  this_._impl_.sector_.Destroy();
  this_._impl_.uid_.Destroy();
  this_._impl_.position_uid_.Destroy();
  this_._impl_.asset_uid_.Destroy();
  delete this_._impl_.klong_;
  delete this_._impl_.kshort_;
  delete this_._impl_.dlong_;
  delete this_._impl_.dshort_;
  delete this_._impl_.dlong_min_;
  delete this_._impl_.dshort_min_;
  delete this_._impl_.ipo_date_;
  delete this_._impl_.nominal_;
  delete this_._impl_.min_price_increment_;
  delete this_._impl_.first_1min_candle_date_;
  delete this_._impl_.first_1day_candle_date_;
  delete this_._impl_.brand_;
  delete this_._impl_.dlong_client_;
  delete this_._impl_.dshort_client_;
  this_._impl_.~Impl_();
}

inline void* Share::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Share(arena);
}
constexpr auto Share::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Share),
                                            alignof(Share));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Share::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Share_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Share::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Share>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Share::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Share>(), &Share::ByteSizeLong,
            &Share::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Share, _impl_._cached_size_),
        false,
    },
    &Share::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Share::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 45, 14, 201, 13> Share::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Share, _impl_._has_bits_),
    0, // no _extensions_
    91, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    8396800,  // skipmap
    offsetof(decltype(_table_), field_entries),
    45,  // num_field_entries
    14,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Share>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string figi = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Share, _impl_.figi_)}},
    // string ticker = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Share, _impl_.ticker_)}},
    // string class_code = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Share, _impl_.class_code_)}},
    // string isin = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(Share, _impl_.isin_)}},
    // int32 lot = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Share, _impl_.lot_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(Share, _impl_.lot_)}},
    // string currency = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(Share, _impl_.currency_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation klong = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 0, 0, PROTOBUF_FIELD_OFFSET(Share, _impl_.klong_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation kshort = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 1, 1, PROTOBUF_FIELD_OFFSET(Share, _impl_.kshort_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation dlong = 9;
    {::_pbi::TcParser::FastMtS1,
     {74, 2, 2, PROTOBUF_FIELD_OFFSET(Share, _impl_.dlong_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation dshort = 10;
    {::_pbi::TcParser::FastMtS1,
     {82, 3, 3, PROTOBUF_FIELD_OFFSET(Share, _impl_.dshort_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation dlong_min = 11;
    {::_pbi::TcParser::FastMtS1,
     {90, 4, 4, PROTOBUF_FIELD_OFFSET(Share, _impl_.dlong_min_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation dshort_min = 12;
    {::_pbi::TcParser::FastMtS1,
     {98, 5, 5, PROTOBUF_FIELD_OFFSET(Share, _impl_.dshort_min_)}},
    // bool short_enabled_flag = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Share, _impl_.short_enabled_flag_), 63>(),
     {104, 63, 0, PROTOBUF_FIELD_OFFSET(Share, _impl_.short_enabled_flag_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // string name = 15;
    {::_pbi::TcParser::FastUS1,
     {122, 63, 0, PROTOBUF_FIELD_OFFSET(Share, _impl_.name_)}},
    // string exchange = 16;
    {::_pbi::TcParser::FastUS2,
     {386, 63, 0, PROTOBUF_FIELD_OFFSET(Share, _impl_.exchange_)}},
    // .google.protobuf.Timestamp ipo_date = 17;
    {::_pbi::TcParser::FastMtS2,
     {394, 6, 6, PROTOBUF_FIELD_OFFSET(Share, _impl_.ipo_date_)}},
    // int64 issue_size = 18;
    {::_pbi::TcParser::FastV64S2,
     {400, 63, 0, PROTOBUF_FIELD_OFFSET(Share, _impl_.issue_size_)}},
    // string country_of_risk = 19;
    {::_pbi::TcParser::FastUS2,
     {410, 63, 0, PROTOBUF_FIELD_OFFSET(Share, _impl_.country_of_risk_)}},
    // string country_of_risk_name = 20;
    {::_pbi::TcParser::FastUS2,
     {418, 63, 0, PROTOBUF_FIELD_OFFSET(Share, _impl_.country_of_risk_name_)}},
    // string sector = 21;
    {::_pbi::TcParser::FastUS2,
     {426, 63, 0, PROTOBUF_FIELD_OFFSET(Share, _impl_.sector_)}},
    // int64 issue_size_plan = 22;
    {::_pbi::TcParser::FastV64S2,
     {432, 63, 0, PROTOBUF_FIELD_OFFSET(Share, _impl_.issue_size_plan_)}},
    // .tinkoff.public.invest.api.contract.v1.MoneyValue nominal = 23;
    {::_pbi::TcParser::FastMtS2,
     {442, 7, 7, PROTOBUF_FIELD_OFFSET(Share, _impl_.nominal_)}},
    // .google.protobuf.Timestamp first_1min_candle_date = 56;
    {::_pbi::TcParser::FastMtS2,
     {962, 9, 9, PROTOBUF_FIELD_OFFSET(Share, _impl_.first_1min_candle_date_)}},
    // .tinkoff.public.invest.api.contract.v1.SecurityTradingStatus trading_status = 25;
    {::_pbi::TcParser::FastV32S2,
     {456, 63, 0, PROTOBUF_FIELD_OFFSET(Share, _impl_.trading_status_)}},
    // bool otc_flag = 26;
    {::_pbi::TcParser::FastV8S2,
     {464, 63, 0, PROTOBUF_FIELD_OFFSET(Share, _impl_.otc_flag_)}},
    // bool buy_available_flag = 27;
    {::_pbi::TcParser::FastV8S2,
     {472, 63, 0, PROTOBUF_FIELD_OFFSET(Share, _impl_.buy_available_flag_)}},
    // bool sell_available_flag = 28;
    {::_pbi::TcParser::FastV8S2,
     {480, 63, 0, PROTOBUF_FIELD_OFFSET(Share, _impl_.sell_available_flag_)}},
    // bool div_yield_flag = 29;
    {::_pbi::TcParser::FastV8S2,
     {488, 63, 0, PROTOBUF_FIELD_OFFSET(Share, _impl_.div_yield_flag_)}},
    // .tinkoff.public.invest.api.contract.v1.ShareType share_type = 30;
    {::_pbi::TcParser::FastV32S2,
     {496, 63, 0, PROTOBUF_FIELD_OFFSET(Share, _impl_.share_type_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation min_price_increment = 31;
    {::_pbi::TcParser::FastMtS2,
     {506, 8, 8, PROTOBUF_FIELD_OFFSET(Share, _impl_.min_price_increment_)}},
  }}, {{
    33, 0, 4,
    8160, 30, 63100, 38, 65535, 43, 63999, 43,
    65535, 65535
  }}, {{
    // string figi = 1;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.figi_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string ticker = 2;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.ticker_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string class_code = 3;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.class_code_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string isin = 4;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.isin_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 lot = 5;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.lot_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string currency = 6;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.currency_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public.invest.api.contract.v1.Quotation klong = 7;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.klong_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation kshort = 8;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.kshort_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation dlong = 9;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.dlong_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation dshort = 10;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.dshort_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation dlong_min = 11;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.dlong_min_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation dshort_min = 12;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.dshort_min_), _Internal::kHasBitsOffset + 5, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool short_enabled_flag = 13;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.short_enabled_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string name = 15;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string exchange = 16;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.exchange_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Timestamp ipo_date = 17;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.ipo_date_), _Internal::kHasBitsOffset + 6, 6,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int64 issue_size = 18;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.issue_size_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // string country_of_risk = 19;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.country_of_risk_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string country_of_risk_name = 20;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.country_of_risk_name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string sector = 21;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.sector_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int64 issue_size_plan = 22;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.issue_size_plan_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt64)},
    // .tinkoff.public.invest.api.contract.v1.MoneyValue nominal = 23;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.nominal_), _Internal::kHasBitsOffset + 7, 7,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.SecurityTradingStatus trading_status = 25;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.trading_status_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // bool otc_flag = 26;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.otc_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool buy_available_flag = 27;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.buy_available_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool sell_available_flag = 28;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.sell_available_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool div_yield_flag = 29;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.div_yield_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .tinkoff.public.invest.api.contract.v1.ShareType share_type = 30;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.share_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .tinkoff.public.invest.api.contract.v1.Quotation min_price_increment = 31;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.min_price_increment_), _Internal::kHasBitsOffset + 8, 8,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool api_trade_available_flag = 32;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.api_trade_available_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string uid = 33;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.uid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public.invest.api.contract.v1.RealExchange real_exchange = 34;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.real_exchange_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string position_uid = 35;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.position_uid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string asset_uid = 36;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.asset_uid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public.invest.api.contract.v1.InstrumentExchangeType instrument_exchange = 37;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.instrument_exchange_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // bool for_iis_flag = 46;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.for_iis_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool for_qual_investor_flag = 47;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.for_qual_investor_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool weekend_flag = 48;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.weekend_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool blocked_tca_flag = 49;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.blocked_tca_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool liquidity_flag = 50;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.liquidity_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .google.protobuf.Timestamp first_1min_candle_date = 56;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.first_1min_candle_date_), _Internal::kHasBitsOffset + 9, 9,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp first_1day_candle_date = 57;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.first_1day_candle_date_), _Internal::kHasBitsOffset + 10, 10,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.BrandData brand = 60;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.brand_), _Internal::kHasBitsOffset + 11, 11,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation dlong_client = 90;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.dlong_client_), _Internal::kHasBitsOffset + 12, 12,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation dshort_client = 91;
    {PROTOBUF_FIELD_OFFSET(Share, _impl_.dshort_client_), _Internal::kHasBitsOffset + 13, 13,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::MoneyValue>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::BrandData>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
  }}, {{
    "\53\4\6\12\4\0\10\0\0\0\0\0\0\0\4\10\0\0\17\24\6\0\0\0\0\0\0\0\0\0\0\3\0\14\11\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "tinkoff.public.invest.api.contract.v1.Share"
    "figi"
    "ticker"
    "class_code"
    "isin"
    "currency"
    "name"
    "exchange"
    "country_of_risk"
    "country_of_risk_name"
    "sector"
    "uid"
    "position_uid"
    "asset_uid"
  }},
};

PROTOBUF_NOINLINE void Share::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.Share)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.figi_.ClearToEmpty();
  _impl_.ticker_.ClearToEmpty();
  _impl_.class_code_.ClearToEmpty();
  _impl_.isin_.ClearToEmpty();
  _impl_.currency_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.exchange_.ClearToEmpty();
  _impl_.country_of_risk_.ClearToEmpty();
  _impl_.country_of_risk_name_.ClearToEmpty();
  _impl_.sector_.ClearToEmpty();
  _impl_.uid_.ClearToEmpty();
  _impl_.position_uid_.ClearToEmpty();
  _impl_.asset_uid_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.klong_ != nullptr);
      _impl_.klong_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.kshort_ != nullptr);
      _impl_.kshort_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.dlong_ != nullptr);
      _impl_.dlong_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.dshort_ != nullptr);
      _impl_.dshort_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.dlong_min_ != nullptr);
      _impl_.dlong_min_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.dshort_min_ != nullptr);
      _impl_.dshort_min_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(_impl_.ipo_date_ != nullptr);
      _impl_.ipo_date_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      ABSL_DCHECK(_impl_.nominal_ != nullptr);
      _impl_.nominal_->Clear();
    }
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      ABSL_DCHECK(_impl_.min_price_increment_ != nullptr);
      _impl_.min_price_increment_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      ABSL_DCHECK(_impl_.first_1min_candle_date_ != nullptr);
      _impl_.first_1min_candle_date_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      ABSL_DCHECK(_impl_.first_1day_candle_date_ != nullptr);
      _impl_.first_1day_candle_date_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      ABSL_DCHECK(_impl_.brand_ != nullptr);
      _impl_.brand_->Clear();
    }
    if (cached_has_bits & 0x00001000u) {
      ABSL_DCHECK(_impl_.dlong_client_ != nullptr);
      _impl_.dlong_client_->Clear();
    }
    if (cached_has_bits & 0x00002000u) {
      ABSL_DCHECK(_impl_.dshort_client_ != nullptr);
      _impl_.dshort_client_->Clear();
    }
  }
  ::memset(&_impl_.issue_size_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.liquidity_flag_) -
      reinterpret_cast<char*>(&_impl_.issue_size_)) + sizeof(_impl_.liquidity_flag_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Share::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Share& this_ = static_cast<const Share&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Share::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Share& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.Share)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string figi = 1;
          if (!this_._internal_figi().empty()) {
            const std::string& _s = this_._internal_figi();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Share.figi");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string ticker = 2;
          if (!this_._internal_ticker().empty()) {
            const std::string& _s = this_._internal_ticker();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Share.ticker");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // string class_code = 3;
          if (!this_._internal_class_code().empty()) {
            const std::string& _s = this_._internal_class_code();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Share.class_code");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // string isin = 4;
          if (!this_._internal_isin().empty()) {
            const std::string& _s = this_._internal_isin();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Share.isin");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          // int32 lot = 5;
          if (this_._internal_lot() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<5>(
                    stream, this_._internal_lot(), target);
          }

          // string currency = 6;
          if (!this_._internal_currency().empty()) {
            const std::string& _s = this_._internal_currency();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Share.currency");
            target = stream->WriteStringMaybeAliased(6, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .tinkoff.public.invest.api.contract.v1.Quotation klong = 7;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                7, *this_._impl_.klong_, this_._impl_.klong_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation kshort = 8;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                8, *this_._impl_.kshort_, this_._impl_.kshort_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation dlong = 9;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                9, *this_._impl_.dlong_, this_._impl_.dlong_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation dshort = 10;
          if (cached_has_bits & 0x00000008u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                10, *this_._impl_.dshort_, this_._impl_.dshort_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation dlong_min = 11;
          if (cached_has_bits & 0x00000010u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                11, *this_._impl_.dlong_min_, this_._impl_.dlong_min_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation dshort_min = 12;
          if (cached_has_bits & 0x00000020u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                12, *this_._impl_.dshort_min_, this_._impl_.dshort_min_->GetCachedSize(), target,
                stream);
          }

          // bool short_enabled_flag = 13;
          if (this_._internal_short_enabled_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                13, this_._internal_short_enabled_flag(), target);
          }

          // string name = 15;
          if (!this_._internal_name().empty()) {
            const std::string& _s = this_._internal_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Share.name");
            target = stream->WriteStringMaybeAliased(15, _s, target);
          }

          // string exchange = 16;
          if (!this_._internal_exchange().empty()) {
            const std::string& _s = this_._internal_exchange();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Share.exchange");
            target = stream->WriteStringMaybeAliased(16, _s, target);
          }

          // .google.protobuf.Timestamp ipo_date = 17;
          if (cached_has_bits & 0x00000040u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                17, *this_._impl_.ipo_date_, this_._impl_.ipo_date_->GetCachedSize(), target,
                stream);
          }

          // int64 issue_size = 18;
          if (this_._internal_issue_size() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(
                18, this_._internal_issue_size(), target);
          }

          // string country_of_risk = 19;
          if (!this_._internal_country_of_risk().empty()) {
            const std::string& _s = this_._internal_country_of_risk();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Share.country_of_risk");
            target = stream->WriteStringMaybeAliased(19, _s, target);
          }

          // string country_of_risk_name = 20;
          if (!this_._internal_country_of_risk_name().empty()) {
            const std::string& _s = this_._internal_country_of_risk_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Share.country_of_risk_name");
            target = stream->WriteStringMaybeAliased(20, _s, target);
          }

          // string sector = 21;
          if (!this_._internal_sector().empty()) {
            const std::string& _s = this_._internal_sector();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Share.sector");
            target = stream->WriteStringMaybeAliased(21, _s, target);
          }

          // int64 issue_size_plan = 22;
          if (this_._internal_issue_size_plan() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt64ToArray(
                22, this_._internal_issue_size_plan(), target);
          }

          // .tinkoff.public.invest.api.contract.v1.MoneyValue nominal = 23;
          if (cached_has_bits & 0x00000080u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                23, *this_._impl_.nominal_, this_._impl_.nominal_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.SecurityTradingStatus trading_status = 25;
          if (this_._internal_trading_status() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                25, this_._internal_trading_status(), target);
          }

          // bool otc_flag = 26;
          if (this_._internal_otc_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                26, this_._internal_otc_flag(), target);
          }

          // bool buy_available_flag = 27;
          if (this_._internal_buy_available_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                27, this_._internal_buy_available_flag(), target);
          }

          // bool sell_available_flag = 28;
          if (this_._internal_sell_available_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                28, this_._internal_sell_available_flag(), target);
          }

          // bool div_yield_flag = 29;
          if (this_._internal_div_yield_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                29, this_._internal_div_yield_flag(), target);
          }

          // .tinkoff.public.invest.api.contract.v1.ShareType share_type = 30;
          if (this_._internal_share_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                30, this_._internal_share_type(), target);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation min_price_increment = 31;
          if (cached_has_bits & 0x00000100u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                31, *this_._impl_.min_price_increment_, this_._impl_.min_price_increment_->GetCachedSize(), target,
                stream);
          }

          // bool api_trade_available_flag = 32;
          if (this_._internal_api_trade_available_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                32, this_._internal_api_trade_available_flag(), target);
          }

          // string uid = 33;
          if (!this_._internal_uid().empty()) {
            const std::string& _s = this_._internal_uid();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Share.uid");
            target = stream->WriteStringMaybeAliased(33, _s, target);
          }

          // .tinkoff.public.invest.api.contract.v1.RealExchange real_exchange = 34;
          if (this_._internal_real_exchange() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                34, this_._internal_real_exchange(), target);
          }

          // string position_uid = 35;
          if (!this_._internal_position_uid().empty()) {
            const std::string& _s = this_._internal_position_uid();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Share.position_uid");
            target = stream->WriteStringMaybeAliased(35, _s, target);
          }

          // string asset_uid = 36;
          if (!this_._internal_asset_uid().empty()) {
            const std::string& _s = this_._internal_asset_uid();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Share.asset_uid");
            target = stream->WriteStringMaybeAliased(36, _s, target);
          }

          // .tinkoff.public.invest.api.contract.v1.InstrumentExchangeType instrument_exchange = 37;
          if (this_._internal_instrument_exchange() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                37, this_._internal_instrument_exchange(), target);
          }

          // bool for_iis_flag = 46;
          if (this_._internal_for_iis_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                46, this_._internal_for_iis_flag(), target);
          }

          // bool for_qual_investor_flag = 47;
          if (this_._internal_for_qual_investor_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                47, this_._internal_for_qual_investor_flag(), target);
          }

          // bool weekend_flag = 48;
          if (this_._internal_weekend_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                48, this_._internal_weekend_flag(), target);
          }

          // bool blocked_tca_flag = 49;
          if (this_._internal_blocked_tca_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                49, this_._internal_blocked_tca_flag(), target);
          }

          // bool liquidity_flag = 50;
          if (this_._internal_liquidity_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                50, this_._internal_liquidity_flag(), target);
          }

          // .google.protobuf.Timestamp first_1min_candle_date = 56;
          if (cached_has_bits & 0x00000200u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                56, *this_._impl_.first_1min_candle_date_, this_._impl_.first_1min_candle_date_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Timestamp first_1day_candle_date = 57;
          if (cached_has_bits & 0x00000400u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                57, *this_._impl_.first_1day_candle_date_, this_._impl_.first_1day_candle_date_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.BrandData brand = 60;
          if (cached_has_bits & 0x00000800u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                60, *this_._impl_.brand_, this_._impl_.brand_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation dlong_client = 90;
          if (cached_has_bits & 0x00001000u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                90, *this_._impl_.dlong_client_, this_._impl_.dlong_client_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation dshort_client = 91;
          if (cached_has_bits & 0x00002000u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                91, *this_._impl_.dshort_client_, this_._impl_.dshort_client_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.Share)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Share::ByteSizeLong(const MessageLite& base) {
          const Share& this_ = static_cast<const Share&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Share::ByteSizeLong() const {
          const Share& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.Share)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string figi = 1;
            if (!this_._internal_figi().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_figi());
            }
            // string ticker = 2;
            if (!this_._internal_ticker().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_ticker());
            }
            // string class_code = 3;
            if (!this_._internal_class_code().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_class_code());
            }
            // string isin = 4;
            if (!this_._internal_isin().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_isin());
            }
            // string currency = 6;
            if (!this_._internal_currency().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_currency());
            }
            // string name = 15;
            if (!this_._internal_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_name());
            }
            // string exchange = 16;
            if (!this_._internal_exchange().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_exchange());
            }
            // string country_of_risk = 19;
            if (!this_._internal_country_of_risk().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_country_of_risk());
            }
            // string country_of_risk_name = 20;
            if (!this_._internal_country_of_risk_name().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_country_of_risk_name());
            }
            // string sector = 21;
            if (!this_._internal_sector().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_sector());
            }
            // string uid = 33;
            if (!this_._internal_uid().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_uid());
            }
            // string position_uid = 35;
            if (!this_._internal_position_uid().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_position_uid());
            }
            // string asset_uid = 36;
            if (!this_._internal_asset_uid().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_asset_uid());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x000000ffu) {
            // .tinkoff.public.invest.api.contract.v1.Quotation klong = 7;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.klong_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation kshort = 8;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.kshort_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation dlong = 9;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.dlong_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation dshort = 10;
            if (cached_has_bits & 0x00000008u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.dshort_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation dlong_min = 11;
            if (cached_has_bits & 0x00000010u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.dlong_min_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation dshort_min = 12;
            if (cached_has_bits & 0x00000020u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.dshort_min_);
            }
            // .google.protobuf.Timestamp ipo_date = 17;
            if (cached_has_bits & 0x00000040u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.ipo_date_);
            }
            // .tinkoff.public.invest.api.contract.v1.MoneyValue nominal = 23;
            if (cached_has_bits & 0x00000080u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.nominal_);
            }
          }
          if (cached_has_bits & 0x00003f00u) {
            // .tinkoff.public.invest.api.contract.v1.Quotation min_price_increment = 31;
            if (cached_has_bits & 0x00000100u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.min_price_increment_);
            }
            // .google.protobuf.Timestamp first_1min_candle_date = 56;
            if (cached_has_bits & 0x00000200u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.first_1min_candle_date_);
            }
            // .google.protobuf.Timestamp first_1day_candle_date = 57;
            if (cached_has_bits & 0x00000400u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.first_1day_candle_date_);
            }
            // .tinkoff.public.invest.api.contract.v1.BrandData brand = 60;
            if (cached_has_bits & 0x00000800u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.brand_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation dlong_client = 90;
            if (cached_has_bits & 0x00001000u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.dlong_client_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation dshort_client = 91;
            if (cached_has_bits & 0x00002000u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.dshort_client_);
            }
          }
           {
            // int64 issue_size = 18;
            if (this_._internal_issue_size() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                              this_._internal_issue_size());
            }
            // int32 lot = 5;
            if (this_._internal_lot() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_lot());
            }
            // bool short_enabled_flag = 13;
            if (this_._internal_short_enabled_flag() != 0) {
              total_size += 2;
            }
            // bool otc_flag = 26;
            if (this_._internal_otc_flag() != 0) {
              total_size += 3;
            }
            // bool buy_available_flag = 27;
            if (this_._internal_buy_available_flag() != 0) {
              total_size += 3;
            }
            // bool sell_available_flag = 28;
            if (this_._internal_sell_available_flag() != 0) {
              total_size += 3;
            }
            // int64 issue_size_plan = 22;
            if (this_._internal_issue_size_plan() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int64Size(
                                              this_._internal_issue_size_plan());
            }
            // .tinkoff.public.invest.api.contract.v1.SecurityTradingStatus trading_status = 25;
            if (this_._internal_trading_status() != 0) {
              total_size += 2 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_trading_status());
            }
            // .tinkoff.public.invest.api.contract.v1.ShareType share_type = 30;
            if (this_._internal_share_type() != 0) {
              total_size += 2 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_share_type());
            }
            // .tinkoff.public.invest.api.contract.v1.RealExchange real_exchange = 34;
            if (this_._internal_real_exchange() != 0) {
              total_size += 2 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_real_exchange());
            }
            // .tinkoff.public.invest.api.contract.v1.InstrumentExchangeType instrument_exchange = 37;
            if (this_._internal_instrument_exchange() != 0) {
              total_size += 2 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_instrument_exchange());
            }
            // bool div_yield_flag = 29;
            if (this_._internal_div_yield_flag() != 0) {
              total_size += 3;
            }
            // bool api_trade_available_flag = 32;
            if (this_._internal_api_trade_available_flag() != 0) {
              total_size += 3;
            }
            // bool for_iis_flag = 46;
            if (this_._internal_for_iis_flag() != 0) {
              total_size += 3;
            }
            // bool for_qual_investor_flag = 47;
            if (this_._internal_for_qual_investor_flag() != 0) {
              total_size += 3;
            }
            // bool weekend_flag = 48;
            if (this_._internal_weekend_flag() != 0) {
              total_size += 3;
            }
            // bool blocked_tca_flag = 49;
            if (this_._internal_blocked_tca_flag() != 0) {
              total_size += 3;
            }
            // bool liquidity_flag = 50;
            if (this_._internal_liquidity_flag() != 0) {
              total_size += 3;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Share::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Share*>(&to_msg);
  auto& from = static_cast<const Share&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.Share)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_ticker().empty()) {
    _this->_internal_set_ticker(from._internal_ticker());
  }
  if (!from._internal_class_code().empty()) {
    _this->_internal_set_class_code(from._internal_class_code());
  }
  if (!from._internal_isin().empty()) {
    _this->_internal_set_isin(from._internal_isin());
  }
  if (!from._internal_currency().empty()) {
    _this->_internal_set_currency(from._internal_currency());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_exchange().empty()) {
    _this->_internal_set_exchange(from._internal_exchange());
  }
  if (!from._internal_country_of_risk().empty()) {
    _this->_internal_set_country_of_risk(from._internal_country_of_risk());
  }
  if (!from._internal_country_of_risk_name().empty()) {
    _this->_internal_set_country_of_risk_name(from._internal_country_of_risk_name());
  }
  if (!from._internal_sector().empty()) {
    _this->_internal_set_sector(from._internal_sector());
  }
  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (!from._internal_position_uid().empty()) {
    _this->_internal_set_position_uid(from._internal_position_uid());
  }
  if (!from._internal_asset_uid().empty()) {
    _this->_internal_set_asset_uid(from._internal_asset_uid());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.klong_ != nullptr);
      if (_this->_impl_.klong_ == nullptr) {
        _this->_impl_.klong_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.klong_);
      } else {
        _this->_impl_.klong_->MergeFrom(*from._impl_.klong_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.kshort_ != nullptr);
      if (_this->_impl_.kshort_ == nullptr) {
        _this->_impl_.kshort_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.kshort_);
      } else {
        _this->_impl_.kshort_->MergeFrom(*from._impl_.kshort_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.dlong_ != nullptr);
      if (_this->_impl_.dlong_ == nullptr) {
        _this->_impl_.dlong_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.dlong_);
      } else {
        _this->_impl_.dlong_->MergeFrom(*from._impl_.dlong_);
      }
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(from._impl_.dshort_ != nullptr);
      if (_this->_impl_.dshort_ == nullptr) {
        _this->_impl_.dshort_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.dshort_);
      } else {
        _this->_impl_.dshort_->MergeFrom(*from._impl_.dshort_);
      }
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(from._impl_.dlong_min_ != nullptr);
      if (_this->_impl_.dlong_min_ == nullptr) {
        _this->_impl_.dlong_min_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.dlong_min_);
      } else {
        _this->_impl_.dlong_min_->MergeFrom(*from._impl_.dlong_min_);
      }
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(from._impl_.dshort_min_ != nullptr);
      if (_this->_impl_.dshort_min_ == nullptr) {
        _this->_impl_.dshort_min_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.dshort_min_);
      } else {
        _this->_impl_.dshort_min_->MergeFrom(*from._impl_.dshort_min_);
      }
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(from._impl_.ipo_date_ != nullptr);
      if (_this->_impl_.ipo_date_ == nullptr) {
        _this->_impl_.ipo_date_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.ipo_date_);
      } else {
        _this->_impl_.ipo_date_->MergeFrom(*from._impl_.ipo_date_);
      }
    }
    if (cached_has_bits & 0x00000080u) {
      ABSL_DCHECK(from._impl_.nominal_ != nullptr);
      if (_this->_impl_.nominal_ == nullptr) {
        _this->_impl_.nominal_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(arena, *from._impl_.nominal_);
      } else {
        _this->_impl_.nominal_->MergeFrom(*from._impl_.nominal_);
      }
    }
  }
  if (cached_has_bits & 0x00003f00u) {
    if (cached_has_bits & 0x00000100u) {
      ABSL_DCHECK(from._impl_.min_price_increment_ != nullptr);
      if (_this->_impl_.min_price_increment_ == nullptr) {
        _this->_impl_.min_price_increment_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.min_price_increment_);
      } else {
        _this->_impl_.min_price_increment_->MergeFrom(*from._impl_.min_price_increment_);
      }
    }
    if (cached_has_bits & 0x00000200u) {
      ABSL_DCHECK(from._impl_.first_1min_candle_date_ != nullptr);
      if (_this->_impl_.first_1min_candle_date_ == nullptr) {
        _this->_impl_.first_1min_candle_date_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.first_1min_candle_date_);
      } else {
        _this->_impl_.first_1min_candle_date_->MergeFrom(*from._impl_.first_1min_candle_date_);
      }
    }
    if (cached_has_bits & 0x00000400u) {
      ABSL_DCHECK(from._impl_.first_1day_candle_date_ != nullptr);
      if (_this->_impl_.first_1day_candle_date_ == nullptr) {
        _this->_impl_.first_1day_candle_date_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.first_1day_candle_date_);
      } else {
        _this->_impl_.first_1day_candle_date_->MergeFrom(*from._impl_.first_1day_candle_date_);
      }
    }
    if (cached_has_bits & 0x00000800u) {
      ABSL_DCHECK(from._impl_.brand_ != nullptr);
      if (_this->_impl_.brand_ == nullptr) {
        _this->_impl_.brand_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::BrandData>(arena, *from._impl_.brand_);
      } else {
        _this->_impl_.brand_->MergeFrom(*from._impl_.brand_);
      }
    }
    if (cached_has_bits & 0x00001000u) {
      ABSL_DCHECK(from._impl_.dlong_client_ != nullptr);
      if (_this->_impl_.dlong_client_ == nullptr) {
        _this->_impl_.dlong_client_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.dlong_client_);
      } else {
        _this->_impl_.dlong_client_->MergeFrom(*from._impl_.dlong_client_);
      }
    }
    if (cached_has_bits & 0x00002000u) {
      ABSL_DCHECK(from._impl_.dshort_client_ != nullptr);
      if (_this->_impl_.dshort_client_ == nullptr) {
        _this->_impl_.dshort_client_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.dshort_client_);
      } else {
        _this->_impl_.dshort_client_->MergeFrom(*from._impl_.dshort_client_);
      }
    }
  }
  if (from._internal_issue_size() != 0) {
    _this->_impl_.issue_size_ = from._impl_.issue_size_;
  }
  if (from._internal_lot() != 0) {
    _this->_impl_.lot_ = from._impl_.lot_;
  }
  if (from._internal_short_enabled_flag() != 0) {
    _this->_impl_.short_enabled_flag_ = from._impl_.short_enabled_flag_;
  }
  if (from._internal_otc_flag() != 0) {
    _this->_impl_.otc_flag_ = from._impl_.otc_flag_;
  }
  if (from._internal_buy_available_flag() != 0) {
    _this->_impl_.buy_available_flag_ = from._impl_.buy_available_flag_;
  }
  if (from._internal_sell_available_flag() != 0) {
    _this->_impl_.sell_available_flag_ = from._impl_.sell_available_flag_;
  }
  if (from._internal_issue_size_plan() != 0) {
    _this->_impl_.issue_size_plan_ = from._impl_.issue_size_plan_;
  }
  if (from._internal_trading_status() != 0) {
    _this->_impl_.trading_status_ = from._impl_.trading_status_;
  }
  if (from._internal_share_type() != 0) {
    _this->_impl_.share_type_ = from._impl_.share_type_;
  }
  if (from._internal_real_exchange() != 0) {
    _this->_impl_.real_exchange_ = from._impl_.real_exchange_;
  }
  if (from._internal_instrument_exchange() != 0) {
    _this->_impl_.instrument_exchange_ = from._impl_.instrument_exchange_;
  }
  if (from._internal_div_yield_flag() != 0) {
    _this->_impl_.div_yield_flag_ = from._impl_.div_yield_flag_;
  }
  if (from._internal_api_trade_available_flag() != 0) {
    _this->_impl_.api_trade_available_flag_ = from._impl_.api_trade_available_flag_;
  }
  if (from._internal_for_iis_flag() != 0) {
    _this->_impl_.for_iis_flag_ = from._impl_.for_iis_flag_;
  }
  if (from._internal_for_qual_investor_flag() != 0) {
    _this->_impl_.for_qual_investor_flag_ = from._impl_.for_qual_investor_flag_;
  }
  if (from._internal_weekend_flag() != 0) {
    _this->_impl_.weekend_flag_ = from._impl_.weekend_flag_;
  }
  if (from._internal_blocked_tca_flag() != 0) {
    _this->_impl_.blocked_tca_flag_ = from._impl_.blocked_tca_flag_;
  }
  if (from._internal_liquidity_flag() != 0) {
    _this->_impl_.liquidity_flag_ = from._impl_.liquidity_flag_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Share::CopyFrom(const Share& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.Share)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Share::InternalSwap(Share* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.figi_, &other->_impl_.figi_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ticker_, &other->_impl_.ticker_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.class_code_, &other->_impl_.class_code_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.isin_, &other->_impl_.isin_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.currency_, &other->_impl_.currency_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.exchange_, &other->_impl_.exchange_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.country_of_risk_, &other->_impl_.country_of_risk_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.country_of_risk_name_, &other->_impl_.country_of_risk_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sector_, &other->_impl_.sector_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.uid_, &other->_impl_.uid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.position_uid_, &other->_impl_.position_uid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.asset_uid_, &other->_impl_.asset_uid_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Share, _impl_.liquidity_flag_)
      + sizeof(Share::_impl_.liquidity_flag_)
      - PROTOBUF_FIELD_OFFSET(Share, _impl_.klong_)>(
          reinterpret_cast<char*>(&_impl_.klong_),
          reinterpret_cast<char*>(&other->_impl_.klong_));
}

::google::protobuf::Metadata Share::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GetAccruedInterestsRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GetAccruedInterestsRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GetAccruedInterestsRequest, _impl_._has_bits_);
};

void GetAccruedInterestsRequest::clear_from() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.from_ != nullptr) _impl_.from_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GetAccruedInterestsRequest::clear_to() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.to_ != nullptr) _impl_.to_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
GetAccruedInterestsRequest::GetAccruedInterestsRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.GetAccruedInterestsRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetAccruedInterestsRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::GetAccruedInterestsRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        figi_(arena, from.figi_),
        instrument_id_(arena, from.instrument_id_) {}

GetAccruedInterestsRequest::GetAccruedInterestsRequest(
    ::google::protobuf::Arena* arena,
    const GetAccruedInterestsRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GetAccruedInterestsRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.from_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.from_)
                        : nullptr;
  _impl_.to_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.to_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.GetAccruedInterestsRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetAccruedInterestsRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        figi_(arena),
        instrument_id_(arena) {}

inline void GetAccruedInterestsRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, from_),
           0,
           offsetof(Impl_, to_) -
               offsetof(Impl_, from_) +
               sizeof(Impl_::to_));
}
GetAccruedInterestsRequest::~GetAccruedInterestsRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.GetAccruedInterestsRequest)
  SharedDtor(*this);
}
inline void GetAccruedInterestsRequest::SharedDtor(MessageLite& self) {
  GetAccruedInterestsRequest& this_ = static_cast<GetAccruedInterestsRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.figi_.Destroy();
  this_._impl_.instrument_id_.Destroy();
  delete this_._impl_.from_;
  delete this_._impl_.to_;
  this_._impl_.~Impl_();
}

inline void* GetAccruedInterestsRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) GetAccruedInterestsRequest(arena);
}
constexpr auto GetAccruedInterestsRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(GetAccruedInterestsRequest),
                                            alignof(GetAccruedInterestsRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull GetAccruedInterestsRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_GetAccruedInterestsRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &GetAccruedInterestsRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<GetAccruedInterestsRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &GetAccruedInterestsRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<GetAccruedInterestsRequest>(), &GetAccruedInterestsRequest::ByteSizeLong,
            &GetAccruedInterestsRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(GetAccruedInterestsRequest, _impl_._cached_size_),
        false,
    },
    &GetAccruedInterestsRequest::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* GetAccruedInterestsRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 2, 90, 2> GetAccruedInterestsRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetAccruedInterestsRequest, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::GetAccruedInterestsRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string instrument_id = 4 [(.google.api.field_behavior) = REQUIRED];
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(GetAccruedInterestsRequest, _impl_.instrument_id_)}},
    // string figi = 1 [deprecated = true];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetAccruedInterestsRequest, _impl_.figi_)}},
    // .google.protobuf.Timestamp from = 2 [(.google.api.field_behavior) = REQUIRED];
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(GetAccruedInterestsRequest, _impl_.from_)}},
    // .google.protobuf.Timestamp to = 3 [(.google.api.field_behavior) = REQUIRED];
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 1, PROTOBUF_FIELD_OFFSET(GetAccruedInterestsRequest, _impl_.to_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string figi = 1 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(GetAccruedInterestsRequest, _impl_.figi_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Timestamp from = 2 [(.google.api.field_behavior) = REQUIRED];
    {PROTOBUF_FIELD_OFFSET(GetAccruedInterestsRequest, _impl_.from_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp to = 3 [(.google.api.field_behavior) = REQUIRED];
    {PROTOBUF_FIELD_OFFSET(GetAccruedInterestsRequest, _impl_.to_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string instrument_id = 4 [(.google.api.field_behavior) = REQUIRED];
    {PROTOBUF_FIELD_OFFSET(GetAccruedInterestsRequest, _impl_.instrument_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\100\4\0\0\15\0\0\0"
    "tinkoff.public.invest.api.contract.v1.GetAccruedInterestsRequest"
    "figi"
    "instrument_id"
  }},
};

PROTOBUF_NOINLINE void GetAccruedInterestsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.GetAccruedInterestsRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.figi_.ClearToEmpty();
  _impl_.instrument_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.from_ != nullptr);
      _impl_.from_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.to_ != nullptr);
      _impl_.to_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GetAccruedInterestsRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GetAccruedInterestsRequest& this_ = static_cast<const GetAccruedInterestsRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GetAccruedInterestsRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GetAccruedInterestsRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.GetAccruedInterestsRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string figi = 1 [deprecated = true];
          if (!this_._internal_figi().empty()) {
            const std::string& _s = this_._internal_figi();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.GetAccruedInterestsRequest.figi");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .google.protobuf.Timestamp from = 2 [(.google.api.field_behavior) = REQUIRED];
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.from_, this_._impl_.from_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Timestamp to = 3 [(.google.api.field_behavior) = REQUIRED];
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.to_, this_._impl_.to_->GetCachedSize(), target,
                stream);
          }

          // string instrument_id = 4 [(.google.api.field_behavior) = REQUIRED];
          if (!this_._internal_instrument_id().empty()) {
            const std::string& _s = this_._internal_instrument_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.GetAccruedInterestsRequest.instrument_id");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.GetAccruedInterestsRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GetAccruedInterestsRequest::ByteSizeLong(const MessageLite& base) {
          const GetAccruedInterestsRequest& this_ = static_cast<const GetAccruedInterestsRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GetAccruedInterestsRequest::ByteSizeLong() const {
          const GetAccruedInterestsRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.GetAccruedInterestsRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string figi = 1 [deprecated = true];
            if (!this_._internal_figi().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_figi());
            }
            // string instrument_id = 4 [(.google.api.field_behavior) = REQUIRED];
            if (!this_._internal_instrument_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_instrument_id());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .google.protobuf.Timestamp from = 2 [(.google.api.field_behavior) = REQUIRED];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.from_);
            }
            // .google.protobuf.Timestamp to = 3 [(.google.api.field_behavior) = REQUIRED];
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.to_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GetAccruedInterestsRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GetAccruedInterestsRequest*>(&to_msg);
  auto& from = static_cast<const GetAccruedInterestsRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.GetAccruedInterestsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_instrument_id().empty()) {
    _this->_internal_set_instrument_id(from._internal_instrument_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.from_ != nullptr);
      if (_this->_impl_.from_ == nullptr) {
        _this->_impl_.from_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.from_);
      } else {
        _this->_impl_.from_->MergeFrom(*from._impl_.from_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.to_ != nullptr);
      if (_this->_impl_.to_ == nullptr) {
        _this->_impl_.to_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.to_);
      } else {
        _this->_impl_.to_->MergeFrom(*from._impl_.to_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetAccruedInterestsRequest::CopyFrom(const GetAccruedInterestsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.GetAccruedInterestsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GetAccruedInterestsRequest::InternalSwap(GetAccruedInterestsRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.figi_, &other->_impl_.figi_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.instrument_id_, &other->_impl_.instrument_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetAccruedInterestsRequest, _impl_.to_)
      + sizeof(GetAccruedInterestsRequest::_impl_.to_)
      - PROTOBUF_FIELD_OFFSET(GetAccruedInterestsRequest, _impl_.from_)>(
          reinterpret_cast<char*>(&_impl_.from_),
          reinterpret_cast<char*>(&other->_impl_.from_));
}

::google::protobuf::Metadata GetAccruedInterestsRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GetAccruedInterestsResponse::_Internal {
 public:
};

GetAccruedInterestsResponse::GetAccruedInterestsResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.GetAccruedInterestsResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetAccruedInterestsResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::GetAccruedInterestsResponse& from_msg)
      : accrued_interests_{visibility, arena, from.accrued_interests_},
        _cached_size_{0} {}

GetAccruedInterestsResponse::GetAccruedInterestsResponse(
    ::google::protobuf::Arena* arena,
    const GetAccruedInterestsResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GetAccruedInterestsResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.GetAccruedInterestsResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetAccruedInterestsResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : accrued_interests_{visibility, arena},
        _cached_size_{0} {}

inline void GetAccruedInterestsResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
GetAccruedInterestsResponse::~GetAccruedInterestsResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.GetAccruedInterestsResponse)
  SharedDtor(*this);
}
inline void GetAccruedInterestsResponse::SharedDtor(MessageLite& self) {
  GetAccruedInterestsResponse& this_ = static_cast<GetAccruedInterestsResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* GetAccruedInterestsResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) GetAccruedInterestsResponse(arena);
}
constexpr auto GetAccruedInterestsResponse::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(GetAccruedInterestsResponse, _impl_.accrued_interests_) +
          decltype(GetAccruedInterestsResponse::_impl_.accrued_interests_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(GetAccruedInterestsResponse), alignof(GetAccruedInterestsResponse), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&GetAccruedInterestsResponse::PlacementNew_,
                                 sizeof(GetAccruedInterestsResponse),
                                 alignof(GetAccruedInterestsResponse));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull GetAccruedInterestsResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_GetAccruedInterestsResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &GetAccruedInterestsResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<GetAccruedInterestsResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &GetAccruedInterestsResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<GetAccruedInterestsResponse>(), &GetAccruedInterestsResponse::ByteSizeLong,
            &GetAccruedInterestsResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(GetAccruedInterestsResponse, _impl_._cached_size_),
        false,
    },
    &GetAccruedInterestsResponse::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* GetAccruedInterestsResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> GetAccruedInterestsResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::GetAccruedInterestsResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .tinkoff.public.invest.api.contract.v1.AccruedInterest accrued_interests = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetAccruedInterestsResponse, _impl_.accrued_interests_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .tinkoff.public.invest.api.contract.v1.AccruedInterest accrued_interests = 1;
    {PROTOBUF_FIELD_OFFSET(GetAccruedInterestsResponse, _impl_.accrued_interests_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::AccruedInterest>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void GetAccruedInterestsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.GetAccruedInterestsResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.accrued_interests_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GetAccruedInterestsResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GetAccruedInterestsResponse& this_ = static_cast<const GetAccruedInterestsResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GetAccruedInterestsResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GetAccruedInterestsResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.GetAccruedInterestsResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .tinkoff.public.invest.api.contract.v1.AccruedInterest accrued_interests = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_accrued_interests_size());
               i < n; i++) {
            const auto& repfield = this_._internal_accrued_interests().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.GetAccruedInterestsResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GetAccruedInterestsResponse::ByteSizeLong(const MessageLite& base) {
          const GetAccruedInterestsResponse& this_ = static_cast<const GetAccruedInterestsResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GetAccruedInterestsResponse::ByteSizeLong() const {
          const GetAccruedInterestsResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.GetAccruedInterestsResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .tinkoff.public.invest.api.contract.v1.AccruedInterest accrued_interests = 1;
            {
              total_size += 1UL * this_._internal_accrued_interests_size();
              for (const auto& msg : this_._internal_accrued_interests()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GetAccruedInterestsResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GetAccruedInterestsResponse*>(&to_msg);
  auto& from = static_cast<const GetAccruedInterestsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.GetAccruedInterestsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_accrued_interests()->MergeFrom(
      from._internal_accrued_interests());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetAccruedInterestsResponse::CopyFrom(const GetAccruedInterestsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.GetAccruedInterestsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GetAccruedInterestsResponse::InternalSwap(GetAccruedInterestsResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.accrued_interests_.InternalSwap(&other->_impl_.accrued_interests_);
}

::google::protobuf::Metadata GetAccruedInterestsResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AccruedInterest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<AccruedInterest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(AccruedInterest, _impl_._has_bits_);
};

void AccruedInterest::clear_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.date_ != nullptr) _impl_.date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void AccruedInterest::clear_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.value_ != nullptr) _impl_.value_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void AccruedInterest::clear_value_percent() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.value_percent_ != nullptr) _impl_.value_percent_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void AccruedInterest::clear_nominal() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.nominal_ != nullptr) _impl_.nominal_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
AccruedInterest::AccruedInterest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.AccruedInterest)
}
inline PROTOBUF_NDEBUG_INLINE AccruedInterest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::AccruedInterest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

AccruedInterest::AccruedInterest(
    ::google::protobuf::Arena* arena,
    const AccruedInterest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AccruedInterest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.date_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.date_)
                        : nullptr;
  _impl_.value_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.value_)
                        : nullptr;
  _impl_.value_percent_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.value_percent_)
                        : nullptr;
  _impl_.nominal_ = (cached_has_bits & 0x00000008u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.nominal_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.AccruedInterest)
}
inline PROTOBUF_NDEBUG_INLINE AccruedInterest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void AccruedInterest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, date_),
           0,
           offsetof(Impl_, nominal_) -
               offsetof(Impl_, date_) +
               sizeof(Impl_::nominal_));
}
AccruedInterest::~AccruedInterest() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.AccruedInterest)
  SharedDtor(*this);
}
inline void AccruedInterest::SharedDtor(MessageLite& self) {
  AccruedInterest& this_ = static_cast<AccruedInterest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.date_;
  delete this_._impl_.value_;
  delete this_._impl_.value_percent_;
  delete this_._impl_.nominal_;
  this_._impl_.~Impl_();
}

inline void* AccruedInterest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) AccruedInterest(arena);
}
constexpr auto AccruedInterest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(AccruedInterest),
                                            alignof(AccruedInterest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull AccruedInterest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_AccruedInterest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &AccruedInterest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<AccruedInterest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &AccruedInterest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<AccruedInterest>(), &AccruedInterest::ByteSizeLong,
            &AccruedInterest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(AccruedInterest, _impl_._cached_size_),
        false,
    },
    &AccruedInterest::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* AccruedInterest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 4, 0, 2> AccruedInterest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AccruedInterest, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::AccruedInterest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .tinkoff.public.invest.api.contract.v1.Quotation nominal = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 3, 3, PROTOBUF_FIELD_OFFSET(AccruedInterest, _impl_.nominal_)}},
    // .google.protobuf.Timestamp date = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(AccruedInterest, _impl_.date_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation value = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(AccruedInterest, _impl_.value_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation value_percent = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(AccruedInterest, _impl_.value_percent_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .google.protobuf.Timestamp date = 1;
    {PROTOBUF_FIELD_OFFSET(AccruedInterest, _impl_.date_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation value = 2;
    {PROTOBUF_FIELD_OFFSET(AccruedInterest, _impl_.value_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation value_percent = 3;
    {PROTOBUF_FIELD_OFFSET(AccruedInterest, _impl_.value_percent_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation nominal = 4;
    {PROTOBUF_FIELD_OFFSET(AccruedInterest, _impl_.nominal_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void AccruedInterest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.AccruedInterest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.date_ != nullptr);
      _impl_.date_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.value_ != nullptr);
      _impl_.value_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.value_percent_ != nullptr);
      _impl_.value_percent_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.nominal_ != nullptr);
      _impl_.nominal_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* AccruedInterest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const AccruedInterest& this_ = static_cast<const AccruedInterest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* AccruedInterest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const AccruedInterest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.AccruedInterest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .google.protobuf.Timestamp date = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.date_, this_._impl_.date_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation value = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.value_, this_._impl_.value_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation value_percent = 3;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.value_percent_, this_._impl_.value_percent_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation nominal = 4;
          if (cached_has_bits & 0x00000008u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                4, *this_._impl_.nominal_, this_._impl_.nominal_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.AccruedInterest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t AccruedInterest::ByteSizeLong(const MessageLite& base) {
          const AccruedInterest& this_ = static_cast<const AccruedInterest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t AccruedInterest::ByteSizeLong() const {
          const AccruedInterest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.AccruedInterest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x0000000fu) {
            // .google.protobuf.Timestamp date = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.date_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation value = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.value_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation value_percent = 3;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.value_percent_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation nominal = 4;
            if (cached_has_bits & 0x00000008u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.nominal_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void AccruedInterest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AccruedInterest*>(&to_msg);
  auto& from = static_cast<const AccruedInterest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.AccruedInterest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.date_ != nullptr);
      if (_this->_impl_.date_ == nullptr) {
        _this->_impl_.date_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.date_);
      } else {
        _this->_impl_.date_->MergeFrom(*from._impl_.date_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.value_ != nullptr);
      if (_this->_impl_.value_ == nullptr) {
        _this->_impl_.value_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.value_);
      } else {
        _this->_impl_.value_->MergeFrom(*from._impl_.value_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.value_percent_ != nullptr);
      if (_this->_impl_.value_percent_ == nullptr) {
        _this->_impl_.value_percent_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.value_percent_);
      } else {
        _this->_impl_.value_percent_->MergeFrom(*from._impl_.value_percent_);
      }
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(from._impl_.nominal_ != nullptr);
      if (_this->_impl_.nominal_ == nullptr) {
        _this->_impl_.nominal_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.nominal_);
      } else {
        _this->_impl_.nominal_->MergeFrom(*from._impl_.nominal_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AccruedInterest::CopyFrom(const AccruedInterest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.AccruedInterest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AccruedInterest::InternalSwap(AccruedInterest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AccruedInterest, _impl_.nominal_)
      + sizeof(AccruedInterest::_impl_.nominal_)
      - PROTOBUF_FIELD_OFFSET(AccruedInterest, _impl_.date_)>(
          reinterpret_cast<char*>(&_impl_.date_),
          reinterpret_cast<char*>(&other->_impl_.date_));
}

::google::protobuf::Metadata AccruedInterest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GetFuturesMarginRequest::_Internal {
 public:
};

GetFuturesMarginRequest::GetFuturesMarginRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.GetFuturesMarginRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetFuturesMarginRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::GetFuturesMarginRequest& from_msg)
      : figi_(arena, from.figi_),
        instrument_id_(arena, from.instrument_id_),
        _cached_size_{0} {}

GetFuturesMarginRequest::GetFuturesMarginRequest(
    ::google::protobuf::Arena* arena,
    const GetFuturesMarginRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GetFuturesMarginRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.GetFuturesMarginRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetFuturesMarginRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : figi_(arena),
        instrument_id_(arena),
        _cached_size_{0} {}

inline void GetFuturesMarginRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
GetFuturesMarginRequest::~GetFuturesMarginRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.GetFuturesMarginRequest)
  SharedDtor(*this);
}
inline void GetFuturesMarginRequest::SharedDtor(MessageLite& self) {
  GetFuturesMarginRequest& this_ = static_cast<GetFuturesMarginRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.figi_.Destroy();
  this_._impl_.instrument_id_.Destroy();
  this_._impl_.~Impl_();
}

inline void* GetFuturesMarginRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) GetFuturesMarginRequest(arena);
}
constexpr auto GetFuturesMarginRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(GetFuturesMarginRequest),
                                            alignof(GetFuturesMarginRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull GetFuturesMarginRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_GetFuturesMarginRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &GetFuturesMarginRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<GetFuturesMarginRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &GetFuturesMarginRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<GetFuturesMarginRequest>(), &GetFuturesMarginRequest::ByteSizeLong,
            &GetFuturesMarginRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(GetFuturesMarginRequest, _impl_._cached_size_),
        false,
    },
    &GetFuturesMarginRequest::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* GetFuturesMarginRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 87, 2> GetFuturesMarginRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967286,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::GetFuturesMarginRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string instrument_id = 4 [(.google.api.field_behavior) = REQUIRED];
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(GetFuturesMarginRequest, _impl_.instrument_id_)}},
    // string figi = 1 [deprecated = true];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetFuturesMarginRequest, _impl_.figi_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string figi = 1 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(GetFuturesMarginRequest, _impl_.figi_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string instrument_id = 4 [(.google.api.field_behavior) = REQUIRED];
    {PROTOBUF_FIELD_OFFSET(GetFuturesMarginRequest, _impl_.instrument_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\75\4\15\0\0\0\0\0"
    "tinkoff.public.invest.api.contract.v1.GetFuturesMarginRequest"
    "figi"
    "instrument_id"
  }},
};

PROTOBUF_NOINLINE void GetFuturesMarginRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.GetFuturesMarginRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.figi_.ClearToEmpty();
  _impl_.instrument_id_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GetFuturesMarginRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GetFuturesMarginRequest& this_ = static_cast<const GetFuturesMarginRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GetFuturesMarginRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GetFuturesMarginRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.GetFuturesMarginRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string figi = 1 [deprecated = true];
          if (!this_._internal_figi().empty()) {
            const std::string& _s = this_._internal_figi();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.GetFuturesMarginRequest.figi");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string instrument_id = 4 [(.google.api.field_behavior) = REQUIRED];
          if (!this_._internal_instrument_id().empty()) {
            const std::string& _s = this_._internal_instrument_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.GetFuturesMarginRequest.instrument_id");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.GetFuturesMarginRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GetFuturesMarginRequest::ByteSizeLong(const MessageLite& base) {
          const GetFuturesMarginRequest& this_ = static_cast<const GetFuturesMarginRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GetFuturesMarginRequest::ByteSizeLong() const {
          const GetFuturesMarginRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.GetFuturesMarginRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string figi = 1 [deprecated = true];
            if (!this_._internal_figi().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_figi());
            }
            // string instrument_id = 4 [(.google.api.field_behavior) = REQUIRED];
            if (!this_._internal_instrument_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_instrument_id());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GetFuturesMarginRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GetFuturesMarginRequest*>(&to_msg);
  auto& from = static_cast<const GetFuturesMarginRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.GetFuturesMarginRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_instrument_id().empty()) {
    _this->_internal_set_instrument_id(from._internal_instrument_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetFuturesMarginRequest::CopyFrom(const GetFuturesMarginRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.GetFuturesMarginRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GetFuturesMarginRequest::InternalSwap(GetFuturesMarginRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.figi_, &other->_impl_.figi_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.instrument_id_, &other->_impl_.instrument_id_, arena);
}

::google::protobuf::Metadata GetFuturesMarginRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GetFuturesMarginResponse::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GetFuturesMarginResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GetFuturesMarginResponse, _impl_._has_bits_);
};

void GetFuturesMarginResponse::clear_initial_margin_on_buy() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.initial_margin_on_buy_ != nullptr) _impl_.initial_margin_on_buy_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GetFuturesMarginResponse::clear_initial_margin_on_sell() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.initial_margin_on_sell_ != nullptr) _impl_.initial_margin_on_sell_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void GetFuturesMarginResponse::clear_min_price_increment() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.min_price_increment_ != nullptr) _impl_.min_price_increment_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void GetFuturesMarginResponse::clear_min_price_increment_amount() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.min_price_increment_amount_ != nullptr) _impl_.min_price_increment_amount_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
GetFuturesMarginResponse::GetFuturesMarginResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.GetFuturesMarginResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetFuturesMarginResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::GetFuturesMarginResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

GetFuturesMarginResponse::GetFuturesMarginResponse(
    ::google::protobuf::Arena* arena,
    const GetFuturesMarginResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GetFuturesMarginResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.initial_margin_on_buy_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(
                              arena, *from._impl_.initial_margin_on_buy_)
                        : nullptr;
  _impl_.initial_margin_on_sell_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(
                              arena, *from._impl_.initial_margin_on_sell_)
                        : nullptr;
  _impl_.min_price_increment_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.min_price_increment_)
                        : nullptr;
  _impl_.min_price_increment_amount_ = (cached_has_bits & 0x00000008u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.min_price_increment_amount_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.GetFuturesMarginResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetFuturesMarginResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GetFuturesMarginResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, initial_margin_on_buy_),
           0,
           offsetof(Impl_, min_price_increment_amount_) -
               offsetof(Impl_, initial_margin_on_buy_) +
               sizeof(Impl_::min_price_increment_amount_));
}
GetFuturesMarginResponse::~GetFuturesMarginResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.GetFuturesMarginResponse)
  SharedDtor(*this);
}
inline void GetFuturesMarginResponse::SharedDtor(MessageLite& self) {
  GetFuturesMarginResponse& this_ = static_cast<GetFuturesMarginResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.initial_margin_on_buy_;
  delete this_._impl_.initial_margin_on_sell_;
  delete this_._impl_.min_price_increment_;
  delete this_._impl_.min_price_increment_amount_;
  this_._impl_.~Impl_();
}

inline void* GetFuturesMarginResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) GetFuturesMarginResponse(arena);
}
constexpr auto GetFuturesMarginResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(GetFuturesMarginResponse),
                                            alignof(GetFuturesMarginResponse));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull GetFuturesMarginResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_GetFuturesMarginResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &GetFuturesMarginResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<GetFuturesMarginResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &GetFuturesMarginResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<GetFuturesMarginResponse>(), &GetFuturesMarginResponse::ByteSizeLong,
            &GetFuturesMarginResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(GetFuturesMarginResponse, _impl_._cached_size_),
        false,
    },
    &GetFuturesMarginResponse::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* GetFuturesMarginResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 4, 0, 2> GetFuturesMarginResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetFuturesMarginResponse, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    4,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::GetFuturesMarginResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .tinkoff.public.invest.api.contract.v1.Quotation min_price_increment_amount = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 3, 3, PROTOBUF_FIELD_OFFSET(GetFuturesMarginResponse, _impl_.min_price_increment_amount_)}},
    // .tinkoff.public.invest.api.contract.v1.MoneyValue initial_margin_on_buy = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(GetFuturesMarginResponse, _impl_.initial_margin_on_buy_)}},
    // .tinkoff.public.invest.api.contract.v1.MoneyValue initial_margin_on_sell = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(GetFuturesMarginResponse, _impl_.initial_margin_on_sell_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation min_price_increment = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(GetFuturesMarginResponse, _impl_.min_price_increment_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .tinkoff.public.invest.api.contract.v1.MoneyValue initial_margin_on_buy = 1;
    {PROTOBUF_FIELD_OFFSET(GetFuturesMarginResponse, _impl_.initial_margin_on_buy_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.MoneyValue initial_margin_on_sell = 2;
    {PROTOBUF_FIELD_OFFSET(GetFuturesMarginResponse, _impl_.initial_margin_on_sell_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation min_price_increment = 3;
    {PROTOBUF_FIELD_OFFSET(GetFuturesMarginResponse, _impl_.min_price_increment_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation min_price_increment_amount = 4;
    {PROTOBUF_FIELD_OFFSET(GetFuturesMarginResponse, _impl_.min_price_increment_amount_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::MoneyValue>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::MoneyValue>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void GetFuturesMarginResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.GetFuturesMarginResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.initial_margin_on_buy_ != nullptr);
      _impl_.initial_margin_on_buy_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.initial_margin_on_sell_ != nullptr);
      _impl_.initial_margin_on_sell_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.min_price_increment_ != nullptr);
      _impl_.min_price_increment_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.min_price_increment_amount_ != nullptr);
      _impl_.min_price_increment_amount_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GetFuturesMarginResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GetFuturesMarginResponse& this_ = static_cast<const GetFuturesMarginResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GetFuturesMarginResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GetFuturesMarginResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.GetFuturesMarginResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .tinkoff.public.invest.api.contract.v1.MoneyValue initial_margin_on_buy = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.initial_margin_on_buy_, this_._impl_.initial_margin_on_buy_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.MoneyValue initial_margin_on_sell = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.initial_margin_on_sell_, this_._impl_.initial_margin_on_sell_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation min_price_increment = 3;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.min_price_increment_, this_._impl_.min_price_increment_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation min_price_increment_amount = 4;
          if (cached_has_bits & 0x00000008u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                4, *this_._impl_.min_price_increment_amount_, this_._impl_.min_price_increment_amount_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.GetFuturesMarginResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GetFuturesMarginResponse::ByteSizeLong(const MessageLite& base) {
          const GetFuturesMarginResponse& this_ = static_cast<const GetFuturesMarginResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GetFuturesMarginResponse::ByteSizeLong() const {
          const GetFuturesMarginResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.GetFuturesMarginResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x0000000fu) {
            // .tinkoff.public.invest.api.contract.v1.MoneyValue initial_margin_on_buy = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.initial_margin_on_buy_);
            }
            // .tinkoff.public.invest.api.contract.v1.MoneyValue initial_margin_on_sell = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.initial_margin_on_sell_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation min_price_increment = 3;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.min_price_increment_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation min_price_increment_amount = 4;
            if (cached_has_bits & 0x00000008u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.min_price_increment_amount_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GetFuturesMarginResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GetFuturesMarginResponse*>(&to_msg);
  auto& from = static_cast<const GetFuturesMarginResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.GetFuturesMarginResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000000fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.initial_margin_on_buy_ != nullptr);
      if (_this->_impl_.initial_margin_on_buy_ == nullptr) {
        _this->_impl_.initial_margin_on_buy_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(arena, *from._impl_.initial_margin_on_buy_);
      } else {
        _this->_impl_.initial_margin_on_buy_->MergeFrom(*from._impl_.initial_margin_on_buy_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.initial_margin_on_sell_ != nullptr);
      if (_this->_impl_.initial_margin_on_sell_ == nullptr) {
        _this->_impl_.initial_margin_on_sell_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(arena, *from._impl_.initial_margin_on_sell_);
      } else {
        _this->_impl_.initial_margin_on_sell_->MergeFrom(*from._impl_.initial_margin_on_sell_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.min_price_increment_ != nullptr);
      if (_this->_impl_.min_price_increment_ == nullptr) {
        _this->_impl_.min_price_increment_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.min_price_increment_);
      } else {
        _this->_impl_.min_price_increment_->MergeFrom(*from._impl_.min_price_increment_);
      }
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(from._impl_.min_price_increment_amount_ != nullptr);
      if (_this->_impl_.min_price_increment_amount_ == nullptr) {
        _this->_impl_.min_price_increment_amount_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.min_price_increment_amount_);
      } else {
        _this->_impl_.min_price_increment_amount_->MergeFrom(*from._impl_.min_price_increment_amount_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetFuturesMarginResponse::CopyFrom(const GetFuturesMarginResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.GetFuturesMarginResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GetFuturesMarginResponse::InternalSwap(GetFuturesMarginResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetFuturesMarginResponse, _impl_.min_price_increment_amount_)
      + sizeof(GetFuturesMarginResponse::_impl_.min_price_increment_amount_)
      - PROTOBUF_FIELD_OFFSET(GetFuturesMarginResponse, _impl_.initial_margin_on_buy_)>(
          reinterpret_cast<char*>(&_impl_.initial_margin_on_buy_),
          reinterpret_cast<char*>(&other->_impl_.initial_margin_on_buy_));
}

::google::protobuf::Metadata GetFuturesMarginResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class InstrumentResponse::_Internal {
 public:
  using HasBits =
      decltype(std::declval<InstrumentResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(InstrumentResponse, _impl_._has_bits_);
};

InstrumentResponse::InstrumentResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.InstrumentResponse)
}
inline PROTOBUF_NDEBUG_INLINE InstrumentResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::InstrumentResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

InstrumentResponse::InstrumentResponse(
    ::google::protobuf::Arena* arena,
    const InstrumentResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  InstrumentResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.instrument_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Instrument>(
                              arena, *from._impl_.instrument_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.InstrumentResponse)
}
inline PROTOBUF_NDEBUG_INLINE InstrumentResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void InstrumentResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.instrument_ = {};
}
InstrumentResponse::~InstrumentResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.InstrumentResponse)
  SharedDtor(*this);
}
inline void InstrumentResponse::SharedDtor(MessageLite& self) {
  InstrumentResponse& this_ = static_cast<InstrumentResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.instrument_;
  this_._impl_.~Impl_();
}

inline void* InstrumentResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) InstrumentResponse(arena);
}
constexpr auto InstrumentResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(InstrumentResponse),
                                            alignof(InstrumentResponse));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull InstrumentResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_InstrumentResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &InstrumentResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<InstrumentResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &InstrumentResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<InstrumentResponse>(), &InstrumentResponse::ByteSizeLong,
            &InstrumentResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(InstrumentResponse, _impl_._cached_size_),
        false,
    },
    &InstrumentResponse::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* InstrumentResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> InstrumentResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(InstrumentResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::InstrumentResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .tinkoff.public.invest.api.contract.v1.Instrument instrument = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(InstrumentResponse, _impl_.instrument_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .tinkoff.public.invest.api.contract.v1.Instrument instrument = 1;
    {PROTOBUF_FIELD_OFFSET(InstrumentResponse, _impl_.instrument_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Instrument>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void InstrumentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.InstrumentResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.instrument_ != nullptr);
    _impl_.instrument_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* InstrumentResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const InstrumentResponse& this_ = static_cast<const InstrumentResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* InstrumentResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const InstrumentResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.InstrumentResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .tinkoff.public.invest.api.contract.v1.Instrument instrument = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.instrument_, this_._impl_.instrument_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.InstrumentResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t InstrumentResponse::ByteSizeLong(const MessageLite& base) {
          const InstrumentResponse& this_ = static_cast<const InstrumentResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t InstrumentResponse::ByteSizeLong() const {
          const InstrumentResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.InstrumentResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .tinkoff.public.invest.api.contract.v1.Instrument instrument = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.instrument_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void InstrumentResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<InstrumentResponse*>(&to_msg);
  auto& from = static_cast<const InstrumentResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.InstrumentResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.instrument_ != nullptr);
    if (_this->_impl_.instrument_ == nullptr) {
      _this->_impl_.instrument_ =
          ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Instrument>(arena, *from._impl_.instrument_);
    } else {
      _this->_impl_.instrument_->MergeFrom(*from._impl_.instrument_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void InstrumentResponse::CopyFrom(const InstrumentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.InstrumentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void InstrumentResponse::InternalSwap(InstrumentResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.instrument_, other->_impl_.instrument_);
}

::google::protobuf::Metadata InstrumentResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Instrument::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Instrument>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Instrument, _impl_._has_bits_);
};

void Instrument::clear_klong() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.klong_ != nullptr) _impl_.klong_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Instrument::clear_kshort() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.kshort_ != nullptr) _impl_.kshort_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void Instrument::clear_dlong() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.dlong_ != nullptr) _impl_.dlong_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void Instrument::clear_dshort() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.dshort_ != nullptr) _impl_.dshort_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void Instrument::clear_dlong_min() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.dlong_min_ != nullptr) _impl_.dlong_min_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void Instrument::clear_dshort_min() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.dshort_min_ != nullptr) _impl_.dshort_min_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void Instrument::clear_min_price_increment() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.min_price_increment_ != nullptr) _impl_.min_price_increment_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void Instrument::clear_first_1min_candle_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.first_1min_candle_date_ != nullptr) _impl_.first_1min_candle_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void Instrument::clear_first_1day_candle_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.first_1day_candle_date_ != nullptr) _impl_.first_1day_candle_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void Instrument::clear_brand() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.brand_ != nullptr) _impl_.brand_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void Instrument::clear_dlong_client() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.dlong_client_ != nullptr) _impl_.dlong_client_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
void Instrument::clear_dshort_client() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.dshort_client_ != nullptr) _impl_.dshort_client_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
Instrument::Instrument(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.Instrument)
}
inline PROTOBUF_NDEBUG_INLINE Instrument::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::Instrument& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        figi_(arena, from.figi_),
        ticker_(arena, from.ticker_),
        class_code_(arena, from.class_code_),
        isin_(arena, from.isin_),
        currency_(arena, from.currency_),
        name_(arena, from.name_),
        exchange_(arena, from.exchange_),
        country_of_risk_(arena, from.country_of_risk_),
        country_of_risk_name_(arena, from.country_of_risk_name_),
        instrument_type_(arena, from.instrument_type_),
        uid_(arena, from.uid_),
        position_uid_(arena, from.position_uid_),
        asset_uid_(arena, from.asset_uid_) {}

Instrument::Instrument(
    ::google::protobuf::Arena* arena,
    const Instrument& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Instrument* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.klong_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.klong_)
                        : nullptr;
  _impl_.kshort_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.kshort_)
                        : nullptr;
  _impl_.dlong_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.dlong_)
                        : nullptr;
  _impl_.dshort_ = (cached_has_bits & 0x00000008u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.dshort_)
                        : nullptr;
  _impl_.dlong_min_ = (cached_has_bits & 0x00000010u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.dlong_min_)
                        : nullptr;
  _impl_.dshort_min_ = (cached_has_bits & 0x00000020u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.dshort_min_)
                        : nullptr;
  _impl_.min_price_increment_ = (cached_has_bits & 0x00000040u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.min_price_increment_)
                        : nullptr;
  _impl_.first_1min_candle_date_ = (cached_has_bits & 0x00000080u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.first_1min_candle_date_)
                        : nullptr;
  _impl_.first_1day_candle_date_ = (cached_has_bits & 0x00000100u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.first_1day_candle_date_)
                        : nullptr;
  _impl_.brand_ = (cached_has_bits & 0x00000200u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::BrandData>(
                              arena, *from._impl_.brand_)
                        : nullptr;
  _impl_.dlong_client_ = (cached_has_bits & 0x00000400u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.dlong_client_)
                        : nullptr;
  _impl_.dshort_client_ = (cached_has_bits & 0x00000800u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.dshort_client_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, lot_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, lot_),
           offsetof(Impl_, instrument_kind_) -
               offsetof(Impl_, lot_) +
               sizeof(Impl_::instrument_kind_));

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.Instrument)
}
inline PROTOBUF_NDEBUG_INLINE Instrument::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        figi_(arena),
        ticker_(arena),
        class_code_(arena),
        isin_(arena),
        currency_(arena),
        name_(arena),
        exchange_(arena),
        country_of_risk_(arena),
        country_of_risk_name_(arena),
        instrument_type_(arena),
        uid_(arena),
        position_uid_(arena),
        asset_uid_(arena) {}

inline void Instrument::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, klong_),
           0,
           offsetof(Impl_, instrument_kind_) -
               offsetof(Impl_, klong_) +
               sizeof(Impl_::instrument_kind_));
}
Instrument::~Instrument() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.Instrument)
  SharedDtor(*this);
}
inline void Instrument::SharedDtor(MessageLite& self) {
  Instrument& this_ = static_cast<Instrument&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.figi_.Destroy();
  this_._impl_.ticker_.Destroy();
  this_._impl_.class_code_.Destroy();
  this_._impl_.isin_.Destroy();
  this_._impl_.currency_.Destroy();
  this_._impl_.name_.Destroy();
  this_._impl_.exchange_.Destroy();
  this_._impl_.country_of_risk_.Destroy();
  this_._impl_.country_of_risk_name_.Destroy();
  this_._impl_.instrument_type_.Destroy();
  this_._impl_.uid_.Destroy();
  this_._impl_.position_uid_.Destroy();
  this_._impl_.asset_uid_.Destroy();
  delete this_._impl_.klong_;
  delete this_._impl_.kshort_;
  delete this_._impl_.dlong_;
  delete this_._impl_.dshort_;
  delete this_._impl_.dlong_min_;
  delete this_._impl_.dshort_min_;
  delete this_._impl_.min_price_increment_;
  delete this_._impl_.first_1min_candle_date_;
  delete this_._impl_.first_1day_candle_date_;
  delete this_._impl_.brand_;
  delete this_._impl_.dlong_client_;
  delete this_._impl_.dshort_client_;
  this_._impl_.~Impl_();
}

inline void* Instrument::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Instrument(arena);
}
constexpr auto Instrument::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Instrument),
                                            alignof(Instrument));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Instrument::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Instrument_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Instrument::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Instrument>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Instrument::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Instrument>(), &Instrument::ByteSizeLong,
            &Instrument::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Instrument, _impl_._cached_size_),
        false,
    },
    &Instrument::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Instrument::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 38, 12, 207, 14> Instrument::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Instrument, _impl_._has_bits_),
    0, // no _extensions_
    491, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4026531840,  // skipmap
    offsetof(decltype(_table_), field_entries),
    38,  // num_field_entries
    12,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Instrument>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string figi = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Instrument, _impl_.figi_)}},
    // string ticker = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Instrument, _impl_.ticker_)}},
    // string class_code = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Instrument, _impl_.class_code_)}},
    // string isin = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(Instrument, _impl_.isin_)}},
    // int32 lot = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Instrument, _impl_.lot_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(Instrument, _impl_.lot_)}},
    // string currency = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(Instrument, _impl_.currency_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation klong = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 0, 0, PROTOBUF_FIELD_OFFSET(Instrument, _impl_.klong_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation kshort = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 1, 1, PROTOBUF_FIELD_OFFSET(Instrument, _impl_.kshort_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation dlong = 9;
    {::_pbi::TcParser::FastMtS1,
     {74, 2, 2, PROTOBUF_FIELD_OFFSET(Instrument, _impl_.dlong_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation dshort = 10;
    {::_pbi::TcParser::FastMtS1,
     {82, 3, 3, PROTOBUF_FIELD_OFFSET(Instrument, _impl_.dshort_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation dlong_min = 11;
    {::_pbi::TcParser::FastMtS1,
     {90, 4, 4, PROTOBUF_FIELD_OFFSET(Instrument, _impl_.dlong_min_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation dshort_min = 12;
    {::_pbi::TcParser::FastMtS1,
     {98, 5, 5, PROTOBUF_FIELD_OFFSET(Instrument, _impl_.dshort_min_)}},
    // bool short_enabled_flag = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(Instrument, _impl_.short_enabled_flag_), 63>(),
     {104, 63, 0, PROTOBUF_FIELD_OFFSET(Instrument, _impl_.short_enabled_flag_)}},
    // string name = 14;
    {::_pbi::TcParser::FastUS1,
     {114, 63, 0, PROTOBUF_FIELD_OFFSET(Instrument, _impl_.name_)}},
    // string exchange = 15;
    {::_pbi::TcParser::FastUS1,
     {122, 63, 0, PROTOBUF_FIELD_OFFSET(Instrument, _impl_.exchange_)}},
    // string country_of_risk = 16;
    {::_pbi::TcParser::FastUS2,
     {386, 63, 0, PROTOBUF_FIELD_OFFSET(Instrument, _impl_.country_of_risk_)}},
    // string country_of_risk_name = 17;
    {::_pbi::TcParser::FastUS2,
     {394, 63, 0, PROTOBUF_FIELD_OFFSET(Instrument, _impl_.country_of_risk_name_)}},
    // string instrument_type = 18;
    {::_pbi::TcParser::FastUS2,
     {402, 63, 0, PROTOBUF_FIELD_OFFSET(Instrument, _impl_.instrument_type_)}},
    // .tinkoff.public.invest.api.contract.v1.SecurityTradingStatus trading_status = 19;
    {::_pbi::TcParser::FastV32S2,
     {408, 63, 0, PROTOBUF_FIELD_OFFSET(Instrument, _impl_.trading_status_)}},
    // bool otc_flag = 20;
    {::_pbi::TcParser::FastV8S2,
     {416, 63, 0, PROTOBUF_FIELD_OFFSET(Instrument, _impl_.otc_flag_)}},
    // bool buy_available_flag = 21;
    {::_pbi::TcParser::FastV8S2,
     {424, 63, 0, PROTOBUF_FIELD_OFFSET(Instrument, _impl_.buy_available_flag_)}},
    // bool sell_available_flag = 22;
    {::_pbi::TcParser::FastV8S2,
     {432, 63, 0, PROTOBUF_FIELD_OFFSET(Instrument, _impl_.sell_available_flag_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation min_price_increment = 23;
    {::_pbi::TcParser::FastMtS2,
     {442, 6, 6, PROTOBUF_FIELD_OFFSET(Instrument, _impl_.min_price_increment_)}},
    // bool api_trade_available_flag = 24;
    {::_pbi::TcParser::FastV8S2,
     {448, 63, 0, PROTOBUF_FIELD_OFFSET(Instrument, _impl_.api_trade_available_flag_)}},
    // string uid = 25;
    {::_pbi::TcParser::FastUS2,
     {458, 63, 0, PROTOBUF_FIELD_OFFSET(Instrument, _impl_.uid_)}},
    // .tinkoff.public.invest.api.contract.v1.RealExchange real_exchange = 26;
    {::_pbi::TcParser::FastV32S2,
     {464, 63, 0, PROTOBUF_FIELD_OFFSET(Instrument, _impl_.real_exchange_)}},
    // string position_uid = 27;
    {::_pbi::TcParser::FastUS2,
     {474, 63, 0, PROTOBUF_FIELD_OFFSET(Instrument, _impl_.position_uid_)}},
    // string asset_uid = 28;
    {::_pbi::TcParser::FastUS2,
     {482, 63, 0, PROTOBUF_FIELD_OFFSET(Instrument, _impl_.asset_uid_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    36, 0, 2,
    65504, 28, 65231, 33,490, 0, 1,
     65532, 36,
    65535, 65535
  }}, {{
    // string figi = 1;
    {PROTOBUF_FIELD_OFFSET(Instrument, _impl_.figi_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string ticker = 2;
    {PROTOBUF_FIELD_OFFSET(Instrument, _impl_.ticker_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string class_code = 3;
    {PROTOBUF_FIELD_OFFSET(Instrument, _impl_.class_code_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string isin = 4;
    {PROTOBUF_FIELD_OFFSET(Instrument, _impl_.isin_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 lot = 5;
    {PROTOBUF_FIELD_OFFSET(Instrument, _impl_.lot_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string currency = 6;
    {PROTOBUF_FIELD_OFFSET(Instrument, _impl_.currency_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public.invest.api.contract.v1.Quotation klong = 7;
    {PROTOBUF_FIELD_OFFSET(Instrument, _impl_.klong_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation kshort = 8;
    {PROTOBUF_FIELD_OFFSET(Instrument, _impl_.kshort_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation dlong = 9;
    {PROTOBUF_FIELD_OFFSET(Instrument, _impl_.dlong_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation dshort = 10;
    {PROTOBUF_FIELD_OFFSET(Instrument, _impl_.dshort_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation dlong_min = 11;
    {PROTOBUF_FIELD_OFFSET(Instrument, _impl_.dlong_min_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation dshort_min = 12;
    {PROTOBUF_FIELD_OFFSET(Instrument, _impl_.dshort_min_), _Internal::kHasBitsOffset + 5, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool short_enabled_flag = 13;
    {PROTOBUF_FIELD_OFFSET(Instrument, _impl_.short_enabled_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string name = 14;
    {PROTOBUF_FIELD_OFFSET(Instrument, _impl_.name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string exchange = 15;
    {PROTOBUF_FIELD_OFFSET(Instrument, _impl_.exchange_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string country_of_risk = 16;
    {PROTOBUF_FIELD_OFFSET(Instrument, _impl_.country_of_risk_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string country_of_risk_name = 17;
    {PROTOBUF_FIELD_OFFSET(Instrument, _impl_.country_of_risk_name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string instrument_type = 18;
    {PROTOBUF_FIELD_OFFSET(Instrument, _impl_.instrument_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public.invest.api.contract.v1.SecurityTradingStatus trading_status = 19;
    {PROTOBUF_FIELD_OFFSET(Instrument, _impl_.trading_status_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // bool otc_flag = 20;
    {PROTOBUF_FIELD_OFFSET(Instrument, _impl_.otc_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool buy_available_flag = 21;
    {PROTOBUF_FIELD_OFFSET(Instrument, _impl_.buy_available_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool sell_available_flag = 22;
    {PROTOBUF_FIELD_OFFSET(Instrument, _impl_.sell_available_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .tinkoff.public.invest.api.contract.v1.Quotation min_price_increment = 23;
    {PROTOBUF_FIELD_OFFSET(Instrument, _impl_.min_price_increment_), _Internal::kHasBitsOffset + 6, 6,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool api_trade_available_flag = 24;
    {PROTOBUF_FIELD_OFFSET(Instrument, _impl_.api_trade_available_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string uid = 25;
    {PROTOBUF_FIELD_OFFSET(Instrument, _impl_.uid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public.invest.api.contract.v1.RealExchange real_exchange = 26;
    {PROTOBUF_FIELD_OFFSET(Instrument, _impl_.real_exchange_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string position_uid = 27;
    {PROTOBUF_FIELD_OFFSET(Instrument, _impl_.position_uid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string asset_uid = 28;
    {PROTOBUF_FIELD_OFFSET(Instrument, _impl_.asset_uid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool for_iis_flag = 36;
    {PROTOBUF_FIELD_OFFSET(Instrument, _impl_.for_iis_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool for_qual_investor_flag = 37;
    {PROTOBUF_FIELD_OFFSET(Instrument, _impl_.for_qual_investor_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool weekend_flag = 38;
    {PROTOBUF_FIELD_OFFSET(Instrument, _impl_.weekend_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool blocked_tca_flag = 39;
    {PROTOBUF_FIELD_OFFSET(Instrument, _impl_.blocked_tca_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .tinkoff.public.invest.api.contract.v1.InstrumentType instrument_kind = 40;
    {PROTOBUF_FIELD_OFFSET(Instrument, _impl_.instrument_kind_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .google.protobuf.Timestamp first_1min_candle_date = 56;
    {PROTOBUF_FIELD_OFFSET(Instrument, _impl_.first_1min_candle_date_), _Internal::kHasBitsOffset + 7, 7,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp first_1day_candle_date = 57;
    {PROTOBUF_FIELD_OFFSET(Instrument, _impl_.first_1day_candle_date_), _Internal::kHasBitsOffset + 8, 8,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.BrandData brand = 60;
    {PROTOBUF_FIELD_OFFSET(Instrument, _impl_.brand_), _Internal::kHasBitsOffset + 9, 9,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation dlong_client = 490;
    {PROTOBUF_FIELD_OFFSET(Instrument, _impl_.dlong_client_), _Internal::kHasBitsOffset + 10, 10,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation dshort_client = 491;
    {PROTOBUF_FIELD_OFFSET(Instrument, _impl_.dshort_client_), _Internal::kHasBitsOffset + 11, 11,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::BrandData>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
  }}, {{
    "\60\4\6\12\4\0\10\0\0\0\0\0\0\0\4\10\17\24\17\0\0\0\0\0\0\3\0\14\11\0\0\0\0\0\0\0\0\0\0\0"
    "tinkoff.public.invest.api.contract.v1.Instrument"
    "figi"
    "ticker"
    "class_code"
    "isin"
    "currency"
    "name"
    "exchange"
    "country_of_risk"
    "country_of_risk_name"
    "instrument_type"
    "uid"
    "position_uid"
    "asset_uid"
  }},
};

PROTOBUF_NOINLINE void Instrument::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.Instrument)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.figi_.ClearToEmpty();
  _impl_.ticker_.ClearToEmpty();
  _impl_.class_code_.ClearToEmpty();
  _impl_.isin_.ClearToEmpty();
  _impl_.currency_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.exchange_.ClearToEmpty();
  _impl_.country_of_risk_.ClearToEmpty();
  _impl_.country_of_risk_name_.ClearToEmpty();
  _impl_.instrument_type_.ClearToEmpty();
  _impl_.uid_.ClearToEmpty();
  _impl_.position_uid_.ClearToEmpty();
  _impl_.asset_uid_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.klong_ != nullptr);
      _impl_.klong_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.kshort_ != nullptr);
      _impl_.kshort_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.dlong_ != nullptr);
      _impl_.dlong_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.dshort_ != nullptr);
      _impl_.dshort_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.dlong_min_ != nullptr);
      _impl_.dlong_min_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.dshort_min_ != nullptr);
      _impl_.dshort_min_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(_impl_.min_price_increment_ != nullptr);
      _impl_.min_price_increment_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      ABSL_DCHECK(_impl_.first_1min_candle_date_ != nullptr);
      _impl_.first_1min_candle_date_->Clear();
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      ABSL_DCHECK(_impl_.first_1day_candle_date_ != nullptr);
      _impl_.first_1day_candle_date_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      ABSL_DCHECK(_impl_.brand_ != nullptr);
      _impl_.brand_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      ABSL_DCHECK(_impl_.dlong_client_ != nullptr);
      _impl_.dlong_client_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      ABSL_DCHECK(_impl_.dshort_client_ != nullptr);
      _impl_.dshort_client_->Clear();
    }
  }
  ::memset(&_impl_.lot_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.instrument_kind_) -
      reinterpret_cast<char*>(&_impl_.lot_)) + sizeof(_impl_.instrument_kind_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Instrument::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Instrument& this_ = static_cast<const Instrument&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Instrument::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Instrument& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.Instrument)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string figi = 1;
          if (!this_._internal_figi().empty()) {
            const std::string& _s = this_._internal_figi();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Instrument.figi");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string ticker = 2;
          if (!this_._internal_ticker().empty()) {
            const std::string& _s = this_._internal_ticker();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Instrument.ticker");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // string class_code = 3;
          if (!this_._internal_class_code().empty()) {
            const std::string& _s = this_._internal_class_code();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Instrument.class_code");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // string isin = 4;
          if (!this_._internal_isin().empty()) {
            const std::string& _s = this_._internal_isin();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Instrument.isin");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          // int32 lot = 5;
          if (this_._internal_lot() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<5>(
                    stream, this_._internal_lot(), target);
          }

          // string currency = 6;
          if (!this_._internal_currency().empty()) {
            const std::string& _s = this_._internal_currency();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Instrument.currency");
            target = stream->WriteStringMaybeAliased(6, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .tinkoff.public.invest.api.contract.v1.Quotation klong = 7;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                7, *this_._impl_.klong_, this_._impl_.klong_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation kshort = 8;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                8, *this_._impl_.kshort_, this_._impl_.kshort_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation dlong = 9;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                9, *this_._impl_.dlong_, this_._impl_.dlong_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation dshort = 10;
          if (cached_has_bits & 0x00000008u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                10, *this_._impl_.dshort_, this_._impl_.dshort_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation dlong_min = 11;
          if (cached_has_bits & 0x00000010u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                11, *this_._impl_.dlong_min_, this_._impl_.dlong_min_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation dshort_min = 12;
          if (cached_has_bits & 0x00000020u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                12, *this_._impl_.dshort_min_, this_._impl_.dshort_min_->GetCachedSize(), target,
                stream);
          }

          // bool short_enabled_flag = 13;
          if (this_._internal_short_enabled_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                13, this_._internal_short_enabled_flag(), target);
          }

          // string name = 14;
          if (!this_._internal_name().empty()) {
            const std::string& _s = this_._internal_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Instrument.name");
            target = stream->WriteStringMaybeAliased(14, _s, target);
          }

          // string exchange = 15;
          if (!this_._internal_exchange().empty()) {
            const std::string& _s = this_._internal_exchange();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Instrument.exchange");
            target = stream->WriteStringMaybeAliased(15, _s, target);
          }

          // string country_of_risk = 16;
          if (!this_._internal_country_of_risk().empty()) {
            const std::string& _s = this_._internal_country_of_risk();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Instrument.country_of_risk");
            target = stream->WriteStringMaybeAliased(16, _s, target);
          }

          // string country_of_risk_name = 17;
          if (!this_._internal_country_of_risk_name().empty()) {
            const std::string& _s = this_._internal_country_of_risk_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Instrument.country_of_risk_name");
            target = stream->WriteStringMaybeAliased(17, _s, target);
          }

          // string instrument_type = 18;
          if (!this_._internal_instrument_type().empty()) {
            const std::string& _s = this_._internal_instrument_type();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Instrument.instrument_type");
            target = stream->WriteStringMaybeAliased(18, _s, target);
          }

          // .tinkoff.public.invest.api.contract.v1.SecurityTradingStatus trading_status = 19;
          if (this_._internal_trading_status() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                19, this_._internal_trading_status(), target);
          }

          // bool otc_flag = 20;
          if (this_._internal_otc_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                20, this_._internal_otc_flag(), target);
          }

          // bool buy_available_flag = 21;
          if (this_._internal_buy_available_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                21, this_._internal_buy_available_flag(), target);
          }

          // bool sell_available_flag = 22;
          if (this_._internal_sell_available_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                22, this_._internal_sell_available_flag(), target);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation min_price_increment = 23;
          if (cached_has_bits & 0x00000040u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                23, *this_._impl_.min_price_increment_, this_._impl_.min_price_increment_->GetCachedSize(), target,
                stream);
          }

          // bool api_trade_available_flag = 24;
          if (this_._internal_api_trade_available_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                24, this_._internal_api_trade_available_flag(), target);
          }

          // string uid = 25;
          if (!this_._internal_uid().empty()) {
            const std::string& _s = this_._internal_uid();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Instrument.uid");
            target = stream->WriteStringMaybeAliased(25, _s, target);
          }

          // .tinkoff.public.invest.api.contract.v1.RealExchange real_exchange = 26;
          if (this_._internal_real_exchange() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                26, this_._internal_real_exchange(), target);
          }

          // string position_uid = 27;
          if (!this_._internal_position_uid().empty()) {
            const std::string& _s = this_._internal_position_uid();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Instrument.position_uid");
            target = stream->WriteStringMaybeAliased(27, _s, target);
          }

          // string asset_uid = 28;
          if (!this_._internal_asset_uid().empty()) {
            const std::string& _s = this_._internal_asset_uid();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Instrument.asset_uid");
            target = stream->WriteStringMaybeAliased(28, _s, target);
          }

          // bool for_iis_flag = 36;
          if (this_._internal_for_iis_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                36, this_._internal_for_iis_flag(), target);
          }

          // bool for_qual_investor_flag = 37;
          if (this_._internal_for_qual_investor_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                37, this_._internal_for_qual_investor_flag(), target);
          }

          // bool weekend_flag = 38;
          if (this_._internal_weekend_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                38, this_._internal_weekend_flag(), target);
          }

          // bool blocked_tca_flag = 39;
          if (this_._internal_blocked_tca_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                39, this_._internal_blocked_tca_flag(), target);
          }

          // .tinkoff.public.invest.api.contract.v1.InstrumentType instrument_kind = 40;
          if (this_._internal_instrument_kind() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                40, this_._internal_instrument_kind(), target);
          }

          // .google.protobuf.Timestamp first_1min_candle_date = 56;
          if (cached_has_bits & 0x00000080u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                56, *this_._impl_.first_1min_candle_date_, this_._impl_.first_1min_candle_date_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Timestamp first_1day_candle_date = 57;
          if (cached_has_bits & 0x00000100u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                57, *this_._impl_.first_1day_candle_date_, this_._impl_.first_1day_candle_date_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.BrandData brand = 60;
          if (cached_has_bits & 0x00000200u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                60, *this_._impl_.brand_, this_._impl_.brand_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation dlong_client = 490;
          if (cached_has_bits & 0x00000400u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                490, *this_._impl_.dlong_client_, this_._impl_.dlong_client_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation dshort_client = 491;
          if (cached_has_bits & 0x00000800u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                491, *this_._impl_.dshort_client_, this_._impl_.dshort_client_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.Instrument)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Instrument::ByteSizeLong(const MessageLite& base) {
          const Instrument& this_ = static_cast<const Instrument&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Instrument::ByteSizeLong() const {
          const Instrument& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.Instrument)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string figi = 1;
            if (!this_._internal_figi().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_figi());
            }
            // string ticker = 2;
            if (!this_._internal_ticker().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_ticker());
            }
            // string class_code = 3;
            if (!this_._internal_class_code().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_class_code());
            }
            // string isin = 4;
            if (!this_._internal_isin().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_isin());
            }
            // string currency = 6;
            if (!this_._internal_currency().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_currency());
            }
            // string name = 14;
            if (!this_._internal_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_name());
            }
            // string exchange = 15;
            if (!this_._internal_exchange().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_exchange());
            }
            // string country_of_risk = 16;
            if (!this_._internal_country_of_risk().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_country_of_risk());
            }
            // string country_of_risk_name = 17;
            if (!this_._internal_country_of_risk_name().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_country_of_risk_name());
            }
            // string instrument_type = 18;
            if (!this_._internal_instrument_type().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_instrument_type());
            }
            // string uid = 25;
            if (!this_._internal_uid().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_uid());
            }
            // string position_uid = 27;
            if (!this_._internal_position_uid().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_position_uid());
            }
            // string asset_uid = 28;
            if (!this_._internal_asset_uid().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_asset_uid());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x000000ffu) {
            // .tinkoff.public.invest.api.contract.v1.Quotation klong = 7;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.klong_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation kshort = 8;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.kshort_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation dlong = 9;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.dlong_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation dshort = 10;
            if (cached_has_bits & 0x00000008u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.dshort_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation dlong_min = 11;
            if (cached_has_bits & 0x00000010u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.dlong_min_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation dshort_min = 12;
            if (cached_has_bits & 0x00000020u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.dshort_min_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation min_price_increment = 23;
            if (cached_has_bits & 0x00000040u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.min_price_increment_);
            }
            // .google.protobuf.Timestamp first_1min_candle_date = 56;
            if (cached_has_bits & 0x00000080u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.first_1min_candle_date_);
            }
          }
          if (cached_has_bits & 0x00000f00u) {
            // .google.protobuf.Timestamp first_1day_candle_date = 57;
            if (cached_has_bits & 0x00000100u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.first_1day_candle_date_);
            }
            // .tinkoff.public.invest.api.contract.v1.BrandData brand = 60;
            if (cached_has_bits & 0x00000200u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.brand_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation dlong_client = 490;
            if (cached_has_bits & 0x00000400u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.dlong_client_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation dshort_client = 491;
            if (cached_has_bits & 0x00000800u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.dshort_client_);
            }
          }
           {
            // int32 lot = 5;
            if (this_._internal_lot() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_lot());
            }
            // .tinkoff.public.invest.api.contract.v1.SecurityTradingStatus trading_status = 19;
            if (this_._internal_trading_status() != 0) {
              total_size += 2 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_trading_status());
            }
            // bool short_enabled_flag = 13;
            if (this_._internal_short_enabled_flag() != 0) {
              total_size += 2;
            }
            // bool otc_flag = 20;
            if (this_._internal_otc_flag() != 0) {
              total_size += 3;
            }
            // bool buy_available_flag = 21;
            if (this_._internal_buy_available_flag() != 0) {
              total_size += 3;
            }
            // bool sell_available_flag = 22;
            if (this_._internal_sell_available_flag() != 0) {
              total_size += 3;
            }
            // .tinkoff.public.invest.api.contract.v1.RealExchange real_exchange = 26;
            if (this_._internal_real_exchange() != 0) {
              total_size += 2 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_real_exchange());
            }
            // bool api_trade_available_flag = 24;
            if (this_._internal_api_trade_available_flag() != 0) {
              total_size += 3;
            }
            // bool for_iis_flag = 36;
            if (this_._internal_for_iis_flag() != 0) {
              total_size += 3;
            }
            // bool for_qual_investor_flag = 37;
            if (this_._internal_for_qual_investor_flag() != 0) {
              total_size += 3;
            }
            // bool weekend_flag = 38;
            if (this_._internal_weekend_flag() != 0) {
              total_size += 3;
            }
            // bool blocked_tca_flag = 39;
            if (this_._internal_blocked_tca_flag() != 0) {
              total_size += 3;
            }
            // .tinkoff.public.invest.api.contract.v1.InstrumentType instrument_kind = 40;
            if (this_._internal_instrument_kind() != 0) {
              total_size += 2 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_instrument_kind());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Instrument::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Instrument*>(&to_msg);
  auto& from = static_cast<const Instrument&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.Instrument)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_ticker().empty()) {
    _this->_internal_set_ticker(from._internal_ticker());
  }
  if (!from._internal_class_code().empty()) {
    _this->_internal_set_class_code(from._internal_class_code());
  }
  if (!from._internal_isin().empty()) {
    _this->_internal_set_isin(from._internal_isin());
  }
  if (!from._internal_currency().empty()) {
    _this->_internal_set_currency(from._internal_currency());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_exchange().empty()) {
    _this->_internal_set_exchange(from._internal_exchange());
  }
  if (!from._internal_country_of_risk().empty()) {
    _this->_internal_set_country_of_risk(from._internal_country_of_risk());
  }
  if (!from._internal_country_of_risk_name().empty()) {
    _this->_internal_set_country_of_risk_name(from._internal_country_of_risk_name());
  }
  if (!from._internal_instrument_type().empty()) {
    _this->_internal_set_instrument_type(from._internal_instrument_type());
  }
  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (!from._internal_position_uid().empty()) {
    _this->_internal_set_position_uid(from._internal_position_uid());
  }
  if (!from._internal_asset_uid().empty()) {
    _this->_internal_set_asset_uid(from._internal_asset_uid());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.klong_ != nullptr);
      if (_this->_impl_.klong_ == nullptr) {
        _this->_impl_.klong_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.klong_);
      } else {
        _this->_impl_.klong_->MergeFrom(*from._impl_.klong_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.kshort_ != nullptr);
      if (_this->_impl_.kshort_ == nullptr) {
        _this->_impl_.kshort_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.kshort_);
      } else {
        _this->_impl_.kshort_->MergeFrom(*from._impl_.kshort_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.dlong_ != nullptr);
      if (_this->_impl_.dlong_ == nullptr) {
        _this->_impl_.dlong_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.dlong_);
      } else {
        _this->_impl_.dlong_->MergeFrom(*from._impl_.dlong_);
      }
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(from._impl_.dshort_ != nullptr);
      if (_this->_impl_.dshort_ == nullptr) {
        _this->_impl_.dshort_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.dshort_);
      } else {
        _this->_impl_.dshort_->MergeFrom(*from._impl_.dshort_);
      }
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(from._impl_.dlong_min_ != nullptr);
      if (_this->_impl_.dlong_min_ == nullptr) {
        _this->_impl_.dlong_min_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.dlong_min_);
      } else {
        _this->_impl_.dlong_min_->MergeFrom(*from._impl_.dlong_min_);
      }
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(from._impl_.dshort_min_ != nullptr);
      if (_this->_impl_.dshort_min_ == nullptr) {
        _this->_impl_.dshort_min_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.dshort_min_);
      } else {
        _this->_impl_.dshort_min_->MergeFrom(*from._impl_.dshort_min_);
      }
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(from._impl_.min_price_increment_ != nullptr);
      if (_this->_impl_.min_price_increment_ == nullptr) {
        _this->_impl_.min_price_increment_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.min_price_increment_);
      } else {
        _this->_impl_.min_price_increment_->MergeFrom(*from._impl_.min_price_increment_);
      }
    }
    if (cached_has_bits & 0x00000080u) {
      ABSL_DCHECK(from._impl_.first_1min_candle_date_ != nullptr);
      if (_this->_impl_.first_1min_candle_date_ == nullptr) {
        _this->_impl_.first_1min_candle_date_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.first_1min_candle_date_);
      } else {
        _this->_impl_.first_1min_candle_date_->MergeFrom(*from._impl_.first_1min_candle_date_);
      }
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      ABSL_DCHECK(from._impl_.first_1day_candle_date_ != nullptr);
      if (_this->_impl_.first_1day_candle_date_ == nullptr) {
        _this->_impl_.first_1day_candle_date_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.first_1day_candle_date_);
      } else {
        _this->_impl_.first_1day_candle_date_->MergeFrom(*from._impl_.first_1day_candle_date_);
      }
    }
    if (cached_has_bits & 0x00000200u) {
      ABSL_DCHECK(from._impl_.brand_ != nullptr);
      if (_this->_impl_.brand_ == nullptr) {
        _this->_impl_.brand_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::BrandData>(arena, *from._impl_.brand_);
      } else {
        _this->_impl_.brand_->MergeFrom(*from._impl_.brand_);
      }
    }
    if (cached_has_bits & 0x00000400u) {
      ABSL_DCHECK(from._impl_.dlong_client_ != nullptr);
      if (_this->_impl_.dlong_client_ == nullptr) {
        _this->_impl_.dlong_client_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.dlong_client_);
      } else {
        _this->_impl_.dlong_client_->MergeFrom(*from._impl_.dlong_client_);
      }
    }
    if (cached_has_bits & 0x00000800u) {
      ABSL_DCHECK(from._impl_.dshort_client_ != nullptr);
      if (_this->_impl_.dshort_client_ == nullptr) {
        _this->_impl_.dshort_client_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.dshort_client_);
      } else {
        _this->_impl_.dshort_client_->MergeFrom(*from._impl_.dshort_client_);
      }
    }
  }
  if (from._internal_lot() != 0) {
    _this->_impl_.lot_ = from._impl_.lot_;
  }
  if (from._internal_trading_status() != 0) {
    _this->_impl_.trading_status_ = from._impl_.trading_status_;
  }
  if (from._internal_short_enabled_flag() != 0) {
    _this->_impl_.short_enabled_flag_ = from._impl_.short_enabled_flag_;
  }
  if (from._internal_otc_flag() != 0) {
    _this->_impl_.otc_flag_ = from._impl_.otc_flag_;
  }
  if (from._internal_buy_available_flag() != 0) {
    _this->_impl_.buy_available_flag_ = from._impl_.buy_available_flag_;
  }
  if (from._internal_sell_available_flag() != 0) {
    _this->_impl_.sell_available_flag_ = from._impl_.sell_available_flag_;
  }
  if (from._internal_real_exchange() != 0) {
    _this->_impl_.real_exchange_ = from._impl_.real_exchange_;
  }
  if (from._internal_api_trade_available_flag() != 0) {
    _this->_impl_.api_trade_available_flag_ = from._impl_.api_trade_available_flag_;
  }
  if (from._internal_for_iis_flag() != 0) {
    _this->_impl_.for_iis_flag_ = from._impl_.for_iis_flag_;
  }
  if (from._internal_for_qual_investor_flag() != 0) {
    _this->_impl_.for_qual_investor_flag_ = from._impl_.for_qual_investor_flag_;
  }
  if (from._internal_weekend_flag() != 0) {
    _this->_impl_.weekend_flag_ = from._impl_.weekend_flag_;
  }
  if (from._internal_blocked_tca_flag() != 0) {
    _this->_impl_.blocked_tca_flag_ = from._impl_.blocked_tca_flag_;
  }
  if (from._internal_instrument_kind() != 0) {
    _this->_impl_.instrument_kind_ = from._impl_.instrument_kind_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Instrument::CopyFrom(const Instrument& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.Instrument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Instrument::InternalSwap(Instrument* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.figi_, &other->_impl_.figi_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ticker_, &other->_impl_.ticker_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.class_code_, &other->_impl_.class_code_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.isin_, &other->_impl_.isin_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.currency_, &other->_impl_.currency_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.exchange_, &other->_impl_.exchange_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.country_of_risk_, &other->_impl_.country_of_risk_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.country_of_risk_name_, &other->_impl_.country_of_risk_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.instrument_type_, &other->_impl_.instrument_type_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.uid_, &other->_impl_.uid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.position_uid_, &other->_impl_.position_uid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.asset_uid_, &other->_impl_.asset_uid_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Instrument, _impl_.instrument_kind_)
      + sizeof(Instrument::_impl_.instrument_kind_)
      - PROTOBUF_FIELD_OFFSET(Instrument, _impl_.klong_)>(
          reinterpret_cast<char*>(&_impl_.klong_),
          reinterpret_cast<char*>(&other->_impl_.klong_));
}

::google::protobuf::Metadata Instrument::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GetDividendsRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GetDividendsRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GetDividendsRequest, _impl_._has_bits_);
};

void GetDividendsRequest::clear_from() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.from_ != nullptr) _impl_.from_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GetDividendsRequest::clear_to() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.to_ != nullptr) _impl_.to_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
GetDividendsRequest::GetDividendsRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.GetDividendsRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetDividendsRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::GetDividendsRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        figi_(arena, from.figi_),
        instrument_id_(arena, from.instrument_id_) {}

GetDividendsRequest::GetDividendsRequest(
    ::google::protobuf::Arena* arena,
    const GetDividendsRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GetDividendsRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.from_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.from_)
                        : nullptr;
  _impl_.to_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.to_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.GetDividendsRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetDividendsRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        figi_(arena),
        instrument_id_(arena) {}

inline void GetDividendsRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, from_),
           0,
           offsetof(Impl_, to_) -
               offsetof(Impl_, from_) +
               sizeof(Impl_::to_));
}
GetDividendsRequest::~GetDividendsRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.GetDividendsRequest)
  SharedDtor(*this);
}
inline void GetDividendsRequest::SharedDtor(MessageLite& self) {
  GetDividendsRequest& this_ = static_cast<GetDividendsRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.figi_.Destroy();
  this_._impl_.instrument_id_.Destroy();
  delete this_._impl_.from_;
  delete this_._impl_.to_;
  this_._impl_.~Impl_();
}

inline void* GetDividendsRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) GetDividendsRequest(arena);
}
constexpr auto GetDividendsRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(GetDividendsRequest),
                                            alignof(GetDividendsRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull GetDividendsRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_GetDividendsRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &GetDividendsRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<GetDividendsRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &GetDividendsRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<GetDividendsRequest>(), &GetDividendsRequest::ByteSizeLong,
            &GetDividendsRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(GetDividendsRequest, _impl_._cached_size_),
        false,
    },
    &GetDividendsRequest::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* GetDividendsRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 2, 83, 2> GetDividendsRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetDividendsRequest, _impl_._has_bits_),
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::GetDividendsRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string instrument_id = 4 [(.google.api.field_behavior) = REQUIRED];
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(GetDividendsRequest, _impl_.instrument_id_)}},
    // string figi = 1 [deprecated = true];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetDividendsRequest, _impl_.figi_)}},
    // optional .google.protobuf.Timestamp from = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(GetDividendsRequest, _impl_.from_)}},
    // optional .google.protobuf.Timestamp to = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 1, PROTOBUF_FIELD_OFFSET(GetDividendsRequest, _impl_.to_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string figi = 1 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(GetDividendsRequest, _impl_.figi_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional .google.protobuf.Timestamp from = 2;
    {PROTOBUF_FIELD_OFFSET(GetDividendsRequest, _impl_.from_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .google.protobuf.Timestamp to = 3;
    {PROTOBUF_FIELD_OFFSET(GetDividendsRequest, _impl_.to_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string instrument_id = 4 [(.google.api.field_behavior) = REQUIRED];
    {PROTOBUF_FIELD_OFFSET(GetDividendsRequest, _impl_.instrument_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\71\4\0\0\15\0\0\0"
    "tinkoff.public.invest.api.contract.v1.GetDividendsRequest"
    "figi"
    "instrument_id"
  }},
};

PROTOBUF_NOINLINE void GetDividendsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.GetDividendsRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.figi_.ClearToEmpty();
  _impl_.instrument_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.from_ != nullptr);
      _impl_.from_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.to_ != nullptr);
      _impl_.to_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GetDividendsRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GetDividendsRequest& this_ = static_cast<const GetDividendsRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GetDividendsRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GetDividendsRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.GetDividendsRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string figi = 1 [deprecated = true];
          if (!this_._internal_figi().empty()) {
            const std::string& _s = this_._internal_figi();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.GetDividendsRequest.figi");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // optional .google.protobuf.Timestamp from = 2;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.from_, this_._impl_.from_->GetCachedSize(), target,
                stream);
          }

          // optional .google.protobuf.Timestamp to = 3;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.to_, this_._impl_.to_->GetCachedSize(), target,
                stream);
          }

          // string instrument_id = 4 [(.google.api.field_behavior) = REQUIRED];
          if (!this_._internal_instrument_id().empty()) {
            const std::string& _s = this_._internal_instrument_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.GetDividendsRequest.instrument_id");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.GetDividendsRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GetDividendsRequest::ByteSizeLong(const MessageLite& base) {
          const GetDividendsRequest& this_ = static_cast<const GetDividendsRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GetDividendsRequest::ByteSizeLong() const {
          const GetDividendsRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.GetDividendsRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string figi = 1 [deprecated = true];
            if (!this_._internal_figi().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_figi());
            }
            // string instrument_id = 4 [(.google.api.field_behavior) = REQUIRED];
            if (!this_._internal_instrument_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_instrument_id());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // optional .google.protobuf.Timestamp from = 2;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.from_);
            }
            // optional .google.protobuf.Timestamp to = 3;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.to_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GetDividendsRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GetDividendsRequest*>(&to_msg);
  auto& from = static_cast<const GetDividendsRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.GetDividendsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_instrument_id().empty()) {
    _this->_internal_set_instrument_id(from._internal_instrument_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.from_ != nullptr);
      if (_this->_impl_.from_ == nullptr) {
        _this->_impl_.from_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.from_);
      } else {
        _this->_impl_.from_->MergeFrom(*from._impl_.from_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.to_ != nullptr);
      if (_this->_impl_.to_ == nullptr) {
        _this->_impl_.to_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.to_);
      } else {
        _this->_impl_.to_->MergeFrom(*from._impl_.to_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetDividendsRequest::CopyFrom(const GetDividendsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.GetDividendsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GetDividendsRequest::InternalSwap(GetDividendsRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.figi_, &other->_impl_.figi_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.instrument_id_, &other->_impl_.instrument_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetDividendsRequest, _impl_.to_)
      + sizeof(GetDividendsRequest::_impl_.to_)
      - PROTOBUF_FIELD_OFFSET(GetDividendsRequest, _impl_.from_)>(
          reinterpret_cast<char*>(&_impl_.from_),
          reinterpret_cast<char*>(&other->_impl_.from_));
}

::google::protobuf::Metadata GetDividendsRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GetDividendsResponse::_Internal {
 public:
};

GetDividendsResponse::GetDividendsResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.GetDividendsResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetDividendsResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::GetDividendsResponse& from_msg)
      : dividends_{visibility, arena, from.dividends_},
        _cached_size_{0} {}

GetDividendsResponse::GetDividendsResponse(
    ::google::protobuf::Arena* arena,
    const GetDividendsResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GetDividendsResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.GetDividendsResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetDividendsResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : dividends_{visibility, arena},
        _cached_size_{0} {}

inline void GetDividendsResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
GetDividendsResponse::~GetDividendsResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.GetDividendsResponse)
  SharedDtor(*this);
}
inline void GetDividendsResponse::SharedDtor(MessageLite& self) {
  GetDividendsResponse& this_ = static_cast<GetDividendsResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* GetDividendsResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) GetDividendsResponse(arena);
}
constexpr auto GetDividendsResponse::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(GetDividendsResponse, _impl_.dividends_) +
          decltype(GetDividendsResponse::_impl_.dividends_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(GetDividendsResponse), alignof(GetDividendsResponse), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&GetDividendsResponse::PlacementNew_,
                                 sizeof(GetDividendsResponse),
                                 alignof(GetDividendsResponse));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull GetDividendsResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_GetDividendsResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &GetDividendsResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<GetDividendsResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &GetDividendsResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<GetDividendsResponse>(), &GetDividendsResponse::ByteSizeLong,
            &GetDividendsResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(GetDividendsResponse, _impl_._cached_size_),
        false,
    },
    &GetDividendsResponse::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* GetDividendsResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> GetDividendsResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::GetDividendsResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .tinkoff.public.invest.api.contract.v1.Dividend dividends = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetDividendsResponse, _impl_.dividends_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .tinkoff.public.invest.api.contract.v1.Dividend dividends = 1;
    {PROTOBUF_FIELD_OFFSET(GetDividendsResponse, _impl_.dividends_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Dividend>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void GetDividendsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.GetDividendsResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dividends_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GetDividendsResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GetDividendsResponse& this_ = static_cast<const GetDividendsResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GetDividendsResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GetDividendsResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.GetDividendsResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .tinkoff.public.invest.api.contract.v1.Dividend dividends = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_dividends_size());
               i < n; i++) {
            const auto& repfield = this_._internal_dividends().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.GetDividendsResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GetDividendsResponse::ByteSizeLong(const MessageLite& base) {
          const GetDividendsResponse& this_ = static_cast<const GetDividendsResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GetDividendsResponse::ByteSizeLong() const {
          const GetDividendsResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.GetDividendsResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .tinkoff.public.invest.api.contract.v1.Dividend dividends = 1;
            {
              total_size += 1UL * this_._internal_dividends_size();
              for (const auto& msg : this_._internal_dividends()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GetDividendsResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GetDividendsResponse*>(&to_msg);
  auto& from = static_cast<const GetDividendsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.GetDividendsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_dividends()->MergeFrom(
      from._internal_dividends());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetDividendsResponse::CopyFrom(const GetDividendsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.GetDividendsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GetDividendsResponse::InternalSwap(GetDividendsResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.dividends_.InternalSwap(&other->_impl_.dividends_);
}

::google::protobuf::Metadata GetDividendsResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Dividend::_Internal {
 public:
  using HasBits =
      decltype(std::declval<Dividend>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(Dividend, _impl_._has_bits_);
};

void Dividend::clear_dividend_net() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.dividend_net_ != nullptr) _impl_.dividend_net_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void Dividend::clear_payment_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.payment_date_ != nullptr) _impl_.payment_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void Dividend::clear_declared_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.declared_date_ != nullptr) _impl_.declared_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void Dividend::clear_last_buy_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.last_buy_date_ != nullptr) _impl_.last_buy_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void Dividend::clear_record_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.record_date_ != nullptr) _impl_.record_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void Dividend::clear_close_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.close_price_ != nullptr) _impl_.close_price_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void Dividend::clear_yield_value() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.yield_value_ != nullptr) _impl_.yield_value_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void Dividend::clear_created_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.created_at_ != nullptr) _impl_.created_at_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
Dividend::Dividend(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.Dividend)
}
inline PROTOBUF_NDEBUG_INLINE Dividend::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::Dividend& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        dividend_type_(arena, from.dividend_type_),
        regularity_(arena, from.regularity_) {}

Dividend::Dividend(
    ::google::protobuf::Arena* arena,
    const Dividend& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Dividend* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.dividend_net_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(
                              arena, *from._impl_.dividend_net_)
                        : nullptr;
  _impl_.payment_date_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.payment_date_)
                        : nullptr;
  _impl_.declared_date_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.declared_date_)
                        : nullptr;
  _impl_.last_buy_date_ = (cached_has_bits & 0x00000008u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.last_buy_date_)
                        : nullptr;
  _impl_.record_date_ = (cached_has_bits & 0x00000010u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.record_date_)
                        : nullptr;
  _impl_.close_price_ = (cached_has_bits & 0x00000020u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(
                              arena, *from._impl_.close_price_)
                        : nullptr;
  _impl_.yield_value_ = (cached_has_bits & 0x00000040u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.yield_value_)
                        : nullptr;
  _impl_.created_at_ = (cached_has_bits & 0x00000080u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.created_at_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.Dividend)
}
inline PROTOBUF_NDEBUG_INLINE Dividend::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        dividend_type_(arena),
        regularity_(arena) {}

inline void Dividend::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, dividend_net_),
           0,
           offsetof(Impl_, created_at_) -
               offsetof(Impl_, dividend_net_) +
               sizeof(Impl_::created_at_));
}
Dividend::~Dividend() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.Dividend)
  SharedDtor(*this);
}
inline void Dividend::SharedDtor(MessageLite& self) {
  Dividend& this_ = static_cast<Dividend&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.dividend_type_.Destroy();
  this_._impl_.regularity_.Destroy();
  delete this_._impl_.dividend_net_;
  delete this_._impl_.payment_date_;
  delete this_._impl_.declared_date_;
  delete this_._impl_.last_buy_date_;
  delete this_._impl_.record_date_;
  delete this_._impl_.close_price_;
  delete this_._impl_.yield_value_;
  delete this_._impl_.created_at_;
  this_._impl_.~Impl_();
}

inline void* Dividend::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Dividend(arena);
}
constexpr auto Dividend::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Dividend),
                                            alignof(Dividend));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Dividend::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Dividend_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Dividend::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Dividend>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Dividend::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Dividend>(), &Dividend::ByteSizeLong,
            &Dividend::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Dividend, _impl_._cached_size_),
        false,
    },
    &Dividend::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Dividend::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 8, 86, 2> Dividend::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(Dividend, _impl_._has_bits_),
    0, // no _extensions_
    10, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966272,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    8,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Dividend>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .tinkoff.public.invest.api.contract.v1.MoneyValue dividend_net = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(Dividend, _impl_.dividend_net_)}},
    // .google.protobuf.Timestamp payment_date = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(Dividend, _impl_.payment_date_)}},
    // .google.protobuf.Timestamp declared_date = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(Dividend, _impl_.declared_date_)}},
    // .google.protobuf.Timestamp last_buy_date = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 3, 3, PROTOBUF_FIELD_OFFSET(Dividend, _impl_.last_buy_date_)}},
    // string dividend_type = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(Dividend, _impl_.dividend_type_)}},
    // .google.protobuf.Timestamp record_date = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 4, 4, PROTOBUF_FIELD_OFFSET(Dividend, _impl_.record_date_)}},
    // string regularity = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(Dividend, _impl_.regularity_)}},
    // .tinkoff.public.invest.api.contract.v1.MoneyValue close_price = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 5, 5, PROTOBUF_FIELD_OFFSET(Dividend, _impl_.close_price_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation yield_value = 9;
    {::_pbi::TcParser::FastMtS1,
     {74, 6, 6, PROTOBUF_FIELD_OFFSET(Dividend, _impl_.yield_value_)}},
    // .google.protobuf.Timestamp created_at = 10;
    {::_pbi::TcParser::FastMtS1,
     {82, 7, 7, PROTOBUF_FIELD_OFFSET(Dividend, _impl_.created_at_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .tinkoff.public.invest.api.contract.v1.MoneyValue dividend_net = 1;
    {PROTOBUF_FIELD_OFFSET(Dividend, _impl_.dividend_net_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp payment_date = 2;
    {PROTOBUF_FIELD_OFFSET(Dividend, _impl_.payment_date_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp declared_date = 3;
    {PROTOBUF_FIELD_OFFSET(Dividend, _impl_.declared_date_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp last_buy_date = 4;
    {PROTOBUF_FIELD_OFFSET(Dividend, _impl_.last_buy_date_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string dividend_type = 5;
    {PROTOBUF_FIELD_OFFSET(Dividend, _impl_.dividend_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Timestamp record_date = 6;
    {PROTOBUF_FIELD_OFFSET(Dividend, _impl_.record_date_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string regularity = 7;
    {PROTOBUF_FIELD_OFFSET(Dividend, _impl_.regularity_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public.invest.api.contract.v1.MoneyValue close_price = 8;
    {PROTOBUF_FIELD_OFFSET(Dividend, _impl_.close_price_), _Internal::kHasBitsOffset + 5, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation yield_value = 9;
    {PROTOBUF_FIELD_OFFSET(Dividend, _impl_.yield_value_), _Internal::kHasBitsOffset + 6, 6,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp created_at = 10;
    {PROTOBUF_FIELD_OFFSET(Dividend, _impl_.created_at_), _Internal::kHasBitsOffset + 7, 7,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::MoneyValue>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::MoneyValue>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\56\0\0\0\0\15\0\12\0\0\0\0\0\0\0\0"
    "tinkoff.public.invest.api.contract.v1.Dividend"
    "dividend_type"
    "regularity"
  }},
};

PROTOBUF_NOINLINE void Dividend::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.Dividend)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.dividend_type_.ClearToEmpty();
  _impl_.regularity_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.dividend_net_ != nullptr);
      _impl_.dividend_net_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.payment_date_ != nullptr);
      _impl_.payment_date_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.declared_date_ != nullptr);
      _impl_.declared_date_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.last_buy_date_ != nullptr);
      _impl_.last_buy_date_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.record_date_ != nullptr);
      _impl_.record_date_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.close_price_ != nullptr);
      _impl_.close_price_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(_impl_.yield_value_ != nullptr);
      _impl_.yield_value_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      ABSL_DCHECK(_impl_.created_at_ != nullptr);
      _impl_.created_at_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Dividend::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Dividend& this_ = static_cast<const Dividend&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Dividend::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Dividend& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.Dividend)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .tinkoff.public.invest.api.contract.v1.MoneyValue dividend_net = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.dividend_net_, this_._impl_.dividend_net_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Timestamp payment_date = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.payment_date_, this_._impl_.payment_date_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Timestamp declared_date = 3;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.declared_date_, this_._impl_.declared_date_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Timestamp last_buy_date = 4;
          if (cached_has_bits & 0x00000008u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                4, *this_._impl_.last_buy_date_, this_._impl_.last_buy_date_->GetCachedSize(), target,
                stream);
          }

          // string dividend_type = 5;
          if (!this_._internal_dividend_type().empty()) {
            const std::string& _s = this_._internal_dividend_type();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Dividend.dividend_type");
            target = stream->WriteStringMaybeAliased(5, _s, target);
          }

          // .google.protobuf.Timestamp record_date = 6;
          if (cached_has_bits & 0x00000010u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                6, *this_._impl_.record_date_, this_._impl_.record_date_->GetCachedSize(), target,
                stream);
          }

          // string regularity = 7;
          if (!this_._internal_regularity().empty()) {
            const std::string& _s = this_._internal_regularity();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Dividend.regularity");
            target = stream->WriteStringMaybeAliased(7, _s, target);
          }

          // .tinkoff.public.invest.api.contract.v1.MoneyValue close_price = 8;
          if (cached_has_bits & 0x00000020u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                8, *this_._impl_.close_price_, this_._impl_.close_price_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation yield_value = 9;
          if (cached_has_bits & 0x00000040u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                9, *this_._impl_.yield_value_, this_._impl_.yield_value_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Timestamp created_at = 10;
          if (cached_has_bits & 0x00000080u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                10, *this_._impl_.created_at_, this_._impl_.created_at_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.Dividend)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Dividend::ByteSizeLong(const MessageLite& base) {
          const Dividend& this_ = static_cast<const Dividend&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Dividend::ByteSizeLong() const {
          const Dividend& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.Dividend)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string dividend_type = 5;
            if (!this_._internal_dividend_type().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_dividend_type());
            }
            // string regularity = 7;
            if (!this_._internal_regularity().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_regularity());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x000000ffu) {
            // .tinkoff.public.invest.api.contract.v1.MoneyValue dividend_net = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.dividend_net_);
            }
            // .google.protobuf.Timestamp payment_date = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.payment_date_);
            }
            // .google.protobuf.Timestamp declared_date = 3;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.declared_date_);
            }
            // .google.protobuf.Timestamp last_buy_date = 4;
            if (cached_has_bits & 0x00000008u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.last_buy_date_);
            }
            // .google.protobuf.Timestamp record_date = 6;
            if (cached_has_bits & 0x00000010u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.record_date_);
            }
            // .tinkoff.public.invest.api.contract.v1.MoneyValue close_price = 8;
            if (cached_has_bits & 0x00000020u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.close_price_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation yield_value = 9;
            if (cached_has_bits & 0x00000040u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.yield_value_);
            }
            // .google.protobuf.Timestamp created_at = 10;
            if (cached_has_bits & 0x00000080u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.created_at_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Dividend::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Dividend*>(&to_msg);
  auto& from = static_cast<const Dividend&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.Dividend)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_dividend_type().empty()) {
    _this->_internal_set_dividend_type(from._internal_dividend_type());
  }
  if (!from._internal_regularity().empty()) {
    _this->_internal_set_regularity(from._internal_regularity());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.dividend_net_ != nullptr);
      if (_this->_impl_.dividend_net_ == nullptr) {
        _this->_impl_.dividend_net_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(arena, *from._impl_.dividend_net_);
      } else {
        _this->_impl_.dividend_net_->MergeFrom(*from._impl_.dividend_net_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.payment_date_ != nullptr);
      if (_this->_impl_.payment_date_ == nullptr) {
        _this->_impl_.payment_date_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.payment_date_);
      } else {
        _this->_impl_.payment_date_->MergeFrom(*from._impl_.payment_date_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.declared_date_ != nullptr);
      if (_this->_impl_.declared_date_ == nullptr) {
        _this->_impl_.declared_date_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.declared_date_);
      } else {
        _this->_impl_.declared_date_->MergeFrom(*from._impl_.declared_date_);
      }
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(from._impl_.last_buy_date_ != nullptr);
      if (_this->_impl_.last_buy_date_ == nullptr) {
        _this->_impl_.last_buy_date_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.last_buy_date_);
      } else {
        _this->_impl_.last_buy_date_->MergeFrom(*from._impl_.last_buy_date_);
      }
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(from._impl_.record_date_ != nullptr);
      if (_this->_impl_.record_date_ == nullptr) {
        _this->_impl_.record_date_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.record_date_);
      } else {
        _this->_impl_.record_date_->MergeFrom(*from._impl_.record_date_);
      }
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(from._impl_.close_price_ != nullptr);
      if (_this->_impl_.close_price_ == nullptr) {
        _this->_impl_.close_price_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::MoneyValue>(arena, *from._impl_.close_price_);
      } else {
        _this->_impl_.close_price_->MergeFrom(*from._impl_.close_price_);
      }
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(from._impl_.yield_value_ != nullptr);
      if (_this->_impl_.yield_value_ == nullptr) {
        _this->_impl_.yield_value_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.yield_value_);
      } else {
        _this->_impl_.yield_value_->MergeFrom(*from._impl_.yield_value_);
      }
    }
    if (cached_has_bits & 0x00000080u) {
      ABSL_DCHECK(from._impl_.created_at_ != nullptr);
      if (_this->_impl_.created_at_ == nullptr) {
        _this->_impl_.created_at_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.created_at_);
      } else {
        _this->_impl_.created_at_->MergeFrom(*from._impl_.created_at_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Dividend::CopyFrom(const Dividend& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.Dividend)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Dividend::InternalSwap(Dividend* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.dividend_type_, &other->_impl_.dividend_type_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.regularity_, &other->_impl_.regularity_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Dividend, _impl_.created_at_)
      + sizeof(Dividend::_impl_.created_at_)
      - PROTOBUF_FIELD_OFFSET(Dividend, _impl_.dividend_net_)>(
          reinterpret_cast<char*>(&_impl_.dividend_net_),
          reinterpret_cast<char*>(&other->_impl_.dividend_net_));
}

::google::protobuf::Metadata Dividend::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AssetRequest::_Internal {
 public:
};

AssetRequest::AssetRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.AssetRequest)
}
inline PROTOBUF_NDEBUG_INLINE AssetRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::AssetRequest& from_msg)
      : id_(arena, from.id_),
        _cached_size_{0} {}

AssetRequest::AssetRequest(
    ::google::protobuf::Arena* arena,
    const AssetRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AssetRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.AssetRequest)
}
inline PROTOBUF_NDEBUG_INLINE AssetRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : id_(arena),
        _cached_size_{0} {}

inline void AssetRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
AssetRequest::~AssetRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.AssetRequest)
  SharedDtor(*this);
}
inline void AssetRequest::SharedDtor(MessageLite& self) {
  AssetRequest& this_ = static_cast<AssetRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.id_.Destroy();
  this_._impl_.~Impl_();
}

inline void* AssetRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) AssetRequest(arena);
}
constexpr auto AssetRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(AssetRequest),
                                            alignof(AssetRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull AssetRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_AssetRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &AssetRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<AssetRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &AssetRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<AssetRequest>(), &AssetRequest::ByteSizeLong,
            &AssetRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(AssetRequest, _impl_._cached_size_),
        false,
    },
    &AssetRequest::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* AssetRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 61, 2> AssetRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::AssetRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string id = 1 [(.google.api.field_behavior) = REQUIRED];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AssetRequest, _impl_.id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string id = 1 [(.google.api.field_behavior) = REQUIRED];
    {PROTOBUF_FIELD_OFFSET(AssetRequest, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\62\2\0\0\0\0\0\0"
    "tinkoff.public.invest.api.contract.v1.AssetRequest"
    "id"
  }},
};

PROTOBUF_NOINLINE void AssetRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.AssetRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* AssetRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const AssetRequest& this_ = static_cast<const AssetRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* AssetRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const AssetRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.AssetRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string id = 1 [(.google.api.field_behavior) = REQUIRED];
          if (!this_._internal_id().empty()) {
            const std::string& _s = this_._internal_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.AssetRequest.id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.AssetRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t AssetRequest::ByteSizeLong(const MessageLite& base) {
          const AssetRequest& this_ = static_cast<const AssetRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t AssetRequest::ByteSizeLong() const {
          const AssetRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.AssetRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // string id = 1 [(.google.api.field_behavior) = REQUIRED];
            if (!this_._internal_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_id());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void AssetRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AssetRequest*>(&to_msg);
  auto& from = static_cast<const AssetRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.AssetRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AssetRequest::CopyFrom(const AssetRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.AssetRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AssetRequest::InternalSwap(AssetRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, &other->_impl_.id_, arena);
}

::google::protobuf::Metadata AssetRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AssetResponse::_Internal {
 public:
  using HasBits =
      decltype(std::declval<AssetResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(AssetResponse, _impl_._has_bits_);
};

AssetResponse::AssetResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.AssetResponse)
}
inline PROTOBUF_NDEBUG_INLINE AssetResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::AssetResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

AssetResponse::AssetResponse(
    ::google::protobuf::Arena* arena,
    const AssetResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AssetResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.asset_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::AssetFull>(
                              arena, *from._impl_.asset_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.AssetResponse)
}
inline PROTOBUF_NDEBUG_INLINE AssetResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void AssetResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.asset_ = {};
}
AssetResponse::~AssetResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.AssetResponse)
  SharedDtor(*this);
}
inline void AssetResponse::SharedDtor(MessageLite& self) {
  AssetResponse& this_ = static_cast<AssetResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.asset_;
  this_._impl_.~Impl_();
}

inline void* AssetResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) AssetResponse(arena);
}
constexpr auto AssetResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(AssetResponse),
                                            alignof(AssetResponse));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull AssetResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_AssetResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &AssetResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<AssetResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &AssetResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<AssetResponse>(), &AssetResponse::ByteSizeLong,
            &AssetResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(AssetResponse, _impl_._cached_size_),
        false,
    },
    &AssetResponse::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* AssetResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> AssetResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AssetResponse, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::AssetResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .tinkoff.public.invest.api.contract.v1.AssetFull asset = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(AssetResponse, _impl_.asset_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .tinkoff.public.invest.api.contract.v1.AssetFull asset = 1;
    {PROTOBUF_FIELD_OFFSET(AssetResponse, _impl_.asset_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::AssetFull>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void AssetResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.AssetResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.asset_ != nullptr);
    _impl_.asset_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* AssetResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const AssetResponse& this_ = static_cast<const AssetResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* AssetResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const AssetResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.AssetResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .tinkoff.public.invest.api.contract.v1.AssetFull asset = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.asset_, this_._impl_.asset_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.AssetResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t AssetResponse::ByteSizeLong(const MessageLite& base) {
          const AssetResponse& this_ = static_cast<const AssetResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t AssetResponse::ByteSizeLong() const {
          const AssetResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.AssetResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .tinkoff.public.invest.api.contract.v1.AssetFull asset = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.asset_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void AssetResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AssetResponse*>(&to_msg);
  auto& from = static_cast<const AssetResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.AssetResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.asset_ != nullptr);
    if (_this->_impl_.asset_ == nullptr) {
      _this->_impl_.asset_ =
          ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::AssetFull>(arena, *from._impl_.asset_);
    } else {
      _this->_impl_.asset_->MergeFrom(*from._impl_.asset_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AssetResponse::CopyFrom(const AssetResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.AssetResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AssetResponse::InternalSwap(AssetResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.asset_, other->_impl_.asset_);
}

::google::protobuf::Metadata AssetResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AssetsRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<AssetsRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(AssetsRequest, _impl_._has_bits_);
};

AssetsRequest::AssetsRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.AssetsRequest)
}
AssetsRequest::AssetsRequest(
    ::google::protobuf::Arena* arena, const AssetsRequest& from)
    : AssetsRequest(arena) {
  MergeFrom(from);
}
inline PROTOBUF_NDEBUG_INLINE AssetsRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void AssetsRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, instrument_type_),
           0,
           offsetof(Impl_, instrument_status_) -
               offsetof(Impl_, instrument_type_) +
               sizeof(Impl_::instrument_status_));
}
AssetsRequest::~AssetsRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.AssetsRequest)
  SharedDtor(*this);
}
inline void AssetsRequest::SharedDtor(MessageLite& self) {
  AssetsRequest& this_ = static_cast<AssetsRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* AssetsRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) AssetsRequest(arena);
}
constexpr auto AssetsRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(AssetsRequest),
                                            alignof(AssetsRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull AssetsRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_AssetsRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &AssetsRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<AssetsRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &AssetsRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<AssetsRequest>(), &AssetsRequest::ByteSizeLong,
            &AssetsRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(AssetsRequest, _impl_._cached_size_),
        false,
    },
    &AssetsRequest::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* AssetsRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 0, 2> AssetsRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AssetsRequest, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::AssetsRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional .tinkoff.public.invest.api.contract.v1.InstrumentStatus instrument_status = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AssetsRequest, _impl_.instrument_status_), 1>(),
     {16, 1, 0, PROTOBUF_FIELD_OFFSET(AssetsRequest, _impl_.instrument_status_)}},
    // optional .tinkoff.public.invest.api.contract.v1.InstrumentType instrument_type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AssetsRequest, _impl_.instrument_type_), 0>(),
     {8, 0, 0, PROTOBUF_FIELD_OFFSET(AssetsRequest, _impl_.instrument_type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .tinkoff.public.invest.api.contract.v1.InstrumentType instrument_type = 1;
    {PROTOBUF_FIELD_OFFSET(AssetsRequest, _impl_.instrument_type_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // optional .tinkoff.public.invest.api.contract.v1.InstrumentStatus instrument_status = 2;
    {PROTOBUF_FIELD_OFFSET(AssetsRequest, _impl_.instrument_status_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
  }},
};

PROTOBUF_NOINLINE void AssetsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.AssetsRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.instrument_type_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.instrument_status_) -
        reinterpret_cast<char*>(&_impl_.instrument_type_)) + sizeof(_impl_.instrument_status_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* AssetsRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const AssetsRequest& this_ = static_cast<const AssetsRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* AssetsRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const AssetsRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.AssetsRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // optional .tinkoff.public.invest.api.contract.v1.InstrumentType instrument_type = 1;
          if (cached_has_bits & 0x00000001u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_instrument_type(), target);
          }

          // optional .tinkoff.public.invest.api.contract.v1.InstrumentStatus instrument_status = 2;
          if (cached_has_bits & 0x00000002u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                2, this_._internal_instrument_status(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.AssetsRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t AssetsRequest::ByteSizeLong(const MessageLite& base) {
          const AssetsRequest& this_ = static_cast<const AssetsRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t AssetsRequest::ByteSizeLong() const {
          const AssetsRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.AssetsRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // optional .tinkoff.public.invest.api.contract.v1.InstrumentType instrument_type = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_instrument_type());
            }
            // optional .tinkoff.public.invest.api.contract.v1.InstrumentStatus instrument_status = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_instrument_status());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void AssetsRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AssetsRequest*>(&to_msg);
  auto& from = static_cast<const AssetsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.AssetsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.instrument_type_ = from._impl_.instrument_type_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.instrument_status_ = from._impl_.instrument_status_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AssetsRequest::CopyFrom(const AssetsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.AssetsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AssetsRequest::InternalSwap(AssetsRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AssetsRequest, _impl_.instrument_status_)
      + sizeof(AssetsRequest::_impl_.instrument_status_)
      - PROTOBUF_FIELD_OFFSET(AssetsRequest, _impl_.instrument_type_)>(
          reinterpret_cast<char*>(&_impl_.instrument_type_),
          reinterpret_cast<char*>(&other->_impl_.instrument_type_));
}

::google::protobuf::Metadata AssetsRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AssetsResponse::_Internal {
 public:
};

AssetsResponse::AssetsResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.AssetsResponse)
}
inline PROTOBUF_NDEBUG_INLINE AssetsResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::AssetsResponse& from_msg)
      : assets_{visibility, arena, from.assets_},
        _cached_size_{0} {}

AssetsResponse::AssetsResponse(
    ::google::protobuf::Arena* arena,
    const AssetsResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AssetsResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.AssetsResponse)
}
inline PROTOBUF_NDEBUG_INLINE AssetsResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : assets_{visibility, arena},
        _cached_size_{0} {}

inline void AssetsResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
AssetsResponse::~AssetsResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.AssetsResponse)
  SharedDtor(*this);
}
inline void AssetsResponse::SharedDtor(MessageLite& self) {
  AssetsResponse& this_ = static_cast<AssetsResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* AssetsResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) AssetsResponse(arena);
}
constexpr auto AssetsResponse::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(AssetsResponse, _impl_.assets_) +
          decltype(AssetsResponse::_impl_.assets_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(AssetsResponse), alignof(AssetsResponse), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&AssetsResponse::PlacementNew_,
                                 sizeof(AssetsResponse),
                                 alignof(AssetsResponse));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull AssetsResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_AssetsResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &AssetsResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<AssetsResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &AssetsResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<AssetsResponse>(), &AssetsResponse::ByteSizeLong,
            &AssetsResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(AssetsResponse, _impl_._cached_size_),
        false,
    },
    &AssetsResponse::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* AssetsResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> AssetsResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::AssetsResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .tinkoff.public.invest.api.contract.v1.Asset assets = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AssetsResponse, _impl_.assets_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .tinkoff.public.invest.api.contract.v1.Asset assets = 1;
    {PROTOBUF_FIELD_OFFSET(AssetsResponse, _impl_.assets_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Asset>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void AssetsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.AssetsResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.assets_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* AssetsResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const AssetsResponse& this_ = static_cast<const AssetsResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* AssetsResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const AssetsResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.AssetsResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .tinkoff.public.invest.api.contract.v1.Asset assets = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_assets_size());
               i < n; i++) {
            const auto& repfield = this_._internal_assets().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.AssetsResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t AssetsResponse::ByteSizeLong(const MessageLite& base) {
          const AssetsResponse& this_ = static_cast<const AssetsResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t AssetsResponse::ByteSizeLong() const {
          const AssetsResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.AssetsResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .tinkoff.public.invest.api.contract.v1.Asset assets = 1;
            {
              total_size += 1UL * this_._internal_assets_size();
              for (const auto& msg : this_._internal_assets()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void AssetsResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AssetsResponse*>(&to_msg);
  auto& from = static_cast<const AssetsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.AssetsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_assets()->MergeFrom(
      from._internal_assets());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AssetsResponse::CopyFrom(const AssetsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.AssetsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AssetsResponse::InternalSwap(AssetsResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.assets_.InternalSwap(&other->_impl_.assets_);
}

::google::protobuf::Metadata AssetsResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AssetFull::_Internal {
 public:
  using HasBits =
      decltype(std::declval<AssetFull>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(AssetFull, _impl_._has_bits_);
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetFull, _impl_._oneof_case_);
};

void AssetFull::clear_deleted_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.deleted_at_ != nullptr) _impl_.deleted_at_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void AssetFull::set_allocated_currency(::tinkoff::public_::invest::api::contract::v1::AssetCurrency* currency) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_ext();
  if (currency) {
    ::google::protobuf::Arena* submessage_arena = currency->GetArena();
    if (message_arena != submessage_arena) {
      currency = ::google::protobuf::internal::GetOwnedMessage(message_arena, currency, submessage_arena);
    }
    set_has_currency();
    _impl_.ext_.currency_ = currency;
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.AssetFull.currency)
}
void AssetFull::set_allocated_security(::tinkoff::public_::invest::api::contract::v1::AssetSecurity* security) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_ext();
  if (security) {
    ::google::protobuf::Arena* submessage_arena = security->GetArena();
    if (message_arena != submessage_arena) {
      security = ::google::protobuf::internal::GetOwnedMessage(message_arena, security, submessage_arena);
    }
    set_has_security();
    _impl_.ext_.security_ = security;
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.AssetFull.security)
}
void AssetFull::clear_updated_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.updated_at_ != nullptr) _impl_.updated_at_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
AssetFull::AssetFull(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.AssetFull)
}
inline PROTOBUF_NDEBUG_INLINE AssetFull::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::AssetFull& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        required_tests_{visibility, arena, from.required_tests_},
        instruments_{visibility, arena, from.instruments_},
        uid_(arena, from.uid_),
        name_(arena, from.name_),
        name_brief_(arena, from.name_brief_),
        description_(arena, from.description_),
        gos_reg_code_(arena, from.gos_reg_code_),
        cfi_(arena, from.cfi_),
        code_nsd_(arena, from.code_nsd_),
        status_(arena, from.status_),
        br_code_(arena, from.br_code_),
        br_code_name_(arena, from.br_code_name_),
        ext_{},
        _oneof_case_{from._oneof_case_[0]} {}

AssetFull::AssetFull(
    ::google::protobuf::Arena* arena,
    const AssetFull& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AssetFull* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.deleted_at_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.deleted_at_)
                        : nullptr;
  _impl_.brand_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Brand>(
                              arena, *from._impl_.brand_)
                        : nullptr;
  _impl_.updated_at_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.updated_at_)
                        : nullptr;
  _impl_.type_ = from._impl_.type_;
  switch (ext_case()) {
    case EXT_NOT_SET:
      break;
      case kCurrency:
        _impl_.ext_.currency_ = ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::AssetCurrency>(arena, *from._impl_.ext_.currency_);
        break;
      case kSecurity:
        _impl_.ext_.security_ = ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::AssetSecurity>(arena, *from._impl_.ext_.security_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.AssetFull)
}
inline PROTOBUF_NDEBUG_INLINE AssetFull::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        required_tests_{visibility, arena},
        instruments_{visibility, arena},
        uid_(arena),
        name_(arena),
        name_brief_(arena),
        description_(arena),
        gos_reg_code_(arena),
        cfi_(arena),
        code_nsd_(arena),
        status_(arena),
        br_code_(arena),
        br_code_name_(arena),
        ext_{},
        _oneof_case_{} {}

inline void AssetFull::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, deleted_at_),
           0,
           offsetof(Impl_, type_) -
               offsetof(Impl_, deleted_at_) +
               sizeof(Impl_::type_));
}
AssetFull::~AssetFull() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.AssetFull)
  SharedDtor(*this);
}
inline void AssetFull::SharedDtor(MessageLite& self) {
  AssetFull& this_ = static_cast<AssetFull&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.uid_.Destroy();
  this_._impl_.name_.Destroy();
  this_._impl_.name_brief_.Destroy();
  this_._impl_.description_.Destroy();
  this_._impl_.gos_reg_code_.Destroy();
  this_._impl_.cfi_.Destroy();
  this_._impl_.code_nsd_.Destroy();
  this_._impl_.status_.Destroy();
  this_._impl_.br_code_.Destroy();
  this_._impl_.br_code_name_.Destroy();
  delete this_._impl_.deleted_at_;
  delete this_._impl_.brand_;
  delete this_._impl_.updated_at_;
  if (this_.has_ext()) {
    this_.clear_ext();
  }
  this_._impl_.~Impl_();
}

void AssetFull::clear_ext() {
// @@protoc_insertion_point(one_of_clear_start:tinkoff.public.invest.api.contract.v1.AssetFull)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (ext_case()) {
    case kCurrency: {
      if (GetArena() == nullptr) {
        delete _impl_.ext_.currency_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.ext_.currency_);
      }
      break;
    }
    case kSecurity: {
      if (GetArena() == nullptr) {
        delete _impl_.ext_.security_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.ext_.security_);
      }
      break;
    }
    case EXT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = EXT_NOT_SET;
}


inline void* AssetFull::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) AssetFull(arena);
}
constexpr auto AssetFull::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(AssetFull, _impl_.required_tests_) +
          decltype(AssetFull::_impl_.required_tests_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
      PROTOBUF_FIELD_OFFSET(AssetFull, _impl_.instruments_) +
          decltype(AssetFull::_impl_.instruments_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(AssetFull), alignof(AssetFull), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&AssetFull::PlacementNew_,
                                 sizeof(AssetFull),
                                 alignof(AssetFull));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull AssetFull::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_AssetFull_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &AssetFull::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<AssetFull>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &AssetFull::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<AssetFull>(), &AssetFull::ByteSizeLong,
            &AssetFull::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(AssetFull, _impl_._cached_size_),
        false,
    },
    &AssetFull::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* AssetFull::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 18, 6, 162, 2> AssetFull::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AssetFull, _impl_._has_bits_),
    0, // no _extensions_
    18, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294705152,  // skipmap
    offsetof(decltype(_table_), field_entries),
    18,  // num_field_entries
    6,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::AssetFull>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string uid = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AssetFull, _impl_.uid_)}},
    // .tinkoff.public.invest.api.contract.v1.AssetType type = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AssetFull, _impl_.type_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(AssetFull, _impl_.type_)}},
    // string name = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(AssetFull, _impl_.name_)}},
    // string name_brief = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(AssetFull, _impl_.name_brief_)}},
    // string description = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(AssetFull, _impl_.description_)}},
    // .google.protobuf.Timestamp deleted_at = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 0, 0, PROTOBUF_FIELD_OFFSET(AssetFull, _impl_.deleted_at_)}},
    // repeated string required_tests = 7;
    {::_pbi::TcParser::FastUR1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(AssetFull, _impl_.required_tests_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // string gos_reg_code = 10;
    {::_pbi::TcParser::FastUS1,
     {82, 63, 0, PROTOBUF_FIELD_OFFSET(AssetFull, _impl_.gos_reg_code_)}},
    // string cfi = 11;
    {::_pbi::TcParser::FastUS1,
     {90, 63, 0, PROTOBUF_FIELD_OFFSET(AssetFull, _impl_.cfi_)}},
    // string code_nsd = 12;
    {::_pbi::TcParser::FastUS1,
     {98, 63, 0, PROTOBUF_FIELD_OFFSET(AssetFull, _impl_.code_nsd_)}},
    // string status = 13;
    {::_pbi::TcParser::FastUS1,
     {106, 63, 0, PROTOBUF_FIELD_OFFSET(AssetFull, _impl_.status_)}},
    // .tinkoff.public.invest.api.contract.v1.Brand brand = 14;
    {::_pbi::TcParser::FastMtS1,
     {114, 1, 3, PROTOBUF_FIELD_OFFSET(AssetFull, _impl_.brand_)}},
    // .google.protobuf.Timestamp updated_at = 15;
    {::_pbi::TcParser::FastMtS1,
     {122, 2, 4, PROTOBUF_FIELD_OFFSET(AssetFull, _impl_.updated_at_)}},
    // string br_code = 16;
    {::_pbi::TcParser::FastUS2,
     {386, 63, 0, PROTOBUF_FIELD_OFFSET(AssetFull, _impl_.br_code_)}},
    // string br_code_name = 17;
    {::_pbi::TcParser::FastUS2,
     {394, 63, 0, PROTOBUF_FIELD_OFFSET(AssetFull, _impl_.br_code_name_)}},
    // repeated .tinkoff.public.invest.api.contract.v1.AssetInstrument instruments = 18;
    {::_pbi::TcParser::FastMtR2,
     {402, 63, 5, PROTOBUF_FIELD_OFFSET(AssetFull, _impl_.instruments_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string uid = 1;
    {PROTOBUF_FIELD_OFFSET(AssetFull, _impl_.uid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public.invest.api.contract.v1.AssetType type = 2;
    {PROTOBUF_FIELD_OFFSET(AssetFull, _impl_.type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string name = 3;
    {PROTOBUF_FIELD_OFFSET(AssetFull, _impl_.name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string name_brief = 4;
    {PROTOBUF_FIELD_OFFSET(AssetFull, _impl_.name_brief_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string description = 5;
    {PROTOBUF_FIELD_OFFSET(AssetFull, _impl_.description_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Timestamp deleted_at = 6;
    {PROTOBUF_FIELD_OFFSET(AssetFull, _impl_.deleted_at_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // repeated string required_tests = 7;
    {PROTOBUF_FIELD_OFFSET(AssetFull, _impl_.required_tests_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
    // .tinkoff.public.invest.api.contract.v1.AssetCurrency currency = 8;
    {PROTOBUF_FIELD_OFFSET(AssetFull, _impl_.ext_.currency_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.AssetSecurity security = 9;
    {PROTOBUF_FIELD_OFFSET(AssetFull, _impl_.ext_.security_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // string gos_reg_code = 10;
    {PROTOBUF_FIELD_OFFSET(AssetFull, _impl_.gos_reg_code_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string cfi = 11;
    {PROTOBUF_FIELD_OFFSET(AssetFull, _impl_.cfi_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string code_nsd = 12;
    {PROTOBUF_FIELD_OFFSET(AssetFull, _impl_.code_nsd_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string status = 13;
    {PROTOBUF_FIELD_OFFSET(AssetFull, _impl_.status_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public.invest.api.contract.v1.Brand brand = 14;
    {PROTOBUF_FIELD_OFFSET(AssetFull, _impl_.brand_), _Internal::kHasBitsOffset + 1, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp updated_at = 15;
    {PROTOBUF_FIELD_OFFSET(AssetFull, _impl_.updated_at_), _Internal::kHasBitsOffset + 2, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string br_code = 16;
    {PROTOBUF_FIELD_OFFSET(AssetFull, _impl_.br_code_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string br_code_name = 17;
    {PROTOBUF_FIELD_OFFSET(AssetFull, _impl_.br_code_name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .tinkoff.public.invest.api.contract.v1.AssetInstrument instruments = 18;
    {PROTOBUF_FIELD_OFFSET(AssetFull, _impl_.instruments_), -1, 5,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::AssetCurrency>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::AssetSecurity>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Brand>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::AssetInstrument>()},
  }}, {{
    "\57\3\0\4\12\13\0\16\0\0\14\3\10\6\0\0\7\14\0\0\0\0\0\0"
    "tinkoff.public.invest.api.contract.v1.AssetFull"
    "uid"
    "name"
    "name_brief"
    "description"
    "required_tests"
    "gos_reg_code"
    "cfi"
    "code_nsd"
    "status"
    "br_code"
    "br_code_name"
  }},
};

PROTOBUF_NOINLINE void AssetFull::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.AssetFull)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.required_tests_.Clear();
  _impl_.instruments_.Clear();
  _impl_.uid_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.name_brief_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.gos_reg_code_.ClearToEmpty();
  _impl_.cfi_.ClearToEmpty();
  _impl_.code_nsd_.ClearToEmpty();
  _impl_.status_.ClearToEmpty();
  _impl_.br_code_.ClearToEmpty();
  _impl_.br_code_name_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.deleted_at_ != nullptr);
      _impl_.deleted_at_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.brand_ != nullptr);
      _impl_.brand_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.updated_at_ != nullptr);
      _impl_.updated_at_->Clear();
    }
  }
  _impl_.type_ = 0;
  clear_ext();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* AssetFull::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const AssetFull& this_ = static_cast<const AssetFull&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* AssetFull::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const AssetFull& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.AssetFull)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string uid = 1;
          if (!this_._internal_uid().empty()) {
            const std::string& _s = this_._internal_uid();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.AssetFull.uid");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // .tinkoff.public.invest.api.contract.v1.AssetType type = 2;
          if (this_._internal_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                2, this_._internal_type(), target);
          }

          // string name = 3;
          if (!this_._internal_name().empty()) {
            const std::string& _s = this_._internal_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.AssetFull.name");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // string name_brief = 4;
          if (!this_._internal_name_brief().empty()) {
            const std::string& _s = this_._internal_name_brief();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.AssetFull.name_brief");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          // string description = 5;
          if (!this_._internal_description().empty()) {
            const std::string& _s = this_._internal_description();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.AssetFull.description");
            target = stream->WriteStringMaybeAliased(5, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .google.protobuf.Timestamp deleted_at = 6;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                6, *this_._impl_.deleted_at_, this_._impl_.deleted_at_->GetCachedSize(), target,
                stream);
          }

          // repeated string required_tests = 7;
          for (int i = 0, n = this_._internal_required_tests_size(); i < n; ++i) {
            const auto& s = this_._internal_required_tests().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.AssetFull.required_tests");
            target = stream->WriteString(7, s, target);
          }

          switch (this_.ext_case()) {
            case kCurrency: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  8, *this_._impl_.ext_.currency_, this_._impl_.ext_.currency_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kSecurity: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  9, *this_._impl_.ext_.security_, this_._impl_.ext_.security_->GetCachedSize(), target,
                  stream);
              break;
            }
            default:
              break;
          }
          // string gos_reg_code = 10;
          if (!this_._internal_gos_reg_code().empty()) {
            const std::string& _s = this_._internal_gos_reg_code();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.AssetFull.gos_reg_code");
            target = stream->WriteStringMaybeAliased(10, _s, target);
          }

          // string cfi = 11;
          if (!this_._internal_cfi().empty()) {
            const std::string& _s = this_._internal_cfi();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.AssetFull.cfi");
            target = stream->WriteStringMaybeAliased(11, _s, target);
          }

          // string code_nsd = 12;
          if (!this_._internal_code_nsd().empty()) {
            const std::string& _s = this_._internal_code_nsd();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.AssetFull.code_nsd");
            target = stream->WriteStringMaybeAliased(12, _s, target);
          }

          // string status = 13;
          if (!this_._internal_status().empty()) {
            const std::string& _s = this_._internal_status();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.AssetFull.status");
            target = stream->WriteStringMaybeAliased(13, _s, target);
          }

          // .tinkoff.public.invest.api.contract.v1.Brand brand = 14;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                14, *this_._impl_.brand_, this_._impl_.brand_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Timestamp updated_at = 15;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                15, *this_._impl_.updated_at_, this_._impl_.updated_at_->GetCachedSize(), target,
                stream);
          }

          // string br_code = 16;
          if (!this_._internal_br_code().empty()) {
            const std::string& _s = this_._internal_br_code();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.AssetFull.br_code");
            target = stream->WriteStringMaybeAliased(16, _s, target);
          }

          // string br_code_name = 17;
          if (!this_._internal_br_code_name().empty()) {
            const std::string& _s = this_._internal_br_code_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.AssetFull.br_code_name");
            target = stream->WriteStringMaybeAliased(17, _s, target);
          }

          // repeated .tinkoff.public.invest.api.contract.v1.AssetInstrument instruments = 18;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_instruments_size());
               i < n; i++) {
            const auto& repfield = this_._internal_instruments().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    18, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.AssetFull)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t AssetFull::ByteSizeLong(const MessageLite& base) {
          const AssetFull& this_ = static_cast<const AssetFull&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t AssetFull::ByteSizeLong() const {
          const AssetFull& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.AssetFull)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated string required_tests = 7;
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_required_tests().size());
              for (int i = 0, n = this_._internal_required_tests().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_required_tests().Get(i));
              }
            }
            // repeated .tinkoff.public.invest.api.contract.v1.AssetInstrument instruments = 18;
            {
              total_size += 2UL * this_._internal_instruments_size();
              for (const auto& msg : this_._internal_instruments()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // string uid = 1;
            if (!this_._internal_uid().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_uid());
            }
            // string name = 3;
            if (!this_._internal_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_name());
            }
            // string name_brief = 4;
            if (!this_._internal_name_brief().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_name_brief());
            }
            // string description = 5;
            if (!this_._internal_description().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_description());
            }
            // string gos_reg_code = 10;
            if (!this_._internal_gos_reg_code().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_gos_reg_code());
            }
            // string cfi = 11;
            if (!this_._internal_cfi().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_cfi());
            }
            // string code_nsd = 12;
            if (!this_._internal_code_nsd().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_code_nsd());
            }
            // string status = 13;
            if (!this_._internal_status().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_status());
            }
            // string br_code = 16;
            if (!this_._internal_br_code().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_br_code());
            }
            // string br_code_name = 17;
            if (!this_._internal_br_code_name().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_br_code_name());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000007u) {
            // .google.protobuf.Timestamp deleted_at = 6;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.deleted_at_);
            }
            // .tinkoff.public.invest.api.contract.v1.Brand brand = 14;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.brand_);
            }
            // .google.protobuf.Timestamp updated_at = 15;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.updated_at_);
            }
          }
           {
            // .tinkoff.public.invest.api.contract.v1.AssetType type = 2;
            if (this_._internal_type() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_type());
            }
          }
          switch (this_.ext_case()) {
            // .tinkoff.public.invest.api.contract.v1.AssetCurrency currency = 8;
            case kCurrency: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.ext_.currency_);
              break;
            }
            // .tinkoff.public.invest.api.contract.v1.AssetSecurity security = 9;
            case kSecurity: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.ext_.security_);
              break;
            }
            case EXT_NOT_SET: {
              break;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void AssetFull::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AssetFull*>(&to_msg);
  auto& from = static_cast<const AssetFull&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.AssetFull)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_required_tests()->MergeFrom(from._internal_required_tests());
  _this->_internal_mutable_instruments()->MergeFrom(
      from._internal_instruments());
  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_name_brief().empty()) {
    _this->_internal_set_name_brief(from._internal_name_brief());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_gos_reg_code().empty()) {
    _this->_internal_set_gos_reg_code(from._internal_gos_reg_code());
  }
  if (!from._internal_cfi().empty()) {
    _this->_internal_set_cfi(from._internal_cfi());
  }
  if (!from._internal_code_nsd().empty()) {
    _this->_internal_set_code_nsd(from._internal_code_nsd());
  }
  if (!from._internal_status().empty()) {
    _this->_internal_set_status(from._internal_status());
  }
  if (!from._internal_br_code().empty()) {
    _this->_internal_set_br_code(from._internal_br_code());
  }
  if (!from._internal_br_code_name().empty()) {
    _this->_internal_set_br_code_name(from._internal_br_code_name());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.deleted_at_ != nullptr);
      if (_this->_impl_.deleted_at_ == nullptr) {
        _this->_impl_.deleted_at_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.deleted_at_);
      } else {
        _this->_impl_.deleted_at_->MergeFrom(*from._impl_.deleted_at_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.brand_ != nullptr);
      if (_this->_impl_.brand_ == nullptr) {
        _this->_impl_.brand_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Brand>(arena, *from._impl_.brand_);
      } else {
        _this->_impl_.brand_->MergeFrom(*from._impl_.brand_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.updated_at_ != nullptr);
      if (_this->_impl_.updated_at_ == nullptr) {
        _this->_impl_.updated_at_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.updated_at_);
      } else {
        _this->_impl_.updated_at_->MergeFrom(*from._impl_.updated_at_);
      }
    }
  }
  if (from._internal_type() != 0) {
    _this->_impl_.type_ = from._impl_.type_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_ext();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kCurrency: {
        if (oneof_needs_init) {
          _this->_impl_.ext_.currency_ =
              ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::AssetCurrency>(arena, *from._impl_.ext_.currency_);
        } else {
          _this->_impl_.ext_.currency_->MergeFrom(from._internal_currency());
        }
        break;
      }
      case kSecurity: {
        if (oneof_needs_init) {
          _this->_impl_.ext_.security_ =
              ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::AssetSecurity>(arena, *from._impl_.ext_.security_);
        } else {
          _this->_impl_.ext_.security_->MergeFrom(from._internal_security());
        }
        break;
      }
      case EXT_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AssetFull::CopyFrom(const AssetFull& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.AssetFull)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AssetFull::InternalSwap(AssetFull* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.required_tests_.InternalSwap(&other->_impl_.required_tests_);
  _impl_.instruments_.InternalSwap(&other->_impl_.instruments_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.uid_, &other->_impl_.uid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_brief_, &other->_impl_.name_brief_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, &other->_impl_.description_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.gos_reg_code_, &other->_impl_.gos_reg_code_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.cfi_, &other->_impl_.cfi_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.code_nsd_, &other->_impl_.code_nsd_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.status_, &other->_impl_.status_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.br_code_, &other->_impl_.br_code_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.br_code_name_, &other->_impl_.br_code_name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AssetFull, _impl_.type_)
      + sizeof(AssetFull::_impl_.type_)
      - PROTOBUF_FIELD_OFFSET(AssetFull, _impl_.deleted_at_)>(
          reinterpret_cast<char*>(&_impl_.deleted_at_),
          reinterpret_cast<char*>(&other->_impl_.deleted_at_));
  swap(_impl_.ext_, other->_impl_.ext_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata AssetFull::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Asset::_Internal {
 public:
};

Asset::Asset(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.Asset)
}
inline PROTOBUF_NDEBUG_INLINE Asset::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::Asset& from_msg)
      : instruments_{visibility, arena, from.instruments_},
        uid_(arena, from.uid_),
        name_(arena, from.name_),
        _cached_size_{0} {}

Asset::Asset(
    ::google::protobuf::Arena* arena,
    const Asset& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Asset* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.type_ = from._impl_.type_;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.Asset)
}
inline PROTOBUF_NDEBUG_INLINE Asset::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : instruments_{visibility, arena},
        uid_(arena),
        name_(arena),
        _cached_size_{0} {}

inline void Asset::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.type_ = {};
}
Asset::~Asset() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.Asset)
  SharedDtor(*this);
}
inline void Asset::SharedDtor(MessageLite& self) {
  Asset& this_ = static_cast<Asset&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.uid_.Destroy();
  this_._impl_.name_.Destroy();
  this_._impl_.~Impl_();
}

inline void* Asset::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Asset(arena);
}
constexpr auto Asset::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(Asset, _impl_.instruments_) +
          decltype(Asset::_impl_.instruments_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(Asset), alignof(Asset), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&Asset::PlacementNew_,
                                 sizeof(Asset),
                                 alignof(Asset));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Asset::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Asset_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Asset::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Asset>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Asset::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Asset>(), &Asset::ByteSizeLong,
            &Asset::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Asset, _impl_._cached_size_),
        false,
    },
    &Asset::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Asset::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 1, 59, 2> Asset::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Asset>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .tinkoff.public.invest.api.contract.v1.AssetInstrument instruments = 4;
    {::_pbi::TcParser::FastMtR1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(Asset, _impl_.instruments_)}},
    // string uid = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Asset, _impl_.uid_)}},
    // .tinkoff.public.invest.api.contract.v1.AssetType type = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(Asset, _impl_.type_), 63>(),
     {16, 63, 0, PROTOBUF_FIELD_OFFSET(Asset, _impl_.type_)}},
    // string name = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Asset, _impl_.name_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string uid = 1;
    {PROTOBUF_FIELD_OFFSET(Asset, _impl_.uid_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public.invest.api.contract.v1.AssetType type = 2;
    {PROTOBUF_FIELD_OFFSET(Asset, _impl_.type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string name = 3;
    {PROTOBUF_FIELD_OFFSET(Asset, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .tinkoff.public.invest.api.contract.v1.AssetInstrument instruments = 4;
    {PROTOBUF_FIELD_OFFSET(Asset, _impl_.instruments_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::AssetInstrument>()},
  }}, {{
    "\53\3\0\4\0\0\0\0"
    "tinkoff.public.invest.api.contract.v1.Asset"
    "uid"
    "name"
  }},
};

PROTOBUF_NOINLINE void Asset::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.Asset)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instruments_.Clear();
  _impl_.uid_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.type_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Asset::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Asset& this_ = static_cast<const Asset&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Asset::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Asset& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.Asset)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string uid = 1;
          if (!this_._internal_uid().empty()) {
            const std::string& _s = this_._internal_uid();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Asset.uid");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // .tinkoff.public.invest.api.contract.v1.AssetType type = 2;
          if (this_._internal_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                2, this_._internal_type(), target);
          }

          // string name = 3;
          if (!this_._internal_name().empty()) {
            const std::string& _s = this_._internal_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Asset.name");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // repeated .tinkoff.public.invest.api.contract.v1.AssetInstrument instruments = 4;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_instruments_size());
               i < n; i++) {
            const auto& repfield = this_._internal_instruments().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    4, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.Asset)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Asset::ByteSizeLong(const MessageLite& base) {
          const Asset& this_ = static_cast<const Asset&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Asset::ByteSizeLong() const {
          const Asset& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.Asset)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .tinkoff.public.invest.api.contract.v1.AssetInstrument instruments = 4;
            {
              total_size += 1UL * this_._internal_instruments_size();
              for (const auto& msg : this_._internal_instruments()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // string uid = 1;
            if (!this_._internal_uid().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_uid());
            }
            // string name = 3;
            if (!this_._internal_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_name());
            }
            // .tinkoff.public.invest.api.contract.v1.AssetType type = 2;
            if (this_._internal_type() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_type());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Asset::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Asset*>(&to_msg);
  auto& from = static_cast<const Asset&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.Asset)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_instruments()->MergeFrom(
      from._internal_instruments());
  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (from._internal_type() != 0) {
    _this->_impl_.type_ = from._impl_.type_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Asset::CopyFrom(const Asset& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.Asset)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Asset::InternalSwap(Asset* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.instruments_.InternalSwap(&other->_impl_.instruments_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.uid_, &other->_impl_.uid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  swap(_impl_.type_, other->_impl_.type_);
}

::google::protobuf::Metadata Asset::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AssetCurrency::_Internal {
 public:
};

AssetCurrency::AssetCurrency(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.AssetCurrency)
}
inline PROTOBUF_NDEBUG_INLINE AssetCurrency::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::AssetCurrency& from_msg)
      : base_currency_(arena, from.base_currency_),
        _cached_size_{0} {}

AssetCurrency::AssetCurrency(
    ::google::protobuf::Arena* arena,
    const AssetCurrency& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AssetCurrency* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.AssetCurrency)
}
inline PROTOBUF_NDEBUG_INLINE AssetCurrency::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : base_currency_(arena),
        _cached_size_{0} {}

inline void AssetCurrency::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
AssetCurrency::~AssetCurrency() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.AssetCurrency)
  SharedDtor(*this);
}
inline void AssetCurrency::SharedDtor(MessageLite& self) {
  AssetCurrency& this_ = static_cast<AssetCurrency&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.base_currency_.Destroy();
  this_._impl_.~Impl_();
}

inline void* AssetCurrency::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) AssetCurrency(arena);
}
constexpr auto AssetCurrency::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(AssetCurrency),
                                            alignof(AssetCurrency));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull AssetCurrency::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_AssetCurrency_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &AssetCurrency::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<AssetCurrency>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &AssetCurrency::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<AssetCurrency>(), &AssetCurrency::ByteSizeLong,
            &AssetCurrency::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(AssetCurrency, _impl_._cached_size_),
        false,
    },
    &AssetCurrency::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* AssetCurrency::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 73, 2> AssetCurrency::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::AssetCurrency>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string base_currency = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AssetCurrency, _impl_.base_currency_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string base_currency = 1;
    {PROTOBUF_FIELD_OFFSET(AssetCurrency, _impl_.base_currency_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\63\15\0\0\0\0\0\0"
    "tinkoff.public.invest.api.contract.v1.AssetCurrency"
    "base_currency"
  }},
};

PROTOBUF_NOINLINE void AssetCurrency::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.AssetCurrency)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.base_currency_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* AssetCurrency::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const AssetCurrency& this_ = static_cast<const AssetCurrency&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* AssetCurrency::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const AssetCurrency& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.AssetCurrency)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string base_currency = 1;
          if (!this_._internal_base_currency().empty()) {
            const std::string& _s = this_._internal_base_currency();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.AssetCurrency.base_currency");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.AssetCurrency)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t AssetCurrency::ByteSizeLong(const MessageLite& base) {
          const AssetCurrency& this_ = static_cast<const AssetCurrency&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t AssetCurrency::ByteSizeLong() const {
          const AssetCurrency& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.AssetCurrency)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // string base_currency = 1;
            if (!this_._internal_base_currency().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_base_currency());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void AssetCurrency::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AssetCurrency*>(&to_msg);
  auto& from = static_cast<const AssetCurrency&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.AssetCurrency)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_base_currency().empty()) {
    _this->_internal_set_base_currency(from._internal_base_currency());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AssetCurrency::CopyFrom(const AssetCurrency& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.AssetCurrency)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AssetCurrency::InternalSwap(AssetCurrency* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.base_currency_, &other->_impl_.base_currency_, arena);
}

::google::protobuf::Metadata AssetCurrency::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AssetSecurity::_Internal {
 public:
  static constexpr ::int32_t kOneofCaseOffset =
      PROTOBUF_FIELD_OFFSET(::tinkoff::public_::invest::api::contract::v1::AssetSecurity, _impl_._oneof_case_);
};

void AssetSecurity::set_allocated_share(::tinkoff::public_::invest::api::contract::v1::AssetShare* share) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_ext();
  if (share) {
    ::google::protobuf::Arena* submessage_arena = share->GetArena();
    if (message_arena != submessage_arena) {
      share = ::google::protobuf::internal::GetOwnedMessage(message_arena, share, submessage_arena);
    }
    set_has_share();
    _impl_.ext_.share_ = share;
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.AssetSecurity.share)
}
void AssetSecurity::set_allocated_bond(::tinkoff::public_::invest::api::contract::v1::AssetBond* bond) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_ext();
  if (bond) {
    ::google::protobuf::Arena* submessage_arena = bond->GetArena();
    if (message_arena != submessage_arena) {
      bond = ::google::protobuf::internal::GetOwnedMessage(message_arena, bond, submessage_arena);
    }
    set_has_bond();
    _impl_.ext_.bond_ = bond;
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.AssetSecurity.bond)
}
void AssetSecurity::set_allocated_sp(::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct* sp) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_ext();
  if (sp) {
    ::google::protobuf::Arena* submessage_arena = sp->GetArena();
    if (message_arena != submessage_arena) {
      sp = ::google::protobuf::internal::GetOwnedMessage(message_arena, sp, submessage_arena);
    }
    set_has_sp();
    _impl_.ext_.sp_ = sp;
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.AssetSecurity.sp)
}
void AssetSecurity::set_allocated_etf(::tinkoff::public_::invest::api::contract::v1::AssetEtf* etf) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_ext();
  if (etf) {
    ::google::protobuf::Arena* submessage_arena = etf->GetArena();
    if (message_arena != submessage_arena) {
      etf = ::google::protobuf::internal::GetOwnedMessage(message_arena, etf, submessage_arena);
    }
    set_has_etf();
    _impl_.ext_.etf_ = etf;
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.AssetSecurity.etf)
}
void AssetSecurity::set_allocated_clearing_certificate(::tinkoff::public_::invest::api::contract::v1::AssetClearingCertificate* clearing_certificate) {
  ::google::protobuf::Arena* message_arena = GetArena();
  clear_ext();
  if (clearing_certificate) {
    ::google::protobuf::Arena* submessage_arena = clearing_certificate->GetArena();
    if (message_arena != submessage_arena) {
      clearing_certificate = ::google::protobuf::internal::GetOwnedMessage(message_arena, clearing_certificate, submessage_arena);
    }
    set_has_clearing_certificate();
    _impl_.ext_.clearing_certificate_ = clearing_certificate;
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.public.invest.api.contract.v1.AssetSecurity.clearing_certificate)
}
AssetSecurity::AssetSecurity(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.AssetSecurity)
}
inline PROTOBUF_NDEBUG_INLINE AssetSecurity::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::AssetSecurity& from_msg)
      : isin_(arena, from.isin_),
        type_(arena, from.type_),
        ext_{},
        _cached_size_{0},
        _oneof_case_{from._oneof_case_[0]} {}

AssetSecurity::AssetSecurity(
    ::google::protobuf::Arena* arena,
    const AssetSecurity& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AssetSecurity* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.instrument_kind_ = from._impl_.instrument_kind_;
  switch (ext_case()) {
    case EXT_NOT_SET:
      break;
      case kShare:
        _impl_.ext_.share_ = ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::AssetShare>(arena, *from._impl_.ext_.share_);
        break;
      case kBond:
        _impl_.ext_.bond_ = ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::AssetBond>(arena, *from._impl_.ext_.bond_);
        break;
      case kSp:
        _impl_.ext_.sp_ = ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct>(arena, *from._impl_.ext_.sp_);
        break;
      case kEtf:
        _impl_.ext_.etf_ = ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::AssetEtf>(arena, *from._impl_.ext_.etf_);
        break;
      case kClearingCertificate:
        _impl_.ext_.clearing_certificate_ = ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::AssetClearingCertificate>(arena, *from._impl_.ext_.clearing_certificate_);
        break;
  }

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.AssetSecurity)
}
inline PROTOBUF_NDEBUG_INLINE AssetSecurity::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : isin_(arena),
        type_(arena),
        ext_{},
        _cached_size_{0},
        _oneof_case_{} {}

inline void AssetSecurity::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.instrument_kind_ = {};
}
AssetSecurity::~AssetSecurity() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.AssetSecurity)
  SharedDtor(*this);
}
inline void AssetSecurity::SharedDtor(MessageLite& self) {
  AssetSecurity& this_ = static_cast<AssetSecurity&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.isin_.Destroy();
  this_._impl_.type_.Destroy();
  if (this_.has_ext()) {
    this_.clear_ext();
  }
  this_._impl_.~Impl_();
}

void AssetSecurity::clear_ext() {
// @@protoc_insertion_point(one_of_clear_start:tinkoff.public.invest.api.contract.v1.AssetSecurity)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  switch (ext_case()) {
    case kShare: {
      if (GetArena() == nullptr) {
        delete _impl_.ext_.share_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.ext_.share_);
      }
      break;
    }
    case kBond: {
      if (GetArena() == nullptr) {
        delete _impl_.ext_.bond_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.ext_.bond_);
      }
      break;
    }
    case kSp: {
      if (GetArena() == nullptr) {
        delete _impl_.ext_.sp_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.ext_.sp_);
      }
      break;
    }
    case kEtf: {
      if (GetArena() == nullptr) {
        delete _impl_.ext_.etf_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.ext_.etf_);
      }
      break;
    }
    case kClearingCertificate: {
      if (GetArena() == nullptr) {
        delete _impl_.ext_.clearing_certificate_;
      } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
        ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.ext_.clearing_certificate_);
      }
      break;
    }
    case EXT_NOT_SET: {
      break;
    }
  }
  _impl_._oneof_case_[0] = EXT_NOT_SET;
}


inline void* AssetSecurity::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) AssetSecurity(arena);
}
constexpr auto AssetSecurity::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(AssetSecurity),
                                            alignof(AssetSecurity));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull AssetSecurity::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_AssetSecurity_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &AssetSecurity::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<AssetSecurity>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &AssetSecurity::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<AssetSecurity>(), &AssetSecurity::ByteSizeLong,
            &AssetSecurity::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(AssetSecurity, _impl_._cached_size_),
        false,
    },
    &AssetSecurity::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* AssetSecurity::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 8, 5, 76, 2> AssetSecurity::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    10, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966656,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::AssetSecurity>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string isin = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AssetSecurity, _impl_.isin_)}},
    // string type = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(AssetSecurity, _impl_.type_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // .tinkoff.public.invest.api.contract.v1.InstrumentType instrument_kind = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AssetSecurity, _impl_.instrument_kind_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(AssetSecurity, _impl_.instrument_kind_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string isin = 1;
    {PROTOBUF_FIELD_OFFSET(AssetSecurity, _impl_.isin_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string type = 2;
    {PROTOBUF_FIELD_OFFSET(AssetSecurity, _impl_.type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public.invest.api.contract.v1.AssetShare share = 3;
    {PROTOBUF_FIELD_OFFSET(AssetSecurity, _impl_.ext_.share_), _Internal::kOneofCaseOffset + 0, 0,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.AssetBond bond = 4;
    {PROTOBUF_FIELD_OFFSET(AssetSecurity, _impl_.ext_.bond_), _Internal::kOneofCaseOffset + 0, 1,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.AssetStructuredProduct sp = 5;
    {PROTOBUF_FIELD_OFFSET(AssetSecurity, _impl_.ext_.sp_), _Internal::kOneofCaseOffset + 0, 2,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.AssetEtf etf = 6;
    {PROTOBUF_FIELD_OFFSET(AssetSecurity, _impl_.ext_.etf_), _Internal::kOneofCaseOffset + 0, 3,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.AssetClearingCertificate clearing_certificate = 7;
    {PROTOBUF_FIELD_OFFSET(AssetSecurity, _impl_.ext_.clearing_certificate_), _Internal::kOneofCaseOffset + 0, 4,
    (0 | ::_fl::kFcOneof | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.InstrumentType instrument_kind = 10;
    {PROTOBUF_FIELD_OFFSET(AssetSecurity, _impl_.instrument_kind_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::AssetShare>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::AssetBond>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::AssetEtf>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::AssetClearingCertificate>()},
  }}, {{
    "\63\4\4\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "tinkoff.public.invest.api.contract.v1.AssetSecurity"
    "isin"
    "type"
  }},
};

PROTOBUF_NOINLINE void AssetSecurity::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.AssetSecurity)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.isin_.ClearToEmpty();
  _impl_.type_.ClearToEmpty();
  _impl_.instrument_kind_ = 0;
  clear_ext();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* AssetSecurity::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const AssetSecurity& this_ = static_cast<const AssetSecurity&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* AssetSecurity::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const AssetSecurity& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.AssetSecurity)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string isin = 1;
          if (!this_._internal_isin().empty()) {
            const std::string& _s = this_._internal_isin();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.AssetSecurity.isin");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string type = 2;
          if (!this_._internal_type().empty()) {
            const std::string& _s = this_._internal_type();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.AssetSecurity.type");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          switch (this_.ext_case()) {
            case kShare: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  3, *this_._impl_.ext_.share_, this_._impl_.ext_.share_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kBond: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  4, *this_._impl_.ext_.bond_, this_._impl_.ext_.bond_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kSp: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  5, *this_._impl_.ext_.sp_, this_._impl_.ext_.sp_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kEtf: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  6, *this_._impl_.ext_.etf_, this_._impl_.ext_.etf_->GetCachedSize(), target,
                  stream);
              break;
            }
            case kClearingCertificate: {
              target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                  7, *this_._impl_.ext_.clearing_certificate_, this_._impl_.ext_.clearing_certificate_->GetCachedSize(), target,
                  stream);
              break;
            }
            default:
              break;
          }
          // .tinkoff.public.invest.api.contract.v1.InstrumentType instrument_kind = 10;
          if (this_._internal_instrument_kind() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                10, this_._internal_instrument_kind(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.AssetSecurity)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t AssetSecurity::ByteSizeLong(const MessageLite& base) {
          const AssetSecurity& this_ = static_cast<const AssetSecurity&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t AssetSecurity::ByteSizeLong() const {
          const AssetSecurity& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.AssetSecurity)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string isin = 1;
            if (!this_._internal_isin().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_isin());
            }
            // string type = 2;
            if (!this_._internal_type().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_type());
            }
            // .tinkoff.public.invest.api.contract.v1.InstrumentType instrument_kind = 10;
            if (this_._internal_instrument_kind() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_instrument_kind());
            }
          }
          switch (this_.ext_case()) {
            // .tinkoff.public.invest.api.contract.v1.AssetShare share = 3;
            case kShare: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.ext_.share_);
              break;
            }
            // .tinkoff.public.invest.api.contract.v1.AssetBond bond = 4;
            case kBond: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.ext_.bond_);
              break;
            }
            // .tinkoff.public.invest.api.contract.v1.AssetStructuredProduct sp = 5;
            case kSp: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.ext_.sp_);
              break;
            }
            // .tinkoff.public.invest.api.contract.v1.AssetEtf etf = 6;
            case kEtf: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.ext_.etf_);
              break;
            }
            // .tinkoff.public.invest.api.contract.v1.AssetClearingCertificate clearing_certificate = 7;
            case kClearingCertificate: {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.ext_.clearing_certificate_);
              break;
            }
            case EXT_NOT_SET: {
              break;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void AssetSecurity::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AssetSecurity*>(&to_msg);
  auto& from = static_cast<const AssetSecurity&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.AssetSecurity)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_isin().empty()) {
    _this->_internal_set_isin(from._internal_isin());
  }
  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if (from._internal_instrument_kind() != 0) {
    _this->_impl_.instrument_kind_ = from._impl_.instrument_kind_;
  }
  if (const uint32_t oneof_from_case = from._impl_._oneof_case_[0]) {
    const uint32_t oneof_to_case = _this->_impl_._oneof_case_[0];
    const bool oneof_needs_init = oneof_to_case != oneof_from_case;
    if (oneof_needs_init) {
      if (oneof_to_case != 0) {
        _this->clear_ext();
      }
      _this->_impl_._oneof_case_[0] = oneof_from_case;
    }

    switch (oneof_from_case) {
      case kShare: {
        if (oneof_needs_init) {
          _this->_impl_.ext_.share_ =
              ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::AssetShare>(arena, *from._impl_.ext_.share_);
        } else {
          _this->_impl_.ext_.share_->MergeFrom(from._internal_share());
        }
        break;
      }
      case kBond: {
        if (oneof_needs_init) {
          _this->_impl_.ext_.bond_ =
              ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::AssetBond>(arena, *from._impl_.ext_.bond_);
        } else {
          _this->_impl_.ext_.bond_->MergeFrom(from._internal_bond());
        }
        break;
      }
      case kSp: {
        if (oneof_needs_init) {
          _this->_impl_.ext_.sp_ =
              ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct>(arena, *from._impl_.ext_.sp_);
        } else {
          _this->_impl_.ext_.sp_->MergeFrom(from._internal_sp());
        }
        break;
      }
      case kEtf: {
        if (oneof_needs_init) {
          _this->_impl_.ext_.etf_ =
              ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::AssetEtf>(arena, *from._impl_.ext_.etf_);
        } else {
          _this->_impl_.ext_.etf_->MergeFrom(from._internal_etf());
        }
        break;
      }
      case kClearingCertificate: {
        if (oneof_needs_init) {
          _this->_impl_.ext_.clearing_certificate_ =
              ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::AssetClearingCertificate>(arena, *from._impl_.ext_.clearing_certificate_);
        } else {
          _this->_impl_.ext_.clearing_certificate_->MergeFrom(from._internal_clearing_certificate());
        }
        break;
      }
      case EXT_NOT_SET:
        break;
    }
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AssetSecurity::CopyFrom(const AssetSecurity& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.AssetSecurity)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AssetSecurity::InternalSwap(AssetSecurity* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.isin_, &other->_impl_.isin_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.type_, &other->_impl_.type_, arena);
  swap(_impl_.instrument_kind_, other->_impl_.instrument_kind_);
  swap(_impl_.ext_, other->_impl_.ext_);
  swap(_impl_._oneof_case_[0], other->_impl_._oneof_case_[0]);
}

::google::protobuf::Metadata AssetSecurity::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AssetShare::_Internal {
 public:
  using HasBits =
      decltype(std::declval<AssetShare>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(AssetShare, _impl_._has_bits_);
};

void AssetShare::clear_issue_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.issue_size_ != nullptr) _impl_.issue_size_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void AssetShare::clear_nominal() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.nominal_ != nullptr) _impl_.nominal_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void AssetShare::clear_dividend_rate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.dividend_rate_ != nullptr) _impl_.dividend_rate_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void AssetShare::clear_ipo_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.ipo_date_ != nullptr) _impl_.ipo_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void AssetShare::clear_registry_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.registry_date_ != nullptr) _impl_.registry_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void AssetShare::clear_placement_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.placement_date_ != nullptr) _impl_.placement_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void AssetShare::clear_issue_size_plan() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.issue_size_plan_ != nullptr) _impl_.issue_size_plan_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void AssetShare::clear_total_float() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.total_float_ != nullptr) _impl_.total_float_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
AssetShare::AssetShare(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.AssetShare)
}
inline PROTOBUF_NDEBUG_INLINE AssetShare::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::AssetShare& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        nominal_currency_(arena, from.nominal_currency_),
        primary_index_(arena, from.primary_index_),
        preferred_share_type_(arena, from.preferred_share_type_),
        issue_kind_(arena, from.issue_kind_),
        repres_isin_(arena, from.repres_isin_) {}

AssetShare::AssetShare(
    ::google::protobuf::Arena* arena,
    const AssetShare& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AssetShare* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.issue_size_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.issue_size_)
                        : nullptr;
  _impl_.nominal_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.nominal_)
                        : nullptr;
  _impl_.dividend_rate_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.dividend_rate_)
                        : nullptr;
  _impl_.ipo_date_ = (cached_has_bits & 0x00000008u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.ipo_date_)
                        : nullptr;
  _impl_.registry_date_ = (cached_has_bits & 0x00000010u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.registry_date_)
                        : nullptr;
  _impl_.placement_date_ = (cached_has_bits & 0x00000020u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.placement_date_)
                        : nullptr;
  _impl_.issue_size_plan_ = (cached_has_bits & 0x00000040u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.issue_size_plan_)
                        : nullptr;
  _impl_.total_float_ = (cached_has_bits & 0x00000080u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.total_float_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, type_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, type_),
           offsetof(Impl_, div_yield_flag_) -
               offsetof(Impl_, type_) +
               sizeof(Impl_::div_yield_flag_));

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.AssetShare)
}
inline PROTOBUF_NDEBUG_INLINE AssetShare::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        nominal_currency_(arena),
        primary_index_(arena),
        preferred_share_type_(arena),
        issue_kind_(arena),
        repres_isin_(arena) {}

inline void AssetShare::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, issue_size_),
           0,
           offsetof(Impl_, div_yield_flag_) -
               offsetof(Impl_, issue_size_) +
               sizeof(Impl_::div_yield_flag_));
}
AssetShare::~AssetShare() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.AssetShare)
  SharedDtor(*this);
}
inline void AssetShare::SharedDtor(MessageLite& self) {
  AssetShare& this_ = static_cast<AssetShare&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.nominal_currency_.Destroy();
  this_._impl_.primary_index_.Destroy();
  this_._impl_.preferred_share_type_.Destroy();
  this_._impl_.issue_kind_.Destroy();
  this_._impl_.repres_isin_.Destroy();
  delete this_._impl_.issue_size_;
  delete this_._impl_.nominal_;
  delete this_._impl_.dividend_rate_;
  delete this_._impl_.ipo_date_;
  delete this_._impl_.registry_date_;
  delete this_._impl_.placement_date_;
  delete this_._impl_.issue_size_plan_;
  delete this_._impl_.total_float_;
  this_._impl_.~Impl_();
}

inline void* AssetShare::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) AssetShare(arena);
}
constexpr auto AssetShare::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(AssetShare),
                                            alignof(AssetShare));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull AssetShare::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_AssetShare_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &AssetShare::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<AssetShare>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &AssetShare::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<AssetShare>(), &AssetShare::ByteSizeLong,
            &AssetShare::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(AssetShare, _impl_._cached_size_),
        false,
    },
    &AssetShare::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* AssetShare::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 15, 8, 135, 2> AssetShare::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AssetShare, _impl_._has_bits_),
    0, // no _extensions_
    15, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294934528,  // skipmap
    offsetof(decltype(_table_), field_entries),
    15,  // num_field_entries
    8,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::AssetShare>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .tinkoff.public.invest.api.contract.v1.ShareType type = 1;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AssetShare, _impl_.type_), 63>(),
     {8, 63, 0, PROTOBUF_FIELD_OFFSET(AssetShare, _impl_.type_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation issue_size = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(AssetShare, _impl_.issue_size_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation nominal = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 1, PROTOBUF_FIELD_OFFSET(AssetShare, _impl_.nominal_)}},
    // string nominal_currency = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(AssetShare, _impl_.nominal_currency_)}},
    // string primary_index = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(AssetShare, _impl_.primary_index_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation dividend_rate = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 2, 2, PROTOBUF_FIELD_OFFSET(AssetShare, _impl_.dividend_rate_)}},
    // string preferred_share_type = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(AssetShare, _impl_.preferred_share_type_)}},
    // .google.protobuf.Timestamp ipo_date = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 3, 3, PROTOBUF_FIELD_OFFSET(AssetShare, _impl_.ipo_date_)}},
    // .google.protobuf.Timestamp registry_date = 9;
    {::_pbi::TcParser::FastMtS1,
     {74, 4, 4, PROTOBUF_FIELD_OFFSET(AssetShare, _impl_.registry_date_)}},
    // bool div_yield_flag = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AssetShare, _impl_.div_yield_flag_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(AssetShare, _impl_.div_yield_flag_)}},
    // string issue_kind = 11;
    {::_pbi::TcParser::FastUS1,
     {90, 63, 0, PROTOBUF_FIELD_OFFSET(AssetShare, _impl_.issue_kind_)}},
    // .google.protobuf.Timestamp placement_date = 12;
    {::_pbi::TcParser::FastMtS1,
     {98, 5, 5, PROTOBUF_FIELD_OFFSET(AssetShare, _impl_.placement_date_)}},
    // string repres_isin = 13;
    {::_pbi::TcParser::FastUS1,
     {106, 63, 0, PROTOBUF_FIELD_OFFSET(AssetShare, _impl_.repres_isin_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation issue_size_plan = 14;
    {::_pbi::TcParser::FastMtS1,
     {114, 6, 6, PROTOBUF_FIELD_OFFSET(AssetShare, _impl_.issue_size_plan_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation total_float = 15;
    {::_pbi::TcParser::FastMtS1,
     {122, 7, 7, PROTOBUF_FIELD_OFFSET(AssetShare, _impl_.total_float_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .tinkoff.public.invest.api.contract.v1.ShareType type = 1;
    {PROTOBUF_FIELD_OFFSET(AssetShare, _impl_.type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .tinkoff.public.invest.api.contract.v1.Quotation issue_size = 2;
    {PROTOBUF_FIELD_OFFSET(AssetShare, _impl_.issue_size_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation nominal = 3;
    {PROTOBUF_FIELD_OFFSET(AssetShare, _impl_.nominal_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string nominal_currency = 4;
    {PROTOBUF_FIELD_OFFSET(AssetShare, _impl_.nominal_currency_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string primary_index = 5;
    {PROTOBUF_FIELD_OFFSET(AssetShare, _impl_.primary_index_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public.invest.api.contract.v1.Quotation dividend_rate = 6;
    {PROTOBUF_FIELD_OFFSET(AssetShare, _impl_.dividend_rate_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string preferred_share_type = 7;
    {PROTOBUF_FIELD_OFFSET(AssetShare, _impl_.preferred_share_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Timestamp ipo_date = 8;
    {PROTOBUF_FIELD_OFFSET(AssetShare, _impl_.ipo_date_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp registry_date = 9;
    {PROTOBUF_FIELD_OFFSET(AssetShare, _impl_.registry_date_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool div_yield_flag = 10;
    {PROTOBUF_FIELD_OFFSET(AssetShare, _impl_.div_yield_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string issue_kind = 11;
    {PROTOBUF_FIELD_OFFSET(AssetShare, _impl_.issue_kind_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Timestamp placement_date = 12;
    {PROTOBUF_FIELD_OFFSET(AssetShare, _impl_.placement_date_), _Internal::kHasBitsOffset + 5, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string repres_isin = 13;
    {PROTOBUF_FIELD_OFFSET(AssetShare, _impl_.repres_isin_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public.invest.api.contract.v1.Quotation issue_size_plan = 14;
    {PROTOBUF_FIELD_OFFSET(AssetShare, _impl_.issue_size_plan_), _Internal::kHasBitsOffset + 6, 6,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation total_float = 15;
    {PROTOBUF_FIELD_OFFSET(AssetShare, _impl_.total_float_), _Internal::kHasBitsOffset + 7, 7,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
  }}, {{
    "\60\0\0\0\20\15\0\24\0\0\0\12\0\13\0\0"
    "tinkoff.public.invest.api.contract.v1.AssetShare"
    "nominal_currency"
    "primary_index"
    "preferred_share_type"
    "issue_kind"
    "repres_isin"
  }},
};

PROTOBUF_NOINLINE void AssetShare::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.AssetShare)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nominal_currency_.ClearToEmpty();
  _impl_.primary_index_.ClearToEmpty();
  _impl_.preferred_share_type_.ClearToEmpty();
  _impl_.issue_kind_.ClearToEmpty();
  _impl_.repres_isin_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.issue_size_ != nullptr);
      _impl_.issue_size_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.nominal_ != nullptr);
      _impl_.nominal_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.dividend_rate_ != nullptr);
      _impl_.dividend_rate_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.ipo_date_ != nullptr);
      _impl_.ipo_date_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.registry_date_ != nullptr);
      _impl_.registry_date_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.placement_date_ != nullptr);
      _impl_.placement_date_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(_impl_.issue_size_plan_ != nullptr);
      _impl_.issue_size_plan_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      ABSL_DCHECK(_impl_.total_float_ != nullptr);
      _impl_.total_float_->Clear();
    }
  }
  ::memset(&_impl_.type_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.div_yield_flag_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.div_yield_flag_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* AssetShare::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const AssetShare& this_ = static_cast<const AssetShare&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* AssetShare::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const AssetShare& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.AssetShare)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // .tinkoff.public.invest.api.contract.v1.ShareType type = 1;
          if (this_._internal_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                1, this_._internal_type(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .tinkoff.public.invest.api.contract.v1.Quotation issue_size = 2;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.issue_size_, this_._impl_.issue_size_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation nominal = 3;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.nominal_, this_._impl_.nominal_->GetCachedSize(), target,
                stream);
          }

          // string nominal_currency = 4;
          if (!this_._internal_nominal_currency().empty()) {
            const std::string& _s = this_._internal_nominal_currency();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.AssetShare.nominal_currency");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          // string primary_index = 5;
          if (!this_._internal_primary_index().empty()) {
            const std::string& _s = this_._internal_primary_index();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.AssetShare.primary_index");
            target = stream->WriteStringMaybeAliased(5, _s, target);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation dividend_rate = 6;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                6, *this_._impl_.dividend_rate_, this_._impl_.dividend_rate_->GetCachedSize(), target,
                stream);
          }

          // string preferred_share_type = 7;
          if (!this_._internal_preferred_share_type().empty()) {
            const std::string& _s = this_._internal_preferred_share_type();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.AssetShare.preferred_share_type");
            target = stream->WriteStringMaybeAliased(7, _s, target);
          }

          // .google.protobuf.Timestamp ipo_date = 8;
          if (cached_has_bits & 0x00000008u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                8, *this_._impl_.ipo_date_, this_._impl_.ipo_date_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Timestamp registry_date = 9;
          if (cached_has_bits & 0x00000010u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                9, *this_._impl_.registry_date_, this_._impl_.registry_date_->GetCachedSize(), target,
                stream);
          }

          // bool div_yield_flag = 10;
          if (this_._internal_div_yield_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                10, this_._internal_div_yield_flag(), target);
          }

          // string issue_kind = 11;
          if (!this_._internal_issue_kind().empty()) {
            const std::string& _s = this_._internal_issue_kind();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.AssetShare.issue_kind");
            target = stream->WriteStringMaybeAliased(11, _s, target);
          }

          // .google.protobuf.Timestamp placement_date = 12;
          if (cached_has_bits & 0x00000020u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                12, *this_._impl_.placement_date_, this_._impl_.placement_date_->GetCachedSize(), target,
                stream);
          }

          // string repres_isin = 13;
          if (!this_._internal_repres_isin().empty()) {
            const std::string& _s = this_._internal_repres_isin();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.AssetShare.repres_isin");
            target = stream->WriteStringMaybeAliased(13, _s, target);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation issue_size_plan = 14;
          if (cached_has_bits & 0x00000040u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                14, *this_._impl_.issue_size_plan_, this_._impl_.issue_size_plan_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation total_float = 15;
          if (cached_has_bits & 0x00000080u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                15, *this_._impl_.total_float_, this_._impl_.total_float_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.AssetShare)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t AssetShare::ByteSizeLong(const MessageLite& base) {
          const AssetShare& this_ = static_cast<const AssetShare&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t AssetShare::ByteSizeLong() const {
          const AssetShare& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.AssetShare)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string nominal_currency = 4;
            if (!this_._internal_nominal_currency().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_nominal_currency());
            }
            // string primary_index = 5;
            if (!this_._internal_primary_index().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_primary_index());
            }
            // string preferred_share_type = 7;
            if (!this_._internal_preferred_share_type().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_preferred_share_type());
            }
            // string issue_kind = 11;
            if (!this_._internal_issue_kind().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_issue_kind());
            }
            // string repres_isin = 13;
            if (!this_._internal_repres_isin().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_repres_isin());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x000000ffu) {
            // .tinkoff.public.invest.api.contract.v1.Quotation issue_size = 2;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.issue_size_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation nominal = 3;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.nominal_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation dividend_rate = 6;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.dividend_rate_);
            }
            // .google.protobuf.Timestamp ipo_date = 8;
            if (cached_has_bits & 0x00000008u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.ipo_date_);
            }
            // .google.protobuf.Timestamp registry_date = 9;
            if (cached_has_bits & 0x00000010u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.registry_date_);
            }
            // .google.protobuf.Timestamp placement_date = 12;
            if (cached_has_bits & 0x00000020u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.placement_date_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation issue_size_plan = 14;
            if (cached_has_bits & 0x00000040u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.issue_size_plan_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation total_float = 15;
            if (cached_has_bits & 0x00000080u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.total_float_);
            }
          }
           {
            // .tinkoff.public.invest.api.contract.v1.ShareType type = 1;
            if (this_._internal_type() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_type());
            }
            // bool div_yield_flag = 10;
            if (this_._internal_div_yield_flag() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void AssetShare::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AssetShare*>(&to_msg);
  auto& from = static_cast<const AssetShare&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.AssetShare)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nominal_currency().empty()) {
    _this->_internal_set_nominal_currency(from._internal_nominal_currency());
  }
  if (!from._internal_primary_index().empty()) {
    _this->_internal_set_primary_index(from._internal_primary_index());
  }
  if (!from._internal_preferred_share_type().empty()) {
    _this->_internal_set_preferred_share_type(from._internal_preferred_share_type());
  }
  if (!from._internal_issue_kind().empty()) {
    _this->_internal_set_issue_kind(from._internal_issue_kind());
  }
  if (!from._internal_repres_isin().empty()) {
    _this->_internal_set_repres_isin(from._internal_repres_isin());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.issue_size_ != nullptr);
      if (_this->_impl_.issue_size_ == nullptr) {
        _this->_impl_.issue_size_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.issue_size_);
      } else {
        _this->_impl_.issue_size_->MergeFrom(*from._impl_.issue_size_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.nominal_ != nullptr);
      if (_this->_impl_.nominal_ == nullptr) {
        _this->_impl_.nominal_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.nominal_);
      } else {
        _this->_impl_.nominal_->MergeFrom(*from._impl_.nominal_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.dividend_rate_ != nullptr);
      if (_this->_impl_.dividend_rate_ == nullptr) {
        _this->_impl_.dividend_rate_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.dividend_rate_);
      } else {
        _this->_impl_.dividend_rate_->MergeFrom(*from._impl_.dividend_rate_);
      }
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(from._impl_.ipo_date_ != nullptr);
      if (_this->_impl_.ipo_date_ == nullptr) {
        _this->_impl_.ipo_date_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.ipo_date_);
      } else {
        _this->_impl_.ipo_date_->MergeFrom(*from._impl_.ipo_date_);
      }
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(from._impl_.registry_date_ != nullptr);
      if (_this->_impl_.registry_date_ == nullptr) {
        _this->_impl_.registry_date_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.registry_date_);
      } else {
        _this->_impl_.registry_date_->MergeFrom(*from._impl_.registry_date_);
      }
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(from._impl_.placement_date_ != nullptr);
      if (_this->_impl_.placement_date_ == nullptr) {
        _this->_impl_.placement_date_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.placement_date_);
      } else {
        _this->_impl_.placement_date_->MergeFrom(*from._impl_.placement_date_);
      }
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(from._impl_.issue_size_plan_ != nullptr);
      if (_this->_impl_.issue_size_plan_ == nullptr) {
        _this->_impl_.issue_size_plan_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.issue_size_plan_);
      } else {
        _this->_impl_.issue_size_plan_->MergeFrom(*from._impl_.issue_size_plan_);
      }
    }
    if (cached_has_bits & 0x00000080u) {
      ABSL_DCHECK(from._impl_.total_float_ != nullptr);
      if (_this->_impl_.total_float_ == nullptr) {
        _this->_impl_.total_float_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.total_float_);
      } else {
        _this->_impl_.total_float_->MergeFrom(*from._impl_.total_float_);
      }
    }
  }
  if (from._internal_type() != 0) {
    _this->_impl_.type_ = from._impl_.type_;
  }
  if (from._internal_div_yield_flag() != 0) {
    _this->_impl_.div_yield_flag_ = from._impl_.div_yield_flag_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AssetShare::CopyFrom(const AssetShare& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.AssetShare)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AssetShare::InternalSwap(AssetShare* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.nominal_currency_, &other->_impl_.nominal_currency_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.primary_index_, &other->_impl_.primary_index_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.preferred_share_type_, &other->_impl_.preferred_share_type_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.issue_kind_, &other->_impl_.issue_kind_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.repres_isin_, &other->_impl_.repres_isin_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AssetShare, _impl_.div_yield_flag_)
      + sizeof(AssetShare::_impl_.div_yield_flag_)
      - PROTOBUF_FIELD_OFFSET(AssetShare, _impl_.issue_size_)>(
          reinterpret_cast<char*>(&_impl_.issue_size_),
          reinterpret_cast<char*>(&other->_impl_.issue_size_));
}

::google::protobuf::Metadata AssetShare::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AssetBond::_Internal {
 public:
  using HasBits =
      decltype(std::declval<AssetBond>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(AssetBond, _impl_._has_bits_);
};

void AssetBond::clear_current_nominal() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.current_nominal_ != nullptr) _impl_.current_nominal_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void AssetBond::clear_issue_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.issue_size_ != nullptr) _impl_.issue_size_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void AssetBond::clear_nominal() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.nominal_ != nullptr) _impl_.nominal_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void AssetBond::clear_maturity_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.maturity_date_ != nullptr) _impl_.maturity_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void AssetBond::clear_state_reg_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.state_reg_date_ != nullptr) _impl_.state_reg_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void AssetBond::clear_placement_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.placement_date_ != nullptr) _impl_.placement_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void AssetBond::clear_placement_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.placement_price_ != nullptr) _impl_.placement_price_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void AssetBond::clear_issue_size_plan() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.issue_size_plan_ != nullptr) _impl_.issue_size_plan_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
AssetBond::AssetBond(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.AssetBond)
}
inline PROTOBUF_NDEBUG_INLINE AssetBond::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::AssetBond& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        borrow_name_(arena, from.borrow_name_),
        nominal_currency_(arena, from.nominal_currency_),
        issue_kind_(arena, from.issue_kind_),
        interest_kind_(arena, from.interest_kind_),
        return_condition_(arena, from.return_condition_) {}

AssetBond::AssetBond(
    ::google::protobuf::Arena* arena,
    const AssetBond& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AssetBond* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.current_nominal_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.current_nominal_)
                        : nullptr;
  _impl_.issue_size_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.issue_size_)
                        : nullptr;
  _impl_.nominal_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.nominal_)
                        : nullptr;
  _impl_.maturity_date_ = (cached_has_bits & 0x00000008u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.maturity_date_)
                        : nullptr;
  _impl_.state_reg_date_ = (cached_has_bits & 0x00000010u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.state_reg_date_)
                        : nullptr;
  _impl_.placement_date_ = (cached_has_bits & 0x00000020u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.placement_date_)
                        : nullptr;
  _impl_.placement_price_ = (cached_has_bits & 0x00000040u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.placement_price_)
                        : nullptr;
  _impl_.issue_size_plan_ = (cached_has_bits & 0x00000080u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.issue_size_plan_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, coupon_quantity_per_year_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, coupon_quantity_per_year_),
           offsetof(Impl_, perpetual_flag_) -
               offsetof(Impl_, coupon_quantity_per_year_) +
               sizeof(Impl_::perpetual_flag_));

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.AssetBond)
}
inline PROTOBUF_NDEBUG_INLINE AssetBond::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        borrow_name_(arena),
        nominal_currency_(arena),
        issue_kind_(arena),
        interest_kind_(arena),
        return_condition_(arena) {}

inline void AssetBond::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, current_nominal_),
           0,
           offsetof(Impl_, perpetual_flag_) -
               offsetof(Impl_, current_nominal_) +
               sizeof(Impl_::perpetual_flag_));
}
AssetBond::~AssetBond() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.AssetBond)
  SharedDtor(*this);
}
inline void AssetBond::SharedDtor(MessageLite& self) {
  AssetBond& this_ = static_cast<AssetBond&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.borrow_name_.Destroy();
  this_._impl_.nominal_currency_.Destroy();
  this_._impl_.issue_kind_.Destroy();
  this_._impl_.interest_kind_.Destroy();
  this_._impl_.return_condition_.Destroy();
  delete this_._impl_.current_nominal_;
  delete this_._impl_.issue_size_;
  delete this_._impl_.nominal_;
  delete this_._impl_.maturity_date_;
  delete this_._impl_.state_reg_date_;
  delete this_._impl_.placement_date_;
  delete this_._impl_.placement_price_;
  delete this_._impl_.issue_size_plan_;
  this_._impl_.~Impl_();
}

inline void* AssetBond::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) AssetBond(arena);
}
constexpr auto AssetBond::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(AssetBond),
                                            alignof(AssetBond));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull AssetBond::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_AssetBond_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &AssetBond::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<AssetBond>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &AssetBond::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<AssetBond>(), &AssetBond::ByteSizeLong,
            &AssetBond::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(AssetBond, _impl_._cached_size_),
        false,
    },
    &AssetBond::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* AssetBond::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 21, 8, 138, 2> AssetBond::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AssetBond, _impl_._has_bits_),
    0, // no _extensions_
    21, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4292870144,  // skipmap
    offsetof(decltype(_table_), field_entries),
    21,  // num_field_entries
    8,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::AssetBond>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .tinkoff.public.invest.api.contract.v1.Quotation current_nominal = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.current_nominal_)}},
    // string borrow_name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.borrow_name_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation issue_size = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 1, PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.issue_size_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation nominal = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 2, 2, PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.nominal_)}},
    // string nominal_currency = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.nominal_currency_)}},
    // string issue_kind = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.issue_kind_)}},
    // string interest_kind = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.interest_kind_)}},
    // int32 coupon_quantity_per_year = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AssetBond, _impl_.coupon_quantity_per_year_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.coupon_quantity_per_year_)}},
    // bool indexed_nominal_flag = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AssetBond, _impl_.indexed_nominal_flag_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.indexed_nominal_flag_)}},
    // bool subordinated_flag = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AssetBond, _impl_.subordinated_flag_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.subordinated_flag_)}},
    // bool collateral_flag = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AssetBond, _impl_.collateral_flag_), 63>(),
     {88, 63, 0, PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.collateral_flag_)}},
    // bool tax_free_flag = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AssetBond, _impl_.tax_free_flag_), 63>(),
     {96, 63, 0, PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.tax_free_flag_)}},
    // bool amortization_flag = 13;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AssetBond, _impl_.amortization_flag_), 63>(),
     {104, 63, 0, PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.amortization_flag_)}},
    // bool floating_coupon_flag = 14;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AssetBond, _impl_.floating_coupon_flag_), 63>(),
     {112, 63, 0, PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.floating_coupon_flag_)}},
    // bool perpetual_flag = 15;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AssetBond, _impl_.perpetual_flag_), 63>(),
     {120, 63, 0, PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.perpetual_flag_)}},
    // .google.protobuf.Timestamp maturity_date = 16;
    {::_pbi::TcParser::FastMtS2,
     {386, 3, 3, PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.maturity_date_)}},
    // string return_condition = 17;
    {::_pbi::TcParser::FastUS2,
     {394, 63, 0, PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.return_condition_)}},
    // .google.protobuf.Timestamp state_reg_date = 18;
    {::_pbi::TcParser::FastMtS2,
     {402, 4, 4, PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.state_reg_date_)}},
    // .google.protobuf.Timestamp placement_date = 19;
    {::_pbi::TcParser::FastMtS2,
     {410, 5, 5, PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.placement_date_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation placement_price = 20;
    {::_pbi::TcParser::FastMtS2,
     {418, 6, 6, PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.placement_price_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation issue_size_plan = 21;
    {::_pbi::TcParser::FastMtS2,
     {426, 7, 7, PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.issue_size_plan_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // .tinkoff.public.invest.api.contract.v1.Quotation current_nominal = 1;
    {PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.current_nominal_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string borrow_name = 2;
    {PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.borrow_name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public.invest.api.contract.v1.Quotation issue_size = 3;
    {PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.issue_size_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation nominal = 4;
    {PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.nominal_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string nominal_currency = 5;
    {PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.nominal_currency_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string issue_kind = 6;
    {PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.issue_kind_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string interest_kind = 7;
    {PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.interest_kind_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // int32 coupon_quantity_per_year = 8;
    {PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.coupon_quantity_per_year_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // bool indexed_nominal_flag = 9;
    {PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.indexed_nominal_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool subordinated_flag = 10;
    {PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.subordinated_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool collateral_flag = 11;
    {PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.collateral_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool tax_free_flag = 12;
    {PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.tax_free_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool amortization_flag = 13;
    {PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.amortization_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool floating_coupon_flag = 14;
    {PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.floating_coupon_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool perpetual_flag = 15;
    {PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.perpetual_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .google.protobuf.Timestamp maturity_date = 16;
    {PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.maturity_date_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string return_condition = 17;
    {PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.return_condition_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Timestamp state_reg_date = 18;
    {PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.state_reg_date_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp placement_date = 19;
    {PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.placement_date_), _Internal::kHasBitsOffset + 5, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation placement_price = 20;
    {PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.placement_price_), _Internal::kHasBitsOffset + 6, 6,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation issue_size_plan = 21;
    {PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.issue_size_plan_), _Internal::kHasBitsOffset + 7, 7,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
  }}, {{
    "\57\0\13\0\0\20\12\15\0\0\0\0\0\0\0\0\0\20\0\0\0\0\0\0"
    "tinkoff.public.invest.api.contract.v1.AssetBond"
    "borrow_name"
    "nominal_currency"
    "issue_kind"
    "interest_kind"
    "return_condition"
  }},
};

PROTOBUF_NOINLINE void AssetBond::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.AssetBond)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.borrow_name_.ClearToEmpty();
  _impl_.nominal_currency_.ClearToEmpty();
  _impl_.issue_kind_.ClearToEmpty();
  _impl_.interest_kind_.ClearToEmpty();
  _impl_.return_condition_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.current_nominal_ != nullptr);
      _impl_.current_nominal_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.issue_size_ != nullptr);
      _impl_.issue_size_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.nominal_ != nullptr);
      _impl_.nominal_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.maturity_date_ != nullptr);
      _impl_.maturity_date_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.state_reg_date_ != nullptr);
      _impl_.state_reg_date_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.placement_date_ != nullptr);
      _impl_.placement_date_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(_impl_.placement_price_ != nullptr);
      _impl_.placement_price_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      ABSL_DCHECK(_impl_.issue_size_plan_ != nullptr);
      _impl_.issue_size_plan_->Clear();
    }
  }
  ::memset(&_impl_.coupon_quantity_per_year_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.perpetual_flag_) -
      reinterpret_cast<char*>(&_impl_.coupon_quantity_per_year_)) + sizeof(_impl_.perpetual_flag_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* AssetBond::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const AssetBond& this_ = static_cast<const AssetBond&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* AssetBond::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const AssetBond& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.AssetBond)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .tinkoff.public.invest.api.contract.v1.Quotation current_nominal = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.current_nominal_, this_._impl_.current_nominal_->GetCachedSize(), target,
                stream);
          }

          // string borrow_name = 2;
          if (!this_._internal_borrow_name().empty()) {
            const std::string& _s = this_._internal_borrow_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.AssetBond.borrow_name");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation issue_size = 3;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.issue_size_, this_._impl_.issue_size_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation nominal = 4;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                4, *this_._impl_.nominal_, this_._impl_.nominal_->GetCachedSize(), target,
                stream);
          }

          // string nominal_currency = 5;
          if (!this_._internal_nominal_currency().empty()) {
            const std::string& _s = this_._internal_nominal_currency();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.AssetBond.nominal_currency");
            target = stream->WriteStringMaybeAliased(5, _s, target);
          }

          // string issue_kind = 6;
          if (!this_._internal_issue_kind().empty()) {
            const std::string& _s = this_._internal_issue_kind();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.AssetBond.issue_kind");
            target = stream->WriteStringMaybeAliased(6, _s, target);
          }

          // string interest_kind = 7;
          if (!this_._internal_interest_kind().empty()) {
            const std::string& _s = this_._internal_interest_kind();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.AssetBond.interest_kind");
            target = stream->WriteStringMaybeAliased(7, _s, target);
          }

          // int32 coupon_quantity_per_year = 8;
          if (this_._internal_coupon_quantity_per_year() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<8>(
                    stream, this_._internal_coupon_quantity_per_year(), target);
          }

          // bool indexed_nominal_flag = 9;
          if (this_._internal_indexed_nominal_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                9, this_._internal_indexed_nominal_flag(), target);
          }

          // bool subordinated_flag = 10;
          if (this_._internal_subordinated_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                10, this_._internal_subordinated_flag(), target);
          }

          // bool collateral_flag = 11;
          if (this_._internal_collateral_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                11, this_._internal_collateral_flag(), target);
          }

          // bool tax_free_flag = 12;
          if (this_._internal_tax_free_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                12, this_._internal_tax_free_flag(), target);
          }

          // bool amortization_flag = 13;
          if (this_._internal_amortization_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                13, this_._internal_amortization_flag(), target);
          }

          // bool floating_coupon_flag = 14;
          if (this_._internal_floating_coupon_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                14, this_._internal_floating_coupon_flag(), target);
          }

          // bool perpetual_flag = 15;
          if (this_._internal_perpetual_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                15, this_._internal_perpetual_flag(), target);
          }

          // .google.protobuf.Timestamp maturity_date = 16;
          if (cached_has_bits & 0x00000008u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                16, *this_._impl_.maturity_date_, this_._impl_.maturity_date_->GetCachedSize(), target,
                stream);
          }

          // string return_condition = 17;
          if (!this_._internal_return_condition().empty()) {
            const std::string& _s = this_._internal_return_condition();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.AssetBond.return_condition");
            target = stream->WriteStringMaybeAliased(17, _s, target);
          }

          // .google.protobuf.Timestamp state_reg_date = 18;
          if (cached_has_bits & 0x00000010u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                18, *this_._impl_.state_reg_date_, this_._impl_.state_reg_date_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Timestamp placement_date = 19;
          if (cached_has_bits & 0x00000020u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                19, *this_._impl_.placement_date_, this_._impl_.placement_date_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation placement_price = 20;
          if (cached_has_bits & 0x00000040u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                20, *this_._impl_.placement_price_, this_._impl_.placement_price_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation issue_size_plan = 21;
          if (cached_has_bits & 0x00000080u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                21, *this_._impl_.issue_size_plan_, this_._impl_.issue_size_plan_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.AssetBond)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t AssetBond::ByteSizeLong(const MessageLite& base) {
          const AssetBond& this_ = static_cast<const AssetBond&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t AssetBond::ByteSizeLong() const {
          const AssetBond& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.AssetBond)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string borrow_name = 2;
            if (!this_._internal_borrow_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_borrow_name());
            }
            // string nominal_currency = 5;
            if (!this_._internal_nominal_currency().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_nominal_currency());
            }
            // string issue_kind = 6;
            if (!this_._internal_issue_kind().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_issue_kind());
            }
            // string interest_kind = 7;
            if (!this_._internal_interest_kind().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_interest_kind());
            }
            // string return_condition = 17;
            if (!this_._internal_return_condition().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_return_condition());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x000000ffu) {
            // .tinkoff.public.invest.api.contract.v1.Quotation current_nominal = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.current_nominal_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation issue_size = 3;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.issue_size_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation nominal = 4;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.nominal_);
            }
            // .google.protobuf.Timestamp maturity_date = 16;
            if (cached_has_bits & 0x00000008u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.maturity_date_);
            }
            // .google.protobuf.Timestamp state_reg_date = 18;
            if (cached_has_bits & 0x00000010u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.state_reg_date_);
            }
            // .google.protobuf.Timestamp placement_date = 19;
            if (cached_has_bits & 0x00000020u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.placement_date_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation placement_price = 20;
            if (cached_has_bits & 0x00000040u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.placement_price_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation issue_size_plan = 21;
            if (cached_has_bits & 0x00000080u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.issue_size_plan_);
            }
          }
           {
            // int32 coupon_quantity_per_year = 8;
            if (this_._internal_coupon_quantity_per_year() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_coupon_quantity_per_year());
            }
            // bool indexed_nominal_flag = 9;
            if (this_._internal_indexed_nominal_flag() != 0) {
              total_size += 2;
            }
            // bool subordinated_flag = 10;
            if (this_._internal_subordinated_flag() != 0) {
              total_size += 2;
            }
            // bool collateral_flag = 11;
            if (this_._internal_collateral_flag() != 0) {
              total_size += 2;
            }
            // bool tax_free_flag = 12;
            if (this_._internal_tax_free_flag() != 0) {
              total_size += 2;
            }
            // bool amortization_flag = 13;
            if (this_._internal_amortization_flag() != 0) {
              total_size += 2;
            }
            // bool floating_coupon_flag = 14;
            if (this_._internal_floating_coupon_flag() != 0) {
              total_size += 2;
            }
            // bool perpetual_flag = 15;
            if (this_._internal_perpetual_flag() != 0) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void AssetBond::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AssetBond*>(&to_msg);
  auto& from = static_cast<const AssetBond&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.AssetBond)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_borrow_name().empty()) {
    _this->_internal_set_borrow_name(from._internal_borrow_name());
  }
  if (!from._internal_nominal_currency().empty()) {
    _this->_internal_set_nominal_currency(from._internal_nominal_currency());
  }
  if (!from._internal_issue_kind().empty()) {
    _this->_internal_set_issue_kind(from._internal_issue_kind());
  }
  if (!from._internal_interest_kind().empty()) {
    _this->_internal_set_interest_kind(from._internal_interest_kind());
  }
  if (!from._internal_return_condition().empty()) {
    _this->_internal_set_return_condition(from._internal_return_condition());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.current_nominal_ != nullptr);
      if (_this->_impl_.current_nominal_ == nullptr) {
        _this->_impl_.current_nominal_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.current_nominal_);
      } else {
        _this->_impl_.current_nominal_->MergeFrom(*from._impl_.current_nominal_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.issue_size_ != nullptr);
      if (_this->_impl_.issue_size_ == nullptr) {
        _this->_impl_.issue_size_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.issue_size_);
      } else {
        _this->_impl_.issue_size_->MergeFrom(*from._impl_.issue_size_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.nominal_ != nullptr);
      if (_this->_impl_.nominal_ == nullptr) {
        _this->_impl_.nominal_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.nominal_);
      } else {
        _this->_impl_.nominal_->MergeFrom(*from._impl_.nominal_);
      }
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(from._impl_.maturity_date_ != nullptr);
      if (_this->_impl_.maturity_date_ == nullptr) {
        _this->_impl_.maturity_date_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.maturity_date_);
      } else {
        _this->_impl_.maturity_date_->MergeFrom(*from._impl_.maturity_date_);
      }
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(from._impl_.state_reg_date_ != nullptr);
      if (_this->_impl_.state_reg_date_ == nullptr) {
        _this->_impl_.state_reg_date_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.state_reg_date_);
      } else {
        _this->_impl_.state_reg_date_->MergeFrom(*from._impl_.state_reg_date_);
      }
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(from._impl_.placement_date_ != nullptr);
      if (_this->_impl_.placement_date_ == nullptr) {
        _this->_impl_.placement_date_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.placement_date_);
      } else {
        _this->_impl_.placement_date_->MergeFrom(*from._impl_.placement_date_);
      }
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(from._impl_.placement_price_ != nullptr);
      if (_this->_impl_.placement_price_ == nullptr) {
        _this->_impl_.placement_price_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.placement_price_);
      } else {
        _this->_impl_.placement_price_->MergeFrom(*from._impl_.placement_price_);
      }
    }
    if (cached_has_bits & 0x00000080u) {
      ABSL_DCHECK(from._impl_.issue_size_plan_ != nullptr);
      if (_this->_impl_.issue_size_plan_ == nullptr) {
        _this->_impl_.issue_size_plan_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.issue_size_plan_);
      } else {
        _this->_impl_.issue_size_plan_->MergeFrom(*from._impl_.issue_size_plan_);
      }
    }
  }
  if (from._internal_coupon_quantity_per_year() != 0) {
    _this->_impl_.coupon_quantity_per_year_ = from._impl_.coupon_quantity_per_year_;
  }
  if (from._internal_indexed_nominal_flag() != 0) {
    _this->_impl_.indexed_nominal_flag_ = from._impl_.indexed_nominal_flag_;
  }
  if (from._internal_subordinated_flag() != 0) {
    _this->_impl_.subordinated_flag_ = from._impl_.subordinated_flag_;
  }
  if (from._internal_collateral_flag() != 0) {
    _this->_impl_.collateral_flag_ = from._impl_.collateral_flag_;
  }
  if (from._internal_tax_free_flag() != 0) {
    _this->_impl_.tax_free_flag_ = from._impl_.tax_free_flag_;
  }
  if (from._internal_amortization_flag() != 0) {
    _this->_impl_.amortization_flag_ = from._impl_.amortization_flag_;
  }
  if (from._internal_floating_coupon_flag() != 0) {
    _this->_impl_.floating_coupon_flag_ = from._impl_.floating_coupon_flag_;
  }
  if (from._internal_perpetual_flag() != 0) {
    _this->_impl_.perpetual_flag_ = from._impl_.perpetual_flag_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AssetBond::CopyFrom(const AssetBond& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.AssetBond)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AssetBond::InternalSwap(AssetBond* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.borrow_name_, &other->_impl_.borrow_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.nominal_currency_, &other->_impl_.nominal_currency_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.issue_kind_, &other->_impl_.issue_kind_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.interest_kind_, &other->_impl_.interest_kind_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.return_condition_, &other->_impl_.return_condition_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.perpetual_flag_)
      + sizeof(AssetBond::_impl_.perpetual_flag_)
      - PROTOBUF_FIELD_OFFSET(AssetBond, _impl_.current_nominal_)>(
          reinterpret_cast<char*>(&_impl_.current_nominal_),
          reinterpret_cast<char*>(&other->_impl_.current_nominal_));
}

::google::protobuf::Metadata AssetBond::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AssetStructuredProduct::_Internal {
 public:
  using HasBits =
      decltype(std::declval<AssetStructuredProduct>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(AssetStructuredProduct, _impl_._has_bits_);
};

void AssetStructuredProduct::clear_nominal() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.nominal_ != nullptr) _impl_.nominal_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void AssetStructuredProduct::clear_safety_barrier() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.safety_barrier_ != nullptr) _impl_.safety_barrier_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void AssetStructuredProduct::clear_maturity_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.maturity_date_ != nullptr) _impl_.maturity_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void AssetStructuredProduct::clear_issue_size_plan() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.issue_size_plan_ != nullptr) _impl_.issue_size_plan_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void AssetStructuredProduct::clear_issue_size() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.issue_size_ != nullptr) _impl_.issue_size_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void AssetStructuredProduct::clear_placement_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.placement_date_ != nullptr) _impl_.placement_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
AssetStructuredProduct::AssetStructuredProduct(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.AssetStructuredProduct)
}
inline PROTOBUF_NDEBUG_INLINE AssetStructuredProduct::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        borrow_name_(arena, from.borrow_name_),
        nominal_currency_(arena, from.nominal_currency_),
        logic_portfolio_(arena, from.logic_portfolio_),
        basic_asset_(arena, from.basic_asset_),
        issue_kind_(arena, from.issue_kind_) {}

AssetStructuredProduct::AssetStructuredProduct(
    ::google::protobuf::Arena* arena,
    const AssetStructuredProduct& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AssetStructuredProduct* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.nominal_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.nominal_)
                        : nullptr;
  _impl_.safety_barrier_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.safety_barrier_)
                        : nullptr;
  _impl_.maturity_date_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.maturity_date_)
                        : nullptr;
  _impl_.issue_size_plan_ = (cached_has_bits & 0x00000008u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.issue_size_plan_)
                        : nullptr;
  _impl_.issue_size_ = (cached_has_bits & 0x00000010u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.issue_size_)
                        : nullptr;
  _impl_.placement_date_ = (cached_has_bits & 0x00000020u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.placement_date_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, type_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, type_),
           offsetof(Impl_, asset_type_) -
               offsetof(Impl_, type_) +
               sizeof(Impl_::asset_type_));

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.AssetStructuredProduct)
}
inline PROTOBUF_NDEBUG_INLINE AssetStructuredProduct::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        borrow_name_(arena),
        nominal_currency_(arena),
        logic_portfolio_(arena),
        basic_asset_(arena),
        issue_kind_(arena) {}

inline void AssetStructuredProduct::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, nominal_),
           0,
           offsetof(Impl_, asset_type_) -
               offsetof(Impl_, nominal_) +
               sizeof(Impl_::asset_type_));
}
AssetStructuredProduct::~AssetStructuredProduct() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.AssetStructuredProduct)
  SharedDtor(*this);
}
inline void AssetStructuredProduct::SharedDtor(MessageLite& self) {
  AssetStructuredProduct& this_ = static_cast<AssetStructuredProduct&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.borrow_name_.Destroy();
  this_._impl_.nominal_currency_.Destroy();
  this_._impl_.logic_portfolio_.Destroy();
  this_._impl_.basic_asset_.Destroy();
  this_._impl_.issue_kind_.Destroy();
  delete this_._impl_.nominal_;
  delete this_._impl_.safety_barrier_;
  delete this_._impl_.maturity_date_;
  delete this_._impl_.issue_size_plan_;
  delete this_._impl_.issue_size_;
  delete this_._impl_.placement_date_;
  this_._impl_.~Impl_();
}

inline void* AssetStructuredProduct::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) AssetStructuredProduct(arena);
}
constexpr auto AssetStructuredProduct::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(AssetStructuredProduct),
                                            alignof(AssetStructuredProduct));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull AssetStructuredProduct::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_AssetStructuredProduct_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &AssetStructuredProduct::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<AssetStructuredProduct>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &AssetStructuredProduct::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<AssetStructuredProduct>(), &AssetStructuredProduct::ByteSizeLong,
            &AssetStructuredProduct::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(AssetStructuredProduct, _impl_._cached_size_),
        false,
    },
    &AssetStructuredProduct::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* AssetStructuredProduct::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 13, 6, 140, 2> AssetStructuredProduct::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AssetStructuredProduct, _impl_._has_bits_),
    0, // no _extensions_
    13, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294959104,  // skipmap
    offsetof(decltype(_table_), field_entries),
    13,  // num_field_entries
    6,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::AssetStructuredProduct>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string borrow_name = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AssetStructuredProduct, _impl_.borrow_name_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation nominal = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(AssetStructuredProduct, _impl_.nominal_)}},
    // string nominal_currency = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(AssetStructuredProduct, _impl_.nominal_currency_)}},
    // .tinkoff.public.invest.api.contract.v1.StructuredProductType type = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AssetStructuredProduct, _impl_.type_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(AssetStructuredProduct, _impl_.type_)}},
    // string logic_portfolio = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(AssetStructuredProduct, _impl_.logic_portfolio_)}},
    // .tinkoff.public.invest.api.contract.v1.AssetType asset_type = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AssetStructuredProduct, _impl_.asset_type_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(AssetStructuredProduct, _impl_.asset_type_)}},
    // string basic_asset = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(AssetStructuredProduct, _impl_.basic_asset_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation safety_barrier = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 1, 1, PROTOBUF_FIELD_OFFSET(AssetStructuredProduct, _impl_.safety_barrier_)}},
    // .google.protobuf.Timestamp maturity_date = 9;
    {::_pbi::TcParser::FastMtS1,
     {74, 2, 2, PROTOBUF_FIELD_OFFSET(AssetStructuredProduct, _impl_.maturity_date_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation issue_size_plan = 10;
    {::_pbi::TcParser::FastMtS1,
     {82, 3, 3, PROTOBUF_FIELD_OFFSET(AssetStructuredProduct, _impl_.issue_size_plan_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation issue_size = 11;
    {::_pbi::TcParser::FastMtS1,
     {90, 4, 4, PROTOBUF_FIELD_OFFSET(AssetStructuredProduct, _impl_.issue_size_)}},
    // .google.protobuf.Timestamp placement_date = 12;
    {::_pbi::TcParser::FastMtS1,
     {98, 5, 5, PROTOBUF_FIELD_OFFSET(AssetStructuredProduct, _impl_.placement_date_)}},
    // string issue_kind = 13;
    {::_pbi::TcParser::FastUS1,
     {106, 63, 0, PROTOBUF_FIELD_OFFSET(AssetStructuredProduct, _impl_.issue_kind_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string borrow_name = 1;
    {PROTOBUF_FIELD_OFFSET(AssetStructuredProduct, _impl_.borrow_name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public.invest.api.contract.v1.Quotation nominal = 2;
    {PROTOBUF_FIELD_OFFSET(AssetStructuredProduct, _impl_.nominal_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string nominal_currency = 3;
    {PROTOBUF_FIELD_OFFSET(AssetStructuredProduct, _impl_.nominal_currency_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public.invest.api.contract.v1.StructuredProductType type = 4;
    {PROTOBUF_FIELD_OFFSET(AssetStructuredProduct, _impl_.type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string logic_portfolio = 5;
    {PROTOBUF_FIELD_OFFSET(AssetStructuredProduct, _impl_.logic_portfolio_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public.invest.api.contract.v1.AssetType asset_type = 6;
    {PROTOBUF_FIELD_OFFSET(AssetStructuredProduct, _impl_.asset_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string basic_asset = 7;
    {PROTOBUF_FIELD_OFFSET(AssetStructuredProduct, _impl_.basic_asset_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public.invest.api.contract.v1.Quotation safety_barrier = 8;
    {PROTOBUF_FIELD_OFFSET(AssetStructuredProduct, _impl_.safety_barrier_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp maturity_date = 9;
    {PROTOBUF_FIELD_OFFSET(AssetStructuredProduct, _impl_.maturity_date_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation issue_size_plan = 10;
    {PROTOBUF_FIELD_OFFSET(AssetStructuredProduct, _impl_.issue_size_plan_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation issue_size = 11;
    {PROTOBUF_FIELD_OFFSET(AssetStructuredProduct, _impl_.issue_size_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp placement_date = 12;
    {PROTOBUF_FIELD_OFFSET(AssetStructuredProduct, _impl_.placement_date_), _Internal::kHasBitsOffset + 5, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string issue_kind = 13;
    {PROTOBUF_FIELD_OFFSET(AssetStructuredProduct, _impl_.issue_kind_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\74\13\0\20\0\17\0\13\0\0\0\0\0\12\0\0"
    "tinkoff.public.invest.api.contract.v1.AssetStructuredProduct"
    "borrow_name"
    "nominal_currency"
    "logic_portfolio"
    "basic_asset"
    "issue_kind"
  }},
};

PROTOBUF_NOINLINE void AssetStructuredProduct::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.AssetStructuredProduct)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.borrow_name_.ClearToEmpty();
  _impl_.nominal_currency_.ClearToEmpty();
  _impl_.logic_portfolio_.ClearToEmpty();
  _impl_.basic_asset_.ClearToEmpty();
  _impl_.issue_kind_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.nominal_ != nullptr);
      _impl_.nominal_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.safety_barrier_ != nullptr);
      _impl_.safety_barrier_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.maturity_date_ != nullptr);
      _impl_.maturity_date_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.issue_size_plan_ != nullptr);
      _impl_.issue_size_plan_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.issue_size_ != nullptr);
      _impl_.issue_size_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.placement_date_ != nullptr);
      _impl_.placement_date_->Clear();
    }
  }
  ::memset(&_impl_.type_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.asset_type_) -
      reinterpret_cast<char*>(&_impl_.type_)) + sizeof(_impl_.asset_type_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* AssetStructuredProduct::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const AssetStructuredProduct& this_ = static_cast<const AssetStructuredProduct&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* AssetStructuredProduct::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const AssetStructuredProduct& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.AssetStructuredProduct)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string borrow_name = 1;
          if (!this_._internal_borrow_name().empty()) {
            const std::string& _s = this_._internal_borrow_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.AssetStructuredProduct.borrow_name");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .tinkoff.public.invest.api.contract.v1.Quotation nominal = 2;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.nominal_, this_._impl_.nominal_->GetCachedSize(), target,
                stream);
          }

          // string nominal_currency = 3;
          if (!this_._internal_nominal_currency().empty()) {
            const std::string& _s = this_._internal_nominal_currency();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.AssetStructuredProduct.nominal_currency");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // .tinkoff.public.invest.api.contract.v1.StructuredProductType type = 4;
          if (this_._internal_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                4, this_._internal_type(), target);
          }

          // string logic_portfolio = 5;
          if (!this_._internal_logic_portfolio().empty()) {
            const std::string& _s = this_._internal_logic_portfolio();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.AssetStructuredProduct.logic_portfolio");
            target = stream->WriteStringMaybeAliased(5, _s, target);
          }

          // .tinkoff.public.invest.api.contract.v1.AssetType asset_type = 6;
          if (this_._internal_asset_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                6, this_._internal_asset_type(), target);
          }

          // string basic_asset = 7;
          if (!this_._internal_basic_asset().empty()) {
            const std::string& _s = this_._internal_basic_asset();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.AssetStructuredProduct.basic_asset");
            target = stream->WriteStringMaybeAliased(7, _s, target);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation safety_barrier = 8;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                8, *this_._impl_.safety_barrier_, this_._impl_.safety_barrier_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Timestamp maturity_date = 9;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                9, *this_._impl_.maturity_date_, this_._impl_.maturity_date_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation issue_size_plan = 10;
          if (cached_has_bits & 0x00000008u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                10, *this_._impl_.issue_size_plan_, this_._impl_.issue_size_plan_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation issue_size = 11;
          if (cached_has_bits & 0x00000010u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                11, *this_._impl_.issue_size_, this_._impl_.issue_size_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Timestamp placement_date = 12;
          if (cached_has_bits & 0x00000020u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                12, *this_._impl_.placement_date_, this_._impl_.placement_date_->GetCachedSize(), target,
                stream);
          }

          // string issue_kind = 13;
          if (!this_._internal_issue_kind().empty()) {
            const std::string& _s = this_._internal_issue_kind();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.AssetStructuredProduct.issue_kind");
            target = stream->WriteStringMaybeAliased(13, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.AssetStructuredProduct)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t AssetStructuredProduct::ByteSizeLong(const MessageLite& base) {
          const AssetStructuredProduct& this_ = static_cast<const AssetStructuredProduct&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t AssetStructuredProduct::ByteSizeLong() const {
          const AssetStructuredProduct& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.AssetStructuredProduct)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string borrow_name = 1;
            if (!this_._internal_borrow_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_borrow_name());
            }
            // string nominal_currency = 3;
            if (!this_._internal_nominal_currency().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_nominal_currency());
            }
            // string logic_portfolio = 5;
            if (!this_._internal_logic_portfolio().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_logic_portfolio());
            }
            // string basic_asset = 7;
            if (!this_._internal_basic_asset().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_basic_asset());
            }
            // string issue_kind = 13;
            if (!this_._internal_issue_kind().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_issue_kind());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x0000003fu) {
            // .tinkoff.public.invest.api.contract.v1.Quotation nominal = 2;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.nominal_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation safety_barrier = 8;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.safety_barrier_);
            }
            // .google.protobuf.Timestamp maturity_date = 9;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.maturity_date_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation issue_size_plan = 10;
            if (cached_has_bits & 0x00000008u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.issue_size_plan_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation issue_size = 11;
            if (cached_has_bits & 0x00000010u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.issue_size_);
            }
            // .google.protobuf.Timestamp placement_date = 12;
            if (cached_has_bits & 0x00000020u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.placement_date_);
            }
          }
           {
            // .tinkoff.public.invest.api.contract.v1.StructuredProductType type = 4;
            if (this_._internal_type() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_type());
            }
            // .tinkoff.public.invest.api.contract.v1.AssetType asset_type = 6;
            if (this_._internal_asset_type() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_asset_type());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void AssetStructuredProduct::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AssetStructuredProduct*>(&to_msg);
  auto& from = static_cast<const AssetStructuredProduct&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.AssetStructuredProduct)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_borrow_name().empty()) {
    _this->_internal_set_borrow_name(from._internal_borrow_name());
  }
  if (!from._internal_nominal_currency().empty()) {
    _this->_internal_set_nominal_currency(from._internal_nominal_currency());
  }
  if (!from._internal_logic_portfolio().empty()) {
    _this->_internal_set_logic_portfolio(from._internal_logic_portfolio());
  }
  if (!from._internal_basic_asset().empty()) {
    _this->_internal_set_basic_asset(from._internal_basic_asset());
  }
  if (!from._internal_issue_kind().empty()) {
    _this->_internal_set_issue_kind(from._internal_issue_kind());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.nominal_ != nullptr);
      if (_this->_impl_.nominal_ == nullptr) {
        _this->_impl_.nominal_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.nominal_);
      } else {
        _this->_impl_.nominal_->MergeFrom(*from._impl_.nominal_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.safety_barrier_ != nullptr);
      if (_this->_impl_.safety_barrier_ == nullptr) {
        _this->_impl_.safety_barrier_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.safety_barrier_);
      } else {
        _this->_impl_.safety_barrier_->MergeFrom(*from._impl_.safety_barrier_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.maturity_date_ != nullptr);
      if (_this->_impl_.maturity_date_ == nullptr) {
        _this->_impl_.maturity_date_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.maturity_date_);
      } else {
        _this->_impl_.maturity_date_->MergeFrom(*from._impl_.maturity_date_);
      }
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(from._impl_.issue_size_plan_ != nullptr);
      if (_this->_impl_.issue_size_plan_ == nullptr) {
        _this->_impl_.issue_size_plan_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.issue_size_plan_);
      } else {
        _this->_impl_.issue_size_plan_->MergeFrom(*from._impl_.issue_size_plan_);
      }
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(from._impl_.issue_size_ != nullptr);
      if (_this->_impl_.issue_size_ == nullptr) {
        _this->_impl_.issue_size_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.issue_size_);
      } else {
        _this->_impl_.issue_size_->MergeFrom(*from._impl_.issue_size_);
      }
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(from._impl_.placement_date_ != nullptr);
      if (_this->_impl_.placement_date_ == nullptr) {
        _this->_impl_.placement_date_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.placement_date_);
      } else {
        _this->_impl_.placement_date_->MergeFrom(*from._impl_.placement_date_);
      }
    }
  }
  if (from._internal_type() != 0) {
    _this->_impl_.type_ = from._impl_.type_;
  }
  if (from._internal_asset_type() != 0) {
    _this->_impl_.asset_type_ = from._impl_.asset_type_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AssetStructuredProduct::CopyFrom(const AssetStructuredProduct& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.AssetStructuredProduct)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AssetStructuredProduct::InternalSwap(AssetStructuredProduct* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.borrow_name_, &other->_impl_.borrow_name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.nominal_currency_, &other->_impl_.nominal_currency_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.logic_portfolio_, &other->_impl_.logic_portfolio_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.basic_asset_, &other->_impl_.basic_asset_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.issue_kind_, &other->_impl_.issue_kind_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AssetStructuredProduct, _impl_.asset_type_)
      + sizeof(AssetStructuredProduct::_impl_.asset_type_)
      - PROTOBUF_FIELD_OFFSET(AssetStructuredProduct, _impl_.nominal_)>(
          reinterpret_cast<char*>(&_impl_.nominal_),
          reinterpret_cast<char*>(&other->_impl_.nominal_));
}

::google::protobuf::Metadata AssetStructuredProduct::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AssetEtf::_Internal {
 public:
  using HasBits =
      decltype(std::declval<AssetEtf>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_._has_bits_);
};

void AssetEtf::clear_total_expense() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.total_expense_ != nullptr) _impl_.total_expense_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void AssetEtf::clear_hurdle_rate() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.hurdle_rate_ != nullptr) _impl_.hurdle_rate_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void AssetEtf::clear_performance_fee() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.performance_fee_ != nullptr) _impl_.performance_fee_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void AssetEtf::clear_fixed_commission() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.fixed_commission_ != nullptr) _impl_.fixed_commission_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void AssetEtf::clear_buy_premium() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.buy_premium_ != nullptr) _impl_.buy_premium_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void AssetEtf::clear_sell_discount() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.sell_discount_ != nullptr) _impl_.sell_discount_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
void AssetEtf::clear_num_share() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.num_share_ != nullptr) _impl_.num_share_->Clear();
  _impl_._has_bits_[0] &= ~0x00000040u;
}
void AssetEtf::clear_released_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.released_date_ != nullptr) _impl_.released_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000080u;
}
void AssetEtf::clear_index_recovery_period() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.index_recovery_period_ != nullptr) _impl_.index_recovery_period_->Clear();
  _impl_._has_bits_[0] &= ~0x00000100u;
}
void AssetEtf::clear_expense_commission() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.expense_commission_ != nullptr) _impl_.expense_commission_->Clear();
  _impl_._has_bits_[0] &= ~0x00000200u;
}
void AssetEtf::clear_primary_index_tracking_error() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.primary_index_tracking_error_ != nullptr) _impl_.primary_index_tracking_error_->Clear();
  _impl_._has_bits_[0] &= ~0x00000400u;
}
void AssetEtf::clear_rebalancing_dates() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.rebalancing_dates_.Clear();
}
void AssetEtf::clear_nominal() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.nominal_ != nullptr) _impl_.nominal_->Clear();
  _impl_._has_bits_[0] &= ~0x00000800u;
}
AssetEtf::AssetEtf(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.AssetEtf)
}
inline PROTOBUF_NDEBUG_INLINE AssetEtf::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::AssetEtf& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        rebalancing_dates_{visibility, arena, from.rebalancing_dates_},
        payment_type_(arena, from.payment_type_),
        rebalancing_freq_(arena, from.rebalancing_freq_),
        management_type_(arena, from.management_type_),
        primary_index_(arena, from.primary_index_),
        focus_type_(arena, from.focus_type_),
        description_(arena, from.description_),
        primary_index_description_(arena, from.primary_index_description_),
        primary_index_company_(arena, from.primary_index_company_),
        inav_code_(arena, from.inav_code_),
        rebalancing_plan_(arena, from.rebalancing_plan_),
        tax_rate_(arena, from.tax_rate_),
        issue_kind_(arena, from.issue_kind_),
        nominal_currency_(arena, from.nominal_currency_) {}

AssetEtf::AssetEtf(
    ::google::protobuf::Arena* arena,
    const AssetEtf& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AssetEtf* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.total_expense_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.total_expense_)
                        : nullptr;
  _impl_.hurdle_rate_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.hurdle_rate_)
                        : nullptr;
  _impl_.performance_fee_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.performance_fee_)
                        : nullptr;
  _impl_.fixed_commission_ = (cached_has_bits & 0x00000008u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.fixed_commission_)
                        : nullptr;
  _impl_.buy_premium_ = (cached_has_bits & 0x00000010u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.buy_premium_)
                        : nullptr;
  _impl_.sell_discount_ = (cached_has_bits & 0x00000020u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.sell_discount_)
                        : nullptr;
  _impl_.num_share_ = (cached_has_bits & 0x00000040u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.num_share_)
                        : nullptr;
  _impl_.released_date_ = (cached_has_bits & 0x00000080u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.released_date_)
                        : nullptr;
  _impl_.index_recovery_period_ = (cached_has_bits & 0x00000100u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.index_recovery_period_)
                        : nullptr;
  _impl_.expense_commission_ = (cached_has_bits & 0x00000200u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.expense_commission_)
                        : nullptr;
  _impl_.primary_index_tracking_error_ = (cached_has_bits & 0x00000400u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.primary_index_tracking_error_)
                        : nullptr;
  _impl_.nominal_ = (cached_has_bits & 0x00000800u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.nominal_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, watermark_flag_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, watermark_flag_),
           offsetof(Impl_, div_yield_flag_) -
               offsetof(Impl_, watermark_flag_) +
               sizeof(Impl_::div_yield_flag_));

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.AssetEtf)
}
inline PROTOBUF_NDEBUG_INLINE AssetEtf::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        rebalancing_dates_{visibility, arena},
        payment_type_(arena),
        rebalancing_freq_(arena),
        management_type_(arena),
        primary_index_(arena),
        focus_type_(arena),
        description_(arena),
        primary_index_description_(arena),
        primary_index_company_(arena),
        inav_code_(arena),
        rebalancing_plan_(arena),
        tax_rate_(arena),
        issue_kind_(arena),
        nominal_currency_(arena) {}

inline void AssetEtf::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, total_expense_),
           0,
           offsetof(Impl_, div_yield_flag_) -
               offsetof(Impl_, total_expense_) +
               sizeof(Impl_::div_yield_flag_));
}
AssetEtf::~AssetEtf() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.AssetEtf)
  SharedDtor(*this);
}
inline void AssetEtf::SharedDtor(MessageLite& self) {
  AssetEtf& this_ = static_cast<AssetEtf&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.payment_type_.Destroy();
  this_._impl_.rebalancing_freq_.Destroy();
  this_._impl_.management_type_.Destroy();
  this_._impl_.primary_index_.Destroy();
  this_._impl_.focus_type_.Destroy();
  this_._impl_.description_.Destroy();
  this_._impl_.primary_index_description_.Destroy();
  this_._impl_.primary_index_company_.Destroy();
  this_._impl_.inav_code_.Destroy();
  this_._impl_.rebalancing_plan_.Destroy();
  this_._impl_.tax_rate_.Destroy();
  this_._impl_.issue_kind_.Destroy();
  this_._impl_.nominal_currency_.Destroy();
  delete this_._impl_.total_expense_;
  delete this_._impl_.hurdle_rate_;
  delete this_._impl_.performance_fee_;
  delete this_._impl_.fixed_commission_;
  delete this_._impl_.buy_premium_;
  delete this_._impl_.sell_discount_;
  delete this_._impl_.num_share_;
  delete this_._impl_.released_date_;
  delete this_._impl_.index_recovery_period_;
  delete this_._impl_.expense_commission_;
  delete this_._impl_.primary_index_tracking_error_;
  delete this_._impl_.nominal_;
  this_._impl_.~Impl_();
}

inline void* AssetEtf::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) AssetEtf(arena);
}
constexpr auto AssetEtf::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.rebalancing_dates_) +
          decltype(AssetEtf::_impl_.rebalancing_dates_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(AssetEtf), alignof(AssetEtf), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&AssetEtf::PlacementNew_,
                                 sizeof(AssetEtf),
                                 alignof(AssetEtf));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull AssetEtf::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_AssetEtf_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &AssetEtf::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<AssetEtf>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &AssetEtf::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<AssetEtf>(), &AssetEtf::ByteSizeLong,
            &AssetEtf::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_._cached_size_),
        false,
    },
    &AssetEtf::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* AssetEtf::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 31, 13, 261, 2> AssetEtf::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_._has_bits_),
    0, // no _extensions_
    31, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    2147483648,  // skipmap
    offsetof(decltype(_table_), field_entries),
    31,  // num_field_entries
    13,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::AssetEtf>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // .tinkoff.public.invest.api.contract.v1.Quotation total_expense = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.total_expense_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation hurdle_rate = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.hurdle_rate_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation performance_fee = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 2, 2, PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.performance_fee_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation fixed_commission = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 3, 3, PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.fixed_commission_)}},
    // string payment_type = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.payment_type_)}},
    // bool watermark_flag = 6;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AssetEtf, _impl_.watermark_flag_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.watermark_flag_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation buy_premium = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 4, 4, PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.buy_premium_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation sell_discount = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 5, 5, PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.sell_discount_)}},
    // bool rebalancing_flag = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AssetEtf, _impl_.rebalancing_flag_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.rebalancing_flag_)}},
    // string rebalancing_freq = 10;
    {::_pbi::TcParser::FastUS1,
     {82, 63, 0, PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.rebalancing_freq_)}},
    // string management_type = 11;
    {::_pbi::TcParser::FastUS1,
     {90, 63, 0, PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.management_type_)}},
    // string primary_index = 12;
    {::_pbi::TcParser::FastUS1,
     {98, 63, 0, PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.primary_index_)}},
    // string focus_type = 13;
    {::_pbi::TcParser::FastUS1,
     {106, 63, 0, PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.focus_type_)}},
    // bool leveraged_flag = 14;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(AssetEtf, _impl_.leveraged_flag_), 63>(),
     {112, 63, 0, PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.leveraged_flag_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation num_share = 15;
    {::_pbi::TcParser::FastMtS1,
     {122, 6, 6, PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.num_share_)}},
    // bool ucits_flag = 16;
    {::_pbi::TcParser::FastV8S2,
     {384, 63, 0, PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.ucits_flag_)}},
    // .google.protobuf.Timestamp released_date = 17;
    {::_pbi::TcParser::FastMtS2,
     {394, 7, 7, PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.released_date_)}},
    // string description = 18;
    {::_pbi::TcParser::FastUS2,
     {402, 63, 0, PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.description_)}},
    // string primary_index_description = 19;
    {::_pbi::TcParser::FastUS2,
     {410, 63, 0, PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.primary_index_description_)}},
    // string primary_index_company = 20;
    {::_pbi::TcParser::FastUS2,
     {418, 63, 0, PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.primary_index_company_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation index_recovery_period = 21;
    {::_pbi::TcParser::FastMtS2,
     {426, 8, 8, PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.index_recovery_period_)}},
    // string inav_code = 22;
    {::_pbi::TcParser::FastUS2,
     {434, 63, 0, PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.inav_code_)}},
    // bool div_yield_flag = 23;
    {::_pbi::TcParser::FastV8S2,
     {440, 63, 0, PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.div_yield_flag_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation expense_commission = 24;
    {::_pbi::TcParser::FastMtS2,
     {450, 9, 9, PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.expense_commission_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation primary_index_tracking_error = 25;
    {::_pbi::TcParser::FastMtS2,
     {458, 10, 10, PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.primary_index_tracking_error_)}},
    // string rebalancing_plan = 26;
    {::_pbi::TcParser::FastUS2,
     {466, 63, 0, PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.rebalancing_plan_)}},
    // string tax_rate = 27;
    {::_pbi::TcParser::FastUS2,
     {474, 63, 0, PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.tax_rate_)}},
    // repeated .google.protobuf.Timestamp rebalancing_dates = 28;
    {::_pbi::TcParser::FastMtR2,
     {482, 63, 11, PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.rebalancing_dates_)}},
    // string issue_kind = 29;
    {::_pbi::TcParser::FastUS2,
     {490, 63, 0, PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.issue_kind_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation nominal = 30;
    {::_pbi::TcParser::FastMtS2,
     {498, 11, 12, PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.nominal_)}},
    // string nominal_currency = 31;
    {::_pbi::TcParser::FastUS2,
     {506, 63, 0, PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.nominal_currency_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .tinkoff.public.invest.api.contract.v1.Quotation total_expense = 1;
    {PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.total_expense_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation hurdle_rate = 2;
    {PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.hurdle_rate_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation performance_fee = 3;
    {PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.performance_fee_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation fixed_commission = 4;
    {PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.fixed_commission_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string payment_type = 5;
    {PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.payment_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool watermark_flag = 6;
    {PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.watermark_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .tinkoff.public.invest.api.contract.v1.Quotation buy_premium = 7;
    {PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.buy_premium_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation sell_discount = 8;
    {PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.sell_discount_), _Internal::kHasBitsOffset + 5, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool rebalancing_flag = 9;
    {PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.rebalancing_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // string rebalancing_freq = 10;
    {PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.rebalancing_freq_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string management_type = 11;
    {PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.management_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string primary_index = 12;
    {PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.primary_index_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string focus_type = 13;
    {PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.focus_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool leveraged_flag = 14;
    {PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.leveraged_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .tinkoff.public.invest.api.contract.v1.Quotation num_share = 15;
    {PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.num_share_), _Internal::kHasBitsOffset + 6, 6,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool ucits_flag = 16;
    {PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.ucits_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .google.protobuf.Timestamp released_date = 17;
    {PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.released_date_), _Internal::kHasBitsOffset + 7, 7,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string description = 18;
    {PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.description_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string primary_index_description = 19;
    {PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.primary_index_description_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string primary_index_company = 20;
    {PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.primary_index_company_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public.invest.api.contract.v1.Quotation index_recovery_period = 21;
    {PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.index_recovery_period_), _Internal::kHasBitsOffset + 8, 8,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string inav_code = 22;
    {PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.inav_code_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool div_yield_flag = 23;
    {PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.div_yield_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .tinkoff.public.invest.api.contract.v1.Quotation expense_commission = 24;
    {PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.expense_commission_), _Internal::kHasBitsOffset + 9, 9,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation primary_index_tracking_error = 25;
    {PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.primary_index_tracking_error_), _Internal::kHasBitsOffset + 10, 10,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string rebalancing_plan = 26;
    {PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.rebalancing_plan_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string tax_rate = 27;
    {PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.tax_rate_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .google.protobuf.Timestamp rebalancing_dates = 28;
    {PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.rebalancing_dates_), -1, 11,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // string issue_kind = 29;
    {PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.issue_kind_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public.invest.api.contract.v1.Quotation nominal = 30;
    {PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.nominal_), _Internal::kHasBitsOffset + 11, 12,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string nominal_currency = 31;
    {PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.nominal_currency_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
  }}, {{
    "\56\0\0\0\0\14\0\0\0\0\20\17\15\12\0\0\0\0\13\31\25\0\11\0\0\0\20\10\0\12\0\20"
    "tinkoff.public.invest.api.contract.v1.AssetEtf"
    "payment_type"
    "rebalancing_freq"
    "management_type"
    "primary_index"
    "focus_type"
    "description"
    "primary_index_description"
    "primary_index_company"
    "inav_code"
    "rebalancing_plan"
    "tax_rate"
    "issue_kind"
    "nominal_currency"
  }},
};

PROTOBUF_NOINLINE void AssetEtf::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.AssetEtf)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.rebalancing_dates_.Clear();
  _impl_.payment_type_.ClearToEmpty();
  _impl_.rebalancing_freq_.ClearToEmpty();
  _impl_.management_type_.ClearToEmpty();
  _impl_.primary_index_.ClearToEmpty();
  _impl_.focus_type_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.primary_index_description_.ClearToEmpty();
  _impl_.primary_index_company_.ClearToEmpty();
  _impl_.inav_code_.ClearToEmpty();
  _impl_.rebalancing_plan_.ClearToEmpty();
  _impl_.tax_rate_.ClearToEmpty();
  _impl_.issue_kind_.ClearToEmpty();
  _impl_.nominal_currency_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.total_expense_ != nullptr);
      _impl_.total_expense_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.hurdle_rate_ != nullptr);
      _impl_.hurdle_rate_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.performance_fee_ != nullptr);
      _impl_.performance_fee_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.fixed_commission_ != nullptr);
      _impl_.fixed_commission_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.buy_premium_ != nullptr);
      _impl_.buy_premium_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.sell_discount_ != nullptr);
      _impl_.sell_discount_->Clear();
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(_impl_.num_share_ != nullptr);
      _impl_.num_share_->Clear();
    }
    if (cached_has_bits & 0x00000080u) {
      ABSL_DCHECK(_impl_.released_date_ != nullptr);
      _impl_.released_date_->Clear();
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      ABSL_DCHECK(_impl_.index_recovery_period_ != nullptr);
      _impl_.index_recovery_period_->Clear();
    }
    if (cached_has_bits & 0x00000200u) {
      ABSL_DCHECK(_impl_.expense_commission_ != nullptr);
      _impl_.expense_commission_->Clear();
    }
    if (cached_has_bits & 0x00000400u) {
      ABSL_DCHECK(_impl_.primary_index_tracking_error_ != nullptr);
      _impl_.primary_index_tracking_error_->Clear();
    }
    if (cached_has_bits & 0x00000800u) {
      ABSL_DCHECK(_impl_.nominal_ != nullptr);
      _impl_.nominal_->Clear();
    }
  }
  ::memset(&_impl_.watermark_flag_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.div_yield_flag_) -
      reinterpret_cast<char*>(&_impl_.watermark_flag_)) + sizeof(_impl_.div_yield_flag_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* AssetEtf::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const AssetEtf& this_ = static_cast<const AssetEtf&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* AssetEtf::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const AssetEtf& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.AssetEtf)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .tinkoff.public.invest.api.contract.v1.Quotation total_expense = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.total_expense_, this_._impl_.total_expense_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation hurdle_rate = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.hurdle_rate_, this_._impl_.hurdle_rate_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation performance_fee = 3;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.performance_fee_, this_._impl_.performance_fee_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation fixed_commission = 4;
          if (cached_has_bits & 0x00000008u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                4, *this_._impl_.fixed_commission_, this_._impl_.fixed_commission_->GetCachedSize(), target,
                stream);
          }

          // string payment_type = 5;
          if (!this_._internal_payment_type().empty()) {
            const std::string& _s = this_._internal_payment_type();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.AssetEtf.payment_type");
            target = stream->WriteStringMaybeAliased(5, _s, target);
          }

          // bool watermark_flag = 6;
          if (this_._internal_watermark_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                6, this_._internal_watermark_flag(), target);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation buy_premium = 7;
          if (cached_has_bits & 0x00000010u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                7, *this_._impl_.buy_premium_, this_._impl_.buy_premium_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation sell_discount = 8;
          if (cached_has_bits & 0x00000020u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                8, *this_._impl_.sell_discount_, this_._impl_.sell_discount_->GetCachedSize(), target,
                stream);
          }

          // bool rebalancing_flag = 9;
          if (this_._internal_rebalancing_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                9, this_._internal_rebalancing_flag(), target);
          }

          // string rebalancing_freq = 10;
          if (!this_._internal_rebalancing_freq().empty()) {
            const std::string& _s = this_._internal_rebalancing_freq();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.AssetEtf.rebalancing_freq");
            target = stream->WriteStringMaybeAliased(10, _s, target);
          }

          // string management_type = 11;
          if (!this_._internal_management_type().empty()) {
            const std::string& _s = this_._internal_management_type();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.AssetEtf.management_type");
            target = stream->WriteStringMaybeAliased(11, _s, target);
          }

          // string primary_index = 12;
          if (!this_._internal_primary_index().empty()) {
            const std::string& _s = this_._internal_primary_index();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.AssetEtf.primary_index");
            target = stream->WriteStringMaybeAliased(12, _s, target);
          }

          // string focus_type = 13;
          if (!this_._internal_focus_type().empty()) {
            const std::string& _s = this_._internal_focus_type();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.AssetEtf.focus_type");
            target = stream->WriteStringMaybeAliased(13, _s, target);
          }

          // bool leveraged_flag = 14;
          if (this_._internal_leveraged_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                14, this_._internal_leveraged_flag(), target);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation num_share = 15;
          if (cached_has_bits & 0x00000040u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                15, *this_._impl_.num_share_, this_._impl_.num_share_->GetCachedSize(), target,
                stream);
          }

          // bool ucits_flag = 16;
          if (this_._internal_ucits_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                16, this_._internal_ucits_flag(), target);
          }

          // .google.protobuf.Timestamp released_date = 17;
          if (cached_has_bits & 0x00000080u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                17, *this_._impl_.released_date_, this_._impl_.released_date_->GetCachedSize(), target,
                stream);
          }

          // string description = 18;
          if (!this_._internal_description().empty()) {
            const std::string& _s = this_._internal_description();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.AssetEtf.description");
            target = stream->WriteStringMaybeAliased(18, _s, target);
          }

          // string primary_index_description = 19;
          if (!this_._internal_primary_index_description().empty()) {
            const std::string& _s = this_._internal_primary_index_description();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.AssetEtf.primary_index_description");
            target = stream->WriteStringMaybeAliased(19, _s, target);
          }

          // string primary_index_company = 20;
          if (!this_._internal_primary_index_company().empty()) {
            const std::string& _s = this_._internal_primary_index_company();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.AssetEtf.primary_index_company");
            target = stream->WriteStringMaybeAliased(20, _s, target);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation index_recovery_period = 21;
          if (cached_has_bits & 0x00000100u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                21, *this_._impl_.index_recovery_period_, this_._impl_.index_recovery_period_->GetCachedSize(), target,
                stream);
          }

          // string inav_code = 22;
          if (!this_._internal_inav_code().empty()) {
            const std::string& _s = this_._internal_inav_code();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.AssetEtf.inav_code");
            target = stream->WriteStringMaybeAliased(22, _s, target);
          }

          // bool div_yield_flag = 23;
          if (this_._internal_div_yield_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                23, this_._internal_div_yield_flag(), target);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation expense_commission = 24;
          if (cached_has_bits & 0x00000200u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                24, *this_._impl_.expense_commission_, this_._impl_.expense_commission_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation primary_index_tracking_error = 25;
          if (cached_has_bits & 0x00000400u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                25, *this_._impl_.primary_index_tracking_error_, this_._impl_.primary_index_tracking_error_->GetCachedSize(), target,
                stream);
          }

          // string rebalancing_plan = 26;
          if (!this_._internal_rebalancing_plan().empty()) {
            const std::string& _s = this_._internal_rebalancing_plan();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.AssetEtf.rebalancing_plan");
            target = stream->WriteStringMaybeAliased(26, _s, target);
          }

          // string tax_rate = 27;
          if (!this_._internal_tax_rate().empty()) {
            const std::string& _s = this_._internal_tax_rate();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.AssetEtf.tax_rate");
            target = stream->WriteStringMaybeAliased(27, _s, target);
          }

          // repeated .google.protobuf.Timestamp rebalancing_dates = 28;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_rebalancing_dates_size());
               i < n; i++) {
            const auto& repfield = this_._internal_rebalancing_dates().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    28, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // string issue_kind = 29;
          if (!this_._internal_issue_kind().empty()) {
            const std::string& _s = this_._internal_issue_kind();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.AssetEtf.issue_kind");
            target = stream->WriteStringMaybeAliased(29, _s, target);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation nominal = 30;
          if (cached_has_bits & 0x00000800u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                30, *this_._impl_.nominal_, this_._impl_.nominal_->GetCachedSize(), target,
                stream);
          }

          // string nominal_currency = 31;
          if (!this_._internal_nominal_currency().empty()) {
            const std::string& _s = this_._internal_nominal_currency();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.AssetEtf.nominal_currency");
            target = stream->WriteStringMaybeAliased(31, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.AssetEtf)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t AssetEtf::ByteSizeLong(const MessageLite& base) {
          const AssetEtf& this_ = static_cast<const AssetEtf&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t AssetEtf::ByteSizeLong() const {
          const AssetEtf& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.AssetEtf)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .google.protobuf.Timestamp rebalancing_dates = 28;
            {
              total_size += 2UL * this_._internal_rebalancing_dates_size();
              for (const auto& msg : this_._internal_rebalancing_dates()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // string payment_type = 5;
            if (!this_._internal_payment_type().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_payment_type());
            }
            // string rebalancing_freq = 10;
            if (!this_._internal_rebalancing_freq().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_rebalancing_freq());
            }
            // string management_type = 11;
            if (!this_._internal_management_type().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_management_type());
            }
            // string primary_index = 12;
            if (!this_._internal_primary_index().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_primary_index());
            }
            // string focus_type = 13;
            if (!this_._internal_focus_type().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_focus_type());
            }
            // string description = 18;
            if (!this_._internal_description().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_description());
            }
            // string primary_index_description = 19;
            if (!this_._internal_primary_index_description().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_primary_index_description());
            }
            // string primary_index_company = 20;
            if (!this_._internal_primary_index_company().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_primary_index_company());
            }
            // string inav_code = 22;
            if (!this_._internal_inav_code().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_inav_code());
            }
            // string rebalancing_plan = 26;
            if (!this_._internal_rebalancing_plan().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_rebalancing_plan());
            }
            // string tax_rate = 27;
            if (!this_._internal_tax_rate().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_tax_rate());
            }
            // string issue_kind = 29;
            if (!this_._internal_issue_kind().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_issue_kind());
            }
            // string nominal_currency = 31;
            if (!this_._internal_nominal_currency().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_nominal_currency());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x000000ffu) {
            // .tinkoff.public.invest.api.contract.v1.Quotation total_expense = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.total_expense_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation hurdle_rate = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.hurdle_rate_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation performance_fee = 3;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.performance_fee_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation fixed_commission = 4;
            if (cached_has_bits & 0x00000008u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.fixed_commission_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation buy_premium = 7;
            if (cached_has_bits & 0x00000010u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.buy_premium_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation sell_discount = 8;
            if (cached_has_bits & 0x00000020u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.sell_discount_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation num_share = 15;
            if (cached_has_bits & 0x00000040u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.num_share_);
            }
            // .google.protobuf.Timestamp released_date = 17;
            if (cached_has_bits & 0x00000080u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.released_date_);
            }
          }
          if (cached_has_bits & 0x00000f00u) {
            // .tinkoff.public.invest.api.contract.v1.Quotation index_recovery_period = 21;
            if (cached_has_bits & 0x00000100u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.index_recovery_period_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation expense_commission = 24;
            if (cached_has_bits & 0x00000200u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.expense_commission_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation primary_index_tracking_error = 25;
            if (cached_has_bits & 0x00000400u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.primary_index_tracking_error_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation nominal = 30;
            if (cached_has_bits & 0x00000800u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.nominal_);
            }
          }
           {
            // bool watermark_flag = 6;
            if (this_._internal_watermark_flag() != 0) {
              total_size += 2;
            }
            // bool rebalancing_flag = 9;
            if (this_._internal_rebalancing_flag() != 0) {
              total_size += 2;
            }
            // bool leveraged_flag = 14;
            if (this_._internal_leveraged_flag() != 0) {
              total_size += 2;
            }
            // bool ucits_flag = 16;
            if (this_._internal_ucits_flag() != 0) {
              total_size += 3;
            }
            // bool div_yield_flag = 23;
            if (this_._internal_div_yield_flag() != 0) {
              total_size += 3;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void AssetEtf::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AssetEtf*>(&to_msg);
  auto& from = static_cast<const AssetEtf&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.AssetEtf)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_rebalancing_dates()->MergeFrom(
      from._internal_rebalancing_dates());
  if (!from._internal_payment_type().empty()) {
    _this->_internal_set_payment_type(from._internal_payment_type());
  }
  if (!from._internal_rebalancing_freq().empty()) {
    _this->_internal_set_rebalancing_freq(from._internal_rebalancing_freq());
  }
  if (!from._internal_management_type().empty()) {
    _this->_internal_set_management_type(from._internal_management_type());
  }
  if (!from._internal_primary_index().empty()) {
    _this->_internal_set_primary_index(from._internal_primary_index());
  }
  if (!from._internal_focus_type().empty()) {
    _this->_internal_set_focus_type(from._internal_focus_type());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_primary_index_description().empty()) {
    _this->_internal_set_primary_index_description(from._internal_primary_index_description());
  }
  if (!from._internal_primary_index_company().empty()) {
    _this->_internal_set_primary_index_company(from._internal_primary_index_company());
  }
  if (!from._internal_inav_code().empty()) {
    _this->_internal_set_inav_code(from._internal_inav_code());
  }
  if (!from._internal_rebalancing_plan().empty()) {
    _this->_internal_set_rebalancing_plan(from._internal_rebalancing_plan());
  }
  if (!from._internal_tax_rate().empty()) {
    _this->_internal_set_tax_rate(from._internal_tax_rate());
  }
  if (!from._internal_issue_kind().empty()) {
    _this->_internal_set_issue_kind(from._internal_issue_kind());
  }
  if (!from._internal_nominal_currency().empty()) {
    _this->_internal_set_nominal_currency(from._internal_nominal_currency());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x000000ffu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.total_expense_ != nullptr);
      if (_this->_impl_.total_expense_ == nullptr) {
        _this->_impl_.total_expense_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.total_expense_);
      } else {
        _this->_impl_.total_expense_->MergeFrom(*from._impl_.total_expense_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.hurdle_rate_ != nullptr);
      if (_this->_impl_.hurdle_rate_ == nullptr) {
        _this->_impl_.hurdle_rate_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.hurdle_rate_);
      } else {
        _this->_impl_.hurdle_rate_->MergeFrom(*from._impl_.hurdle_rate_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.performance_fee_ != nullptr);
      if (_this->_impl_.performance_fee_ == nullptr) {
        _this->_impl_.performance_fee_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.performance_fee_);
      } else {
        _this->_impl_.performance_fee_->MergeFrom(*from._impl_.performance_fee_);
      }
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(from._impl_.fixed_commission_ != nullptr);
      if (_this->_impl_.fixed_commission_ == nullptr) {
        _this->_impl_.fixed_commission_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.fixed_commission_);
      } else {
        _this->_impl_.fixed_commission_->MergeFrom(*from._impl_.fixed_commission_);
      }
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(from._impl_.buy_premium_ != nullptr);
      if (_this->_impl_.buy_premium_ == nullptr) {
        _this->_impl_.buy_premium_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.buy_premium_);
      } else {
        _this->_impl_.buy_premium_->MergeFrom(*from._impl_.buy_premium_);
      }
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(from._impl_.sell_discount_ != nullptr);
      if (_this->_impl_.sell_discount_ == nullptr) {
        _this->_impl_.sell_discount_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.sell_discount_);
      } else {
        _this->_impl_.sell_discount_->MergeFrom(*from._impl_.sell_discount_);
      }
    }
    if (cached_has_bits & 0x00000040u) {
      ABSL_DCHECK(from._impl_.num_share_ != nullptr);
      if (_this->_impl_.num_share_ == nullptr) {
        _this->_impl_.num_share_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.num_share_);
      } else {
        _this->_impl_.num_share_->MergeFrom(*from._impl_.num_share_);
      }
    }
    if (cached_has_bits & 0x00000080u) {
      ABSL_DCHECK(from._impl_.released_date_ != nullptr);
      if (_this->_impl_.released_date_ == nullptr) {
        _this->_impl_.released_date_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.released_date_);
      } else {
        _this->_impl_.released_date_->MergeFrom(*from._impl_.released_date_);
      }
    }
  }
  if (cached_has_bits & 0x00000f00u) {
    if (cached_has_bits & 0x00000100u) {
      ABSL_DCHECK(from._impl_.index_recovery_period_ != nullptr);
      if (_this->_impl_.index_recovery_period_ == nullptr) {
        _this->_impl_.index_recovery_period_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.index_recovery_period_);
      } else {
        _this->_impl_.index_recovery_period_->MergeFrom(*from._impl_.index_recovery_period_);
      }
    }
    if (cached_has_bits & 0x00000200u) {
      ABSL_DCHECK(from._impl_.expense_commission_ != nullptr);
      if (_this->_impl_.expense_commission_ == nullptr) {
        _this->_impl_.expense_commission_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.expense_commission_);
      } else {
        _this->_impl_.expense_commission_->MergeFrom(*from._impl_.expense_commission_);
      }
    }
    if (cached_has_bits & 0x00000400u) {
      ABSL_DCHECK(from._impl_.primary_index_tracking_error_ != nullptr);
      if (_this->_impl_.primary_index_tracking_error_ == nullptr) {
        _this->_impl_.primary_index_tracking_error_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.primary_index_tracking_error_);
      } else {
        _this->_impl_.primary_index_tracking_error_->MergeFrom(*from._impl_.primary_index_tracking_error_);
      }
    }
    if (cached_has_bits & 0x00000800u) {
      ABSL_DCHECK(from._impl_.nominal_ != nullptr);
      if (_this->_impl_.nominal_ == nullptr) {
        _this->_impl_.nominal_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.nominal_);
      } else {
        _this->_impl_.nominal_->MergeFrom(*from._impl_.nominal_);
      }
    }
  }
  if (from._internal_watermark_flag() != 0) {
    _this->_impl_.watermark_flag_ = from._impl_.watermark_flag_;
  }
  if (from._internal_rebalancing_flag() != 0) {
    _this->_impl_.rebalancing_flag_ = from._impl_.rebalancing_flag_;
  }
  if (from._internal_leveraged_flag() != 0) {
    _this->_impl_.leveraged_flag_ = from._impl_.leveraged_flag_;
  }
  if (from._internal_ucits_flag() != 0) {
    _this->_impl_.ucits_flag_ = from._impl_.ucits_flag_;
  }
  if (from._internal_div_yield_flag() != 0) {
    _this->_impl_.div_yield_flag_ = from._impl_.div_yield_flag_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AssetEtf::CopyFrom(const AssetEtf& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.AssetEtf)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AssetEtf::InternalSwap(AssetEtf* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.rebalancing_dates_.InternalSwap(&other->_impl_.rebalancing_dates_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.payment_type_, &other->_impl_.payment_type_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.rebalancing_freq_, &other->_impl_.rebalancing_freq_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.management_type_, &other->_impl_.management_type_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.primary_index_, &other->_impl_.primary_index_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.focus_type_, &other->_impl_.focus_type_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, &other->_impl_.description_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.primary_index_description_, &other->_impl_.primary_index_description_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.primary_index_company_, &other->_impl_.primary_index_company_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.inav_code_, &other->_impl_.inav_code_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.rebalancing_plan_, &other->_impl_.rebalancing_plan_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.tax_rate_, &other->_impl_.tax_rate_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.issue_kind_, &other->_impl_.issue_kind_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.nominal_currency_, &other->_impl_.nominal_currency_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.div_yield_flag_)
      + sizeof(AssetEtf::_impl_.div_yield_flag_)
      - PROTOBUF_FIELD_OFFSET(AssetEtf, _impl_.total_expense_)>(
          reinterpret_cast<char*>(&_impl_.total_expense_),
          reinterpret_cast<char*>(&other->_impl_.total_expense_));
}

::google::protobuf::Metadata AssetEtf::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AssetClearingCertificate::_Internal {
 public:
  using HasBits =
      decltype(std::declval<AssetClearingCertificate>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(AssetClearingCertificate, _impl_._has_bits_);
};

void AssetClearingCertificate::clear_nominal() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.nominal_ != nullptr) _impl_.nominal_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
AssetClearingCertificate::AssetClearingCertificate(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.AssetClearingCertificate)
}
inline PROTOBUF_NDEBUG_INLINE AssetClearingCertificate::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::AssetClearingCertificate& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        nominal_currency_(arena, from.nominal_currency_) {}

AssetClearingCertificate::AssetClearingCertificate(
    ::google::protobuf::Arena* arena,
    const AssetClearingCertificate& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AssetClearingCertificate* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.nominal_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.nominal_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.AssetClearingCertificate)
}
inline PROTOBUF_NDEBUG_INLINE AssetClearingCertificate::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        nominal_currency_(arena) {}

inline void AssetClearingCertificate::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.nominal_ = {};
}
AssetClearingCertificate::~AssetClearingCertificate() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.AssetClearingCertificate)
  SharedDtor(*this);
}
inline void AssetClearingCertificate::SharedDtor(MessageLite& self) {
  AssetClearingCertificate& this_ = static_cast<AssetClearingCertificate&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.nominal_currency_.Destroy();
  delete this_._impl_.nominal_;
  this_._impl_.~Impl_();
}

inline void* AssetClearingCertificate::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) AssetClearingCertificate(arena);
}
constexpr auto AssetClearingCertificate::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(AssetClearingCertificate),
                                            alignof(AssetClearingCertificate));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull AssetClearingCertificate::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_AssetClearingCertificate_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &AssetClearingCertificate::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<AssetClearingCertificate>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &AssetClearingCertificate::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<AssetClearingCertificate>(), &AssetClearingCertificate::ByteSizeLong,
            &AssetClearingCertificate::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(AssetClearingCertificate, _impl_._cached_size_),
        false,
    },
    &AssetClearingCertificate::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* AssetClearingCertificate::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 87, 2> AssetClearingCertificate::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(AssetClearingCertificate, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::AssetClearingCertificate>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string nominal_currency = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(AssetClearingCertificate, _impl_.nominal_currency_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation nominal = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(AssetClearingCertificate, _impl_.nominal_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .tinkoff.public.invest.api.contract.v1.Quotation nominal = 1;
    {PROTOBUF_FIELD_OFFSET(AssetClearingCertificate, _impl_.nominal_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string nominal_currency = 2;
    {PROTOBUF_FIELD_OFFSET(AssetClearingCertificate, _impl_.nominal_currency_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
  }}, {{
    "\76\0\20\0\0\0\0\0"
    "tinkoff.public.invest.api.contract.v1.AssetClearingCertificate"
    "nominal_currency"
  }},
};

PROTOBUF_NOINLINE void AssetClearingCertificate::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.AssetClearingCertificate)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.nominal_currency_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.nominal_ != nullptr);
    _impl_.nominal_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* AssetClearingCertificate::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const AssetClearingCertificate& this_ = static_cast<const AssetClearingCertificate&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* AssetClearingCertificate::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const AssetClearingCertificate& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.AssetClearingCertificate)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .tinkoff.public.invest.api.contract.v1.Quotation nominal = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.nominal_, this_._impl_.nominal_->GetCachedSize(), target,
                stream);
          }

          // string nominal_currency = 2;
          if (!this_._internal_nominal_currency().empty()) {
            const std::string& _s = this_._internal_nominal_currency();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.AssetClearingCertificate.nominal_currency");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.AssetClearingCertificate)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t AssetClearingCertificate::ByteSizeLong(const MessageLite& base) {
          const AssetClearingCertificate& this_ = static_cast<const AssetClearingCertificate&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t AssetClearingCertificate::ByteSizeLong() const {
          const AssetClearingCertificate& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.AssetClearingCertificate)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string nominal_currency = 2;
            if (!this_._internal_nominal_currency().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_nominal_currency());
            }
          }
           {
            // .tinkoff.public.invest.api.contract.v1.Quotation nominal = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.nominal_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void AssetClearingCertificate::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AssetClearingCertificate*>(&to_msg);
  auto& from = static_cast<const AssetClearingCertificate&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.AssetClearingCertificate)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_nominal_currency().empty()) {
    _this->_internal_set_nominal_currency(from._internal_nominal_currency());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.nominal_ != nullptr);
    if (_this->_impl_.nominal_ == nullptr) {
      _this->_impl_.nominal_ =
          ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.nominal_);
    } else {
      _this->_impl_.nominal_->MergeFrom(*from._impl_.nominal_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AssetClearingCertificate::CopyFrom(const AssetClearingCertificate& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.AssetClearingCertificate)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AssetClearingCertificate::InternalSwap(AssetClearingCertificate* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.nominal_currency_, &other->_impl_.nominal_currency_, arena);
  swap(_impl_.nominal_, other->_impl_.nominal_);
}

::google::protobuf::Metadata AssetClearingCertificate::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class Brand::_Internal {
 public:
};

Brand::Brand(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.Brand)
}
inline PROTOBUF_NDEBUG_INLINE Brand::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::Brand& from_msg)
      : uid_(arena, from.uid_),
        name_(arena, from.name_),
        description_(arena, from.description_),
        info_(arena, from.info_),
        company_(arena, from.company_),
        sector_(arena, from.sector_),
        country_of_risk_(arena, from.country_of_risk_),
        country_of_risk_name_(arena, from.country_of_risk_name_),
        _cached_size_{0} {}

Brand::Brand(
    ::google::protobuf::Arena* arena,
    const Brand& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  Brand* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.Brand)
}
inline PROTOBUF_NDEBUG_INLINE Brand::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : uid_(arena),
        name_(arena),
        description_(arena),
        info_(arena),
        company_(arena),
        sector_(arena),
        country_of_risk_(arena),
        country_of_risk_name_(arena),
        _cached_size_{0} {}

inline void Brand::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
Brand::~Brand() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.Brand)
  SharedDtor(*this);
}
inline void Brand::SharedDtor(MessageLite& self) {
  Brand& this_ = static_cast<Brand&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.uid_.Destroy();
  this_._impl_.name_.Destroy();
  this_._impl_.description_.Destroy();
  this_._impl_.info_.Destroy();
  this_._impl_.company_.Destroy();
  this_._impl_.sector_.Destroy();
  this_._impl_.country_of_risk_.Destroy();
  this_._impl_.country_of_risk_name_.Destroy();
  this_._impl_.~Impl_();
}

inline void* Brand::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) Brand(arena);
}
constexpr auto Brand::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(Brand),
                                            alignof(Brand));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull Brand::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_Brand_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &Brand::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<Brand>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &Brand::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<Brand>(), &Brand::ByteSizeLong,
            &Brand::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(Brand, _impl_._cached_size_),
        false,
    },
    &Brand::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* Brand::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 8, 0, 130, 2> Brand::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    8, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967040,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Brand>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string country_of_risk_name = 8;
    {::_pbi::TcParser::FastUS1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(Brand, _impl_.country_of_risk_name_)}},
    // string uid = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(Brand, _impl_.uid_)}},
    // string name = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(Brand, _impl_.name_)}},
    // string description = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(Brand, _impl_.description_)}},
    // string info = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(Brand, _impl_.info_)}},
    // string company = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(Brand, _impl_.company_)}},
    // string sector = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(Brand, _impl_.sector_)}},
    // string country_of_risk = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(Brand, _impl_.country_of_risk_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string uid = 1;
    {PROTOBUF_FIELD_OFFSET(Brand, _impl_.uid_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string name = 2;
    {PROTOBUF_FIELD_OFFSET(Brand, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string description = 3;
    {PROTOBUF_FIELD_OFFSET(Brand, _impl_.description_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string info = 4;
    {PROTOBUF_FIELD_OFFSET(Brand, _impl_.info_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string company = 5;
    {PROTOBUF_FIELD_OFFSET(Brand, _impl_.company_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string sector = 6;
    {PROTOBUF_FIELD_OFFSET(Brand, _impl_.sector_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string country_of_risk = 7;
    {PROTOBUF_FIELD_OFFSET(Brand, _impl_.country_of_risk_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string country_of_risk_name = 8;
    {PROTOBUF_FIELD_OFFSET(Brand, _impl_.country_of_risk_name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\53\3\4\13\4\7\6\17\24\0\0\0\0\0\0\0"
    "tinkoff.public.invest.api.contract.v1.Brand"
    "uid"
    "name"
    "description"
    "info"
    "company"
    "sector"
    "country_of_risk"
    "country_of_risk_name"
  }},
};

PROTOBUF_NOINLINE void Brand::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.Brand)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uid_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.description_.ClearToEmpty();
  _impl_.info_.ClearToEmpty();
  _impl_.company_.ClearToEmpty();
  _impl_.sector_.ClearToEmpty();
  _impl_.country_of_risk_.ClearToEmpty();
  _impl_.country_of_risk_name_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* Brand::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const Brand& this_ = static_cast<const Brand&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* Brand::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const Brand& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.Brand)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string uid = 1;
          if (!this_._internal_uid().empty()) {
            const std::string& _s = this_._internal_uid();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Brand.uid");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string name = 2;
          if (!this_._internal_name().empty()) {
            const std::string& _s = this_._internal_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Brand.name");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // string description = 3;
          if (!this_._internal_description().empty()) {
            const std::string& _s = this_._internal_description();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Brand.description");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // string info = 4;
          if (!this_._internal_info().empty()) {
            const std::string& _s = this_._internal_info();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Brand.info");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          // string company = 5;
          if (!this_._internal_company().empty()) {
            const std::string& _s = this_._internal_company();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Brand.company");
            target = stream->WriteStringMaybeAliased(5, _s, target);
          }

          // string sector = 6;
          if (!this_._internal_sector().empty()) {
            const std::string& _s = this_._internal_sector();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Brand.sector");
            target = stream->WriteStringMaybeAliased(6, _s, target);
          }

          // string country_of_risk = 7;
          if (!this_._internal_country_of_risk().empty()) {
            const std::string& _s = this_._internal_country_of_risk();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Brand.country_of_risk");
            target = stream->WriteStringMaybeAliased(7, _s, target);
          }

          // string country_of_risk_name = 8;
          if (!this_._internal_country_of_risk_name().empty()) {
            const std::string& _s = this_._internal_country_of_risk_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.Brand.country_of_risk_name");
            target = stream->WriteStringMaybeAliased(8, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.Brand)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t Brand::ByteSizeLong(const MessageLite& base) {
          const Brand& this_ = static_cast<const Brand&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t Brand::ByteSizeLong() const {
          const Brand& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.Brand)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string uid = 1;
            if (!this_._internal_uid().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_uid());
            }
            // string name = 2;
            if (!this_._internal_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_name());
            }
            // string description = 3;
            if (!this_._internal_description().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_description());
            }
            // string info = 4;
            if (!this_._internal_info().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_info());
            }
            // string company = 5;
            if (!this_._internal_company().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_company());
            }
            // string sector = 6;
            if (!this_._internal_sector().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_sector());
            }
            // string country_of_risk = 7;
            if (!this_._internal_country_of_risk().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_country_of_risk());
            }
            // string country_of_risk_name = 8;
            if (!this_._internal_country_of_risk_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_country_of_risk_name());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void Brand::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<Brand*>(&to_msg);
  auto& from = static_cast<const Brand&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.Brand)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_description().empty()) {
    _this->_internal_set_description(from._internal_description());
  }
  if (!from._internal_info().empty()) {
    _this->_internal_set_info(from._internal_info());
  }
  if (!from._internal_company().empty()) {
    _this->_internal_set_company(from._internal_company());
  }
  if (!from._internal_sector().empty()) {
    _this->_internal_set_sector(from._internal_sector());
  }
  if (!from._internal_country_of_risk().empty()) {
    _this->_internal_set_country_of_risk(from._internal_country_of_risk());
  }
  if (!from._internal_country_of_risk_name().empty()) {
    _this->_internal_set_country_of_risk_name(from._internal_country_of_risk_name());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void Brand::CopyFrom(const Brand& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.Brand)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void Brand::InternalSwap(Brand* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.uid_, &other->_impl_.uid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.description_, &other->_impl_.description_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.info_, &other->_impl_.info_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.company_, &other->_impl_.company_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.sector_, &other->_impl_.sector_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.country_of_risk_, &other->_impl_.country_of_risk_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.country_of_risk_name_, &other->_impl_.country_of_risk_name_, arena);
}

::google::protobuf::Metadata Brand::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class AssetInstrument::_Internal {
 public:
};

AssetInstrument::AssetInstrument(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.AssetInstrument)
}
inline PROTOBUF_NDEBUG_INLINE AssetInstrument::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::AssetInstrument& from_msg)
      : links_{visibility, arena, from.links_},
        uid_(arena, from.uid_),
        figi_(arena, from.figi_),
        instrument_type_(arena, from.instrument_type_),
        ticker_(arena, from.ticker_),
        class_code_(arena, from.class_code_),
        position_uid_(arena, from.position_uid_),
        _cached_size_{0} {}

AssetInstrument::AssetInstrument(
    ::google::protobuf::Arena* arena,
    const AssetInstrument& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  AssetInstrument* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.instrument_kind_ = from._impl_.instrument_kind_;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.AssetInstrument)
}
inline PROTOBUF_NDEBUG_INLINE AssetInstrument::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : links_{visibility, arena},
        uid_(arena),
        figi_(arena),
        instrument_type_(arena),
        ticker_(arena),
        class_code_(arena),
        position_uid_(arena),
        _cached_size_{0} {}

inline void AssetInstrument::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.instrument_kind_ = {};
}
AssetInstrument::~AssetInstrument() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.AssetInstrument)
  SharedDtor(*this);
}
inline void AssetInstrument::SharedDtor(MessageLite& self) {
  AssetInstrument& this_ = static_cast<AssetInstrument&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.uid_.Destroy();
  this_._impl_.figi_.Destroy();
  this_._impl_.instrument_type_.Destroy();
  this_._impl_.ticker_.Destroy();
  this_._impl_.class_code_.Destroy();
  this_._impl_.position_uid_.Destroy();
  this_._impl_.~Impl_();
}

inline void* AssetInstrument::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) AssetInstrument(arena);
}
constexpr auto AssetInstrument::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(AssetInstrument, _impl_.links_) +
          decltype(AssetInstrument::_impl_.links_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::CopyInit(
        sizeof(AssetInstrument), alignof(AssetInstrument), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&AssetInstrument::PlacementNew_,
                                 sizeof(AssetInstrument),
                                 alignof(AssetInstrument));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull AssetInstrument::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_AssetInstrument_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &AssetInstrument::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<AssetInstrument>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &AssetInstrument::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<AssetInstrument>(), &AssetInstrument::ByteSizeLong,
            &AssetInstrument::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(AssetInstrument, _impl_._cached_size_),
        false,
    },
    &AssetInstrument::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* AssetInstrument::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 8, 1, 120, 2> AssetInstrument::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    11, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294965696,  // skipmap
    offsetof(decltype(_table_), field_entries),
    8,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::AssetInstrument>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string uid = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(AssetInstrument, _impl_.uid_)}},
    // string figi = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(AssetInstrument, _impl_.figi_)}},
    // string instrument_type = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(AssetInstrument, _impl_.instrument_type_)}},
    // string ticker = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(AssetInstrument, _impl_.ticker_)}},
    // string class_code = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(AssetInstrument, _impl_.class_code_)}},
    // repeated .tinkoff.public.invest.api.contract.v1.InstrumentLink links = 6;
    {::_pbi::TcParser::FastMtR1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(AssetInstrument, _impl_.links_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // .tinkoff.public.invest.api.contract.v1.InstrumentType instrument_kind = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(AssetInstrument, _impl_.instrument_kind_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(AssetInstrument, _impl_.instrument_kind_)}},
    // string position_uid = 11;
    {::_pbi::TcParser::FastUS1,
     {90, 63, 0, PROTOBUF_FIELD_OFFSET(AssetInstrument, _impl_.position_uid_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string uid = 1;
    {PROTOBUF_FIELD_OFFSET(AssetInstrument, _impl_.uid_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string figi = 2;
    {PROTOBUF_FIELD_OFFSET(AssetInstrument, _impl_.figi_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string instrument_type = 3;
    {PROTOBUF_FIELD_OFFSET(AssetInstrument, _impl_.instrument_type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string ticker = 4;
    {PROTOBUF_FIELD_OFFSET(AssetInstrument, _impl_.ticker_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string class_code = 5;
    {PROTOBUF_FIELD_OFFSET(AssetInstrument, _impl_.class_code_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // repeated .tinkoff.public.invest.api.contract.v1.InstrumentLink links = 6;
    {PROTOBUF_FIELD_OFFSET(AssetInstrument, _impl_.links_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.InstrumentType instrument_kind = 10;
    {PROTOBUF_FIELD_OFFSET(AssetInstrument, _impl_.instrument_kind_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string position_uid = 11;
    {PROTOBUF_FIELD_OFFSET(AssetInstrument, _impl_.position_uid_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::InstrumentLink>()},
  }}, {{
    "\65\3\4\17\6\12\0\0\14\0\0\0\0\0\0\0"
    "tinkoff.public.invest.api.contract.v1.AssetInstrument"
    "uid"
    "figi"
    "instrument_type"
    "ticker"
    "class_code"
    "position_uid"
  }},
};

PROTOBUF_NOINLINE void AssetInstrument::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.AssetInstrument)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.links_.Clear();
  _impl_.uid_.ClearToEmpty();
  _impl_.figi_.ClearToEmpty();
  _impl_.instrument_type_.ClearToEmpty();
  _impl_.ticker_.ClearToEmpty();
  _impl_.class_code_.ClearToEmpty();
  _impl_.position_uid_.ClearToEmpty();
  _impl_.instrument_kind_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* AssetInstrument::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const AssetInstrument& this_ = static_cast<const AssetInstrument&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* AssetInstrument::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const AssetInstrument& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.AssetInstrument)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string uid = 1;
          if (!this_._internal_uid().empty()) {
            const std::string& _s = this_._internal_uid();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.AssetInstrument.uid");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string figi = 2;
          if (!this_._internal_figi().empty()) {
            const std::string& _s = this_._internal_figi();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.AssetInstrument.figi");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // string instrument_type = 3;
          if (!this_._internal_instrument_type().empty()) {
            const std::string& _s = this_._internal_instrument_type();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.AssetInstrument.instrument_type");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // string ticker = 4;
          if (!this_._internal_ticker().empty()) {
            const std::string& _s = this_._internal_ticker();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.AssetInstrument.ticker");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          // string class_code = 5;
          if (!this_._internal_class_code().empty()) {
            const std::string& _s = this_._internal_class_code();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.AssetInstrument.class_code");
            target = stream->WriteStringMaybeAliased(5, _s, target);
          }

          // repeated .tinkoff.public.invest.api.contract.v1.InstrumentLink links = 6;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_links_size());
               i < n; i++) {
            const auto& repfield = this_._internal_links().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    6, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // .tinkoff.public.invest.api.contract.v1.InstrumentType instrument_kind = 10;
          if (this_._internal_instrument_kind() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                10, this_._internal_instrument_kind(), target);
          }

          // string position_uid = 11;
          if (!this_._internal_position_uid().empty()) {
            const std::string& _s = this_._internal_position_uid();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.AssetInstrument.position_uid");
            target = stream->WriteStringMaybeAliased(11, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.AssetInstrument)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t AssetInstrument::ByteSizeLong(const MessageLite& base) {
          const AssetInstrument& this_ = static_cast<const AssetInstrument&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t AssetInstrument::ByteSizeLong() const {
          const AssetInstrument& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.AssetInstrument)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .tinkoff.public.invest.api.contract.v1.InstrumentLink links = 6;
            {
              total_size += 1UL * this_._internal_links_size();
              for (const auto& msg : this_._internal_links()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // string uid = 1;
            if (!this_._internal_uid().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_uid());
            }
            // string figi = 2;
            if (!this_._internal_figi().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_figi());
            }
            // string instrument_type = 3;
            if (!this_._internal_instrument_type().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_instrument_type());
            }
            // string ticker = 4;
            if (!this_._internal_ticker().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_ticker());
            }
            // string class_code = 5;
            if (!this_._internal_class_code().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_class_code());
            }
            // string position_uid = 11;
            if (!this_._internal_position_uid().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_position_uid());
            }
            // .tinkoff.public.invest.api.contract.v1.InstrumentType instrument_kind = 10;
            if (this_._internal_instrument_kind() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_instrument_kind());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void AssetInstrument::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<AssetInstrument*>(&to_msg);
  auto& from = static_cast<const AssetInstrument&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.AssetInstrument)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_links()->MergeFrom(
      from._internal_links());
  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_instrument_type().empty()) {
    _this->_internal_set_instrument_type(from._internal_instrument_type());
  }
  if (!from._internal_ticker().empty()) {
    _this->_internal_set_ticker(from._internal_ticker());
  }
  if (!from._internal_class_code().empty()) {
    _this->_internal_set_class_code(from._internal_class_code());
  }
  if (!from._internal_position_uid().empty()) {
    _this->_internal_set_position_uid(from._internal_position_uid());
  }
  if (from._internal_instrument_kind() != 0) {
    _this->_impl_.instrument_kind_ = from._impl_.instrument_kind_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void AssetInstrument::CopyFrom(const AssetInstrument& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.AssetInstrument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void AssetInstrument::InternalSwap(AssetInstrument* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.links_.InternalSwap(&other->_impl_.links_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.uid_, &other->_impl_.uid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.figi_, &other->_impl_.figi_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.instrument_type_, &other->_impl_.instrument_type_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ticker_, &other->_impl_.ticker_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.class_code_, &other->_impl_.class_code_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.position_uid_, &other->_impl_.position_uid_, arena);
  swap(_impl_.instrument_kind_, other->_impl_.instrument_kind_);
}

::google::protobuf::Metadata AssetInstrument::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class InstrumentLink::_Internal {
 public:
};

InstrumentLink::InstrumentLink(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.InstrumentLink)
}
inline PROTOBUF_NDEBUG_INLINE InstrumentLink::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::InstrumentLink& from_msg)
      : type_(arena, from.type_),
        instrument_uid_(arena, from.instrument_uid_),
        _cached_size_{0} {}

InstrumentLink::InstrumentLink(
    ::google::protobuf::Arena* arena,
    const InstrumentLink& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  InstrumentLink* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.InstrumentLink)
}
inline PROTOBUF_NDEBUG_INLINE InstrumentLink::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : type_(arena),
        instrument_uid_(arena),
        _cached_size_{0} {}

inline void InstrumentLink::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
InstrumentLink::~InstrumentLink() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.InstrumentLink)
  SharedDtor(*this);
}
inline void InstrumentLink::SharedDtor(MessageLite& self) {
  InstrumentLink& this_ = static_cast<InstrumentLink&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.type_.Destroy();
  this_._impl_.instrument_uid_.Destroy();
  this_._impl_.~Impl_();
}

inline void* InstrumentLink::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) InstrumentLink(arena);
}
constexpr auto InstrumentLink::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(InstrumentLink),
                                            alignof(InstrumentLink));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull InstrumentLink::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_InstrumentLink_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &InstrumentLink::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<InstrumentLink>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &InstrumentLink::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<InstrumentLink>(), &InstrumentLink::ByteSizeLong,
            &InstrumentLink::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(InstrumentLink, _impl_._cached_size_),
        false,
    },
    &InstrumentLink::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* InstrumentLink::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 79, 2> InstrumentLink::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::InstrumentLink>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string instrument_uid = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(InstrumentLink, _impl_.instrument_uid_)}},
    // string type = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(InstrumentLink, _impl_.type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string type = 1;
    {PROTOBUF_FIELD_OFFSET(InstrumentLink, _impl_.type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string instrument_uid = 2;
    {PROTOBUF_FIELD_OFFSET(InstrumentLink, _impl_.instrument_uid_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\64\4\16\0\0\0\0\0"
    "tinkoff.public.invest.api.contract.v1.InstrumentLink"
    "type"
    "instrument_uid"
  }},
};

PROTOBUF_NOINLINE void InstrumentLink::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.InstrumentLink)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_.ClearToEmpty();
  _impl_.instrument_uid_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* InstrumentLink::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const InstrumentLink& this_ = static_cast<const InstrumentLink&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* InstrumentLink::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const InstrumentLink& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.InstrumentLink)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string type = 1;
          if (!this_._internal_type().empty()) {
            const std::string& _s = this_._internal_type();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.InstrumentLink.type");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string instrument_uid = 2;
          if (!this_._internal_instrument_uid().empty()) {
            const std::string& _s = this_._internal_instrument_uid();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.InstrumentLink.instrument_uid");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.InstrumentLink)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t InstrumentLink::ByteSizeLong(const MessageLite& base) {
          const InstrumentLink& this_ = static_cast<const InstrumentLink&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t InstrumentLink::ByteSizeLong() const {
          const InstrumentLink& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.InstrumentLink)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string type = 1;
            if (!this_._internal_type().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_type());
            }
            // string instrument_uid = 2;
            if (!this_._internal_instrument_uid().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_instrument_uid());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void InstrumentLink::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<InstrumentLink*>(&to_msg);
  auto& from = static_cast<const InstrumentLink&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.InstrumentLink)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  if (!from._internal_instrument_uid().empty()) {
    _this->_internal_set_instrument_uid(from._internal_instrument_uid());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void InstrumentLink::CopyFrom(const InstrumentLink& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.InstrumentLink)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void InstrumentLink::InternalSwap(InstrumentLink* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.type_, &other->_impl_.type_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.instrument_uid_, &other->_impl_.instrument_uid_, arena);
}

::google::protobuf::Metadata InstrumentLink::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GetFavoritesRequest::_Internal {
 public:
};

GetFavoritesRequest::GetFavoritesRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.GetFavoritesRequest)
}
GetFavoritesRequest::GetFavoritesRequest(
    ::google::protobuf::Arena* arena,
    const GetFavoritesRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GetFavoritesRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.GetFavoritesRequest)
}

inline void* GetFavoritesRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) GetFavoritesRequest(arena);
}
constexpr auto GetFavoritesRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(GetFavoritesRequest),
                                            alignof(GetFavoritesRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull GetFavoritesRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_GetFavoritesRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &GetFavoritesRequest::MergeImpl,
        ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<GetFavoritesRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &GetFavoritesRequest::SharedDtor,
        ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<GetFavoritesRequest>(), &GetFavoritesRequest::ByteSizeLong,
            &GetFavoritesRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(GetFavoritesRequest, _impl_._cached_size_),
        false,
    },
    &GetFavoritesRequest::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* GetFavoritesRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> GetFavoritesRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::GetFavoritesRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata GetFavoritesRequest::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GetFavoritesResponse::_Internal {
 public:
};

GetFavoritesResponse::GetFavoritesResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.GetFavoritesResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetFavoritesResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::GetFavoritesResponse& from_msg)
      : favorite_instruments_{visibility, arena, from.favorite_instruments_},
        _cached_size_{0} {}

GetFavoritesResponse::GetFavoritesResponse(
    ::google::protobuf::Arena* arena,
    const GetFavoritesResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GetFavoritesResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.GetFavoritesResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetFavoritesResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : favorite_instruments_{visibility, arena},
        _cached_size_{0} {}

inline void GetFavoritesResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
GetFavoritesResponse::~GetFavoritesResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.GetFavoritesResponse)
  SharedDtor(*this);
}
inline void GetFavoritesResponse::SharedDtor(MessageLite& self) {
  GetFavoritesResponse& this_ = static_cast<GetFavoritesResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* GetFavoritesResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) GetFavoritesResponse(arena);
}
constexpr auto GetFavoritesResponse::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(GetFavoritesResponse, _impl_.favorite_instruments_) +
          decltype(GetFavoritesResponse::_impl_.favorite_instruments_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(GetFavoritesResponse), alignof(GetFavoritesResponse), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&GetFavoritesResponse::PlacementNew_,
                                 sizeof(GetFavoritesResponse),
                                 alignof(GetFavoritesResponse));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull GetFavoritesResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_GetFavoritesResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &GetFavoritesResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<GetFavoritesResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &GetFavoritesResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<GetFavoritesResponse>(), &GetFavoritesResponse::ByteSizeLong,
            &GetFavoritesResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(GetFavoritesResponse, _impl_._cached_size_),
        false,
    },
    &GetFavoritesResponse::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* GetFavoritesResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> GetFavoritesResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::GetFavoritesResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .tinkoff.public.invest.api.contract.v1.FavoriteInstrument favorite_instruments = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetFavoritesResponse, _impl_.favorite_instruments_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .tinkoff.public.invest.api.contract.v1.FavoriteInstrument favorite_instruments = 1;
    {PROTOBUF_FIELD_OFFSET(GetFavoritesResponse, _impl_.favorite_instruments_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void GetFavoritesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.GetFavoritesResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.favorite_instruments_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GetFavoritesResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GetFavoritesResponse& this_ = static_cast<const GetFavoritesResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GetFavoritesResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GetFavoritesResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.GetFavoritesResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .tinkoff.public.invest.api.contract.v1.FavoriteInstrument favorite_instruments = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_favorite_instruments_size());
               i < n; i++) {
            const auto& repfield = this_._internal_favorite_instruments().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.GetFavoritesResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GetFavoritesResponse::ByteSizeLong(const MessageLite& base) {
          const GetFavoritesResponse& this_ = static_cast<const GetFavoritesResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GetFavoritesResponse::ByteSizeLong() const {
          const GetFavoritesResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.GetFavoritesResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .tinkoff.public.invest.api.contract.v1.FavoriteInstrument favorite_instruments = 1;
            {
              total_size += 1UL * this_._internal_favorite_instruments_size();
              for (const auto& msg : this_._internal_favorite_instruments()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GetFavoritesResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GetFavoritesResponse*>(&to_msg);
  auto& from = static_cast<const GetFavoritesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.GetFavoritesResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_favorite_instruments()->MergeFrom(
      from._internal_favorite_instruments());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetFavoritesResponse::CopyFrom(const GetFavoritesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.GetFavoritesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GetFavoritesResponse::InternalSwap(GetFavoritesResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.favorite_instruments_.InternalSwap(&other->_impl_.favorite_instruments_);
}

::google::protobuf::Metadata GetFavoritesResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class FavoriteInstrument::_Internal {
 public:
};

FavoriteInstrument::FavoriteInstrument(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.FavoriteInstrument)
}
inline PROTOBUF_NDEBUG_INLINE FavoriteInstrument::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument& from_msg)
      : figi_(arena, from.figi_),
        ticker_(arena, from.ticker_),
        class_code_(arena, from.class_code_),
        isin_(arena, from.isin_),
        instrument_type_(arena, from.instrument_type_),
        name_(arena, from.name_),
        uid_(arena, from.uid_),
        _cached_size_{0} {}

FavoriteInstrument::FavoriteInstrument(
    ::google::protobuf::Arena* arena,
    const FavoriteInstrument& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  FavoriteInstrument* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, otc_flag_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, otc_flag_),
           offsetof(Impl_, instrument_kind_) -
               offsetof(Impl_, otc_flag_) +
               sizeof(Impl_::instrument_kind_));

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.FavoriteInstrument)
}
inline PROTOBUF_NDEBUG_INLINE FavoriteInstrument::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : figi_(arena),
        ticker_(arena),
        class_code_(arena),
        isin_(arena),
        instrument_type_(arena),
        name_(arena),
        uid_(arena),
        _cached_size_{0} {}

inline void FavoriteInstrument::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, otc_flag_),
           0,
           offsetof(Impl_, instrument_kind_) -
               offsetof(Impl_, otc_flag_) +
               sizeof(Impl_::instrument_kind_));
}
FavoriteInstrument::~FavoriteInstrument() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.FavoriteInstrument)
  SharedDtor(*this);
}
inline void FavoriteInstrument::SharedDtor(MessageLite& self) {
  FavoriteInstrument& this_ = static_cast<FavoriteInstrument&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.figi_.Destroy();
  this_._impl_.ticker_.Destroy();
  this_._impl_.class_code_.Destroy();
  this_._impl_.isin_.Destroy();
  this_._impl_.instrument_type_.Destroy();
  this_._impl_.name_.Destroy();
  this_._impl_.uid_.Destroy();
  this_._impl_.~Impl_();
}

inline void* FavoriteInstrument::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) FavoriteInstrument(arena);
}
constexpr auto FavoriteInstrument::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(FavoriteInstrument),
                                            alignof(FavoriteInstrument));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull FavoriteInstrument::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_FavoriteInstrument_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &FavoriteInstrument::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<FavoriteInstrument>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &FavoriteInstrument::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<FavoriteInstrument>(), &FavoriteInstrument::ByteSizeLong,
            &FavoriteInstrument::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(FavoriteInstrument, _impl_._cached_size_),
        false,
    },
    &FavoriteInstrument::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* FavoriteInstrument::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 0, 119, 2> FavoriteInstrument::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    18, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294730736,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // bool otc_flag = 16;
    {::_pbi::TcParser::FastV8S2,
     {384, 63, 0, PROTOBUF_FIELD_OFFSET(FavoriteInstrument, _impl_.otc_flag_)}},
    // string figi = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(FavoriteInstrument, _impl_.figi_)}},
    // string ticker = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(FavoriteInstrument, _impl_.ticker_)}},
    // string class_code = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(FavoriteInstrument, _impl_.class_code_)}},
    // string isin = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(FavoriteInstrument, _impl_.isin_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // string instrument_type = 11;
    {::_pbi::TcParser::FastUS1,
     {90, 63, 0, PROTOBUF_FIELD_OFFSET(FavoriteInstrument, _impl_.instrument_type_)}},
    // string name = 12;
    {::_pbi::TcParser::FastUS1,
     {98, 63, 0, PROTOBUF_FIELD_OFFSET(FavoriteInstrument, _impl_.name_)}},
    // string uid = 13;
    {::_pbi::TcParser::FastUS1,
     {106, 63, 0, PROTOBUF_FIELD_OFFSET(FavoriteInstrument, _impl_.uid_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string figi = 1;
    {PROTOBUF_FIELD_OFFSET(FavoriteInstrument, _impl_.figi_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string ticker = 2;
    {PROTOBUF_FIELD_OFFSET(FavoriteInstrument, _impl_.ticker_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string class_code = 3;
    {PROTOBUF_FIELD_OFFSET(FavoriteInstrument, _impl_.class_code_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string isin = 4;
    {PROTOBUF_FIELD_OFFSET(FavoriteInstrument, _impl_.isin_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string instrument_type = 11;
    {PROTOBUF_FIELD_OFFSET(FavoriteInstrument, _impl_.instrument_type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string name = 12;
    {PROTOBUF_FIELD_OFFSET(FavoriteInstrument, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string uid = 13;
    {PROTOBUF_FIELD_OFFSET(FavoriteInstrument, _impl_.uid_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool otc_flag = 16;
    {PROTOBUF_FIELD_OFFSET(FavoriteInstrument, _impl_.otc_flag_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool api_trade_available_flag = 17;
    {PROTOBUF_FIELD_OFFSET(FavoriteInstrument, _impl_.api_trade_available_flag_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .tinkoff.public.invest.api.contract.v1.InstrumentType instrument_kind = 18;
    {PROTOBUF_FIELD_OFFSET(FavoriteInstrument, _impl_.instrument_kind_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }},
  // no aux_entries
  {{
    "\70\4\6\12\4\17\4\3\0\0\0\0\0\0\0\0"
    "tinkoff.public.invest.api.contract.v1.FavoriteInstrument"
    "figi"
    "ticker"
    "class_code"
    "isin"
    "instrument_type"
    "name"
    "uid"
  }},
};

PROTOBUF_NOINLINE void FavoriteInstrument::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.FavoriteInstrument)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.figi_.ClearToEmpty();
  _impl_.ticker_.ClearToEmpty();
  _impl_.class_code_.ClearToEmpty();
  _impl_.isin_.ClearToEmpty();
  _impl_.instrument_type_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.uid_.ClearToEmpty();
  ::memset(&_impl_.otc_flag_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.instrument_kind_) -
      reinterpret_cast<char*>(&_impl_.otc_flag_)) + sizeof(_impl_.instrument_kind_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* FavoriteInstrument::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const FavoriteInstrument& this_ = static_cast<const FavoriteInstrument&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* FavoriteInstrument::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const FavoriteInstrument& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.FavoriteInstrument)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string figi = 1;
          if (!this_._internal_figi().empty()) {
            const std::string& _s = this_._internal_figi();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.FavoriteInstrument.figi");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string ticker = 2;
          if (!this_._internal_ticker().empty()) {
            const std::string& _s = this_._internal_ticker();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.FavoriteInstrument.ticker");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // string class_code = 3;
          if (!this_._internal_class_code().empty()) {
            const std::string& _s = this_._internal_class_code();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.FavoriteInstrument.class_code");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // string isin = 4;
          if (!this_._internal_isin().empty()) {
            const std::string& _s = this_._internal_isin();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.FavoriteInstrument.isin");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          // string instrument_type = 11;
          if (!this_._internal_instrument_type().empty()) {
            const std::string& _s = this_._internal_instrument_type();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.FavoriteInstrument.instrument_type");
            target = stream->WriteStringMaybeAliased(11, _s, target);
          }

          // string name = 12;
          if (!this_._internal_name().empty()) {
            const std::string& _s = this_._internal_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.FavoriteInstrument.name");
            target = stream->WriteStringMaybeAliased(12, _s, target);
          }

          // string uid = 13;
          if (!this_._internal_uid().empty()) {
            const std::string& _s = this_._internal_uid();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.FavoriteInstrument.uid");
            target = stream->WriteStringMaybeAliased(13, _s, target);
          }

          // bool otc_flag = 16;
          if (this_._internal_otc_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                16, this_._internal_otc_flag(), target);
          }

          // bool api_trade_available_flag = 17;
          if (this_._internal_api_trade_available_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                17, this_._internal_api_trade_available_flag(), target);
          }

          // .tinkoff.public.invest.api.contract.v1.InstrumentType instrument_kind = 18;
          if (this_._internal_instrument_kind() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                18, this_._internal_instrument_kind(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.FavoriteInstrument)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t FavoriteInstrument::ByteSizeLong(const MessageLite& base) {
          const FavoriteInstrument& this_ = static_cast<const FavoriteInstrument&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t FavoriteInstrument::ByteSizeLong() const {
          const FavoriteInstrument& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.FavoriteInstrument)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string figi = 1;
            if (!this_._internal_figi().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_figi());
            }
            // string ticker = 2;
            if (!this_._internal_ticker().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_ticker());
            }
            // string class_code = 3;
            if (!this_._internal_class_code().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_class_code());
            }
            // string isin = 4;
            if (!this_._internal_isin().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_isin());
            }
            // string instrument_type = 11;
            if (!this_._internal_instrument_type().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_instrument_type());
            }
            // string name = 12;
            if (!this_._internal_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_name());
            }
            // string uid = 13;
            if (!this_._internal_uid().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_uid());
            }
            // bool otc_flag = 16;
            if (this_._internal_otc_flag() != 0) {
              total_size += 3;
            }
            // bool api_trade_available_flag = 17;
            if (this_._internal_api_trade_available_flag() != 0) {
              total_size += 3;
            }
            // .tinkoff.public.invest.api.contract.v1.InstrumentType instrument_kind = 18;
            if (this_._internal_instrument_kind() != 0) {
              total_size += 2 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_instrument_kind());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void FavoriteInstrument::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<FavoriteInstrument*>(&to_msg);
  auto& from = static_cast<const FavoriteInstrument&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.FavoriteInstrument)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_ticker().empty()) {
    _this->_internal_set_ticker(from._internal_ticker());
  }
  if (!from._internal_class_code().empty()) {
    _this->_internal_set_class_code(from._internal_class_code());
  }
  if (!from._internal_isin().empty()) {
    _this->_internal_set_isin(from._internal_isin());
  }
  if (!from._internal_instrument_type().empty()) {
    _this->_internal_set_instrument_type(from._internal_instrument_type());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (from._internal_otc_flag() != 0) {
    _this->_impl_.otc_flag_ = from._impl_.otc_flag_;
  }
  if (from._internal_api_trade_available_flag() != 0) {
    _this->_impl_.api_trade_available_flag_ = from._impl_.api_trade_available_flag_;
  }
  if (from._internal_instrument_kind() != 0) {
    _this->_impl_.instrument_kind_ = from._impl_.instrument_kind_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FavoriteInstrument::CopyFrom(const FavoriteInstrument& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.FavoriteInstrument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void FavoriteInstrument::InternalSwap(FavoriteInstrument* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.figi_, &other->_impl_.figi_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ticker_, &other->_impl_.ticker_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.class_code_, &other->_impl_.class_code_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.isin_, &other->_impl_.isin_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.instrument_type_, &other->_impl_.instrument_type_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.uid_, &other->_impl_.uid_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FavoriteInstrument, _impl_.instrument_kind_)
      + sizeof(FavoriteInstrument::_impl_.instrument_kind_)
      - PROTOBUF_FIELD_OFFSET(FavoriteInstrument, _impl_.otc_flag_)>(
          reinterpret_cast<char*>(&_impl_.otc_flag_),
          reinterpret_cast<char*>(&other->_impl_.otc_flag_));
}

::google::protobuf::Metadata FavoriteInstrument::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class EditFavoritesRequest::_Internal {
 public:
};

EditFavoritesRequest::EditFavoritesRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.EditFavoritesRequest)
}
inline PROTOBUF_NDEBUG_INLINE EditFavoritesRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::EditFavoritesRequest& from_msg)
      : instruments_{visibility, arena, from.instruments_},
        _cached_size_{0} {}

EditFavoritesRequest::EditFavoritesRequest(
    ::google::protobuf::Arena* arena,
    const EditFavoritesRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  EditFavoritesRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  _impl_.action_type_ = from._impl_.action_type_;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.EditFavoritesRequest)
}
inline PROTOBUF_NDEBUG_INLINE EditFavoritesRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : instruments_{visibility, arena},
        _cached_size_{0} {}

inline void EditFavoritesRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.action_type_ = {};
}
EditFavoritesRequest::~EditFavoritesRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.EditFavoritesRequest)
  SharedDtor(*this);
}
inline void EditFavoritesRequest::SharedDtor(MessageLite& self) {
  EditFavoritesRequest& this_ = static_cast<EditFavoritesRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* EditFavoritesRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) EditFavoritesRequest(arena);
}
constexpr auto EditFavoritesRequest::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(EditFavoritesRequest, _impl_.instruments_) +
          decltype(EditFavoritesRequest::_impl_.instruments_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(EditFavoritesRequest), alignof(EditFavoritesRequest), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&EditFavoritesRequest::PlacementNew_,
                                 sizeof(EditFavoritesRequest),
                                 alignof(EditFavoritesRequest));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull EditFavoritesRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_EditFavoritesRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &EditFavoritesRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<EditFavoritesRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &EditFavoritesRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<EditFavoritesRequest>(), &EditFavoritesRequest::ByteSizeLong,
            &EditFavoritesRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(EditFavoritesRequest, _impl_._cached_size_),
        false,
    },
    &EditFavoritesRequest::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* EditFavoritesRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 0, 2> EditFavoritesRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    6, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967262,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::EditFavoritesRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .tinkoff.public.invest.api.contract.v1.EditFavoritesActionType action_type = 6 [(.google.api.field_behavior) = REQUIRED];
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(EditFavoritesRequest, _impl_.action_type_), 63>(),
     {48, 63, 0, PROTOBUF_FIELD_OFFSET(EditFavoritesRequest, _impl_.action_type_)}},
    // repeated .tinkoff.public.invest.api.contract.v1.EditFavoritesRequestInstrument instruments = 1 [(.google.api.field_behavior) = REQUIRED];
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(EditFavoritesRequest, _impl_.instruments_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .tinkoff.public.invest.api.contract.v1.EditFavoritesRequestInstrument instruments = 1 [(.google.api.field_behavior) = REQUIRED];
    {PROTOBUF_FIELD_OFFSET(EditFavoritesRequest, _impl_.instruments_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.EditFavoritesActionType action_type = 6 [(.google.api.field_behavior) = REQUIRED];
    {PROTOBUF_FIELD_OFFSET(EditFavoritesRequest, _impl_.action_type_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::EditFavoritesRequestInstrument>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void EditFavoritesRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.EditFavoritesRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instruments_.Clear();
  _impl_.action_type_ = 0;
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* EditFavoritesRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const EditFavoritesRequest& this_ = static_cast<const EditFavoritesRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* EditFavoritesRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const EditFavoritesRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.EditFavoritesRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .tinkoff.public.invest.api.contract.v1.EditFavoritesRequestInstrument instruments = 1 [(.google.api.field_behavior) = REQUIRED];
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_instruments_size());
               i < n; i++) {
            const auto& repfield = this_._internal_instruments().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          // .tinkoff.public.invest.api.contract.v1.EditFavoritesActionType action_type = 6 [(.google.api.field_behavior) = REQUIRED];
          if (this_._internal_action_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                6, this_._internal_action_type(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.EditFavoritesRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t EditFavoritesRequest::ByteSizeLong(const MessageLite& base) {
          const EditFavoritesRequest& this_ = static_cast<const EditFavoritesRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t EditFavoritesRequest::ByteSizeLong() const {
          const EditFavoritesRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.EditFavoritesRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .tinkoff.public.invest.api.contract.v1.EditFavoritesRequestInstrument instruments = 1 [(.google.api.field_behavior) = REQUIRED];
            {
              total_size += 1UL * this_._internal_instruments_size();
              for (const auto& msg : this_._internal_instruments()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // .tinkoff.public.invest.api.contract.v1.EditFavoritesActionType action_type = 6 [(.google.api.field_behavior) = REQUIRED];
            if (this_._internal_action_type() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_action_type());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void EditFavoritesRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<EditFavoritesRequest*>(&to_msg);
  auto& from = static_cast<const EditFavoritesRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.EditFavoritesRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_instruments()->MergeFrom(
      from._internal_instruments());
  if (from._internal_action_type() != 0) {
    _this->_impl_.action_type_ = from._impl_.action_type_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EditFavoritesRequest::CopyFrom(const EditFavoritesRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.EditFavoritesRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void EditFavoritesRequest::InternalSwap(EditFavoritesRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.instruments_.InternalSwap(&other->_impl_.instruments_);
  swap(_impl_.action_type_, other->_impl_.action_type_);
}

::google::protobuf::Metadata EditFavoritesRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class EditFavoritesRequestInstrument::_Internal {
 public:
  using HasBits =
      decltype(std::declval<EditFavoritesRequestInstrument>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(EditFavoritesRequestInstrument, _impl_._has_bits_);
};

EditFavoritesRequestInstrument::EditFavoritesRequestInstrument(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.EditFavoritesRequestInstrument)
}
inline PROTOBUF_NDEBUG_INLINE EditFavoritesRequestInstrument::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::EditFavoritesRequestInstrument& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        figi_(arena, from.figi_),
        instrument_id_(arena, from.instrument_id_) {}

EditFavoritesRequestInstrument::EditFavoritesRequestInstrument(
    ::google::protobuf::Arena* arena,
    const EditFavoritesRequestInstrument& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  EditFavoritesRequestInstrument* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.EditFavoritesRequestInstrument)
}
inline PROTOBUF_NDEBUG_INLINE EditFavoritesRequestInstrument::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        figi_(arena),
        instrument_id_(arena) {}

inline void EditFavoritesRequestInstrument::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
EditFavoritesRequestInstrument::~EditFavoritesRequestInstrument() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.EditFavoritesRequestInstrument)
  SharedDtor(*this);
}
inline void EditFavoritesRequestInstrument::SharedDtor(MessageLite& self) {
  EditFavoritesRequestInstrument& this_ = static_cast<EditFavoritesRequestInstrument&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.figi_.Destroy();
  this_._impl_.instrument_id_.Destroy();
  this_._impl_.~Impl_();
}

inline void* EditFavoritesRequestInstrument::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) EditFavoritesRequestInstrument(arena);
}
constexpr auto EditFavoritesRequestInstrument::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(EditFavoritesRequestInstrument),
                                            alignof(EditFavoritesRequestInstrument));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull EditFavoritesRequestInstrument::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_EditFavoritesRequestInstrument_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &EditFavoritesRequestInstrument::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<EditFavoritesRequestInstrument>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &EditFavoritesRequestInstrument::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<EditFavoritesRequestInstrument>(), &EditFavoritesRequestInstrument::ByteSizeLong,
            &EditFavoritesRequestInstrument::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(EditFavoritesRequestInstrument, _impl_._cached_size_),
        false,
    },
    &EditFavoritesRequestInstrument::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* EditFavoritesRequestInstrument::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 0, 94, 2> EditFavoritesRequestInstrument::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(EditFavoritesRequestInstrument, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::EditFavoritesRequestInstrument>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string instrument_id = 2 [(.google.api.field_behavior) = REQUIRED];
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(EditFavoritesRequestInstrument, _impl_.instrument_id_)}},
    // optional string figi = 1 [deprecated = true];
    {::_pbi::TcParser::FastUS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(EditFavoritesRequestInstrument, _impl_.figi_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional string figi = 1 [deprecated = true];
    {PROTOBUF_FIELD_OFFSET(EditFavoritesRequestInstrument, _impl_.figi_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string instrument_id = 2 [(.google.api.field_behavior) = REQUIRED];
    {PROTOBUF_FIELD_OFFSET(EditFavoritesRequestInstrument, _impl_.instrument_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\104\4\15\0\0\0\0\0"
    "tinkoff.public.invest.api.contract.v1.EditFavoritesRequestInstrument"
    "figi"
    "instrument_id"
  }},
};

PROTOBUF_NOINLINE void EditFavoritesRequestInstrument::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.EditFavoritesRequestInstrument)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _impl_.figi_.ClearNonDefaultToEmpty();
  }
  _impl_.instrument_id_.ClearToEmpty();
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* EditFavoritesRequestInstrument::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const EditFavoritesRequestInstrument& this_ = static_cast<const EditFavoritesRequestInstrument&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* EditFavoritesRequestInstrument::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const EditFavoritesRequestInstrument& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.EditFavoritesRequestInstrument)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // optional string figi = 1 [deprecated = true];
          if (cached_has_bits & 0x00000001u) {
            const std::string& _s = this_._internal_figi();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.EditFavoritesRequestInstrument.figi");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string instrument_id = 2 [(.google.api.field_behavior) = REQUIRED];
          if (!this_._internal_instrument_id().empty()) {
            const std::string& _s = this_._internal_instrument_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.EditFavoritesRequestInstrument.instrument_id");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.EditFavoritesRequestInstrument)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t EditFavoritesRequestInstrument::ByteSizeLong(const MessageLite& base) {
          const EditFavoritesRequestInstrument& this_ = static_cast<const EditFavoritesRequestInstrument&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t EditFavoritesRequestInstrument::ByteSizeLong() const {
          const EditFavoritesRequestInstrument& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.EditFavoritesRequestInstrument)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // optional string figi = 1 [deprecated = true];
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_figi());
            }
          }
           {
            // string instrument_id = 2 [(.google.api.field_behavior) = REQUIRED];
            if (!this_._internal_instrument_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_instrument_id());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void EditFavoritesRequestInstrument::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<EditFavoritesRequestInstrument*>(&to_msg);
  auto& from = static_cast<const EditFavoritesRequestInstrument&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.EditFavoritesRequestInstrument)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_instrument_id().empty()) {
    _this->_internal_set_instrument_id(from._internal_instrument_id());
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EditFavoritesRequestInstrument::CopyFrom(const EditFavoritesRequestInstrument& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.EditFavoritesRequestInstrument)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void EditFavoritesRequestInstrument::InternalSwap(EditFavoritesRequestInstrument* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.figi_, &other->_impl_.figi_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.instrument_id_, &other->_impl_.instrument_id_, arena);
}

::google::protobuf::Metadata EditFavoritesRequestInstrument::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class EditFavoritesResponse::_Internal {
 public:
};

EditFavoritesResponse::EditFavoritesResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.EditFavoritesResponse)
}
inline PROTOBUF_NDEBUG_INLINE EditFavoritesResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::EditFavoritesResponse& from_msg)
      : favorite_instruments_{visibility, arena, from.favorite_instruments_},
        _cached_size_{0} {}

EditFavoritesResponse::EditFavoritesResponse(
    ::google::protobuf::Arena* arena,
    const EditFavoritesResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  EditFavoritesResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.EditFavoritesResponse)
}
inline PROTOBUF_NDEBUG_INLINE EditFavoritesResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : favorite_instruments_{visibility, arena},
        _cached_size_{0} {}

inline void EditFavoritesResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
EditFavoritesResponse::~EditFavoritesResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.EditFavoritesResponse)
  SharedDtor(*this);
}
inline void EditFavoritesResponse::SharedDtor(MessageLite& self) {
  EditFavoritesResponse& this_ = static_cast<EditFavoritesResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* EditFavoritesResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) EditFavoritesResponse(arena);
}
constexpr auto EditFavoritesResponse::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(EditFavoritesResponse, _impl_.favorite_instruments_) +
          decltype(EditFavoritesResponse::_impl_.favorite_instruments_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(EditFavoritesResponse), alignof(EditFavoritesResponse), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&EditFavoritesResponse::PlacementNew_,
                                 sizeof(EditFavoritesResponse),
                                 alignof(EditFavoritesResponse));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull EditFavoritesResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_EditFavoritesResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &EditFavoritesResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<EditFavoritesResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &EditFavoritesResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<EditFavoritesResponse>(), &EditFavoritesResponse::ByteSizeLong,
            &EditFavoritesResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(EditFavoritesResponse, _impl_._cached_size_),
        false,
    },
    &EditFavoritesResponse::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* EditFavoritesResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> EditFavoritesResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::EditFavoritesResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .tinkoff.public.invest.api.contract.v1.FavoriteInstrument favorite_instruments = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(EditFavoritesResponse, _impl_.favorite_instruments_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .tinkoff.public.invest.api.contract.v1.FavoriteInstrument favorite_instruments = 1;
    {PROTOBUF_FIELD_OFFSET(EditFavoritesResponse, _impl_.favorite_instruments_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::FavoriteInstrument>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void EditFavoritesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.EditFavoritesResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.favorite_instruments_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* EditFavoritesResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const EditFavoritesResponse& this_ = static_cast<const EditFavoritesResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* EditFavoritesResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const EditFavoritesResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.EditFavoritesResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .tinkoff.public.invest.api.contract.v1.FavoriteInstrument favorite_instruments = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_favorite_instruments_size());
               i < n; i++) {
            const auto& repfield = this_._internal_favorite_instruments().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.EditFavoritesResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t EditFavoritesResponse::ByteSizeLong(const MessageLite& base) {
          const EditFavoritesResponse& this_ = static_cast<const EditFavoritesResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t EditFavoritesResponse::ByteSizeLong() const {
          const EditFavoritesResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.EditFavoritesResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .tinkoff.public.invest.api.contract.v1.FavoriteInstrument favorite_instruments = 1;
            {
              total_size += 1UL * this_._internal_favorite_instruments_size();
              for (const auto& msg : this_._internal_favorite_instruments()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void EditFavoritesResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<EditFavoritesResponse*>(&to_msg);
  auto& from = static_cast<const EditFavoritesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.EditFavoritesResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_favorite_instruments()->MergeFrom(
      from._internal_favorite_instruments());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void EditFavoritesResponse::CopyFrom(const EditFavoritesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.EditFavoritesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void EditFavoritesResponse::InternalSwap(EditFavoritesResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.favorite_instruments_.InternalSwap(&other->_impl_.favorite_instruments_);
}

::google::protobuf::Metadata EditFavoritesResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GetCountriesRequest::_Internal {
 public:
};

GetCountriesRequest::GetCountriesRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.GetCountriesRequest)
}
GetCountriesRequest::GetCountriesRequest(
    ::google::protobuf::Arena* arena,
    const GetCountriesRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GetCountriesRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.GetCountriesRequest)
}

inline void* GetCountriesRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) GetCountriesRequest(arena);
}
constexpr auto GetCountriesRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(GetCountriesRequest),
                                            alignof(GetCountriesRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull GetCountriesRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_GetCountriesRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &GetCountriesRequest::MergeImpl,
        ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<GetCountriesRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &GetCountriesRequest::SharedDtor,
        ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<GetCountriesRequest>(), &GetCountriesRequest::ByteSizeLong,
            &GetCountriesRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(GetCountriesRequest, _impl_._cached_size_),
        false,
    },
    &GetCountriesRequest::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* GetCountriesRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> GetCountriesRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::GetCountriesRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata GetCountriesRequest::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GetCountriesResponse::_Internal {
 public:
};

GetCountriesResponse::GetCountriesResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.GetCountriesResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetCountriesResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::GetCountriesResponse& from_msg)
      : countries_{visibility, arena, from.countries_},
        _cached_size_{0} {}

GetCountriesResponse::GetCountriesResponse(
    ::google::protobuf::Arena* arena,
    const GetCountriesResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GetCountriesResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.GetCountriesResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetCountriesResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : countries_{visibility, arena},
        _cached_size_{0} {}

inline void GetCountriesResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
GetCountriesResponse::~GetCountriesResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.GetCountriesResponse)
  SharedDtor(*this);
}
inline void GetCountriesResponse::SharedDtor(MessageLite& self) {
  GetCountriesResponse& this_ = static_cast<GetCountriesResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* GetCountriesResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) GetCountriesResponse(arena);
}
constexpr auto GetCountriesResponse::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(GetCountriesResponse, _impl_.countries_) +
          decltype(GetCountriesResponse::_impl_.countries_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(GetCountriesResponse), alignof(GetCountriesResponse), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&GetCountriesResponse::PlacementNew_,
                                 sizeof(GetCountriesResponse),
                                 alignof(GetCountriesResponse));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull GetCountriesResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_GetCountriesResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &GetCountriesResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<GetCountriesResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &GetCountriesResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<GetCountriesResponse>(), &GetCountriesResponse::ByteSizeLong,
            &GetCountriesResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(GetCountriesResponse, _impl_._cached_size_),
        false,
    },
    &GetCountriesResponse::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* GetCountriesResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> GetCountriesResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::GetCountriesResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .tinkoff.public.invest.api.contract.v1.CountryResponse countries = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetCountriesResponse, _impl_.countries_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .tinkoff.public.invest.api.contract.v1.CountryResponse countries = 1;
    {PROTOBUF_FIELD_OFFSET(GetCountriesResponse, _impl_.countries_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::CountryResponse>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void GetCountriesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.GetCountriesResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.countries_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GetCountriesResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GetCountriesResponse& this_ = static_cast<const GetCountriesResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GetCountriesResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GetCountriesResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.GetCountriesResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .tinkoff.public.invest.api.contract.v1.CountryResponse countries = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_countries_size());
               i < n; i++) {
            const auto& repfield = this_._internal_countries().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.GetCountriesResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GetCountriesResponse::ByteSizeLong(const MessageLite& base) {
          const GetCountriesResponse& this_ = static_cast<const GetCountriesResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GetCountriesResponse::ByteSizeLong() const {
          const GetCountriesResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.GetCountriesResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .tinkoff.public.invest.api.contract.v1.CountryResponse countries = 1;
            {
              total_size += 1UL * this_._internal_countries_size();
              for (const auto& msg : this_._internal_countries()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GetCountriesResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GetCountriesResponse*>(&to_msg);
  auto& from = static_cast<const GetCountriesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.GetCountriesResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_countries()->MergeFrom(
      from._internal_countries());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetCountriesResponse::CopyFrom(const GetCountriesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.GetCountriesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GetCountriesResponse::InternalSwap(GetCountriesResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.countries_.InternalSwap(&other->_impl_.countries_);
}

::google::protobuf::Metadata GetCountriesResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class IndicativesRequest::_Internal {
 public:
};

IndicativesRequest::IndicativesRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.IndicativesRequest)
}
IndicativesRequest::IndicativesRequest(
    ::google::protobuf::Arena* arena,
    const IndicativesRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::internal::ZeroFieldsBase(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::internal::ZeroFieldsBase(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  IndicativesRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.IndicativesRequest)
}

inline void* IndicativesRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) IndicativesRequest(arena);
}
constexpr auto IndicativesRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(IndicativesRequest),
                                            alignof(IndicativesRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull IndicativesRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_IndicativesRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &IndicativesRequest::MergeImpl,
        ::google::protobuf::internal::ZeroFieldsBase::GetNewImpl<IndicativesRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &IndicativesRequest::SharedDtor,
        ::google::protobuf::internal::ZeroFieldsBase::GetClearImpl<IndicativesRequest>(), &IndicativesRequest::ByteSizeLong,
            &IndicativesRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(IndicativesRequest, _impl_._cached_size_),
        false,
    },
    &IndicativesRequest::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* IndicativesRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 0, 0, 0, 2> IndicativesRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    0, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967295,  // skipmap
    offsetof(decltype(_table_), field_names),  // no field_entries
    0,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::IndicativesRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }},
  // no field_entries, or aux_entries
  {{
  }},
};








::google::protobuf::Metadata IndicativesRequest::GetMetadata() const {
  return ::google::protobuf::internal::ZeroFieldsBase::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class IndicativesResponse::_Internal {
 public:
};

IndicativesResponse::IndicativesResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.IndicativesResponse)
}
inline PROTOBUF_NDEBUG_INLINE IndicativesResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::IndicativesResponse& from_msg)
      : instruments_{visibility, arena, from.instruments_},
        _cached_size_{0} {}

IndicativesResponse::IndicativesResponse(
    ::google::protobuf::Arena* arena,
    const IndicativesResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  IndicativesResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.IndicativesResponse)
}
inline PROTOBUF_NDEBUG_INLINE IndicativesResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : instruments_{visibility, arena},
        _cached_size_{0} {}

inline void IndicativesResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
IndicativesResponse::~IndicativesResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.IndicativesResponse)
  SharedDtor(*this);
}
inline void IndicativesResponse::SharedDtor(MessageLite& self) {
  IndicativesResponse& this_ = static_cast<IndicativesResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* IndicativesResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) IndicativesResponse(arena);
}
constexpr auto IndicativesResponse::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(IndicativesResponse, _impl_.instruments_) +
          decltype(IndicativesResponse::_impl_.instruments_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(IndicativesResponse), alignof(IndicativesResponse), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&IndicativesResponse::PlacementNew_,
                                 sizeof(IndicativesResponse),
                                 alignof(IndicativesResponse));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull IndicativesResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_IndicativesResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &IndicativesResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<IndicativesResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &IndicativesResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<IndicativesResponse>(), &IndicativesResponse::ByteSizeLong,
            &IndicativesResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(IndicativesResponse, _impl_._cached_size_),
        false,
    },
    &IndicativesResponse::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* IndicativesResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> IndicativesResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::IndicativesResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .tinkoff.public.invest.api.contract.v1.IndicativeResponse instruments = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(IndicativesResponse, _impl_.instruments_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .tinkoff.public.invest.api.contract.v1.IndicativeResponse instruments = 1;
    {PROTOBUF_FIELD_OFFSET(IndicativesResponse, _impl_.instruments_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::IndicativeResponse>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void IndicativesResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.IndicativesResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instruments_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* IndicativesResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const IndicativesResponse& this_ = static_cast<const IndicativesResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* IndicativesResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const IndicativesResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.IndicativesResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .tinkoff.public.invest.api.contract.v1.IndicativeResponse instruments = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_instruments_size());
               i < n; i++) {
            const auto& repfield = this_._internal_instruments().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.IndicativesResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t IndicativesResponse::ByteSizeLong(const MessageLite& base) {
          const IndicativesResponse& this_ = static_cast<const IndicativesResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t IndicativesResponse::ByteSizeLong() const {
          const IndicativesResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.IndicativesResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .tinkoff.public.invest.api.contract.v1.IndicativeResponse instruments = 1;
            {
              total_size += 1UL * this_._internal_instruments_size();
              for (const auto& msg : this_._internal_instruments()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void IndicativesResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<IndicativesResponse*>(&to_msg);
  auto& from = static_cast<const IndicativesResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.IndicativesResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_instruments()->MergeFrom(
      from._internal_instruments());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void IndicativesResponse::CopyFrom(const IndicativesResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.IndicativesResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void IndicativesResponse::InternalSwap(IndicativesResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.instruments_.InternalSwap(&other->_impl_.instruments_);
}

::google::protobuf::Metadata IndicativesResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class IndicativeResponse::_Internal {
 public:
};

IndicativeResponse::IndicativeResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.IndicativeResponse)
}
inline PROTOBUF_NDEBUG_INLINE IndicativeResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::IndicativeResponse& from_msg)
      : figi_(arena, from.figi_),
        ticker_(arena, from.ticker_),
        class_code_(arena, from.class_code_),
        currency_(arena, from.currency_),
        name_(arena, from.name_),
        exchange_(arena, from.exchange_),
        uid_(arena, from.uid_),
        _cached_size_{0} {}

IndicativeResponse::IndicativeResponse(
    ::google::protobuf::Arena* arena,
    const IndicativeResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  IndicativeResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, instrument_kind_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, instrument_kind_),
           offsetof(Impl_, sell_available_flag_) -
               offsetof(Impl_, instrument_kind_) +
               sizeof(Impl_::sell_available_flag_));

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.IndicativeResponse)
}
inline PROTOBUF_NDEBUG_INLINE IndicativeResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : figi_(arena),
        ticker_(arena),
        class_code_(arena),
        currency_(arena),
        name_(arena),
        exchange_(arena),
        uid_(arena),
        _cached_size_{0} {}

inline void IndicativeResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, instrument_kind_),
           0,
           offsetof(Impl_, sell_available_flag_) -
               offsetof(Impl_, instrument_kind_) +
               sizeof(Impl_::sell_available_flag_));
}
IndicativeResponse::~IndicativeResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.IndicativeResponse)
  SharedDtor(*this);
}
inline void IndicativeResponse::SharedDtor(MessageLite& self) {
  IndicativeResponse& this_ = static_cast<IndicativeResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.figi_.Destroy();
  this_._impl_.ticker_.Destroy();
  this_._impl_.class_code_.Destroy();
  this_._impl_.currency_.Destroy();
  this_._impl_.name_.Destroy();
  this_._impl_.exchange_.Destroy();
  this_._impl_.uid_.Destroy();
  this_._impl_.~Impl_();
}

inline void* IndicativeResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) IndicativeResponse(arena);
}
constexpr auto IndicativeResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(IndicativeResponse),
                                            alignof(IndicativeResponse));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull IndicativeResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_IndicativeResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &IndicativeResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<IndicativeResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &IndicativeResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<IndicativeResponse>(), &IndicativeResponse::ByteSizeLong,
            &IndicativeResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(IndicativeResponse, _impl_._cached_size_),
        false,
    },
    &IndicativeResponse::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* IndicativeResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 0, 116, 7> IndicativeResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    405, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294952432,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::IndicativeResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string figi = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(IndicativeResponse, _impl_.figi_)}},
    // string ticker = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(IndicativeResponse, _impl_.ticker_)}},
    // string class_code = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(IndicativeResponse, _impl_.class_code_)}},
    // string currency = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(IndicativeResponse, _impl_.currency_)}},
    // bool sell_available_flag = 405;
    {::_pbi::TcParser::FastV8S2,
     {6568, 63, 0, PROTOBUF_FIELD_OFFSET(IndicativeResponse, _impl_.sell_available_flag_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // .tinkoff.public.invest.api.contract.v1.InstrumentType instrument_kind = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(IndicativeResponse, _impl_.instrument_kind_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(IndicativeResponse, _impl_.instrument_kind_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // string name = 12;
    {::_pbi::TcParser::FastUS1,
     {98, 63, 0, PROTOBUF_FIELD_OFFSET(IndicativeResponse, _impl_.name_)}},
    // string exchange = 13;
    {::_pbi::TcParser::FastUS1,
     {106, 63, 0, PROTOBUF_FIELD_OFFSET(IndicativeResponse, _impl_.exchange_)}},
    // string uid = 14;
    {::_pbi::TcParser::FastUS1,
     {114, 63, 0, PROTOBUF_FIELD_OFFSET(IndicativeResponse, _impl_.uid_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    404, 0, 1,
    65532, 8,
    65535, 65535
  }}, {{
    // string figi = 1;
    {PROTOBUF_FIELD_OFFSET(IndicativeResponse, _impl_.figi_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string ticker = 2;
    {PROTOBUF_FIELD_OFFSET(IndicativeResponse, _impl_.ticker_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string class_code = 3;
    {PROTOBUF_FIELD_OFFSET(IndicativeResponse, _impl_.class_code_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string currency = 4;
    {PROTOBUF_FIELD_OFFSET(IndicativeResponse, _impl_.currency_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public.invest.api.contract.v1.InstrumentType instrument_kind = 10;
    {PROTOBUF_FIELD_OFFSET(IndicativeResponse, _impl_.instrument_kind_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string name = 12;
    {PROTOBUF_FIELD_OFFSET(IndicativeResponse, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string exchange = 13;
    {PROTOBUF_FIELD_OFFSET(IndicativeResponse, _impl_.exchange_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string uid = 14;
    {PROTOBUF_FIELD_OFFSET(IndicativeResponse, _impl_.uid_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // bool buy_available_flag = 404;
    {PROTOBUF_FIELD_OFFSET(IndicativeResponse, _impl_.buy_available_flag_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool sell_available_flag = 405;
    {PROTOBUF_FIELD_OFFSET(IndicativeResponse, _impl_.sell_available_flag_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\70\4\6\12\10\0\4\10\3\0\0\0\0\0\0\0"
    "tinkoff.public.invest.api.contract.v1.IndicativeResponse"
    "figi"
    "ticker"
    "class_code"
    "currency"
    "name"
    "exchange"
    "uid"
  }},
};

PROTOBUF_NOINLINE void IndicativeResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.IndicativeResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.figi_.ClearToEmpty();
  _impl_.ticker_.ClearToEmpty();
  _impl_.class_code_.ClearToEmpty();
  _impl_.currency_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.exchange_.ClearToEmpty();
  _impl_.uid_.ClearToEmpty();
  ::memset(&_impl_.instrument_kind_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.sell_available_flag_) -
      reinterpret_cast<char*>(&_impl_.instrument_kind_)) + sizeof(_impl_.sell_available_flag_));
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* IndicativeResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const IndicativeResponse& this_ = static_cast<const IndicativeResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* IndicativeResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const IndicativeResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.IndicativeResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string figi = 1;
          if (!this_._internal_figi().empty()) {
            const std::string& _s = this_._internal_figi();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.IndicativeResponse.figi");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string ticker = 2;
          if (!this_._internal_ticker().empty()) {
            const std::string& _s = this_._internal_ticker();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.IndicativeResponse.ticker");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // string class_code = 3;
          if (!this_._internal_class_code().empty()) {
            const std::string& _s = this_._internal_class_code();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.IndicativeResponse.class_code");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // string currency = 4;
          if (!this_._internal_currency().empty()) {
            const std::string& _s = this_._internal_currency();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.IndicativeResponse.currency");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          // .tinkoff.public.invest.api.contract.v1.InstrumentType instrument_kind = 10;
          if (this_._internal_instrument_kind() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                10, this_._internal_instrument_kind(), target);
          }

          // string name = 12;
          if (!this_._internal_name().empty()) {
            const std::string& _s = this_._internal_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.IndicativeResponse.name");
            target = stream->WriteStringMaybeAliased(12, _s, target);
          }

          // string exchange = 13;
          if (!this_._internal_exchange().empty()) {
            const std::string& _s = this_._internal_exchange();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.IndicativeResponse.exchange");
            target = stream->WriteStringMaybeAliased(13, _s, target);
          }

          // string uid = 14;
          if (!this_._internal_uid().empty()) {
            const std::string& _s = this_._internal_uid();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.IndicativeResponse.uid");
            target = stream->WriteStringMaybeAliased(14, _s, target);
          }

          // bool buy_available_flag = 404;
          if (this_._internal_buy_available_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                404, this_._internal_buy_available_flag(), target);
          }

          // bool sell_available_flag = 405;
          if (this_._internal_sell_available_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                405, this_._internal_sell_available_flag(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.IndicativeResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t IndicativeResponse::ByteSizeLong(const MessageLite& base) {
          const IndicativeResponse& this_ = static_cast<const IndicativeResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t IndicativeResponse::ByteSizeLong() const {
          const IndicativeResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.IndicativeResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string figi = 1;
            if (!this_._internal_figi().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_figi());
            }
            // string ticker = 2;
            if (!this_._internal_ticker().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_ticker());
            }
            // string class_code = 3;
            if (!this_._internal_class_code().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_class_code());
            }
            // string currency = 4;
            if (!this_._internal_currency().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_currency());
            }
            // string name = 12;
            if (!this_._internal_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_name());
            }
            // string exchange = 13;
            if (!this_._internal_exchange().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_exchange());
            }
            // string uid = 14;
            if (!this_._internal_uid().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_uid());
            }
            // .tinkoff.public.invest.api.contract.v1.InstrumentType instrument_kind = 10;
            if (this_._internal_instrument_kind() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_instrument_kind());
            }
            // bool buy_available_flag = 404;
            if (this_._internal_buy_available_flag() != 0) {
              total_size += 3;
            }
            // bool sell_available_flag = 405;
            if (this_._internal_sell_available_flag() != 0) {
              total_size += 3;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void IndicativeResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<IndicativeResponse*>(&to_msg);
  auto& from = static_cast<const IndicativeResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.IndicativeResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_ticker().empty()) {
    _this->_internal_set_ticker(from._internal_ticker());
  }
  if (!from._internal_class_code().empty()) {
    _this->_internal_set_class_code(from._internal_class_code());
  }
  if (!from._internal_currency().empty()) {
    _this->_internal_set_currency(from._internal_currency());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_exchange().empty()) {
    _this->_internal_set_exchange(from._internal_exchange());
  }
  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (from._internal_instrument_kind() != 0) {
    _this->_impl_.instrument_kind_ = from._impl_.instrument_kind_;
  }
  if (from._internal_buy_available_flag() != 0) {
    _this->_impl_.buy_available_flag_ = from._impl_.buy_available_flag_;
  }
  if (from._internal_sell_available_flag() != 0) {
    _this->_impl_.sell_available_flag_ = from._impl_.sell_available_flag_;
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void IndicativeResponse::CopyFrom(const IndicativeResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.IndicativeResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void IndicativeResponse::InternalSwap(IndicativeResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.figi_, &other->_impl_.figi_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ticker_, &other->_impl_.ticker_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.class_code_, &other->_impl_.class_code_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.currency_, &other->_impl_.currency_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.exchange_, &other->_impl_.exchange_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.uid_, &other->_impl_.uid_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(IndicativeResponse, _impl_.sell_available_flag_)
      + sizeof(IndicativeResponse::_impl_.sell_available_flag_)
      - PROTOBUF_FIELD_OFFSET(IndicativeResponse, _impl_.instrument_kind_)>(
          reinterpret_cast<char*>(&_impl_.instrument_kind_),
          reinterpret_cast<char*>(&other->_impl_.instrument_kind_));
}

::google::protobuf::Metadata IndicativeResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class CountryResponse::_Internal {
 public:
};

CountryResponse::CountryResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.CountryResponse)
}
inline PROTOBUF_NDEBUG_INLINE CountryResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::CountryResponse& from_msg)
      : alfa_two_(arena, from.alfa_two_),
        alfa_three_(arena, from.alfa_three_),
        name_(arena, from.name_),
        name_brief_(arena, from.name_brief_),
        _cached_size_{0} {}

CountryResponse::CountryResponse(
    ::google::protobuf::Arena* arena,
    const CountryResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  CountryResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.CountryResponse)
}
inline PROTOBUF_NDEBUG_INLINE CountryResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : alfa_two_(arena),
        alfa_three_(arena),
        name_(arena),
        name_brief_(arena),
        _cached_size_{0} {}

inline void CountryResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
CountryResponse::~CountryResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.CountryResponse)
  SharedDtor(*this);
}
inline void CountryResponse::SharedDtor(MessageLite& self) {
  CountryResponse& this_ = static_cast<CountryResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.alfa_two_.Destroy();
  this_._impl_.alfa_three_.Destroy();
  this_._impl_.name_.Destroy();
  this_._impl_.name_brief_.Destroy();
  this_._impl_.~Impl_();
}

inline void* CountryResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) CountryResponse(arena);
}
constexpr auto CountryResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(CountryResponse),
                                            alignof(CountryResponse));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull CountryResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_CountryResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &CountryResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<CountryResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &CountryResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<CountryResponse>(), &CountryResponse::ByteSizeLong,
            &CountryResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(CountryResponse, _impl_._cached_size_),
        false,
    },
    &CountryResponse::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* CountryResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 4, 0, 94, 2> CountryResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    4, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967280,  // skipmap
    offsetof(decltype(_table_), field_entries),
    4,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::CountryResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string name_brief = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(CountryResponse, _impl_.name_brief_)}},
    // string alfa_two = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(CountryResponse, _impl_.alfa_two_)}},
    // string alfa_three = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(CountryResponse, _impl_.alfa_three_)}},
    // string name = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(CountryResponse, _impl_.name_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string alfa_two = 1;
    {PROTOBUF_FIELD_OFFSET(CountryResponse, _impl_.alfa_two_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string alfa_three = 2;
    {PROTOBUF_FIELD_OFFSET(CountryResponse, _impl_.alfa_three_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string name = 3;
    {PROTOBUF_FIELD_OFFSET(CountryResponse, _impl_.name_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string name_brief = 4;
    {PROTOBUF_FIELD_OFFSET(CountryResponse, _impl_.name_brief_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\65\10\12\4\12\0\0\0"
    "tinkoff.public.invest.api.contract.v1.CountryResponse"
    "alfa_two"
    "alfa_three"
    "name"
    "name_brief"
  }},
};

PROTOBUF_NOINLINE void CountryResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.CountryResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.alfa_two_.ClearToEmpty();
  _impl_.alfa_three_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.name_brief_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* CountryResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const CountryResponse& this_ = static_cast<const CountryResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* CountryResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const CountryResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.CountryResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string alfa_two = 1;
          if (!this_._internal_alfa_two().empty()) {
            const std::string& _s = this_._internal_alfa_two();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.CountryResponse.alfa_two");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string alfa_three = 2;
          if (!this_._internal_alfa_three().empty()) {
            const std::string& _s = this_._internal_alfa_three();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.CountryResponse.alfa_three");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // string name = 3;
          if (!this_._internal_name().empty()) {
            const std::string& _s = this_._internal_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.CountryResponse.name");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // string name_brief = 4;
          if (!this_._internal_name_brief().empty()) {
            const std::string& _s = this_._internal_name_brief();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.CountryResponse.name_brief");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.CountryResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t CountryResponse::ByteSizeLong(const MessageLite& base) {
          const CountryResponse& this_ = static_cast<const CountryResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t CountryResponse::ByteSizeLong() const {
          const CountryResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.CountryResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string alfa_two = 1;
            if (!this_._internal_alfa_two().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_alfa_two());
            }
            // string alfa_three = 2;
            if (!this_._internal_alfa_three().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_alfa_three());
            }
            // string name = 3;
            if (!this_._internal_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_name());
            }
            // string name_brief = 4;
            if (!this_._internal_name_brief().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_name_brief());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void CountryResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<CountryResponse*>(&to_msg);
  auto& from = static_cast<const CountryResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.CountryResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_alfa_two().empty()) {
    _this->_internal_set_alfa_two(from._internal_alfa_two());
  }
  if (!from._internal_alfa_three().empty()) {
    _this->_internal_set_alfa_three(from._internal_alfa_three());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_name_brief().empty()) {
    _this->_internal_set_name_brief(from._internal_name_brief());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void CountryResponse::CopyFrom(const CountryResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.CountryResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void CountryResponse::InternalSwap(CountryResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.alfa_two_, &other->_impl_.alfa_two_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.alfa_three_, &other->_impl_.alfa_three_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_brief_, &other->_impl_.name_brief_, arena);
}

::google::protobuf::Metadata CountryResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class FindInstrumentRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<FindInstrumentRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(FindInstrumentRequest, _impl_._has_bits_);
};

FindInstrumentRequest::FindInstrumentRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.FindInstrumentRequest)
}
inline PROTOBUF_NDEBUG_INLINE FindInstrumentRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::FindInstrumentRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        query_(arena, from.query_) {}

FindInstrumentRequest::FindInstrumentRequest(
    ::google::protobuf::Arena* arena,
    const FindInstrumentRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  FindInstrumentRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, instrument_kind_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, instrument_kind_),
           offsetof(Impl_, api_trade_available_flag_) -
               offsetof(Impl_, instrument_kind_) +
               sizeof(Impl_::api_trade_available_flag_));

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.FindInstrumentRequest)
}
inline PROTOBUF_NDEBUG_INLINE FindInstrumentRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        query_(arena) {}

inline void FindInstrumentRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, instrument_kind_),
           0,
           offsetof(Impl_, api_trade_available_flag_) -
               offsetof(Impl_, instrument_kind_) +
               sizeof(Impl_::api_trade_available_flag_));
}
FindInstrumentRequest::~FindInstrumentRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.FindInstrumentRequest)
  SharedDtor(*this);
}
inline void FindInstrumentRequest::SharedDtor(MessageLite& self) {
  FindInstrumentRequest& this_ = static_cast<FindInstrumentRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.query_.Destroy();
  this_._impl_.~Impl_();
}

inline void* FindInstrumentRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) FindInstrumentRequest(arena);
}
constexpr auto FindInstrumentRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(FindInstrumentRequest),
                                            alignof(FindInstrumentRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull FindInstrumentRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_FindInstrumentRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &FindInstrumentRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<FindInstrumentRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &FindInstrumentRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<FindInstrumentRequest>(), &FindInstrumentRequest::ByteSizeLong,
            &FindInstrumentRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(FindInstrumentRequest, _impl_._cached_size_),
        false,
    },
    &FindInstrumentRequest::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* FindInstrumentRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 0, 73, 2> FindInstrumentRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(FindInstrumentRequest, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::FindInstrumentRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string query = 1 [(.google.api.field_behavior) = REQUIRED];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(FindInstrumentRequest, _impl_.query_)}},
    // optional .tinkoff.public.invest.api.contract.v1.InstrumentType instrument_kind = 2;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(FindInstrumentRequest, _impl_.instrument_kind_), 0>(),
     {16, 0, 0, PROTOBUF_FIELD_OFFSET(FindInstrumentRequest, _impl_.instrument_kind_)}},
    // optional bool api_trade_available_flag = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(FindInstrumentRequest, _impl_.api_trade_available_flag_), 1>(),
     {24, 1, 0, PROTOBUF_FIELD_OFFSET(FindInstrumentRequest, _impl_.api_trade_available_flag_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string query = 1 [(.google.api.field_behavior) = REQUIRED];
    {PROTOBUF_FIELD_OFFSET(FindInstrumentRequest, _impl_.query_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional .tinkoff.public.invest.api.contract.v1.InstrumentType instrument_kind = 2;
    {PROTOBUF_FIELD_OFFSET(FindInstrumentRequest, _impl_.instrument_kind_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kOpenEnum)},
    // optional bool api_trade_available_flag = 3;
    {PROTOBUF_FIELD_OFFSET(FindInstrumentRequest, _impl_.api_trade_available_flag_), _Internal::kHasBitsOffset + 1, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kBool)},
  }},
  // no aux_entries
  {{
    "\73\5\0\0\0\0\0\0"
    "tinkoff.public.invest.api.contract.v1.FindInstrumentRequest"
    "query"
  }},
};

PROTOBUF_NOINLINE void FindInstrumentRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.FindInstrumentRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.query_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    ::memset(&_impl_.instrument_kind_, 0, static_cast<::size_t>(
        reinterpret_cast<char*>(&_impl_.api_trade_available_flag_) -
        reinterpret_cast<char*>(&_impl_.instrument_kind_)) + sizeof(_impl_.api_trade_available_flag_));
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* FindInstrumentRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const FindInstrumentRequest& this_ = static_cast<const FindInstrumentRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* FindInstrumentRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const FindInstrumentRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.FindInstrumentRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string query = 1 [(.google.api.field_behavior) = REQUIRED];
          if (!this_._internal_query().empty()) {
            const std::string& _s = this_._internal_query();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.FindInstrumentRequest.query");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // optional .tinkoff.public.invest.api.contract.v1.InstrumentType instrument_kind = 2;
          if (cached_has_bits & 0x00000001u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                2, this_._internal_instrument_kind(), target);
          }

          // optional bool api_trade_available_flag = 3;
          if (cached_has_bits & 0x00000002u) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                3, this_._internal_api_trade_available_flag(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.FindInstrumentRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t FindInstrumentRequest::ByteSizeLong(const MessageLite& base) {
          const FindInstrumentRequest& this_ = static_cast<const FindInstrumentRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t FindInstrumentRequest::ByteSizeLong() const {
          const FindInstrumentRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.FindInstrumentRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string query = 1 [(.google.api.field_behavior) = REQUIRED];
            if (!this_._internal_query().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_query());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // optional .tinkoff.public.invest.api.contract.v1.InstrumentType instrument_kind = 2;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_instrument_kind());
            }
            // optional bool api_trade_available_flag = 3;
            if (cached_has_bits & 0x00000002u) {
              total_size += 2;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void FindInstrumentRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<FindInstrumentRequest*>(&to_msg);
  auto& from = static_cast<const FindInstrumentRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.FindInstrumentRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_query().empty()) {
    _this->_internal_set_query(from._internal_query());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      _this->_impl_.instrument_kind_ = from._impl_.instrument_kind_;
    }
    if (cached_has_bits & 0x00000002u) {
      _this->_impl_.api_trade_available_flag_ = from._impl_.api_trade_available_flag_;
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FindInstrumentRequest::CopyFrom(const FindInstrumentRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.FindInstrumentRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void FindInstrumentRequest::InternalSwap(FindInstrumentRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.query_, &other->_impl_.query_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(FindInstrumentRequest, _impl_.api_trade_available_flag_)
      + sizeof(FindInstrumentRequest::_impl_.api_trade_available_flag_)
      - PROTOBUF_FIELD_OFFSET(FindInstrumentRequest, _impl_.instrument_kind_)>(
          reinterpret_cast<char*>(&_impl_.instrument_kind_),
          reinterpret_cast<char*>(&other->_impl_.instrument_kind_));
}

::google::protobuf::Metadata FindInstrumentRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class FindInstrumentResponse::_Internal {
 public:
};

FindInstrumentResponse::FindInstrumentResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.FindInstrumentResponse)
}
inline PROTOBUF_NDEBUG_INLINE FindInstrumentResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::FindInstrumentResponse& from_msg)
      : instruments_{visibility, arena, from.instruments_},
        _cached_size_{0} {}

FindInstrumentResponse::FindInstrumentResponse(
    ::google::protobuf::Arena* arena,
    const FindInstrumentResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  FindInstrumentResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.FindInstrumentResponse)
}
inline PROTOBUF_NDEBUG_INLINE FindInstrumentResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : instruments_{visibility, arena},
        _cached_size_{0} {}

inline void FindInstrumentResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
FindInstrumentResponse::~FindInstrumentResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.FindInstrumentResponse)
  SharedDtor(*this);
}
inline void FindInstrumentResponse::SharedDtor(MessageLite& self) {
  FindInstrumentResponse& this_ = static_cast<FindInstrumentResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* FindInstrumentResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) FindInstrumentResponse(arena);
}
constexpr auto FindInstrumentResponse::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(FindInstrumentResponse, _impl_.instruments_) +
          decltype(FindInstrumentResponse::_impl_.instruments_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(FindInstrumentResponse), alignof(FindInstrumentResponse), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&FindInstrumentResponse::PlacementNew_,
                                 sizeof(FindInstrumentResponse),
                                 alignof(FindInstrumentResponse));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull FindInstrumentResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_FindInstrumentResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &FindInstrumentResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<FindInstrumentResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &FindInstrumentResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<FindInstrumentResponse>(), &FindInstrumentResponse::ByteSizeLong,
            &FindInstrumentResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(FindInstrumentResponse, _impl_._cached_size_),
        false,
    },
    &FindInstrumentResponse::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* FindInstrumentResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> FindInstrumentResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::FindInstrumentResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .tinkoff.public.invest.api.contract.v1.InstrumentShort instruments = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(FindInstrumentResponse, _impl_.instruments_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .tinkoff.public.invest.api.contract.v1.InstrumentShort instruments = 1;
    {PROTOBUF_FIELD_OFFSET(FindInstrumentResponse, _impl_.instruments_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::InstrumentShort>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void FindInstrumentResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.FindInstrumentResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instruments_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* FindInstrumentResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const FindInstrumentResponse& this_ = static_cast<const FindInstrumentResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* FindInstrumentResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const FindInstrumentResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.FindInstrumentResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .tinkoff.public.invest.api.contract.v1.InstrumentShort instruments = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_instruments_size());
               i < n; i++) {
            const auto& repfield = this_._internal_instruments().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.FindInstrumentResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t FindInstrumentResponse::ByteSizeLong(const MessageLite& base) {
          const FindInstrumentResponse& this_ = static_cast<const FindInstrumentResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t FindInstrumentResponse::ByteSizeLong() const {
          const FindInstrumentResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.FindInstrumentResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .tinkoff.public.invest.api.contract.v1.InstrumentShort instruments = 1;
            {
              total_size += 1UL * this_._internal_instruments_size();
              for (const auto& msg : this_._internal_instruments()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void FindInstrumentResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<FindInstrumentResponse*>(&to_msg);
  auto& from = static_cast<const FindInstrumentResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.FindInstrumentResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_instruments()->MergeFrom(
      from._internal_instruments());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void FindInstrumentResponse::CopyFrom(const FindInstrumentResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.FindInstrumentResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void FindInstrumentResponse::InternalSwap(FindInstrumentResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.instruments_.InternalSwap(&other->_impl_.instruments_);
}

::google::protobuf::Metadata FindInstrumentResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class InstrumentShort::_Internal {
 public:
  using HasBits =
      decltype(std::declval<InstrumentShort>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_._has_bits_);
};

void InstrumentShort::clear_first_1min_candle_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.first_1min_candle_date_ != nullptr) _impl_.first_1min_candle_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void InstrumentShort::clear_first_1day_candle_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.first_1day_candle_date_ != nullptr) _impl_.first_1day_candle_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
InstrumentShort::InstrumentShort(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.InstrumentShort)
}
inline PROTOBUF_NDEBUG_INLINE InstrumentShort::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::InstrumentShort& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        isin_(arena, from.isin_),
        figi_(arena, from.figi_),
        ticker_(arena, from.ticker_),
        class_code_(arena, from.class_code_),
        instrument_type_(arena, from.instrument_type_),
        name_(arena, from.name_),
        uid_(arena, from.uid_),
        position_uid_(arena, from.position_uid_) {}

InstrumentShort::InstrumentShort(
    ::google::protobuf::Arena* arena,
    const InstrumentShort& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  InstrumentShort* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.first_1min_candle_date_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.first_1min_candle_date_)
                        : nullptr;
  _impl_.first_1day_candle_date_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.first_1day_candle_date_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, instrument_kind_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, instrument_kind_),
           offsetof(Impl_, lot_) -
               offsetof(Impl_, instrument_kind_) +
               sizeof(Impl_::lot_));

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.InstrumentShort)
}
inline PROTOBUF_NDEBUG_INLINE InstrumentShort::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        isin_(arena),
        figi_(arena),
        ticker_(arena),
        class_code_(arena),
        instrument_type_(arena),
        name_(arena),
        uid_(arena),
        position_uid_(arena) {}

inline void InstrumentShort::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, first_1min_candle_date_),
           0,
           offsetof(Impl_, lot_) -
               offsetof(Impl_, first_1min_candle_date_) +
               sizeof(Impl_::lot_));
}
InstrumentShort::~InstrumentShort() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.InstrumentShort)
  SharedDtor(*this);
}
inline void InstrumentShort::SharedDtor(MessageLite& self) {
  InstrumentShort& this_ = static_cast<InstrumentShort&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.isin_.Destroy();
  this_._impl_.figi_.Destroy();
  this_._impl_.ticker_.Destroy();
  this_._impl_.class_code_.Destroy();
  this_._impl_.instrument_type_.Destroy();
  this_._impl_.name_.Destroy();
  this_._impl_.uid_.Destroy();
  this_._impl_.position_uid_.Destroy();
  delete this_._impl_.first_1min_candle_date_;
  delete this_._impl_.first_1day_candle_date_;
  this_._impl_.~Impl_();
}

inline void* InstrumentShort::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) InstrumentShort(arena);
}
constexpr auto InstrumentShort::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(InstrumentShort),
                                            alignof(InstrumentShort));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull InstrumentShort::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_InstrumentShort_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &InstrumentShort::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<InstrumentShort>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &InstrumentShort::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<InstrumentShort>(), &InstrumentShort::ByteSizeLong,
            &InstrumentShort::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_._cached_size_),
        false,
    },
    &InstrumentShort::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* InstrumentShort::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 17, 2, 136, 2> InstrumentShort::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_._has_bits_),
    0, // no _extensions_
    31, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    2181034240,  // skipmap
    offsetof(decltype(_table_), field_entries),
    17,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::InstrumentShort>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string isin = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_.isin_)}},
    // string figi = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_.figi_)}},
    // string ticker = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_.ticker_)}},
    // string class_code = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_.class_code_)}},
    // string instrument_type = 5;
    {::_pbi::TcParser::FastUS1,
     {42, 63, 0, PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_.instrument_type_)}},
    // string name = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_.name_)}},
    // string uid = 7;
    {::_pbi::TcParser::FastUS1,
     {58, 63, 0, PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_.uid_)}},
    // string position_uid = 8;
    {::_pbi::TcParser::FastUS1,
     {66, 63, 0, PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_.position_uid_)}},
    {::_pbi::TcParser::MiniParse, {}},
    // .tinkoff.public.invest.api.contract.v1.InstrumentType instrument_kind = 10;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(InstrumentShort, _impl_.instrument_kind_), 63>(),
     {80, 63, 0, PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_.instrument_kind_)}},
    // bool api_trade_available_flag = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(InstrumentShort, _impl_.api_trade_available_flag_), 63>(),
     {88, 63, 0, PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_.api_trade_available_flag_)}},
    // bool for_iis_flag = 12;
    {::_pbi::TcParser::SingularVarintNoZag1<bool, offsetof(InstrumentShort, _impl_.for_iis_flag_), 63>(),
     {96, 63, 0, PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_.for_iis_flag_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    // .google.protobuf.Timestamp first_1min_candle_date = 26;
    {::_pbi::TcParser::FastMtS2,
     {466, 0, 0, PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_.first_1min_candle_date_)}},
    // .google.protobuf.Timestamp first_1day_candle_date = 27;
    {::_pbi::TcParser::FastMtS2,
     {474, 1, 1, PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_.first_1day_candle_date_)}},
    // bool for_qual_investor_flag = 28;
    {::_pbi::TcParser::FastV8S2,
     {480, 63, 0, PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_.for_qual_investor_flag_)}},
    // bool weekend_flag = 29;
    {::_pbi::TcParser::FastV8S2,
     {488, 63, 0, PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_.weekend_flag_)}},
    // bool blocked_tca_flag = 30;
    {::_pbi::TcParser::FastV8S2,
     {496, 63, 0, PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_.blocked_tca_flag_)}},
    // int32 lot = 31;
    {::_pbi::TcParser::FastV32S2,
     {504, 63, 0, PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_.lot_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string isin = 1;
    {PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_.isin_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string figi = 2;
    {PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_.figi_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string ticker = 3;
    {PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_.ticker_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string class_code = 4;
    {PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_.class_code_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string instrument_type = 5;
    {PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_.instrument_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string name = 6;
    {PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_.name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string uid = 7;
    {PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_.uid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string position_uid = 8;
    {PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_.position_uid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public.invest.api.contract.v1.InstrumentType instrument_kind = 10;
    {PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_.instrument_kind_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // bool api_trade_available_flag = 11;
    {PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_.api_trade_available_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool for_iis_flag = 12;
    {PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_.for_iis_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // .google.protobuf.Timestamp first_1min_candle_date = 26;
    {PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_.first_1min_candle_date_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp first_1day_candle_date = 27;
    {PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_.first_1day_candle_date_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // bool for_qual_investor_flag = 28;
    {PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_.for_qual_investor_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool weekend_flag = 29;
    {PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_.weekend_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // bool blocked_tca_flag = 30;
    {PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_.blocked_tca_flag_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kBool)},
    // int32 lot = 31;
    {PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_.lot_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\65\4\4\6\12\17\4\3\14\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "tinkoff.public.invest.api.contract.v1.InstrumentShort"
    "isin"
    "figi"
    "ticker"
    "class_code"
    "instrument_type"
    "name"
    "uid"
    "position_uid"
  }},
};

PROTOBUF_NOINLINE void InstrumentShort::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.InstrumentShort)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.isin_.ClearToEmpty();
  _impl_.figi_.ClearToEmpty();
  _impl_.ticker_.ClearToEmpty();
  _impl_.class_code_.ClearToEmpty();
  _impl_.instrument_type_.ClearToEmpty();
  _impl_.name_.ClearToEmpty();
  _impl_.uid_.ClearToEmpty();
  _impl_.position_uid_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.first_1min_candle_date_ != nullptr);
      _impl_.first_1min_candle_date_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.first_1day_candle_date_ != nullptr);
      _impl_.first_1day_candle_date_->Clear();
    }
  }
  ::memset(&_impl_.instrument_kind_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.lot_) -
      reinterpret_cast<char*>(&_impl_.instrument_kind_)) + sizeof(_impl_.lot_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* InstrumentShort::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const InstrumentShort& this_ = static_cast<const InstrumentShort&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* InstrumentShort::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const InstrumentShort& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.InstrumentShort)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string isin = 1;
          if (!this_._internal_isin().empty()) {
            const std::string& _s = this_._internal_isin();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.InstrumentShort.isin");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string figi = 2;
          if (!this_._internal_figi().empty()) {
            const std::string& _s = this_._internal_figi();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.InstrumentShort.figi");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // string ticker = 3;
          if (!this_._internal_ticker().empty()) {
            const std::string& _s = this_._internal_ticker();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.InstrumentShort.ticker");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // string class_code = 4;
          if (!this_._internal_class_code().empty()) {
            const std::string& _s = this_._internal_class_code();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.InstrumentShort.class_code");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          // string instrument_type = 5;
          if (!this_._internal_instrument_type().empty()) {
            const std::string& _s = this_._internal_instrument_type();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.InstrumentShort.instrument_type");
            target = stream->WriteStringMaybeAliased(5, _s, target);
          }

          // string name = 6;
          if (!this_._internal_name().empty()) {
            const std::string& _s = this_._internal_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.InstrumentShort.name");
            target = stream->WriteStringMaybeAliased(6, _s, target);
          }

          // string uid = 7;
          if (!this_._internal_uid().empty()) {
            const std::string& _s = this_._internal_uid();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.InstrumentShort.uid");
            target = stream->WriteStringMaybeAliased(7, _s, target);
          }

          // string position_uid = 8;
          if (!this_._internal_position_uid().empty()) {
            const std::string& _s = this_._internal_position_uid();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.InstrumentShort.position_uid");
            target = stream->WriteStringMaybeAliased(8, _s, target);
          }

          // .tinkoff.public.invest.api.contract.v1.InstrumentType instrument_kind = 10;
          if (this_._internal_instrument_kind() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                10, this_._internal_instrument_kind(), target);
          }

          // bool api_trade_available_flag = 11;
          if (this_._internal_api_trade_available_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                11, this_._internal_api_trade_available_flag(), target);
          }

          // bool for_iis_flag = 12;
          if (this_._internal_for_iis_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                12, this_._internal_for_iis_flag(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .google.protobuf.Timestamp first_1min_candle_date = 26;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                26, *this_._impl_.first_1min_candle_date_, this_._impl_.first_1min_candle_date_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Timestamp first_1day_candle_date = 27;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                27, *this_._impl_.first_1day_candle_date_, this_._impl_.first_1day_candle_date_->GetCachedSize(), target,
                stream);
          }

          // bool for_qual_investor_flag = 28;
          if (this_._internal_for_qual_investor_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                28, this_._internal_for_qual_investor_flag(), target);
          }

          // bool weekend_flag = 29;
          if (this_._internal_weekend_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                29, this_._internal_weekend_flag(), target);
          }

          // bool blocked_tca_flag = 30;
          if (this_._internal_blocked_tca_flag() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteBoolToArray(
                30, this_._internal_blocked_tca_flag(), target);
          }

          // int32 lot = 31;
          if (this_._internal_lot() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteInt32ToArray(
                31, this_._internal_lot(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.InstrumentShort)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t InstrumentShort::ByteSizeLong(const MessageLite& base) {
          const InstrumentShort& this_ = static_cast<const InstrumentShort&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t InstrumentShort::ByteSizeLong() const {
          const InstrumentShort& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.InstrumentShort)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string isin = 1;
            if (!this_._internal_isin().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_isin());
            }
            // string figi = 2;
            if (!this_._internal_figi().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_figi());
            }
            // string ticker = 3;
            if (!this_._internal_ticker().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_ticker());
            }
            // string class_code = 4;
            if (!this_._internal_class_code().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_class_code());
            }
            // string instrument_type = 5;
            if (!this_._internal_instrument_type().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_instrument_type());
            }
            // string name = 6;
            if (!this_._internal_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_name());
            }
            // string uid = 7;
            if (!this_._internal_uid().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_uid());
            }
            // string position_uid = 8;
            if (!this_._internal_position_uid().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_position_uid());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .google.protobuf.Timestamp first_1min_candle_date = 26;
            if (cached_has_bits & 0x00000001u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.first_1min_candle_date_);
            }
            // .google.protobuf.Timestamp first_1day_candle_date = 27;
            if (cached_has_bits & 0x00000002u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.first_1day_candle_date_);
            }
          }
           {
            // .tinkoff.public.invest.api.contract.v1.InstrumentType instrument_kind = 10;
            if (this_._internal_instrument_kind() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_instrument_kind());
            }
            // bool api_trade_available_flag = 11;
            if (this_._internal_api_trade_available_flag() != 0) {
              total_size += 2;
            }
            // bool for_iis_flag = 12;
            if (this_._internal_for_iis_flag() != 0) {
              total_size += 2;
            }
            // bool for_qual_investor_flag = 28;
            if (this_._internal_for_qual_investor_flag() != 0) {
              total_size += 3;
            }
            // bool weekend_flag = 29;
            if (this_._internal_weekend_flag() != 0) {
              total_size += 3;
            }
            // bool blocked_tca_flag = 30;
            if (this_._internal_blocked_tca_flag() != 0) {
              total_size += 3;
            }
            // int32 lot = 31;
            if (this_._internal_lot() != 0) {
              total_size += 2 + ::_pbi::WireFormatLite::Int32Size(
                                              this_._internal_lot());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void InstrumentShort::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<InstrumentShort*>(&to_msg);
  auto& from = static_cast<const InstrumentShort&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.InstrumentShort)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_isin().empty()) {
    _this->_internal_set_isin(from._internal_isin());
  }
  if (!from._internal_figi().empty()) {
    _this->_internal_set_figi(from._internal_figi());
  }
  if (!from._internal_ticker().empty()) {
    _this->_internal_set_ticker(from._internal_ticker());
  }
  if (!from._internal_class_code().empty()) {
    _this->_internal_set_class_code(from._internal_class_code());
  }
  if (!from._internal_instrument_type().empty()) {
    _this->_internal_set_instrument_type(from._internal_instrument_type());
  }
  if (!from._internal_name().empty()) {
    _this->_internal_set_name(from._internal_name());
  }
  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (!from._internal_position_uid().empty()) {
    _this->_internal_set_position_uid(from._internal_position_uid());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.first_1min_candle_date_ != nullptr);
      if (_this->_impl_.first_1min_candle_date_ == nullptr) {
        _this->_impl_.first_1min_candle_date_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.first_1min_candle_date_);
      } else {
        _this->_impl_.first_1min_candle_date_->MergeFrom(*from._impl_.first_1min_candle_date_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.first_1day_candle_date_ != nullptr);
      if (_this->_impl_.first_1day_candle_date_ == nullptr) {
        _this->_impl_.first_1day_candle_date_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.first_1day_candle_date_);
      } else {
        _this->_impl_.first_1day_candle_date_->MergeFrom(*from._impl_.first_1day_candle_date_);
      }
    }
  }
  if (from._internal_instrument_kind() != 0) {
    _this->_impl_.instrument_kind_ = from._impl_.instrument_kind_;
  }
  if (from._internal_api_trade_available_flag() != 0) {
    _this->_impl_.api_trade_available_flag_ = from._impl_.api_trade_available_flag_;
  }
  if (from._internal_for_iis_flag() != 0) {
    _this->_impl_.for_iis_flag_ = from._impl_.for_iis_flag_;
  }
  if (from._internal_for_qual_investor_flag() != 0) {
    _this->_impl_.for_qual_investor_flag_ = from._impl_.for_qual_investor_flag_;
  }
  if (from._internal_weekend_flag() != 0) {
    _this->_impl_.weekend_flag_ = from._impl_.weekend_flag_;
  }
  if (from._internal_blocked_tca_flag() != 0) {
    _this->_impl_.blocked_tca_flag_ = from._impl_.blocked_tca_flag_;
  }
  if (from._internal_lot() != 0) {
    _this->_impl_.lot_ = from._impl_.lot_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void InstrumentShort::CopyFrom(const InstrumentShort& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.InstrumentShort)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void InstrumentShort::InternalSwap(InstrumentShort* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.isin_, &other->_impl_.isin_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.figi_, &other->_impl_.figi_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ticker_, &other->_impl_.ticker_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.class_code_, &other->_impl_.class_code_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.instrument_type_, &other->_impl_.instrument_type_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.name_, &other->_impl_.name_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.uid_, &other->_impl_.uid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.position_uid_, &other->_impl_.position_uid_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_.lot_)
      + sizeof(InstrumentShort::_impl_.lot_)
      - PROTOBUF_FIELD_OFFSET(InstrumentShort, _impl_.first_1min_candle_date_)>(
          reinterpret_cast<char*>(&_impl_.first_1min_candle_date_),
          reinterpret_cast<char*>(&other->_impl_.first_1min_candle_date_));
}

::google::protobuf::Metadata InstrumentShort::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GetBrandsRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GetBrandsRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GetBrandsRequest, _impl_._has_bits_);
};

void GetBrandsRequest::clear_paging() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.paging_ != nullptr) _impl_.paging_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GetBrandsRequest::GetBrandsRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.GetBrandsRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetBrandsRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::GetBrandsRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

GetBrandsRequest::GetBrandsRequest(
    ::google::protobuf::Arena* arena,
    const GetBrandsRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GetBrandsRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.paging_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Page>(
                              arena, *from._impl_.paging_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.GetBrandsRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetBrandsRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GetBrandsRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.paging_ = {};
}
GetBrandsRequest::~GetBrandsRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.GetBrandsRequest)
  SharedDtor(*this);
}
inline void GetBrandsRequest::SharedDtor(MessageLite& self) {
  GetBrandsRequest& this_ = static_cast<GetBrandsRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.paging_;
  this_._impl_.~Impl_();
}

inline void* GetBrandsRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) GetBrandsRequest(arena);
}
constexpr auto GetBrandsRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(GetBrandsRequest),
                                            alignof(GetBrandsRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull GetBrandsRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_GetBrandsRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &GetBrandsRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<GetBrandsRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &GetBrandsRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<GetBrandsRequest>(), &GetBrandsRequest::ByteSizeLong,
            &GetBrandsRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(GetBrandsRequest, _impl_._cached_size_),
        false,
    },
    &GetBrandsRequest::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* GetBrandsRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> GetBrandsRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetBrandsRequest, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::GetBrandsRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .tinkoff.public.invest.api.contract.v1.Page paging = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(GetBrandsRequest, _impl_.paging_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .tinkoff.public.invest.api.contract.v1.Page paging = 1;
    {PROTOBUF_FIELD_OFFSET(GetBrandsRequest, _impl_.paging_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Page>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void GetBrandsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.GetBrandsRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.paging_ != nullptr);
    _impl_.paging_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GetBrandsRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GetBrandsRequest& this_ = static_cast<const GetBrandsRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GetBrandsRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GetBrandsRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.GetBrandsRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .tinkoff.public.invest.api.contract.v1.Page paging = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.paging_, this_._impl_.paging_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.GetBrandsRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GetBrandsRequest::ByteSizeLong(const MessageLite& base) {
          const GetBrandsRequest& this_ = static_cast<const GetBrandsRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GetBrandsRequest::ByteSizeLong() const {
          const GetBrandsRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.GetBrandsRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // .tinkoff.public.invest.api.contract.v1.Page paging = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.paging_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GetBrandsRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GetBrandsRequest*>(&to_msg);
  auto& from = static_cast<const GetBrandsRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.GetBrandsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.paging_ != nullptr);
    if (_this->_impl_.paging_ == nullptr) {
      _this->_impl_.paging_ =
          ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Page>(arena, *from._impl_.paging_);
    } else {
      _this->_impl_.paging_->MergeFrom(*from._impl_.paging_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetBrandsRequest::CopyFrom(const GetBrandsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.GetBrandsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GetBrandsRequest::InternalSwap(GetBrandsRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.paging_, other->_impl_.paging_);
}

::google::protobuf::Metadata GetBrandsRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GetBrandRequest::_Internal {
 public:
};

GetBrandRequest::GetBrandRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.GetBrandRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetBrandRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::GetBrandRequest& from_msg)
      : id_(arena, from.id_),
        _cached_size_{0} {}

GetBrandRequest::GetBrandRequest(
    ::google::protobuf::Arena* arena,
    const GetBrandRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GetBrandRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.GetBrandRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetBrandRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : id_(arena),
        _cached_size_{0} {}

inline void GetBrandRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
GetBrandRequest::~GetBrandRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.GetBrandRequest)
  SharedDtor(*this);
}
inline void GetBrandRequest::SharedDtor(MessageLite& self) {
  GetBrandRequest& this_ = static_cast<GetBrandRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.id_.Destroy();
  this_._impl_.~Impl_();
}

inline void* GetBrandRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) GetBrandRequest(arena);
}
constexpr auto GetBrandRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(GetBrandRequest),
                                            alignof(GetBrandRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull GetBrandRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_GetBrandRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &GetBrandRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<GetBrandRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &GetBrandRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<GetBrandRequest>(), &GetBrandRequest::ByteSizeLong,
            &GetBrandRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(GetBrandRequest, _impl_._cached_size_),
        false,
    },
    &GetBrandRequest::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* GetBrandRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 64, 2> GetBrandRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::GetBrandRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string id = 1 [(.google.api.field_behavior) = REQUIRED];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetBrandRequest, _impl_.id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string id = 1 [(.google.api.field_behavior) = REQUIRED];
    {PROTOBUF_FIELD_OFFSET(GetBrandRequest, _impl_.id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\65\2\0\0\0\0\0\0"
    "tinkoff.public.invest.api.contract.v1.GetBrandRequest"
    "id"
  }},
};

PROTOBUF_NOINLINE void GetBrandRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.GetBrandRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.id_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GetBrandRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GetBrandRequest& this_ = static_cast<const GetBrandRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GetBrandRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GetBrandRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.GetBrandRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string id = 1 [(.google.api.field_behavior) = REQUIRED];
          if (!this_._internal_id().empty()) {
            const std::string& _s = this_._internal_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.GetBrandRequest.id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.GetBrandRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GetBrandRequest::ByteSizeLong(const MessageLite& base) {
          const GetBrandRequest& this_ = static_cast<const GetBrandRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GetBrandRequest::ByteSizeLong() const {
          const GetBrandRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.GetBrandRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // string id = 1 [(.google.api.field_behavior) = REQUIRED];
            if (!this_._internal_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_id());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GetBrandRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GetBrandRequest*>(&to_msg);
  auto& from = static_cast<const GetBrandRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.GetBrandRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_id().empty()) {
    _this->_internal_set_id(from._internal_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetBrandRequest::CopyFrom(const GetBrandRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.GetBrandRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GetBrandRequest::InternalSwap(GetBrandRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.id_, &other->_impl_.id_, arena);
}

::google::protobuf::Metadata GetBrandRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GetBrandsResponse::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GetBrandsResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GetBrandsResponse, _impl_._has_bits_);
};

void GetBrandsResponse::clear_paging() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.paging_ != nullptr) _impl_.paging_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GetBrandsResponse::GetBrandsResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.GetBrandsResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetBrandsResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::GetBrandsResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        brands_{visibility, arena, from.brands_} {}

GetBrandsResponse::GetBrandsResponse(
    ::google::protobuf::Arena* arena,
    const GetBrandsResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GetBrandsResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.paging_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::PageResponse>(
                              arena, *from._impl_.paging_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.GetBrandsResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetBrandsResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        brands_{visibility, arena} {}

inline void GetBrandsResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.paging_ = {};
}
GetBrandsResponse::~GetBrandsResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.GetBrandsResponse)
  SharedDtor(*this);
}
inline void GetBrandsResponse::SharedDtor(MessageLite& self) {
  GetBrandsResponse& this_ = static_cast<GetBrandsResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.paging_;
  this_._impl_.~Impl_();
}

inline void* GetBrandsResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) GetBrandsResponse(arena);
}
constexpr auto GetBrandsResponse::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(GetBrandsResponse, _impl_.brands_) +
          decltype(GetBrandsResponse::_impl_.brands_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(GetBrandsResponse), alignof(GetBrandsResponse), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&GetBrandsResponse::PlacementNew_,
                                 sizeof(GetBrandsResponse),
                                 alignof(GetBrandsResponse));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull GetBrandsResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_GetBrandsResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &GetBrandsResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<GetBrandsResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &GetBrandsResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<GetBrandsResponse>(), &GetBrandsResponse::ByteSizeLong,
            &GetBrandsResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(GetBrandsResponse, _impl_._cached_size_),
        false,
    },
    &GetBrandsResponse::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* GetBrandsResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> GetBrandsResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetBrandsResponse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::GetBrandsResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .tinkoff.public.invest.api.contract.v1.PageResponse paging = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 1, PROTOBUF_FIELD_OFFSET(GetBrandsResponse, _impl_.paging_)}},
    // repeated .tinkoff.public.invest.api.contract.v1.Brand brands = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetBrandsResponse, _impl_.brands_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .tinkoff.public.invest.api.contract.v1.Brand brands = 1;
    {PROTOBUF_FIELD_OFFSET(GetBrandsResponse, _impl_.brands_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.PageResponse paging = 2;
    {PROTOBUF_FIELD_OFFSET(GetBrandsResponse, _impl_.paging_), _Internal::kHasBitsOffset + 0, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Brand>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::PageResponse>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void GetBrandsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.GetBrandsResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.brands_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.paging_ != nullptr);
    _impl_.paging_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GetBrandsResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GetBrandsResponse& this_ = static_cast<const GetBrandsResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GetBrandsResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GetBrandsResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.GetBrandsResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .tinkoff.public.invest.api.contract.v1.Brand brands = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_brands_size());
               i < n; i++) {
            const auto& repfield = this_._internal_brands().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .tinkoff.public.invest.api.contract.v1.PageResponse paging = 2;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.paging_, this_._impl_.paging_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.GetBrandsResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GetBrandsResponse::ByteSizeLong(const MessageLite& base) {
          const GetBrandsResponse& this_ = static_cast<const GetBrandsResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GetBrandsResponse::ByteSizeLong() const {
          const GetBrandsResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.GetBrandsResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .tinkoff.public.invest.api.contract.v1.Brand brands = 1;
            {
              total_size += 1UL * this_._internal_brands_size();
              for (const auto& msg : this_._internal_brands()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // .tinkoff.public.invest.api.contract.v1.PageResponse paging = 2;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.paging_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GetBrandsResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GetBrandsResponse*>(&to_msg);
  auto& from = static_cast<const GetBrandsResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.GetBrandsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_brands()->MergeFrom(
      from._internal_brands());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.paging_ != nullptr);
    if (_this->_impl_.paging_ == nullptr) {
      _this->_impl_.paging_ =
          ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::PageResponse>(arena, *from._impl_.paging_);
    } else {
      _this->_impl_.paging_->MergeFrom(*from._impl_.paging_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetBrandsResponse::CopyFrom(const GetBrandsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.GetBrandsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GetBrandsResponse::InternalSwap(GetBrandsResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.brands_.InternalSwap(&other->_impl_.brands_);
  swap(_impl_.paging_, other->_impl_.paging_);
}

::google::protobuf::Metadata GetBrandsResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GetAssetFundamentalsRequest::_Internal {
 public:
};

GetAssetFundamentalsRequest::GetAssetFundamentalsRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.GetAssetFundamentalsRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetAssetFundamentalsRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsRequest& from_msg)
      : assets_{visibility, arena, from.assets_},
        _cached_size_{0} {}

GetAssetFundamentalsRequest::GetAssetFundamentalsRequest(
    ::google::protobuf::Arena* arena,
    const GetAssetFundamentalsRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GetAssetFundamentalsRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.GetAssetFundamentalsRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetAssetFundamentalsRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : assets_{visibility, arena},
        _cached_size_{0} {}

inline void GetAssetFundamentalsRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
GetAssetFundamentalsRequest::~GetAssetFundamentalsRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.GetAssetFundamentalsRequest)
  SharedDtor(*this);
}
inline void GetAssetFundamentalsRequest::SharedDtor(MessageLite& self) {
  GetAssetFundamentalsRequest& this_ = static_cast<GetAssetFundamentalsRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* GetAssetFundamentalsRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) GetAssetFundamentalsRequest(arena);
}
constexpr auto GetAssetFundamentalsRequest::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsRequest, _impl_.assets_) +
          decltype(GetAssetFundamentalsRequest::_impl_.assets_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(GetAssetFundamentalsRequest), alignof(GetAssetFundamentalsRequest), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&GetAssetFundamentalsRequest::PlacementNew_,
                                 sizeof(GetAssetFundamentalsRequest),
                                 alignof(GetAssetFundamentalsRequest));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull GetAssetFundamentalsRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_GetAssetFundamentalsRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &GetAssetFundamentalsRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<GetAssetFundamentalsRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &GetAssetFundamentalsRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<GetAssetFundamentalsRequest>(), &GetAssetFundamentalsRequest::ByteSizeLong,
            &GetAssetFundamentalsRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsRequest, _impl_._cached_size_),
        false,
    },
    &GetAssetFundamentalsRequest::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* GetAssetFundamentalsRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 80, 2> GetAssetFundamentalsRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated string assets = 1 [(.google.api.field_behavior) = REQUIRED];
    {::_pbi::TcParser::FastUR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsRequest, _impl_.assets_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated string assets = 1 [(.google.api.field_behavior) = REQUIRED];
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsRequest, _impl_.assets_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kUtf8String | ::_fl::kRepSString)},
  }},
  // no aux_entries
  {{
    "\101\6\0\0\0\0\0\0"
    "tinkoff.public.invest.api.contract.v1.GetAssetFundamentalsRequest"
    "assets"
  }},
};

PROTOBUF_NOINLINE void GetAssetFundamentalsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.GetAssetFundamentalsRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.assets_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GetAssetFundamentalsRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GetAssetFundamentalsRequest& this_ = static_cast<const GetAssetFundamentalsRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GetAssetFundamentalsRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GetAssetFundamentalsRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.GetAssetFundamentalsRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated string assets = 1 [(.google.api.field_behavior) = REQUIRED];
          for (int i = 0, n = this_._internal_assets_size(); i < n; ++i) {
            const auto& s = this_._internal_assets().Get(i);
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                s.data(), static_cast<int>(s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.GetAssetFundamentalsRequest.assets");
            target = stream->WriteString(1, s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.GetAssetFundamentalsRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GetAssetFundamentalsRequest::ByteSizeLong(const MessageLite& base) {
          const GetAssetFundamentalsRequest& this_ = static_cast<const GetAssetFundamentalsRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GetAssetFundamentalsRequest::ByteSizeLong() const {
          const GetAssetFundamentalsRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.GetAssetFundamentalsRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated string assets = 1 [(.google.api.field_behavior) = REQUIRED];
            {
              total_size +=
                  1 * ::google::protobuf::internal::FromIntSize(this_._internal_assets().size());
              for (int i = 0, n = this_._internal_assets().size(); i < n; ++i) {
                total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
                    this_._internal_assets().Get(i));
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GetAssetFundamentalsRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GetAssetFundamentalsRequest*>(&to_msg);
  auto& from = static_cast<const GetAssetFundamentalsRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.GetAssetFundamentalsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_assets()->MergeFrom(from._internal_assets());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetAssetFundamentalsRequest::CopyFrom(const GetAssetFundamentalsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.GetAssetFundamentalsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GetAssetFundamentalsRequest::InternalSwap(GetAssetFundamentalsRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.assets_.InternalSwap(&other->_impl_.assets_);
}

::google::protobuf::Metadata GetAssetFundamentalsRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GetAssetFundamentalsResponse_StatisticResponse::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GetAssetFundamentalsResponse_StatisticResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_._has_bits_);
};

void GetAssetFundamentalsResponse_StatisticResponse::clear_ex_dividend_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.ex_dividend_date_ != nullptr) _impl_.ex_dividend_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GetAssetFundamentalsResponse_StatisticResponse::clear_fiscal_period_start_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.fiscal_period_start_date_ != nullptr) _impl_.fiscal_period_start_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void GetAssetFundamentalsResponse_StatisticResponse::clear_fiscal_period_end_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.fiscal_period_end_date_ != nullptr) _impl_.fiscal_period_end_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
GetAssetFundamentalsResponse_StatisticResponse::GetAssetFundamentalsResponse_StatisticResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetAssetFundamentalsResponse_StatisticResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        asset_uid_(arena, from.asset_uid_),
        currency_(arena, from.currency_),
        domicile_indicator_code_(arena, from.domicile_indicator_code_) {}

GetAssetFundamentalsResponse_StatisticResponse::GetAssetFundamentalsResponse_StatisticResponse(
    ::google::protobuf::Arena* arena,
    const GetAssetFundamentalsResponse_StatisticResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GetAssetFundamentalsResponse_StatisticResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.ex_dividend_date_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.ex_dividend_date_)
                        : nullptr;
  _impl_.fiscal_period_start_date_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.fiscal_period_start_date_)
                        : nullptr;
  _impl_.fiscal_period_end_date_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.fiscal_period_end_date_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, market_capitalization_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, market_capitalization_),
           offsetof(Impl_, ev_to_sales_) -
               offsetof(Impl_, market_capitalization_) +
               sizeof(Impl_::ev_to_sales_));

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetAssetFundamentalsResponse_StatisticResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        asset_uid_(arena),
        currency_(arena),
        domicile_indicator_code_(arena) {}

inline void GetAssetFundamentalsResponse_StatisticResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, ex_dividend_date_),
           0,
           offsetof(Impl_, ev_to_sales_) -
               offsetof(Impl_, ex_dividend_date_) +
               sizeof(Impl_::ev_to_sales_));
}
GetAssetFundamentalsResponse_StatisticResponse::~GetAssetFundamentalsResponse_StatisticResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse)
  SharedDtor(*this);
}
inline void GetAssetFundamentalsResponse_StatisticResponse::SharedDtor(MessageLite& self) {
  GetAssetFundamentalsResponse_StatisticResponse& this_ = static_cast<GetAssetFundamentalsResponse_StatisticResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.asset_uid_.Destroy();
  this_._impl_.currency_.Destroy();
  this_._impl_.domicile_indicator_code_.Destroy();
  delete this_._impl_.ex_dividend_date_;
  delete this_._impl_.fiscal_period_start_date_;
  delete this_._impl_.fiscal_period_end_date_;
  this_._impl_.~Impl_();
}

inline void* GetAssetFundamentalsResponse_StatisticResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) GetAssetFundamentalsResponse_StatisticResponse(arena);
}
constexpr auto GetAssetFundamentalsResponse_StatisticResponse::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(GetAssetFundamentalsResponse_StatisticResponse),
                                            alignof(GetAssetFundamentalsResponse_StatisticResponse));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull GetAssetFundamentalsResponse_StatisticResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_GetAssetFundamentalsResponse_StatisticResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &GetAssetFundamentalsResponse_StatisticResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<GetAssetFundamentalsResponse_StatisticResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &GetAssetFundamentalsResponse_StatisticResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<GetAssetFundamentalsResponse_StatisticResponse>(), &GetAssetFundamentalsResponse_StatisticResponse::ByteSizeLong,
            &GetAssetFundamentalsResponse_StatisticResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_._cached_size_),
        false,
    },
    &GetAssetFundamentalsResponse_StatisticResponse::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* GetAssetFundamentalsResponse_StatisticResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<5, 56, 3, 189, 9> GetAssetFundamentalsResponse_StatisticResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_._has_bits_),
    0, // no _extensions_
    57, 248,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    0,  // skipmap
    offsetof(decltype(_table_), field_entries),
    56,  // num_field_entries
    3,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string asset_uid = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.asset_uid_)}},
    // string currency = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.currency_)}},
    // double market_capitalization = 3;
    {::_pbi::TcParser::FastF64S1,
     {25, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.market_capitalization_)}},
    // double high_price_last_52_weeks = 4;
    {::_pbi::TcParser::FastF64S1,
     {33, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.high_price_last_52_weeks_)}},
    // double low_price_last_52_weeks = 5;
    {::_pbi::TcParser::FastF64S1,
     {41, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.low_price_last_52_weeks_)}},
    // double average_daily_volume_last_10_days = 6;
    {::_pbi::TcParser::FastF64S1,
     {49, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.average_daily_volume_last_10_days_)}},
    // double average_daily_volume_last_4_weeks = 7;
    {::_pbi::TcParser::FastF64S1,
     {57, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.average_daily_volume_last_4_weeks_)}},
    // double beta = 8;
    {::_pbi::TcParser::FastF64S1,
     {65, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.beta_)}},
    // double free_float = 9;
    {::_pbi::TcParser::FastF64S1,
     {73, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.free_float_)}},
    // double forward_annual_dividend_yield = 10;
    {::_pbi::TcParser::FastF64S1,
     {81, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.forward_annual_dividend_yield_)}},
    // double shares_outstanding = 11;
    {::_pbi::TcParser::FastF64S1,
     {89, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.shares_outstanding_)}},
    // double revenue_ttm = 12;
    {::_pbi::TcParser::FastF64S1,
     {97, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.revenue_ttm_)}},
    // double ebitda_ttm = 13;
    {::_pbi::TcParser::FastF64S1,
     {105, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.ebitda_ttm_)}},
    // double net_income_ttm = 14;
    {::_pbi::TcParser::FastF64S1,
     {113, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.net_income_ttm_)}},
    // double eps_ttm = 15;
    {::_pbi::TcParser::FastF64S1,
     {121, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.eps_ttm_)}},
    // double diluted_eps_ttm = 16;
    {::_pbi::TcParser::FastF64S2,
     {385, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.diluted_eps_ttm_)}},
    // double free_cash_flow_ttm = 17;
    {::_pbi::TcParser::FastF64S2,
     {393, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.free_cash_flow_ttm_)}},
    // double five_year_annual_revenue_growth_rate = 18;
    {::_pbi::TcParser::FastF64S2,
     {401, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.five_year_annual_revenue_growth_rate_)}},
    // double three_year_annual_revenue_growth_rate = 19;
    {::_pbi::TcParser::FastF64S2,
     {409, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.three_year_annual_revenue_growth_rate_)}},
    // double pe_ratio_ttm = 20;
    {::_pbi::TcParser::FastF64S2,
     {417, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.pe_ratio_ttm_)}},
    // double price_to_sales_ttm = 21;
    {::_pbi::TcParser::FastF64S2,
     {425, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.price_to_sales_ttm_)}},
    // double price_to_book_ttm = 22;
    {::_pbi::TcParser::FastF64S2,
     {433, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.price_to_book_ttm_)}},
    // double price_to_free_cash_flow_ttm = 23;
    {::_pbi::TcParser::FastF64S2,
     {441, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.price_to_free_cash_flow_ttm_)}},
    // double total_enterprise_value_mrq = 24;
    {::_pbi::TcParser::FastF64S2,
     {449, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.total_enterprise_value_mrq_)}},
    // double ev_to_ebitda_mrq = 25;
    {::_pbi::TcParser::FastF64S2,
     {457, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.ev_to_ebitda_mrq_)}},
    // double net_margin_mrq = 26;
    {::_pbi::TcParser::FastF64S2,
     {465, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.net_margin_mrq_)}},
    // double net_interest_margin_mrq = 27;
    {::_pbi::TcParser::FastF64S2,
     {473, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.net_interest_margin_mrq_)}},
    // double roe = 28;
    {::_pbi::TcParser::FastF64S2,
     {481, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.roe_)}},
    // double roa = 29;
    {::_pbi::TcParser::FastF64S2,
     {489, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.roa_)}},
    // double roic = 30;
    {::_pbi::TcParser::FastF64S2,
     {497, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.roic_)}},
    // double total_debt_mrq = 31;
    {::_pbi::TcParser::FastF64S2,
     {505, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.total_debt_mrq_)}},
  }}, {{
    33, 0, 2,
    0, 32, 65032, 48,
    65535, 65535
  }}, {{
    // string asset_uid = 1;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.asset_uid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string currency = 2;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.currency_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // double market_capitalization = 3;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.market_capitalization_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double high_price_last_52_weeks = 4;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.high_price_last_52_weeks_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double low_price_last_52_weeks = 5;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.low_price_last_52_weeks_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double average_daily_volume_last_10_days = 6;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.average_daily_volume_last_10_days_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double average_daily_volume_last_4_weeks = 7;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.average_daily_volume_last_4_weeks_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double beta = 8;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.beta_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double free_float = 9;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.free_float_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double forward_annual_dividend_yield = 10;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.forward_annual_dividend_yield_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double shares_outstanding = 11;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.shares_outstanding_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double revenue_ttm = 12;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.revenue_ttm_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double ebitda_ttm = 13;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.ebitda_ttm_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double net_income_ttm = 14;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.net_income_ttm_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double eps_ttm = 15;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.eps_ttm_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double diluted_eps_ttm = 16;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.diluted_eps_ttm_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double free_cash_flow_ttm = 17;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.free_cash_flow_ttm_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double five_year_annual_revenue_growth_rate = 18;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.five_year_annual_revenue_growth_rate_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double three_year_annual_revenue_growth_rate = 19;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.three_year_annual_revenue_growth_rate_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double pe_ratio_ttm = 20;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.pe_ratio_ttm_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double price_to_sales_ttm = 21;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.price_to_sales_ttm_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double price_to_book_ttm = 22;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.price_to_book_ttm_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double price_to_free_cash_flow_ttm = 23;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.price_to_free_cash_flow_ttm_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double total_enterprise_value_mrq = 24;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.total_enterprise_value_mrq_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double ev_to_ebitda_mrq = 25;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.ev_to_ebitda_mrq_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double net_margin_mrq = 26;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.net_margin_mrq_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double net_interest_margin_mrq = 27;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.net_interest_margin_mrq_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double roe = 28;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.roe_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double roa = 29;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.roa_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double roic = 30;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.roic_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double total_debt_mrq = 31;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.total_debt_mrq_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double total_debt_to_equity_mrq = 32;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.total_debt_to_equity_mrq_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double total_debt_to_ebitda_mrq = 33;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.total_debt_to_ebitda_mrq_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double free_cash_flow_to_price = 34;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.free_cash_flow_to_price_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double net_debt_to_ebitda = 35;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.net_debt_to_ebitda_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double current_ratio_mrq = 36;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.current_ratio_mrq_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double fixed_charge_coverage_ratio_fy = 37;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.fixed_charge_coverage_ratio_fy_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double dividend_yield_daily_ttm = 38;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.dividend_yield_daily_ttm_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double dividend_rate_ttm = 39;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.dividend_rate_ttm_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double dividends_per_share = 40;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.dividends_per_share_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double five_years_average_dividend_yield = 41;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.five_years_average_dividend_yield_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double five_year_annual_dividend_growth_rate = 42;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.five_year_annual_dividend_growth_rate_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double dividend_payout_ratio_fy = 43;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.dividend_payout_ratio_fy_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double buy_back_ttm = 44;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.buy_back_ttm_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double one_year_annual_revenue_growth_rate = 45;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.one_year_annual_revenue_growth_rate_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // string domicile_indicator_code = 46;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.domicile_indicator_code_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // double adr_to_common_share_ratio = 47;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.adr_to_common_share_ratio_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double number_of_employees = 48;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.number_of_employees_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // .google.protobuf.Timestamp ex_dividend_date = 49;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.ex_dividend_date_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp fiscal_period_start_date = 50;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.fiscal_period_start_date_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp fiscal_period_end_date = 51;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.fiscal_period_end_date_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // double revenue_change_five_years = 53;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.revenue_change_five_years_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double eps_change_five_years = 54;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.eps_change_five_years_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double ebitda_change_five_years = 55;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.ebitda_change_five_years_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double total_debt_change_five_years = 56;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.total_debt_change_five_years_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
    // double ev_to_sales = 57;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.ev_to_sales_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kDouble)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\124\11\10\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\27\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0\0"
    "tinkoff.public.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse"
    "asset_uid"
    "currency"
    "domicile_indicator_code"
  }},
};

PROTOBUF_NOINLINE void GetAssetFundamentalsResponse_StatisticResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.asset_uid_.ClearToEmpty();
  _impl_.currency_.ClearToEmpty();
  _impl_.domicile_indicator_code_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.ex_dividend_date_ != nullptr);
      _impl_.ex_dividend_date_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.fiscal_period_start_date_ != nullptr);
      _impl_.fiscal_period_start_date_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.fiscal_period_end_date_ != nullptr);
      _impl_.fiscal_period_end_date_->Clear();
    }
  }
  ::memset(&_impl_.market_capitalization_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.ev_to_sales_) -
      reinterpret_cast<char*>(&_impl_.market_capitalization_)) + sizeof(_impl_.ev_to_sales_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GetAssetFundamentalsResponse_StatisticResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GetAssetFundamentalsResponse_StatisticResponse& this_ = static_cast<const GetAssetFundamentalsResponse_StatisticResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GetAssetFundamentalsResponse_StatisticResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GetAssetFundamentalsResponse_StatisticResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string asset_uid = 1;
          if (!this_._internal_asset_uid().empty()) {
            const std::string& _s = this_._internal_asset_uid();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.asset_uid");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string currency = 2;
          if (!this_._internal_currency().empty()) {
            const std::string& _s = this_._internal_currency();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.currency");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // double market_capitalization = 3;
          if (::absl::bit_cast<::uint64_t>(this_._internal_market_capitalization()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                3, this_._internal_market_capitalization(), target);
          }

          // double high_price_last_52_weeks = 4;
          if (::absl::bit_cast<::uint64_t>(this_._internal_high_price_last_52_weeks()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                4, this_._internal_high_price_last_52_weeks(), target);
          }

          // double low_price_last_52_weeks = 5;
          if (::absl::bit_cast<::uint64_t>(this_._internal_low_price_last_52_weeks()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                5, this_._internal_low_price_last_52_weeks(), target);
          }

          // double average_daily_volume_last_10_days = 6;
          if (::absl::bit_cast<::uint64_t>(this_._internal_average_daily_volume_last_10_days()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                6, this_._internal_average_daily_volume_last_10_days(), target);
          }

          // double average_daily_volume_last_4_weeks = 7;
          if (::absl::bit_cast<::uint64_t>(this_._internal_average_daily_volume_last_4_weeks()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                7, this_._internal_average_daily_volume_last_4_weeks(), target);
          }

          // double beta = 8;
          if (::absl::bit_cast<::uint64_t>(this_._internal_beta()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                8, this_._internal_beta(), target);
          }

          // double free_float = 9;
          if (::absl::bit_cast<::uint64_t>(this_._internal_free_float()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                9, this_._internal_free_float(), target);
          }

          // double forward_annual_dividend_yield = 10;
          if (::absl::bit_cast<::uint64_t>(this_._internal_forward_annual_dividend_yield()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                10, this_._internal_forward_annual_dividend_yield(), target);
          }

          // double shares_outstanding = 11;
          if (::absl::bit_cast<::uint64_t>(this_._internal_shares_outstanding()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                11, this_._internal_shares_outstanding(), target);
          }

          // double revenue_ttm = 12;
          if (::absl::bit_cast<::uint64_t>(this_._internal_revenue_ttm()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                12, this_._internal_revenue_ttm(), target);
          }

          // double ebitda_ttm = 13;
          if (::absl::bit_cast<::uint64_t>(this_._internal_ebitda_ttm()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                13, this_._internal_ebitda_ttm(), target);
          }

          // double net_income_ttm = 14;
          if (::absl::bit_cast<::uint64_t>(this_._internal_net_income_ttm()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                14, this_._internal_net_income_ttm(), target);
          }

          // double eps_ttm = 15;
          if (::absl::bit_cast<::uint64_t>(this_._internal_eps_ttm()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                15, this_._internal_eps_ttm(), target);
          }

          // double diluted_eps_ttm = 16;
          if (::absl::bit_cast<::uint64_t>(this_._internal_diluted_eps_ttm()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                16, this_._internal_diluted_eps_ttm(), target);
          }

          // double free_cash_flow_ttm = 17;
          if (::absl::bit_cast<::uint64_t>(this_._internal_free_cash_flow_ttm()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                17, this_._internal_free_cash_flow_ttm(), target);
          }

          // double five_year_annual_revenue_growth_rate = 18;
          if (::absl::bit_cast<::uint64_t>(this_._internal_five_year_annual_revenue_growth_rate()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                18, this_._internal_five_year_annual_revenue_growth_rate(), target);
          }

          // double three_year_annual_revenue_growth_rate = 19;
          if (::absl::bit_cast<::uint64_t>(this_._internal_three_year_annual_revenue_growth_rate()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                19, this_._internal_three_year_annual_revenue_growth_rate(), target);
          }

          // double pe_ratio_ttm = 20;
          if (::absl::bit_cast<::uint64_t>(this_._internal_pe_ratio_ttm()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                20, this_._internal_pe_ratio_ttm(), target);
          }

          // double price_to_sales_ttm = 21;
          if (::absl::bit_cast<::uint64_t>(this_._internal_price_to_sales_ttm()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                21, this_._internal_price_to_sales_ttm(), target);
          }

          // double price_to_book_ttm = 22;
          if (::absl::bit_cast<::uint64_t>(this_._internal_price_to_book_ttm()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                22, this_._internal_price_to_book_ttm(), target);
          }

          // double price_to_free_cash_flow_ttm = 23;
          if (::absl::bit_cast<::uint64_t>(this_._internal_price_to_free_cash_flow_ttm()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                23, this_._internal_price_to_free_cash_flow_ttm(), target);
          }

          // double total_enterprise_value_mrq = 24;
          if (::absl::bit_cast<::uint64_t>(this_._internal_total_enterprise_value_mrq()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                24, this_._internal_total_enterprise_value_mrq(), target);
          }

          // double ev_to_ebitda_mrq = 25;
          if (::absl::bit_cast<::uint64_t>(this_._internal_ev_to_ebitda_mrq()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                25, this_._internal_ev_to_ebitda_mrq(), target);
          }

          // double net_margin_mrq = 26;
          if (::absl::bit_cast<::uint64_t>(this_._internal_net_margin_mrq()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                26, this_._internal_net_margin_mrq(), target);
          }

          // double net_interest_margin_mrq = 27;
          if (::absl::bit_cast<::uint64_t>(this_._internal_net_interest_margin_mrq()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                27, this_._internal_net_interest_margin_mrq(), target);
          }

          // double roe = 28;
          if (::absl::bit_cast<::uint64_t>(this_._internal_roe()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                28, this_._internal_roe(), target);
          }

          // double roa = 29;
          if (::absl::bit_cast<::uint64_t>(this_._internal_roa()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                29, this_._internal_roa(), target);
          }

          // double roic = 30;
          if (::absl::bit_cast<::uint64_t>(this_._internal_roic()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                30, this_._internal_roic(), target);
          }

          // double total_debt_mrq = 31;
          if (::absl::bit_cast<::uint64_t>(this_._internal_total_debt_mrq()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                31, this_._internal_total_debt_mrq(), target);
          }

          // double total_debt_to_equity_mrq = 32;
          if (::absl::bit_cast<::uint64_t>(this_._internal_total_debt_to_equity_mrq()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                32, this_._internal_total_debt_to_equity_mrq(), target);
          }

          // double total_debt_to_ebitda_mrq = 33;
          if (::absl::bit_cast<::uint64_t>(this_._internal_total_debt_to_ebitda_mrq()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                33, this_._internal_total_debt_to_ebitda_mrq(), target);
          }

          // double free_cash_flow_to_price = 34;
          if (::absl::bit_cast<::uint64_t>(this_._internal_free_cash_flow_to_price()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                34, this_._internal_free_cash_flow_to_price(), target);
          }

          // double net_debt_to_ebitda = 35;
          if (::absl::bit_cast<::uint64_t>(this_._internal_net_debt_to_ebitda()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                35, this_._internal_net_debt_to_ebitda(), target);
          }

          // double current_ratio_mrq = 36;
          if (::absl::bit_cast<::uint64_t>(this_._internal_current_ratio_mrq()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                36, this_._internal_current_ratio_mrq(), target);
          }

          // double fixed_charge_coverage_ratio_fy = 37;
          if (::absl::bit_cast<::uint64_t>(this_._internal_fixed_charge_coverage_ratio_fy()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                37, this_._internal_fixed_charge_coverage_ratio_fy(), target);
          }

          // double dividend_yield_daily_ttm = 38;
          if (::absl::bit_cast<::uint64_t>(this_._internal_dividend_yield_daily_ttm()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                38, this_._internal_dividend_yield_daily_ttm(), target);
          }

          // double dividend_rate_ttm = 39;
          if (::absl::bit_cast<::uint64_t>(this_._internal_dividend_rate_ttm()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                39, this_._internal_dividend_rate_ttm(), target);
          }

          // double dividends_per_share = 40;
          if (::absl::bit_cast<::uint64_t>(this_._internal_dividends_per_share()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                40, this_._internal_dividends_per_share(), target);
          }

          // double five_years_average_dividend_yield = 41;
          if (::absl::bit_cast<::uint64_t>(this_._internal_five_years_average_dividend_yield()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                41, this_._internal_five_years_average_dividend_yield(), target);
          }

          // double five_year_annual_dividend_growth_rate = 42;
          if (::absl::bit_cast<::uint64_t>(this_._internal_five_year_annual_dividend_growth_rate()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                42, this_._internal_five_year_annual_dividend_growth_rate(), target);
          }

          // double dividend_payout_ratio_fy = 43;
          if (::absl::bit_cast<::uint64_t>(this_._internal_dividend_payout_ratio_fy()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                43, this_._internal_dividend_payout_ratio_fy(), target);
          }

          // double buy_back_ttm = 44;
          if (::absl::bit_cast<::uint64_t>(this_._internal_buy_back_ttm()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                44, this_._internal_buy_back_ttm(), target);
          }

          // double one_year_annual_revenue_growth_rate = 45;
          if (::absl::bit_cast<::uint64_t>(this_._internal_one_year_annual_revenue_growth_rate()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                45, this_._internal_one_year_annual_revenue_growth_rate(), target);
          }

          // string domicile_indicator_code = 46;
          if (!this_._internal_domicile_indicator_code().empty()) {
            const std::string& _s = this_._internal_domicile_indicator_code();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse.domicile_indicator_code");
            target = stream->WriteStringMaybeAliased(46, _s, target);
          }

          // double adr_to_common_share_ratio = 47;
          if (::absl::bit_cast<::uint64_t>(this_._internal_adr_to_common_share_ratio()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                47, this_._internal_adr_to_common_share_ratio(), target);
          }

          // double number_of_employees = 48;
          if (::absl::bit_cast<::uint64_t>(this_._internal_number_of_employees()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                48, this_._internal_number_of_employees(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .google.protobuf.Timestamp ex_dividend_date = 49;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                49, *this_._impl_.ex_dividend_date_, this_._impl_.ex_dividend_date_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Timestamp fiscal_period_start_date = 50;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                50, *this_._impl_.fiscal_period_start_date_, this_._impl_.fiscal_period_start_date_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Timestamp fiscal_period_end_date = 51;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                51, *this_._impl_.fiscal_period_end_date_, this_._impl_.fiscal_period_end_date_->GetCachedSize(), target,
                stream);
          }

          // double revenue_change_five_years = 53;
          if (::absl::bit_cast<::uint64_t>(this_._internal_revenue_change_five_years()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                53, this_._internal_revenue_change_five_years(), target);
          }

          // double eps_change_five_years = 54;
          if (::absl::bit_cast<::uint64_t>(this_._internal_eps_change_five_years()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                54, this_._internal_eps_change_five_years(), target);
          }

          // double ebitda_change_five_years = 55;
          if (::absl::bit_cast<::uint64_t>(this_._internal_ebitda_change_five_years()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                55, this_._internal_ebitda_change_five_years(), target);
          }

          // double total_debt_change_five_years = 56;
          if (::absl::bit_cast<::uint64_t>(this_._internal_total_debt_change_five_years()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                56, this_._internal_total_debt_change_five_years(), target);
          }

          // double ev_to_sales = 57;
          if (::absl::bit_cast<::uint64_t>(this_._internal_ev_to_sales()) != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteDoubleToArray(
                57, this_._internal_ev_to_sales(), target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GetAssetFundamentalsResponse_StatisticResponse::ByteSizeLong(const MessageLite& base) {
          const GetAssetFundamentalsResponse_StatisticResponse& this_ = static_cast<const GetAssetFundamentalsResponse_StatisticResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GetAssetFundamentalsResponse_StatisticResponse::ByteSizeLong() const {
          const GetAssetFundamentalsResponse_StatisticResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string asset_uid = 1;
            if (!this_._internal_asset_uid().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_asset_uid());
            }
            // string currency = 2;
            if (!this_._internal_currency().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_currency());
            }
            // string domicile_indicator_code = 46;
            if (!this_._internal_domicile_indicator_code().empty()) {
              total_size += 2 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_domicile_indicator_code());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000007u) {
            // .google.protobuf.Timestamp ex_dividend_date = 49;
            if (cached_has_bits & 0x00000001u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.ex_dividend_date_);
            }
            // .google.protobuf.Timestamp fiscal_period_start_date = 50;
            if (cached_has_bits & 0x00000002u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.fiscal_period_start_date_);
            }
            // .google.protobuf.Timestamp fiscal_period_end_date = 51;
            if (cached_has_bits & 0x00000004u) {
              total_size += 2 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.fiscal_period_end_date_);
            }
          }
           {
            // double market_capitalization = 3;
            if (::absl::bit_cast<::uint64_t>(this_._internal_market_capitalization()) != 0) {
              total_size += 9;
            }
            // double high_price_last_52_weeks = 4;
            if (::absl::bit_cast<::uint64_t>(this_._internal_high_price_last_52_weeks()) != 0) {
              total_size += 9;
            }
            // double low_price_last_52_weeks = 5;
            if (::absl::bit_cast<::uint64_t>(this_._internal_low_price_last_52_weeks()) != 0) {
              total_size += 9;
            }
            // double average_daily_volume_last_10_days = 6;
            if (::absl::bit_cast<::uint64_t>(this_._internal_average_daily_volume_last_10_days()) != 0) {
              total_size += 9;
            }
            // double average_daily_volume_last_4_weeks = 7;
            if (::absl::bit_cast<::uint64_t>(this_._internal_average_daily_volume_last_4_weeks()) != 0) {
              total_size += 9;
            }
            // double beta = 8;
            if (::absl::bit_cast<::uint64_t>(this_._internal_beta()) != 0) {
              total_size += 9;
            }
            // double free_float = 9;
            if (::absl::bit_cast<::uint64_t>(this_._internal_free_float()) != 0) {
              total_size += 9;
            }
            // double forward_annual_dividend_yield = 10;
            if (::absl::bit_cast<::uint64_t>(this_._internal_forward_annual_dividend_yield()) != 0) {
              total_size += 9;
            }
            // double shares_outstanding = 11;
            if (::absl::bit_cast<::uint64_t>(this_._internal_shares_outstanding()) != 0) {
              total_size += 9;
            }
            // double revenue_ttm = 12;
            if (::absl::bit_cast<::uint64_t>(this_._internal_revenue_ttm()) != 0) {
              total_size += 9;
            }
            // double ebitda_ttm = 13;
            if (::absl::bit_cast<::uint64_t>(this_._internal_ebitda_ttm()) != 0) {
              total_size += 9;
            }
            // double net_income_ttm = 14;
            if (::absl::bit_cast<::uint64_t>(this_._internal_net_income_ttm()) != 0) {
              total_size += 9;
            }
            // double eps_ttm = 15;
            if (::absl::bit_cast<::uint64_t>(this_._internal_eps_ttm()) != 0) {
              total_size += 9;
            }
            // double diluted_eps_ttm = 16;
            if (::absl::bit_cast<::uint64_t>(this_._internal_diluted_eps_ttm()) != 0) {
              total_size += 10;
            }
            // double free_cash_flow_ttm = 17;
            if (::absl::bit_cast<::uint64_t>(this_._internal_free_cash_flow_ttm()) != 0) {
              total_size += 10;
            }
            // double five_year_annual_revenue_growth_rate = 18;
            if (::absl::bit_cast<::uint64_t>(this_._internal_five_year_annual_revenue_growth_rate()) != 0) {
              total_size += 10;
            }
            // double three_year_annual_revenue_growth_rate = 19;
            if (::absl::bit_cast<::uint64_t>(this_._internal_three_year_annual_revenue_growth_rate()) != 0) {
              total_size += 10;
            }
            // double pe_ratio_ttm = 20;
            if (::absl::bit_cast<::uint64_t>(this_._internal_pe_ratio_ttm()) != 0) {
              total_size += 10;
            }
            // double price_to_sales_ttm = 21;
            if (::absl::bit_cast<::uint64_t>(this_._internal_price_to_sales_ttm()) != 0) {
              total_size += 10;
            }
            // double price_to_book_ttm = 22;
            if (::absl::bit_cast<::uint64_t>(this_._internal_price_to_book_ttm()) != 0) {
              total_size += 10;
            }
            // double price_to_free_cash_flow_ttm = 23;
            if (::absl::bit_cast<::uint64_t>(this_._internal_price_to_free_cash_flow_ttm()) != 0) {
              total_size += 10;
            }
            // double total_enterprise_value_mrq = 24;
            if (::absl::bit_cast<::uint64_t>(this_._internal_total_enterprise_value_mrq()) != 0) {
              total_size += 10;
            }
            // double ev_to_ebitda_mrq = 25;
            if (::absl::bit_cast<::uint64_t>(this_._internal_ev_to_ebitda_mrq()) != 0) {
              total_size += 10;
            }
            // double net_margin_mrq = 26;
            if (::absl::bit_cast<::uint64_t>(this_._internal_net_margin_mrq()) != 0) {
              total_size += 10;
            }
            // double net_interest_margin_mrq = 27;
            if (::absl::bit_cast<::uint64_t>(this_._internal_net_interest_margin_mrq()) != 0) {
              total_size += 10;
            }
            // double roe = 28;
            if (::absl::bit_cast<::uint64_t>(this_._internal_roe()) != 0) {
              total_size += 10;
            }
            // double roa = 29;
            if (::absl::bit_cast<::uint64_t>(this_._internal_roa()) != 0) {
              total_size += 10;
            }
            // double roic = 30;
            if (::absl::bit_cast<::uint64_t>(this_._internal_roic()) != 0) {
              total_size += 10;
            }
            // double total_debt_mrq = 31;
            if (::absl::bit_cast<::uint64_t>(this_._internal_total_debt_mrq()) != 0) {
              total_size += 10;
            }
            // double total_debt_to_equity_mrq = 32;
            if (::absl::bit_cast<::uint64_t>(this_._internal_total_debt_to_equity_mrq()) != 0) {
              total_size += 10;
            }
            // double total_debt_to_ebitda_mrq = 33;
            if (::absl::bit_cast<::uint64_t>(this_._internal_total_debt_to_ebitda_mrq()) != 0) {
              total_size += 10;
            }
            // double free_cash_flow_to_price = 34;
            if (::absl::bit_cast<::uint64_t>(this_._internal_free_cash_flow_to_price()) != 0) {
              total_size += 10;
            }
            // double net_debt_to_ebitda = 35;
            if (::absl::bit_cast<::uint64_t>(this_._internal_net_debt_to_ebitda()) != 0) {
              total_size += 10;
            }
            // double current_ratio_mrq = 36;
            if (::absl::bit_cast<::uint64_t>(this_._internal_current_ratio_mrq()) != 0) {
              total_size += 10;
            }
            // double fixed_charge_coverage_ratio_fy = 37;
            if (::absl::bit_cast<::uint64_t>(this_._internal_fixed_charge_coverage_ratio_fy()) != 0) {
              total_size += 10;
            }
            // double dividend_yield_daily_ttm = 38;
            if (::absl::bit_cast<::uint64_t>(this_._internal_dividend_yield_daily_ttm()) != 0) {
              total_size += 10;
            }
            // double dividend_rate_ttm = 39;
            if (::absl::bit_cast<::uint64_t>(this_._internal_dividend_rate_ttm()) != 0) {
              total_size += 10;
            }
            // double dividends_per_share = 40;
            if (::absl::bit_cast<::uint64_t>(this_._internal_dividends_per_share()) != 0) {
              total_size += 10;
            }
            // double five_years_average_dividend_yield = 41;
            if (::absl::bit_cast<::uint64_t>(this_._internal_five_years_average_dividend_yield()) != 0) {
              total_size += 10;
            }
            // double five_year_annual_dividend_growth_rate = 42;
            if (::absl::bit_cast<::uint64_t>(this_._internal_five_year_annual_dividend_growth_rate()) != 0) {
              total_size += 10;
            }
            // double dividend_payout_ratio_fy = 43;
            if (::absl::bit_cast<::uint64_t>(this_._internal_dividend_payout_ratio_fy()) != 0) {
              total_size += 10;
            }
            // double buy_back_ttm = 44;
            if (::absl::bit_cast<::uint64_t>(this_._internal_buy_back_ttm()) != 0) {
              total_size += 10;
            }
            // double one_year_annual_revenue_growth_rate = 45;
            if (::absl::bit_cast<::uint64_t>(this_._internal_one_year_annual_revenue_growth_rate()) != 0) {
              total_size += 10;
            }
            // double adr_to_common_share_ratio = 47;
            if (::absl::bit_cast<::uint64_t>(this_._internal_adr_to_common_share_ratio()) != 0) {
              total_size += 10;
            }
            // double number_of_employees = 48;
            if (::absl::bit_cast<::uint64_t>(this_._internal_number_of_employees()) != 0) {
              total_size += 10;
            }
            // double revenue_change_five_years = 53;
            if (::absl::bit_cast<::uint64_t>(this_._internal_revenue_change_five_years()) != 0) {
              total_size += 10;
            }
            // double eps_change_five_years = 54;
            if (::absl::bit_cast<::uint64_t>(this_._internal_eps_change_five_years()) != 0) {
              total_size += 10;
            }
            // double ebitda_change_five_years = 55;
            if (::absl::bit_cast<::uint64_t>(this_._internal_ebitda_change_five_years()) != 0) {
              total_size += 10;
            }
            // double total_debt_change_five_years = 56;
            if (::absl::bit_cast<::uint64_t>(this_._internal_total_debt_change_five_years()) != 0) {
              total_size += 10;
            }
            // double ev_to_sales = 57;
            if (::absl::bit_cast<::uint64_t>(this_._internal_ev_to_sales()) != 0) {
              total_size += 10;
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GetAssetFundamentalsResponse_StatisticResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GetAssetFundamentalsResponse_StatisticResponse*>(&to_msg);
  auto& from = static_cast<const GetAssetFundamentalsResponse_StatisticResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_asset_uid().empty()) {
    _this->_internal_set_asset_uid(from._internal_asset_uid());
  }
  if (!from._internal_currency().empty()) {
    _this->_internal_set_currency(from._internal_currency());
  }
  if (!from._internal_domicile_indicator_code().empty()) {
    _this->_internal_set_domicile_indicator_code(from._internal_domicile_indicator_code());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000007u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.ex_dividend_date_ != nullptr);
      if (_this->_impl_.ex_dividend_date_ == nullptr) {
        _this->_impl_.ex_dividend_date_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.ex_dividend_date_);
      } else {
        _this->_impl_.ex_dividend_date_->MergeFrom(*from._impl_.ex_dividend_date_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.fiscal_period_start_date_ != nullptr);
      if (_this->_impl_.fiscal_period_start_date_ == nullptr) {
        _this->_impl_.fiscal_period_start_date_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.fiscal_period_start_date_);
      } else {
        _this->_impl_.fiscal_period_start_date_->MergeFrom(*from._impl_.fiscal_period_start_date_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.fiscal_period_end_date_ != nullptr);
      if (_this->_impl_.fiscal_period_end_date_ == nullptr) {
        _this->_impl_.fiscal_period_end_date_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.fiscal_period_end_date_);
      } else {
        _this->_impl_.fiscal_period_end_date_->MergeFrom(*from._impl_.fiscal_period_end_date_);
      }
    }
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_market_capitalization()) != 0) {
    _this->_impl_.market_capitalization_ = from._impl_.market_capitalization_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_high_price_last_52_weeks()) != 0) {
    _this->_impl_.high_price_last_52_weeks_ = from._impl_.high_price_last_52_weeks_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_low_price_last_52_weeks()) != 0) {
    _this->_impl_.low_price_last_52_weeks_ = from._impl_.low_price_last_52_weeks_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_average_daily_volume_last_10_days()) != 0) {
    _this->_impl_.average_daily_volume_last_10_days_ = from._impl_.average_daily_volume_last_10_days_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_average_daily_volume_last_4_weeks()) != 0) {
    _this->_impl_.average_daily_volume_last_4_weeks_ = from._impl_.average_daily_volume_last_4_weeks_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_beta()) != 0) {
    _this->_impl_.beta_ = from._impl_.beta_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_free_float()) != 0) {
    _this->_impl_.free_float_ = from._impl_.free_float_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_forward_annual_dividend_yield()) != 0) {
    _this->_impl_.forward_annual_dividend_yield_ = from._impl_.forward_annual_dividend_yield_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_shares_outstanding()) != 0) {
    _this->_impl_.shares_outstanding_ = from._impl_.shares_outstanding_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_revenue_ttm()) != 0) {
    _this->_impl_.revenue_ttm_ = from._impl_.revenue_ttm_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_ebitda_ttm()) != 0) {
    _this->_impl_.ebitda_ttm_ = from._impl_.ebitda_ttm_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_net_income_ttm()) != 0) {
    _this->_impl_.net_income_ttm_ = from._impl_.net_income_ttm_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_eps_ttm()) != 0) {
    _this->_impl_.eps_ttm_ = from._impl_.eps_ttm_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_diluted_eps_ttm()) != 0) {
    _this->_impl_.diluted_eps_ttm_ = from._impl_.diluted_eps_ttm_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_free_cash_flow_ttm()) != 0) {
    _this->_impl_.free_cash_flow_ttm_ = from._impl_.free_cash_flow_ttm_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_five_year_annual_revenue_growth_rate()) != 0) {
    _this->_impl_.five_year_annual_revenue_growth_rate_ = from._impl_.five_year_annual_revenue_growth_rate_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_three_year_annual_revenue_growth_rate()) != 0) {
    _this->_impl_.three_year_annual_revenue_growth_rate_ = from._impl_.three_year_annual_revenue_growth_rate_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_pe_ratio_ttm()) != 0) {
    _this->_impl_.pe_ratio_ttm_ = from._impl_.pe_ratio_ttm_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_price_to_sales_ttm()) != 0) {
    _this->_impl_.price_to_sales_ttm_ = from._impl_.price_to_sales_ttm_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_price_to_book_ttm()) != 0) {
    _this->_impl_.price_to_book_ttm_ = from._impl_.price_to_book_ttm_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_price_to_free_cash_flow_ttm()) != 0) {
    _this->_impl_.price_to_free_cash_flow_ttm_ = from._impl_.price_to_free_cash_flow_ttm_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_total_enterprise_value_mrq()) != 0) {
    _this->_impl_.total_enterprise_value_mrq_ = from._impl_.total_enterprise_value_mrq_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_ev_to_ebitda_mrq()) != 0) {
    _this->_impl_.ev_to_ebitda_mrq_ = from._impl_.ev_to_ebitda_mrq_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_net_margin_mrq()) != 0) {
    _this->_impl_.net_margin_mrq_ = from._impl_.net_margin_mrq_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_net_interest_margin_mrq()) != 0) {
    _this->_impl_.net_interest_margin_mrq_ = from._impl_.net_interest_margin_mrq_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_roe()) != 0) {
    _this->_impl_.roe_ = from._impl_.roe_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_roa()) != 0) {
    _this->_impl_.roa_ = from._impl_.roa_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_roic()) != 0) {
    _this->_impl_.roic_ = from._impl_.roic_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_total_debt_mrq()) != 0) {
    _this->_impl_.total_debt_mrq_ = from._impl_.total_debt_mrq_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_total_debt_to_equity_mrq()) != 0) {
    _this->_impl_.total_debt_to_equity_mrq_ = from._impl_.total_debt_to_equity_mrq_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_total_debt_to_ebitda_mrq()) != 0) {
    _this->_impl_.total_debt_to_ebitda_mrq_ = from._impl_.total_debt_to_ebitda_mrq_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_free_cash_flow_to_price()) != 0) {
    _this->_impl_.free_cash_flow_to_price_ = from._impl_.free_cash_flow_to_price_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_net_debt_to_ebitda()) != 0) {
    _this->_impl_.net_debt_to_ebitda_ = from._impl_.net_debt_to_ebitda_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_current_ratio_mrq()) != 0) {
    _this->_impl_.current_ratio_mrq_ = from._impl_.current_ratio_mrq_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_fixed_charge_coverage_ratio_fy()) != 0) {
    _this->_impl_.fixed_charge_coverage_ratio_fy_ = from._impl_.fixed_charge_coverage_ratio_fy_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_dividend_yield_daily_ttm()) != 0) {
    _this->_impl_.dividend_yield_daily_ttm_ = from._impl_.dividend_yield_daily_ttm_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_dividend_rate_ttm()) != 0) {
    _this->_impl_.dividend_rate_ttm_ = from._impl_.dividend_rate_ttm_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_dividends_per_share()) != 0) {
    _this->_impl_.dividends_per_share_ = from._impl_.dividends_per_share_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_five_years_average_dividend_yield()) != 0) {
    _this->_impl_.five_years_average_dividend_yield_ = from._impl_.five_years_average_dividend_yield_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_five_year_annual_dividend_growth_rate()) != 0) {
    _this->_impl_.five_year_annual_dividend_growth_rate_ = from._impl_.five_year_annual_dividend_growth_rate_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_dividend_payout_ratio_fy()) != 0) {
    _this->_impl_.dividend_payout_ratio_fy_ = from._impl_.dividend_payout_ratio_fy_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_buy_back_ttm()) != 0) {
    _this->_impl_.buy_back_ttm_ = from._impl_.buy_back_ttm_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_one_year_annual_revenue_growth_rate()) != 0) {
    _this->_impl_.one_year_annual_revenue_growth_rate_ = from._impl_.one_year_annual_revenue_growth_rate_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_adr_to_common_share_ratio()) != 0) {
    _this->_impl_.adr_to_common_share_ratio_ = from._impl_.adr_to_common_share_ratio_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_number_of_employees()) != 0) {
    _this->_impl_.number_of_employees_ = from._impl_.number_of_employees_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_revenue_change_five_years()) != 0) {
    _this->_impl_.revenue_change_five_years_ = from._impl_.revenue_change_five_years_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_eps_change_five_years()) != 0) {
    _this->_impl_.eps_change_five_years_ = from._impl_.eps_change_five_years_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_ebitda_change_five_years()) != 0) {
    _this->_impl_.ebitda_change_five_years_ = from._impl_.ebitda_change_five_years_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_total_debt_change_five_years()) != 0) {
    _this->_impl_.total_debt_change_five_years_ = from._impl_.total_debt_change_five_years_;
  }
  if (::absl::bit_cast<::uint64_t>(from._internal_ev_to_sales()) != 0) {
    _this->_impl_.ev_to_sales_ = from._impl_.ev_to_sales_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetAssetFundamentalsResponse_StatisticResponse::CopyFrom(const GetAssetFundamentalsResponse_StatisticResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GetAssetFundamentalsResponse_StatisticResponse::InternalSwap(GetAssetFundamentalsResponse_StatisticResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.asset_uid_, &other->_impl_.asset_uid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.currency_, &other->_impl_.currency_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.domicile_indicator_code_, &other->_impl_.domicile_indicator_code_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.ev_to_sales_)
      + sizeof(GetAssetFundamentalsResponse_StatisticResponse::_impl_.ev_to_sales_)
      - PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse_StatisticResponse, _impl_.ex_dividend_date_)>(
          reinterpret_cast<char*>(&_impl_.ex_dividend_date_),
          reinterpret_cast<char*>(&other->_impl_.ex_dividend_date_));
}

::google::protobuf::Metadata GetAssetFundamentalsResponse_StatisticResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GetAssetFundamentalsResponse::_Internal {
 public:
};

GetAssetFundamentalsResponse::GetAssetFundamentalsResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.GetAssetFundamentalsResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetAssetFundamentalsResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse& from_msg)
      : fundamentals_{visibility, arena, from.fundamentals_},
        _cached_size_{0} {}

GetAssetFundamentalsResponse::GetAssetFundamentalsResponse(
    ::google::protobuf::Arena* arena,
    const GetAssetFundamentalsResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GetAssetFundamentalsResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.GetAssetFundamentalsResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetAssetFundamentalsResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : fundamentals_{visibility, arena},
        _cached_size_{0} {}

inline void GetAssetFundamentalsResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
GetAssetFundamentalsResponse::~GetAssetFundamentalsResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.GetAssetFundamentalsResponse)
  SharedDtor(*this);
}
inline void GetAssetFundamentalsResponse::SharedDtor(MessageLite& self) {
  GetAssetFundamentalsResponse& this_ = static_cast<GetAssetFundamentalsResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* GetAssetFundamentalsResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) GetAssetFundamentalsResponse(arena);
}
constexpr auto GetAssetFundamentalsResponse::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse, _impl_.fundamentals_) +
          decltype(GetAssetFundamentalsResponse::_impl_.fundamentals_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(GetAssetFundamentalsResponse), alignof(GetAssetFundamentalsResponse), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&GetAssetFundamentalsResponse::PlacementNew_,
                                 sizeof(GetAssetFundamentalsResponse),
                                 alignof(GetAssetFundamentalsResponse));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull GetAssetFundamentalsResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_GetAssetFundamentalsResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &GetAssetFundamentalsResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<GetAssetFundamentalsResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &GetAssetFundamentalsResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<GetAssetFundamentalsResponse>(), &GetAssetFundamentalsResponse::ByteSizeLong,
            &GetAssetFundamentalsResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse, _impl_._cached_size_),
        false,
    },
    &GetAssetFundamentalsResponse::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* GetAssetFundamentalsResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> GetAssetFundamentalsResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .tinkoff.public.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse fundamentals = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse, _impl_.fundamentals_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .tinkoff.public.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse fundamentals = 1;
    {PROTOBUF_FIELD_OFFSET(GetAssetFundamentalsResponse, _impl_.fundamentals_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::GetAssetFundamentalsResponse_StatisticResponse>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void GetAssetFundamentalsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.GetAssetFundamentalsResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.fundamentals_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GetAssetFundamentalsResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GetAssetFundamentalsResponse& this_ = static_cast<const GetAssetFundamentalsResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GetAssetFundamentalsResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GetAssetFundamentalsResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.GetAssetFundamentalsResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .tinkoff.public.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse fundamentals = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_fundamentals_size());
               i < n; i++) {
            const auto& repfield = this_._internal_fundamentals().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.GetAssetFundamentalsResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GetAssetFundamentalsResponse::ByteSizeLong(const MessageLite& base) {
          const GetAssetFundamentalsResponse& this_ = static_cast<const GetAssetFundamentalsResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GetAssetFundamentalsResponse::ByteSizeLong() const {
          const GetAssetFundamentalsResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.GetAssetFundamentalsResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .tinkoff.public.invest.api.contract.v1.GetAssetFundamentalsResponse.StatisticResponse fundamentals = 1;
            {
              total_size += 1UL * this_._internal_fundamentals_size();
              for (const auto& msg : this_._internal_fundamentals()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GetAssetFundamentalsResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GetAssetFundamentalsResponse*>(&to_msg);
  auto& from = static_cast<const GetAssetFundamentalsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.GetAssetFundamentalsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_fundamentals()->MergeFrom(
      from._internal_fundamentals());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetAssetFundamentalsResponse::CopyFrom(const GetAssetFundamentalsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.GetAssetFundamentalsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GetAssetFundamentalsResponse::InternalSwap(GetAssetFundamentalsResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.fundamentals_.InternalSwap(&other->_impl_.fundamentals_);
}

::google::protobuf::Metadata GetAssetFundamentalsResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GetAssetReportsRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GetAssetReportsRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GetAssetReportsRequest, _impl_._has_bits_);
};

void GetAssetReportsRequest::clear_from() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.from_ != nullptr) _impl_.from_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GetAssetReportsRequest::clear_to() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.to_ != nullptr) _impl_.to_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
GetAssetReportsRequest::GetAssetReportsRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.GetAssetReportsRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetAssetReportsRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::GetAssetReportsRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        instrument_id_(arena, from.instrument_id_) {}

GetAssetReportsRequest::GetAssetReportsRequest(
    ::google::protobuf::Arena* arena,
    const GetAssetReportsRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GetAssetReportsRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.from_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.from_)
                        : nullptr;
  _impl_.to_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.to_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.GetAssetReportsRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetAssetReportsRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        instrument_id_(arena) {}

inline void GetAssetReportsRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, from_),
           0,
           offsetof(Impl_, to_) -
               offsetof(Impl_, from_) +
               sizeof(Impl_::to_));
}
GetAssetReportsRequest::~GetAssetReportsRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.GetAssetReportsRequest)
  SharedDtor(*this);
}
inline void GetAssetReportsRequest::SharedDtor(MessageLite& self) {
  GetAssetReportsRequest& this_ = static_cast<GetAssetReportsRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.instrument_id_.Destroy();
  delete this_._impl_.from_;
  delete this_._impl_.to_;
  this_._impl_.~Impl_();
}

inline void* GetAssetReportsRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) GetAssetReportsRequest(arena);
}
constexpr auto GetAssetReportsRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(GetAssetReportsRequest),
                                            alignof(GetAssetReportsRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull GetAssetReportsRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_GetAssetReportsRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &GetAssetReportsRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<GetAssetReportsRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &GetAssetReportsRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<GetAssetReportsRequest>(), &GetAssetReportsRequest::ByteSizeLong,
            &GetAssetReportsRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(GetAssetReportsRequest, _impl_._cached_size_),
        false,
    },
    &GetAssetReportsRequest::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* GetAssetReportsRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<2, 3, 2, 82, 2> GetAssetReportsRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetAssetReportsRequest, _impl_._has_bits_),
    0, // no _extensions_
    3, 24,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967288,  // skipmap
    offsetof(decltype(_table_), field_entries),
    3,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::GetAssetReportsRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string instrument_id = 1 [(.google.api.field_behavior) = REQUIRED];
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetReportsRequest, _impl_.instrument_id_)}},
    // optional .google.protobuf.Timestamp from = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(GetAssetReportsRequest, _impl_.from_)}},
    // optional .google.protobuf.Timestamp to = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 1, 1, PROTOBUF_FIELD_OFFSET(GetAssetReportsRequest, _impl_.to_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string instrument_id = 1 [(.google.api.field_behavior) = REQUIRED];
    {PROTOBUF_FIELD_OFFSET(GetAssetReportsRequest, _impl_.instrument_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // optional .google.protobuf.Timestamp from = 2;
    {PROTOBUF_FIELD_OFFSET(GetAssetReportsRequest, _impl_.from_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // optional .google.protobuf.Timestamp to = 3;
    {PROTOBUF_FIELD_OFFSET(GetAssetReportsRequest, _impl_.to_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\74\15\0\0\0\0\0\0"
    "tinkoff.public.invest.api.contract.v1.GetAssetReportsRequest"
    "instrument_id"
  }},
};

PROTOBUF_NOINLINE void GetAssetReportsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.GetAssetReportsRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instrument_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.from_ != nullptr);
      _impl_.from_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.to_ != nullptr);
      _impl_.to_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GetAssetReportsRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GetAssetReportsRequest& this_ = static_cast<const GetAssetReportsRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GetAssetReportsRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GetAssetReportsRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.GetAssetReportsRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string instrument_id = 1 [(.google.api.field_behavior) = REQUIRED];
          if (!this_._internal_instrument_id().empty()) {
            const std::string& _s = this_._internal_instrument_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.GetAssetReportsRequest.instrument_id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // optional .google.protobuf.Timestamp from = 2;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.from_, this_._impl_.from_->GetCachedSize(), target,
                stream);
          }

          // optional .google.protobuf.Timestamp to = 3;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.to_, this_._impl_.to_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.GetAssetReportsRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GetAssetReportsRequest::ByteSizeLong(const MessageLite& base) {
          const GetAssetReportsRequest& this_ = static_cast<const GetAssetReportsRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GetAssetReportsRequest::ByteSizeLong() const {
          const GetAssetReportsRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.GetAssetReportsRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string instrument_id = 1 [(.google.api.field_behavior) = REQUIRED];
            if (!this_._internal_instrument_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_instrument_id());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // optional .google.protobuf.Timestamp from = 2;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.from_);
            }
            // optional .google.protobuf.Timestamp to = 3;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.to_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GetAssetReportsRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GetAssetReportsRequest*>(&to_msg);
  auto& from = static_cast<const GetAssetReportsRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.GetAssetReportsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_instrument_id().empty()) {
    _this->_internal_set_instrument_id(from._internal_instrument_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.from_ != nullptr);
      if (_this->_impl_.from_ == nullptr) {
        _this->_impl_.from_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.from_);
      } else {
        _this->_impl_.from_->MergeFrom(*from._impl_.from_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.to_ != nullptr);
      if (_this->_impl_.to_ == nullptr) {
        _this->_impl_.to_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.to_);
      } else {
        _this->_impl_.to_->MergeFrom(*from._impl_.to_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetAssetReportsRequest::CopyFrom(const GetAssetReportsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.GetAssetReportsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GetAssetReportsRequest::InternalSwap(GetAssetReportsRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.instrument_id_, &other->_impl_.instrument_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetAssetReportsRequest, _impl_.to_)
      + sizeof(GetAssetReportsRequest::_impl_.to_)
      - PROTOBUF_FIELD_OFFSET(GetAssetReportsRequest, _impl_.from_)>(
          reinterpret_cast<char*>(&_impl_.from_),
          reinterpret_cast<char*>(&other->_impl_.from_));
}

::google::protobuf::Metadata GetAssetReportsRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GetAssetReportsResponse_GetAssetReportsEvent::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GetAssetReportsResponse_GetAssetReportsEvent>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GetAssetReportsResponse_GetAssetReportsEvent, _impl_._has_bits_);
};

void GetAssetReportsResponse_GetAssetReportsEvent::clear_report_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.report_date_ != nullptr) _impl_.report_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GetAssetReportsResponse_GetAssetReportsEvent::clear_created_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.created_at_ != nullptr) _impl_.created_at_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
GetAssetReportsResponse_GetAssetReportsEvent::GetAssetReportsResponse_GetAssetReportsEvent(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.GetAssetReportsResponse.GetAssetReportsEvent)
}
inline PROTOBUF_NDEBUG_INLINE GetAssetReportsResponse_GetAssetReportsEvent::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse_GetAssetReportsEvent& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        instrument_id_(arena, from.instrument_id_) {}

GetAssetReportsResponse_GetAssetReportsEvent::GetAssetReportsResponse_GetAssetReportsEvent(
    ::google::protobuf::Arena* arena,
    const GetAssetReportsResponse_GetAssetReportsEvent& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GetAssetReportsResponse_GetAssetReportsEvent* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.report_date_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.report_date_)
                        : nullptr;
  _impl_.created_at_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.created_at_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, period_year_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, period_year_),
           offsetof(Impl_, period_type_) -
               offsetof(Impl_, period_year_) +
               sizeof(Impl_::period_type_));

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.GetAssetReportsResponse.GetAssetReportsEvent)
}
inline PROTOBUF_NDEBUG_INLINE GetAssetReportsResponse_GetAssetReportsEvent::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        instrument_id_(arena) {}

inline void GetAssetReportsResponse_GetAssetReportsEvent::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, report_date_),
           0,
           offsetof(Impl_, period_type_) -
               offsetof(Impl_, report_date_) +
               sizeof(Impl_::period_type_));
}
GetAssetReportsResponse_GetAssetReportsEvent::~GetAssetReportsResponse_GetAssetReportsEvent() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.GetAssetReportsResponse.GetAssetReportsEvent)
  SharedDtor(*this);
}
inline void GetAssetReportsResponse_GetAssetReportsEvent::SharedDtor(MessageLite& self) {
  GetAssetReportsResponse_GetAssetReportsEvent& this_ = static_cast<GetAssetReportsResponse_GetAssetReportsEvent&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.instrument_id_.Destroy();
  delete this_._impl_.report_date_;
  delete this_._impl_.created_at_;
  this_._impl_.~Impl_();
}

inline void* GetAssetReportsResponse_GetAssetReportsEvent::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) GetAssetReportsResponse_GetAssetReportsEvent(arena);
}
constexpr auto GetAssetReportsResponse_GetAssetReportsEvent::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(GetAssetReportsResponse_GetAssetReportsEvent),
                                            alignof(GetAssetReportsResponse_GetAssetReportsEvent));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull GetAssetReportsResponse_GetAssetReportsEvent::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_GetAssetReportsResponse_GetAssetReportsEvent_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &GetAssetReportsResponse_GetAssetReportsEvent::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<GetAssetReportsResponse_GetAssetReportsEvent>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &GetAssetReportsResponse_GetAssetReportsEvent::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<GetAssetReportsResponse_GetAssetReportsEvent>(), &GetAssetReportsResponse_GetAssetReportsEvent::ByteSizeLong,
            &GetAssetReportsResponse_GetAssetReportsEvent::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(GetAssetReportsResponse_GetAssetReportsEvent, _impl_._cached_size_),
        false,
    },
    &GetAssetReportsResponse_GetAssetReportsEvent::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* GetAssetReportsResponse_GetAssetReportsEvent::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<3, 6, 2, 104, 2> GetAssetReportsResponse_GetAssetReportsEvent::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetAssetReportsResponse_GetAssetReportsEvent, _impl_._has_bits_),
    0, // no _extensions_
    6, 56,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967232,  // skipmap
    offsetof(decltype(_table_), field_entries),
    6,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse_GetAssetReportsEvent>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string instrument_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetReportsResponse_GetAssetReportsEvent, _impl_.instrument_id_)}},
    // .google.protobuf.Timestamp report_date = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(GetAssetReportsResponse_GetAssetReportsEvent, _impl_.report_date_)}},
    // int32 period_year = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetAssetReportsResponse_GetAssetReportsEvent, _impl_.period_year_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetReportsResponse_GetAssetReportsEvent, _impl_.period_year_)}},
    // int32 period_num = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetAssetReportsResponse_GetAssetReportsEvent, _impl_.period_num_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetReportsResponse_GetAssetReportsEvent, _impl_.period_num_)}},
    // .tinkoff.public.invest.api.contract.v1.GetAssetReportsResponse.AssetReportPeriodType period_type = 5;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetAssetReportsResponse_GetAssetReportsEvent, _impl_.period_type_), 63>(),
     {40, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetReportsResponse_GetAssetReportsEvent, _impl_.period_type_)}},
    // .google.protobuf.Timestamp created_at = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 1, 1, PROTOBUF_FIELD_OFFSET(GetAssetReportsResponse_GetAssetReportsEvent, _impl_.created_at_)}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string instrument_id = 1;
    {PROTOBUF_FIELD_OFFSET(GetAssetReportsResponse_GetAssetReportsEvent, _impl_.instrument_id_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Timestamp report_date = 2;
    {PROTOBUF_FIELD_OFFSET(GetAssetReportsResponse_GetAssetReportsEvent, _impl_.report_date_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 period_year = 3;
    {PROTOBUF_FIELD_OFFSET(GetAssetReportsResponse_GetAssetReportsEvent, _impl_.period_year_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 period_num = 4;
    {PROTOBUF_FIELD_OFFSET(GetAssetReportsResponse_GetAssetReportsEvent, _impl_.period_num_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // .tinkoff.public.invest.api.contract.v1.GetAssetReportsResponse.AssetReportPeriodType period_type = 5;
    {PROTOBUF_FIELD_OFFSET(GetAssetReportsResponse_GetAssetReportsEvent, _impl_.period_type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .google.protobuf.Timestamp created_at = 6;
    {PROTOBUF_FIELD_OFFSET(GetAssetReportsResponse_GetAssetReportsEvent, _impl_.created_at_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\122\15\0\0\0\0\0\0"
    "tinkoff.public.invest.api.contract.v1.GetAssetReportsResponse.GetAssetReportsEvent"
    "instrument_id"
  }},
};

PROTOBUF_NOINLINE void GetAssetReportsResponse_GetAssetReportsEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.GetAssetReportsResponse.GetAssetReportsEvent)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instrument_id_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.report_date_ != nullptr);
      _impl_.report_date_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.created_at_ != nullptr);
      _impl_.created_at_->Clear();
    }
  }
  ::memset(&_impl_.period_year_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.period_type_) -
      reinterpret_cast<char*>(&_impl_.period_year_)) + sizeof(_impl_.period_type_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GetAssetReportsResponse_GetAssetReportsEvent::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GetAssetReportsResponse_GetAssetReportsEvent& this_ = static_cast<const GetAssetReportsResponse_GetAssetReportsEvent&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GetAssetReportsResponse_GetAssetReportsEvent::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GetAssetReportsResponse_GetAssetReportsEvent& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.GetAssetReportsResponse.GetAssetReportsEvent)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string instrument_id = 1;
          if (!this_._internal_instrument_id().empty()) {
            const std::string& _s = this_._internal_instrument_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.GetAssetReportsResponse.GetAssetReportsEvent.instrument_id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .google.protobuf.Timestamp report_date = 2;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.report_date_, this_._impl_.report_date_->GetCachedSize(), target,
                stream);
          }

          // int32 period_year = 3;
          if (this_._internal_period_year() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<3>(
                    stream, this_._internal_period_year(), target);
          }

          // int32 period_num = 4;
          if (this_._internal_period_num() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<4>(
                    stream, this_._internal_period_num(), target);
          }

          // .tinkoff.public.invest.api.contract.v1.GetAssetReportsResponse.AssetReportPeriodType period_type = 5;
          if (this_._internal_period_type() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                5, this_._internal_period_type(), target);
          }

          // .google.protobuf.Timestamp created_at = 6;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                6, *this_._impl_.created_at_, this_._impl_.created_at_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.GetAssetReportsResponse.GetAssetReportsEvent)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GetAssetReportsResponse_GetAssetReportsEvent::ByteSizeLong(const MessageLite& base) {
          const GetAssetReportsResponse_GetAssetReportsEvent& this_ = static_cast<const GetAssetReportsResponse_GetAssetReportsEvent&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GetAssetReportsResponse_GetAssetReportsEvent::ByteSizeLong() const {
          const GetAssetReportsResponse_GetAssetReportsEvent& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.GetAssetReportsResponse.GetAssetReportsEvent)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string instrument_id = 1;
            if (!this_._internal_instrument_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_instrument_id());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .google.protobuf.Timestamp report_date = 2;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.report_date_);
            }
            // .google.protobuf.Timestamp created_at = 6;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.created_at_);
            }
          }
           {
            // int32 period_year = 3;
            if (this_._internal_period_year() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_period_year());
            }
            // int32 period_num = 4;
            if (this_._internal_period_num() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_period_num());
            }
            // .tinkoff.public.invest.api.contract.v1.GetAssetReportsResponse.AssetReportPeriodType period_type = 5;
            if (this_._internal_period_type() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_period_type());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GetAssetReportsResponse_GetAssetReportsEvent::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GetAssetReportsResponse_GetAssetReportsEvent*>(&to_msg);
  auto& from = static_cast<const GetAssetReportsResponse_GetAssetReportsEvent&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.GetAssetReportsResponse.GetAssetReportsEvent)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_instrument_id().empty()) {
    _this->_internal_set_instrument_id(from._internal_instrument_id());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.report_date_ != nullptr);
      if (_this->_impl_.report_date_ == nullptr) {
        _this->_impl_.report_date_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.report_date_);
      } else {
        _this->_impl_.report_date_->MergeFrom(*from._impl_.report_date_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.created_at_ != nullptr);
      if (_this->_impl_.created_at_ == nullptr) {
        _this->_impl_.created_at_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.created_at_);
      } else {
        _this->_impl_.created_at_->MergeFrom(*from._impl_.created_at_);
      }
    }
  }
  if (from._internal_period_year() != 0) {
    _this->_impl_.period_year_ = from._impl_.period_year_;
  }
  if (from._internal_period_num() != 0) {
    _this->_impl_.period_num_ = from._impl_.period_num_;
  }
  if (from._internal_period_type() != 0) {
    _this->_impl_.period_type_ = from._impl_.period_type_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetAssetReportsResponse_GetAssetReportsEvent::CopyFrom(const GetAssetReportsResponse_GetAssetReportsEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.GetAssetReportsResponse.GetAssetReportsEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GetAssetReportsResponse_GetAssetReportsEvent::InternalSwap(GetAssetReportsResponse_GetAssetReportsEvent* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.instrument_id_, &other->_impl_.instrument_id_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetAssetReportsResponse_GetAssetReportsEvent, _impl_.period_type_)
      + sizeof(GetAssetReportsResponse_GetAssetReportsEvent::_impl_.period_type_)
      - PROTOBUF_FIELD_OFFSET(GetAssetReportsResponse_GetAssetReportsEvent, _impl_.report_date_)>(
          reinterpret_cast<char*>(&_impl_.report_date_),
          reinterpret_cast<char*>(&other->_impl_.report_date_));
}

::google::protobuf::Metadata GetAssetReportsResponse_GetAssetReportsEvent::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GetAssetReportsResponse::_Internal {
 public:
};

GetAssetReportsResponse::GetAssetReportsResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.GetAssetReportsResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetAssetReportsResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse& from_msg)
      : events_{visibility, arena, from.events_},
        _cached_size_{0} {}

GetAssetReportsResponse::GetAssetReportsResponse(
    ::google::protobuf::Arena* arena,
    const GetAssetReportsResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GetAssetReportsResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.GetAssetReportsResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetAssetReportsResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : events_{visibility, arena},
        _cached_size_{0} {}

inline void GetAssetReportsResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
GetAssetReportsResponse::~GetAssetReportsResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.GetAssetReportsResponse)
  SharedDtor(*this);
}
inline void GetAssetReportsResponse::SharedDtor(MessageLite& self) {
  GetAssetReportsResponse& this_ = static_cast<GetAssetReportsResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.~Impl_();
}

inline void* GetAssetReportsResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) GetAssetReportsResponse(arena);
}
constexpr auto GetAssetReportsResponse::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(GetAssetReportsResponse, _impl_.events_) +
          decltype(GetAssetReportsResponse::_impl_.events_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(GetAssetReportsResponse), alignof(GetAssetReportsResponse), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&GetAssetReportsResponse::PlacementNew_,
                                 sizeof(GetAssetReportsResponse),
                                 alignof(GetAssetReportsResponse));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull GetAssetReportsResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_GetAssetReportsResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &GetAssetReportsResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<GetAssetReportsResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &GetAssetReportsResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<GetAssetReportsResponse>(), &GetAssetReportsResponse::ByteSizeLong,
            &GetAssetReportsResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(GetAssetReportsResponse, _impl_._cached_size_),
        false,
    },
    &GetAssetReportsResponse::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* GetAssetReportsResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> GetAssetReportsResponse::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // repeated .tinkoff.public.invest.api.contract.v1.GetAssetReportsResponse.GetAssetReportsEvent events = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetAssetReportsResponse, _impl_.events_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .tinkoff.public.invest.api.contract.v1.GetAssetReportsResponse.GetAssetReportsEvent events = 1;
    {PROTOBUF_FIELD_OFFSET(GetAssetReportsResponse, _impl_.events_), 0, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::GetAssetReportsResponse_GetAssetReportsEvent>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void GetAssetReportsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.GetAssetReportsResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.events_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GetAssetReportsResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GetAssetReportsResponse& this_ = static_cast<const GetAssetReportsResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GetAssetReportsResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GetAssetReportsResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.GetAssetReportsResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .tinkoff.public.invest.api.contract.v1.GetAssetReportsResponse.GetAssetReportsEvent events = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_events_size());
               i < n; i++) {
            const auto& repfield = this_._internal_events().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.GetAssetReportsResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GetAssetReportsResponse::ByteSizeLong(const MessageLite& base) {
          const GetAssetReportsResponse& this_ = static_cast<const GetAssetReportsResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GetAssetReportsResponse::ByteSizeLong() const {
          const GetAssetReportsResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.GetAssetReportsResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .tinkoff.public.invest.api.contract.v1.GetAssetReportsResponse.GetAssetReportsEvent events = 1;
            {
              total_size += 1UL * this_._internal_events_size();
              for (const auto& msg : this_._internal_events()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GetAssetReportsResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GetAssetReportsResponse*>(&to_msg);
  auto& from = static_cast<const GetAssetReportsResponse&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.GetAssetReportsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_events()->MergeFrom(
      from._internal_events());
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetAssetReportsResponse::CopyFrom(const GetAssetReportsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.GetAssetReportsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GetAssetReportsResponse::InternalSwap(GetAssetReportsResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  _impl_.events_.InternalSwap(&other->_impl_.events_);
}

::google::protobuf::Metadata GetAssetReportsResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GetConsensusForecastsRequest::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GetConsensusForecastsRequest>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GetConsensusForecastsRequest, _impl_._has_bits_);
};

void GetConsensusForecastsRequest::clear_paging() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.paging_ != nullptr) _impl_.paging_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GetConsensusForecastsRequest::GetConsensusForecastsRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.GetConsensusForecastsRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetConsensusForecastsRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsRequest& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

GetConsensusForecastsRequest::GetConsensusForecastsRequest(
    ::google::protobuf::Arena* arena,
    const GetConsensusForecastsRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GetConsensusForecastsRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.paging_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Page>(
                              arena, *from._impl_.paging_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.GetConsensusForecastsRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetConsensusForecastsRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void GetConsensusForecastsRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.paging_ = {};
}
GetConsensusForecastsRequest::~GetConsensusForecastsRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.GetConsensusForecastsRequest)
  SharedDtor(*this);
}
inline void GetConsensusForecastsRequest::SharedDtor(MessageLite& self) {
  GetConsensusForecastsRequest& this_ = static_cast<GetConsensusForecastsRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.paging_;
  this_._impl_.~Impl_();
}

inline void* GetConsensusForecastsRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) GetConsensusForecastsRequest(arena);
}
constexpr auto GetConsensusForecastsRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(GetConsensusForecastsRequest),
                                            alignof(GetConsensusForecastsRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull GetConsensusForecastsRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_GetConsensusForecastsRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &GetConsensusForecastsRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<GetConsensusForecastsRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &GetConsensusForecastsRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<GetConsensusForecastsRequest>(), &GetConsensusForecastsRequest::ByteSizeLong,
            &GetConsensusForecastsRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(GetConsensusForecastsRequest, _impl_._cached_size_),
        false,
    },
    &GetConsensusForecastsRequest::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* GetConsensusForecastsRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 1, 0, 2> GetConsensusForecastsRequest::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetConsensusForecastsRequest, _impl_._has_bits_),
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // optional .tinkoff.public.invest.api.contract.v1.Page paging = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(GetConsensusForecastsRequest, _impl_.paging_)}},
  }}, {{
    65535, 65535
  }}, {{
    // optional .tinkoff.public.invest.api.contract.v1.Page paging = 1;
    {PROTOBUF_FIELD_OFFSET(GetConsensusForecastsRequest, _impl_.paging_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Page>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void GetConsensusForecastsRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.GetConsensusForecastsRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.paging_ != nullptr);
    _impl_.paging_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GetConsensusForecastsRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GetConsensusForecastsRequest& this_ = static_cast<const GetConsensusForecastsRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GetConsensusForecastsRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GetConsensusForecastsRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.GetConsensusForecastsRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // optional .tinkoff.public.invest.api.contract.v1.Page paging = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.paging_, this_._impl_.paging_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.GetConsensusForecastsRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GetConsensusForecastsRequest::ByteSizeLong(const MessageLite& base) {
          const GetConsensusForecastsRequest& this_ = static_cast<const GetConsensusForecastsRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GetConsensusForecastsRequest::ByteSizeLong() const {
          const GetConsensusForecastsRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.GetConsensusForecastsRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // optional .tinkoff.public.invest.api.contract.v1.Page paging = 1;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.paging_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GetConsensusForecastsRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GetConsensusForecastsRequest*>(&to_msg);
  auto& from = static_cast<const GetConsensusForecastsRequest&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.GetConsensusForecastsRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.paging_ != nullptr);
    if (_this->_impl_.paging_ == nullptr) {
      _this->_impl_.paging_ =
          ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Page>(arena, *from._impl_.paging_);
    } else {
      _this->_impl_.paging_->MergeFrom(*from._impl_.paging_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetConsensusForecastsRequest::CopyFrom(const GetConsensusForecastsRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.GetConsensusForecastsRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GetConsensusForecastsRequest::InternalSwap(GetConsensusForecastsRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  swap(_impl_.paging_, other->_impl_.paging_);
}

::google::protobuf::Metadata GetConsensusForecastsRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GetConsensusForecastsResponse_ConsensusForecastsItem::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GetConsensusForecastsResponse_ConsensusForecastsItem>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_._has_bits_);
};

void GetConsensusForecastsResponse_ConsensusForecastsItem::clear_created_at() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.created_at_ != nullptr) _impl_.created_at_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GetConsensusForecastsResponse_ConsensusForecastsItem::clear_best_target_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.best_target_price_ != nullptr) _impl_.best_target_price_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void GetConsensusForecastsResponse_ConsensusForecastsItem::clear_best_target_low() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.best_target_low_ != nullptr) _impl_.best_target_low_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void GetConsensusForecastsResponse_ConsensusForecastsItem::clear_best_target_high() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.best_target_high_ != nullptr) _impl_.best_target_high_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void GetConsensusForecastsResponse_ConsensusForecastsItem::clear_prognosis_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.prognosis_date_ != nullptr) _impl_.prognosis_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
GetConsensusForecastsResponse_ConsensusForecastsItem::GetConsensusForecastsResponse_ConsensusForecastsItem(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem)
}
inline PROTOBUF_NDEBUG_INLINE GetConsensusForecastsResponse_ConsensusForecastsItem::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse_ConsensusForecastsItem& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        uid_(arena, from.uid_),
        asset_uid_(arena, from.asset_uid_),
        currency_(arena, from.currency_) {}

GetConsensusForecastsResponse_ConsensusForecastsItem::GetConsensusForecastsResponse_ConsensusForecastsItem(
    ::google::protobuf::Arena* arena,
    const GetConsensusForecastsResponse_ConsensusForecastsItem& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GetConsensusForecastsResponse_ConsensusForecastsItem* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.created_at_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.created_at_)
                        : nullptr;
  _impl_.best_target_price_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.best_target_price_)
                        : nullptr;
  _impl_.best_target_low_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.best_target_low_)
                        : nullptr;
  _impl_.best_target_high_ = (cached_has_bits & 0x00000008u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.best_target_high_)
                        : nullptr;
  _impl_.prognosis_date_ = (cached_has_bits & 0x00000010u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.prognosis_date_)
                        : nullptr;
  ::memcpy(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, total_buy_recommend_),
           reinterpret_cast<const char *>(&from._impl_) +
               offsetof(Impl_, total_buy_recommend_),
           offsetof(Impl_, consensus_) -
               offsetof(Impl_, total_buy_recommend_) +
               sizeof(Impl_::consensus_));

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem)
}
inline PROTOBUF_NDEBUG_INLINE GetConsensusForecastsResponse_ConsensusForecastsItem::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        uid_(arena),
        asset_uid_(arena),
        currency_(arena) {}

inline void GetConsensusForecastsResponse_ConsensusForecastsItem::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, created_at_),
           0,
           offsetof(Impl_, consensus_) -
               offsetof(Impl_, created_at_) +
               sizeof(Impl_::consensus_));
}
GetConsensusForecastsResponse_ConsensusForecastsItem::~GetConsensusForecastsResponse_ConsensusForecastsItem() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem)
  SharedDtor(*this);
}
inline void GetConsensusForecastsResponse_ConsensusForecastsItem::SharedDtor(MessageLite& self) {
  GetConsensusForecastsResponse_ConsensusForecastsItem& this_ = static_cast<GetConsensusForecastsResponse_ConsensusForecastsItem&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.uid_.Destroy();
  this_._impl_.asset_uid_.Destroy();
  this_._impl_.currency_.Destroy();
  delete this_._impl_.created_at_;
  delete this_._impl_.best_target_price_;
  delete this_._impl_.best_target_low_;
  delete this_._impl_.best_target_high_;
  delete this_._impl_.prognosis_date_;
  this_._impl_.~Impl_();
}

inline void* GetConsensusForecastsResponse_ConsensusForecastsItem::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) GetConsensusForecastsResponse_ConsensusForecastsItem(arena);
}
constexpr auto GetConsensusForecastsResponse_ConsensusForecastsItem::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(GetConsensusForecastsResponse_ConsensusForecastsItem),
                                            alignof(GetConsensusForecastsResponse_ConsensusForecastsItem));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull GetConsensusForecastsResponse_ConsensusForecastsItem::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_GetConsensusForecastsResponse_ConsensusForecastsItem_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &GetConsensusForecastsResponse_ConsensusForecastsItem::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<GetConsensusForecastsResponse_ConsensusForecastsItem>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &GetConsensusForecastsResponse_ConsensusForecastsItem::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<GetConsensusForecastsResponse_ConsensusForecastsItem>(), &GetConsensusForecastsResponse_ConsensusForecastsItem::ByteSizeLong,
            &GetConsensusForecastsResponse_ConsensusForecastsItem::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_._cached_size_),
        false,
    },
    &GetConsensusForecastsResponse_ConsensusForecastsItem::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* GetConsensusForecastsResponse_ConsensusForecastsItem::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 12, 5, 127, 2> GetConsensusForecastsResponse_ConsensusForecastsItem::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_._has_bits_),
    0, // no _extensions_
    12, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294963200,  // skipmap
    offsetof(decltype(_table_), field_entries),
    12,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse_ConsensusForecastsItem>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string uid = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.uid_)}},
    // string asset_uid = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.asset_uid_)}},
    // .google.protobuf.Timestamp created_at = 3;
    {::_pbi::TcParser::FastMtS1,
     {26, 0, 0, PROTOBUF_FIELD_OFFSET(GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.created_at_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation best_target_price = 4;
    {::_pbi::TcParser::FastMtS1,
     {34, 1, 1, PROTOBUF_FIELD_OFFSET(GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.best_target_price_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation best_target_low = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 2, 2, PROTOBUF_FIELD_OFFSET(GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.best_target_low_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation best_target_high = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 3, 3, PROTOBUF_FIELD_OFFSET(GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.best_target_high_)}},
    // int32 total_buy_recommend = 7;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.total_buy_recommend_), 63>(),
     {56, 63, 0, PROTOBUF_FIELD_OFFSET(GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.total_buy_recommend_)}},
    // int32 total_hold_recommend = 8;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.total_hold_recommend_), 63>(),
     {64, 63, 0, PROTOBUF_FIELD_OFFSET(GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.total_hold_recommend_)}},
    // int32 total_sell_recommend = 9;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.total_sell_recommend_), 63>(),
     {72, 63, 0, PROTOBUF_FIELD_OFFSET(GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.total_sell_recommend_)}},
    // string currency = 10;
    {::_pbi::TcParser::FastUS1,
     {82, 63, 0, PROTOBUF_FIELD_OFFSET(GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.currency_)}},
    // .tinkoff.public.invest.api.contract.v1.Recommendation consensus = 11;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.consensus_), 63>(),
     {88, 63, 0, PROTOBUF_FIELD_OFFSET(GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.consensus_)}},
    // .google.protobuf.Timestamp prognosis_date = 12;
    {::_pbi::TcParser::FastMtS1,
     {98, 4, 4, PROTOBUF_FIELD_OFFSET(GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.prognosis_date_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string uid = 1;
    {PROTOBUF_FIELD_OFFSET(GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.uid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string asset_uid = 2;
    {PROTOBUF_FIELD_OFFSET(GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.asset_uid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .google.protobuf.Timestamp created_at = 3;
    {PROTOBUF_FIELD_OFFSET(GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.created_at_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation best_target_price = 4;
    {PROTOBUF_FIELD_OFFSET(GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.best_target_price_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation best_target_low = 5;
    {PROTOBUF_FIELD_OFFSET(GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.best_target_low_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation best_target_high = 6;
    {PROTOBUF_FIELD_OFFSET(GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.best_target_high_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // int32 total_buy_recommend = 7;
    {PROTOBUF_FIELD_OFFSET(GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.total_buy_recommend_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 total_hold_recommend = 8;
    {PROTOBUF_FIELD_OFFSET(GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.total_hold_recommend_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // int32 total_sell_recommend = 9;
    {PROTOBUF_FIELD_OFFSET(GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.total_sell_recommend_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kInt32)},
    // string currency = 10;
    {PROTOBUF_FIELD_OFFSET(GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.currency_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public.invest.api.contract.v1.Recommendation consensus = 11;
    {PROTOBUF_FIELD_OFFSET(GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.consensus_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .google.protobuf.Timestamp prognosis_date = 12;
    {PROTOBUF_FIELD_OFFSET(GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.prognosis_date_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
    "\132\3\11\0\0\0\0\0\0\0\10\0\0\0\0\0"
    "tinkoff.public.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem"
    "uid"
    "asset_uid"
    "currency"
  }},
};

PROTOBUF_NOINLINE void GetConsensusForecastsResponse_ConsensusForecastsItem::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uid_.ClearToEmpty();
  _impl_.asset_uid_.ClearToEmpty();
  _impl_.currency_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.created_at_ != nullptr);
      _impl_.created_at_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.best_target_price_ != nullptr);
      _impl_.best_target_price_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.best_target_low_ != nullptr);
      _impl_.best_target_low_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.best_target_high_ != nullptr);
      _impl_.best_target_high_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.prognosis_date_ != nullptr);
      _impl_.prognosis_date_->Clear();
    }
  }
  ::memset(&_impl_.total_buy_recommend_, 0, static_cast<::size_t>(
      reinterpret_cast<char*>(&_impl_.consensus_) -
      reinterpret_cast<char*>(&_impl_.total_buy_recommend_)) + sizeof(_impl_.consensus_));
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GetConsensusForecastsResponse_ConsensusForecastsItem::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GetConsensusForecastsResponse_ConsensusForecastsItem& this_ = static_cast<const GetConsensusForecastsResponse_ConsensusForecastsItem&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GetConsensusForecastsResponse_ConsensusForecastsItem::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GetConsensusForecastsResponse_ConsensusForecastsItem& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string uid = 1;
          if (!this_._internal_uid().empty()) {
            const std::string& _s = this_._internal_uid();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem.uid");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string asset_uid = 2;
          if (!this_._internal_asset_uid().empty()) {
            const std::string& _s = this_._internal_asset_uid();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem.asset_uid");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .google.protobuf.Timestamp created_at = 3;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                3, *this_._impl_.created_at_, this_._impl_.created_at_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation best_target_price = 4;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                4, *this_._impl_.best_target_price_, this_._impl_.best_target_price_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation best_target_low = 5;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                5, *this_._impl_.best_target_low_, this_._impl_.best_target_low_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation best_target_high = 6;
          if (cached_has_bits & 0x00000008u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                6, *this_._impl_.best_target_high_, this_._impl_.best_target_high_->GetCachedSize(), target,
                stream);
          }

          // int32 total_buy_recommend = 7;
          if (this_._internal_total_buy_recommend() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<7>(
                    stream, this_._internal_total_buy_recommend(), target);
          }

          // int32 total_hold_recommend = 8;
          if (this_._internal_total_hold_recommend() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<8>(
                    stream, this_._internal_total_hold_recommend(), target);
          }

          // int32 total_sell_recommend = 9;
          if (this_._internal_total_sell_recommend() != 0) {
            target = ::google::protobuf::internal::WireFormatLite::
                WriteInt32ToArrayWithField<9>(
                    stream, this_._internal_total_sell_recommend(), target);
          }

          // string currency = 10;
          if (!this_._internal_currency().empty()) {
            const std::string& _s = this_._internal_currency();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem.currency");
            target = stream->WriteStringMaybeAliased(10, _s, target);
          }

          // .tinkoff.public.invest.api.contract.v1.Recommendation consensus = 11;
          if (this_._internal_consensus() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                11, this_._internal_consensus(), target);
          }

          // .google.protobuf.Timestamp prognosis_date = 12;
          if (cached_has_bits & 0x00000010u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                12, *this_._impl_.prognosis_date_, this_._impl_.prognosis_date_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GetConsensusForecastsResponse_ConsensusForecastsItem::ByteSizeLong(const MessageLite& base) {
          const GetConsensusForecastsResponse_ConsensusForecastsItem& this_ = static_cast<const GetConsensusForecastsResponse_ConsensusForecastsItem&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GetConsensusForecastsResponse_ConsensusForecastsItem::ByteSizeLong() const {
          const GetConsensusForecastsResponse_ConsensusForecastsItem& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string uid = 1;
            if (!this_._internal_uid().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_uid());
            }
            // string asset_uid = 2;
            if (!this_._internal_asset_uid().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_asset_uid());
            }
            // string currency = 10;
            if (!this_._internal_currency().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_currency());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x0000001fu) {
            // .google.protobuf.Timestamp created_at = 3;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.created_at_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation best_target_price = 4;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.best_target_price_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation best_target_low = 5;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.best_target_low_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation best_target_high = 6;
            if (cached_has_bits & 0x00000008u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.best_target_high_);
            }
            // .google.protobuf.Timestamp prognosis_date = 12;
            if (cached_has_bits & 0x00000010u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.prognosis_date_);
            }
          }
           {
            // int32 total_buy_recommend = 7;
            if (this_._internal_total_buy_recommend() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_total_buy_recommend());
            }
            // int32 total_hold_recommend = 8;
            if (this_._internal_total_hold_recommend() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_total_hold_recommend());
            }
            // int32 total_sell_recommend = 9;
            if (this_._internal_total_sell_recommend() != 0) {
              total_size += ::_pbi::WireFormatLite::Int32SizePlusOne(
                  this_._internal_total_sell_recommend());
            }
            // .tinkoff.public.invest.api.contract.v1.Recommendation consensus = 11;
            if (this_._internal_consensus() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_consensus());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GetConsensusForecastsResponse_ConsensusForecastsItem::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GetConsensusForecastsResponse_ConsensusForecastsItem*>(&to_msg);
  auto& from = static_cast<const GetConsensusForecastsResponse_ConsensusForecastsItem&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (!from._internal_asset_uid().empty()) {
    _this->_internal_set_asset_uid(from._internal_asset_uid());
  }
  if (!from._internal_currency().empty()) {
    _this->_internal_set_currency(from._internal_currency());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.created_at_ != nullptr);
      if (_this->_impl_.created_at_ == nullptr) {
        _this->_impl_.created_at_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.created_at_);
      } else {
        _this->_impl_.created_at_->MergeFrom(*from._impl_.created_at_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.best_target_price_ != nullptr);
      if (_this->_impl_.best_target_price_ == nullptr) {
        _this->_impl_.best_target_price_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.best_target_price_);
      } else {
        _this->_impl_.best_target_price_->MergeFrom(*from._impl_.best_target_price_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.best_target_low_ != nullptr);
      if (_this->_impl_.best_target_low_ == nullptr) {
        _this->_impl_.best_target_low_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.best_target_low_);
      } else {
        _this->_impl_.best_target_low_->MergeFrom(*from._impl_.best_target_low_);
      }
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(from._impl_.best_target_high_ != nullptr);
      if (_this->_impl_.best_target_high_ == nullptr) {
        _this->_impl_.best_target_high_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.best_target_high_);
      } else {
        _this->_impl_.best_target_high_->MergeFrom(*from._impl_.best_target_high_);
      }
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(from._impl_.prognosis_date_ != nullptr);
      if (_this->_impl_.prognosis_date_ == nullptr) {
        _this->_impl_.prognosis_date_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.prognosis_date_);
      } else {
        _this->_impl_.prognosis_date_->MergeFrom(*from._impl_.prognosis_date_);
      }
    }
  }
  if (from._internal_total_buy_recommend() != 0) {
    _this->_impl_.total_buy_recommend_ = from._impl_.total_buy_recommend_;
  }
  if (from._internal_total_hold_recommend() != 0) {
    _this->_impl_.total_hold_recommend_ = from._impl_.total_hold_recommend_;
  }
  if (from._internal_total_sell_recommend() != 0) {
    _this->_impl_.total_sell_recommend_ = from._impl_.total_sell_recommend_;
  }
  if (from._internal_consensus() != 0) {
    _this->_impl_.consensus_ = from._impl_.consensus_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetConsensusForecastsResponse_ConsensusForecastsItem::CopyFrom(const GetConsensusForecastsResponse_ConsensusForecastsItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GetConsensusForecastsResponse_ConsensusForecastsItem::InternalSwap(GetConsensusForecastsResponse_ConsensusForecastsItem* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.uid_, &other->_impl_.uid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.asset_uid_, &other->_impl_.asset_uid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.currency_, &other->_impl_.currency_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.consensus_)
      + sizeof(GetConsensusForecastsResponse_ConsensusForecastsItem::_impl_.consensus_)
      - PROTOBUF_FIELD_OFFSET(GetConsensusForecastsResponse_ConsensusForecastsItem, _impl_.created_at_)>(
          reinterpret_cast<char*>(&_impl_.created_at_),
          reinterpret_cast<char*>(&other->_impl_.created_at_));
}

::google::protobuf::Metadata GetConsensusForecastsResponse_ConsensusForecastsItem::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GetConsensusForecastsResponse::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GetConsensusForecastsResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GetConsensusForecastsResponse, _impl_._has_bits_);
};

void GetConsensusForecastsResponse::clear_page() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.page_ != nullptr) _impl_.page_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
GetConsensusForecastsResponse::GetConsensusForecastsResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.GetConsensusForecastsResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetConsensusForecastsResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        items_{visibility, arena, from.items_} {}

GetConsensusForecastsResponse::GetConsensusForecastsResponse(
    ::google::protobuf::Arena* arena,
    const GetConsensusForecastsResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GetConsensusForecastsResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.page_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::PageResponse>(
                              arena, *from._impl_.page_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.GetConsensusForecastsResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetConsensusForecastsResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        items_{visibility, arena} {}

inline void GetConsensusForecastsResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.page_ = {};
}
GetConsensusForecastsResponse::~GetConsensusForecastsResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.GetConsensusForecastsResponse)
  SharedDtor(*this);
}
inline void GetConsensusForecastsResponse::SharedDtor(MessageLite& self) {
  GetConsensusForecastsResponse& this_ = static_cast<GetConsensusForecastsResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.page_;
  this_._impl_.~Impl_();
}

inline void* GetConsensusForecastsResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) GetConsensusForecastsResponse(arena);
}
constexpr auto GetConsensusForecastsResponse::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(GetConsensusForecastsResponse, _impl_.items_) +
          decltype(GetConsensusForecastsResponse::_impl_.items_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(GetConsensusForecastsResponse), alignof(GetConsensusForecastsResponse), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&GetConsensusForecastsResponse::PlacementNew_,
                                 sizeof(GetConsensusForecastsResponse),
                                 alignof(GetConsensusForecastsResponse));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull GetConsensusForecastsResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_GetConsensusForecastsResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &GetConsensusForecastsResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<GetConsensusForecastsResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &GetConsensusForecastsResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<GetConsensusForecastsResponse>(), &GetConsensusForecastsResponse::ByteSizeLong,
            &GetConsensusForecastsResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(GetConsensusForecastsResponse, _impl_._cached_size_),
        false,
    },
    &GetConsensusForecastsResponse::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* GetConsensusForecastsResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> GetConsensusForecastsResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetConsensusForecastsResponse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .tinkoff.public.invest.api.contract.v1.PageResponse page = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 1, PROTOBUF_FIELD_OFFSET(GetConsensusForecastsResponse, _impl_.page_)}},
    // repeated .tinkoff.public.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem items = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetConsensusForecastsResponse, _impl_.items_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .tinkoff.public.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem items = 1;
    {PROTOBUF_FIELD_OFFSET(GetConsensusForecastsResponse, _impl_.items_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.PageResponse page = 2;
    {PROTOBUF_FIELD_OFFSET(GetConsensusForecastsResponse, _impl_.page_), _Internal::kHasBitsOffset + 0, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::GetConsensusForecastsResponse_ConsensusForecastsItem>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::PageResponse>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void GetConsensusForecastsResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.GetConsensusForecastsResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.items_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.page_ != nullptr);
    _impl_.page_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GetConsensusForecastsResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GetConsensusForecastsResponse& this_ = static_cast<const GetConsensusForecastsResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GetConsensusForecastsResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GetConsensusForecastsResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.GetConsensusForecastsResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .tinkoff.public.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem items = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_items_size());
               i < n; i++) {
            const auto& repfield = this_._internal_items().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .tinkoff.public.invest.api.contract.v1.PageResponse page = 2;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.page_, this_._impl_.page_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.GetConsensusForecastsResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GetConsensusForecastsResponse::ByteSizeLong(const MessageLite& base) {
          const GetConsensusForecastsResponse& this_ = static_cast<const GetConsensusForecastsResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GetConsensusForecastsResponse::ByteSizeLong() const {
          const GetConsensusForecastsResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.GetConsensusForecastsResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .tinkoff.public.invest.api.contract.v1.GetConsensusForecastsResponse.ConsensusForecastsItem items = 1;
            {
              total_size += 1UL * this_._internal_items_size();
              for (const auto& msg : this_._internal_items()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // .tinkoff.public.invest.api.contract.v1.PageResponse page = 2;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.page_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GetConsensusForecastsResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GetConsensusForecastsResponse*>(&to_msg);
  auto& from = static_cast<const GetConsensusForecastsResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.GetConsensusForecastsResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_items()->MergeFrom(
      from._internal_items());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.page_ != nullptr);
    if (_this->_impl_.page_ == nullptr) {
      _this->_impl_.page_ =
          ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::PageResponse>(arena, *from._impl_.page_);
    } else {
      _this->_impl_.page_->MergeFrom(*from._impl_.page_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetConsensusForecastsResponse::CopyFrom(const GetConsensusForecastsResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.GetConsensusForecastsResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GetConsensusForecastsResponse::InternalSwap(GetConsensusForecastsResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.items_.InternalSwap(&other->_impl_.items_);
  swap(_impl_.page_, other->_impl_.page_);
}

::google::protobuf::Metadata GetConsensusForecastsResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GetForecastRequest::_Internal {
 public:
};

GetForecastRequest::GetForecastRequest(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.GetForecastRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetForecastRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::GetForecastRequest& from_msg)
      : instrument_id_(arena, from.instrument_id_),
        _cached_size_{0} {}

GetForecastRequest::GetForecastRequest(
    ::google::protobuf::Arena* arena,
    const GetForecastRequest& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GetForecastRequest* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.GetForecastRequest)
}
inline PROTOBUF_NDEBUG_INLINE GetForecastRequest::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : instrument_id_(arena),
        _cached_size_{0} {}

inline void GetForecastRequest::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
}
GetForecastRequest::~GetForecastRequest() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.GetForecastRequest)
  SharedDtor(*this);
}
inline void GetForecastRequest::SharedDtor(MessageLite& self) {
  GetForecastRequest& this_ = static_cast<GetForecastRequest&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.instrument_id_.Destroy();
  this_._impl_.~Impl_();
}

inline void* GetForecastRequest::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) GetForecastRequest(arena);
}
constexpr auto GetForecastRequest::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(GetForecastRequest),
                                            alignof(GetForecastRequest));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull GetForecastRequest::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_GetForecastRequest_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &GetForecastRequest::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<GetForecastRequest>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &GetForecastRequest::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<GetForecastRequest>(), &GetForecastRequest::ByteSizeLong,
            &GetForecastRequest::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(GetForecastRequest, _impl_._cached_size_),
        false,
    },
    &GetForecastRequest::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* GetForecastRequest::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<0, 1, 0, 78, 2> GetForecastRequest::_table_ = {
  {
    0,  // no _has_bits_
    0, // no _extensions_
    1, 0,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967294,  // skipmap
    offsetof(decltype(_table_), field_entries),
    1,  // num_field_entries
    0,  // num_aux_entries
    offsetof(decltype(_table_), field_names),  // no aux_entries
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::GetForecastRequest>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // string instrument_id = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetForecastRequest, _impl_.instrument_id_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string instrument_id = 1;
    {PROTOBUF_FIELD_OFFSET(GetForecastRequest, _impl_.instrument_id_), 0, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }},
  // no aux_entries
  {{
    "\70\15\0\0\0\0\0\0"
    "tinkoff.public.invest.api.contract.v1.GetForecastRequest"
    "instrument_id"
  }},
};

PROTOBUF_NOINLINE void GetForecastRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.GetForecastRequest)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.instrument_id_.ClearToEmpty();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GetForecastRequest::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GetForecastRequest& this_ = static_cast<const GetForecastRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GetForecastRequest::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GetForecastRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.GetForecastRequest)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string instrument_id = 1;
          if (!this_._internal_instrument_id().empty()) {
            const std::string& _s = this_._internal_instrument_id();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.GetForecastRequest.instrument_id");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.GetForecastRequest)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GetForecastRequest::ByteSizeLong(const MessageLite& base) {
          const GetForecastRequest& this_ = static_cast<const GetForecastRequest&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GetForecastRequest::ByteSizeLong() const {
          const GetForecastRequest& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.GetForecastRequest)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

           {
            // string instrument_id = 1;
            if (!this_._internal_instrument_id().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_instrument_id());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GetForecastRequest::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GetForecastRequest*>(&to_msg);
  auto& from = static_cast<const GetForecastRequest&>(from_msg);
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.GetForecastRequest)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_instrument_id().empty()) {
    _this->_internal_set_instrument_id(from._internal_instrument_id());
  }
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetForecastRequest::CopyFrom(const GetForecastRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.GetForecastRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GetForecastRequest::InternalSwap(GetForecastRequest* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.instrument_id_, &other->_impl_.instrument_id_, arena);
}

::google::protobuf::Metadata GetForecastRequest::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GetForecastResponse_TargetItem::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GetForecastResponse_TargetItem>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GetForecastResponse_TargetItem, _impl_._has_bits_);
};

void GetForecastResponse_TargetItem::clear_recommendation_date() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.recommendation_date_ != nullptr) _impl_.recommendation_date_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GetForecastResponse_TargetItem::clear_current_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.current_price_ != nullptr) _impl_.current_price_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void GetForecastResponse_TargetItem::clear_target_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.target_price_ != nullptr) _impl_.target_price_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void GetForecastResponse_TargetItem::clear_price_change() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.price_change_ != nullptr) _impl_.price_change_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void GetForecastResponse_TargetItem::clear_price_change_rel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.price_change_rel_ != nullptr) _impl_.price_change_rel_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
GetForecastResponse_TargetItem::GetForecastResponse_TargetItem(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.GetForecastResponse.TargetItem)
}
inline PROTOBUF_NDEBUG_INLINE GetForecastResponse_TargetItem::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_TargetItem& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        uid_(arena, from.uid_),
        ticker_(arena, from.ticker_),
        company_(arena, from.company_),
        currency_(arena, from.currency_),
        show_name_(arena, from.show_name_) {}

GetForecastResponse_TargetItem::GetForecastResponse_TargetItem(
    ::google::protobuf::Arena* arena,
    const GetForecastResponse_TargetItem& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GetForecastResponse_TargetItem* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.recommendation_date_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.recommendation_date_)
                        : nullptr;
  _impl_.current_price_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.current_price_)
                        : nullptr;
  _impl_.target_price_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.target_price_)
                        : nullptr;
  _impl_.price_change_ = (cached_has_bits & 0x00000008u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.price_change_)
                        : nullptr;
  _impl_.price_change_rel_ = (cached_has_bits & 0x00000010u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.price_change_rel_)
                        : nullptr;
  _impl_.recommendation_ = from._impl_.recommendation_;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.GetForecastResponse.TargetItem)
}
inline PROTOBUF_NDEBUG_INLINE GetForecastResponse_TargetItem::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        uid_(arena),
        ticker_(arena),
        company_(arena),
        currency_(arena),
        show_name_(arena) {}

inline void GetForecastResponse_TargetItem::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, recommendation_date_),
           0,
           offsetof(Impl_, recommendation_) -
               offsetof(Impl_, recommendation_date_) +
               sizeof(Impl_::recommendation_));
}
GetForecastResponse_TargetItem::~GetForecastResponse_TargetItem() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.GetForecastResponse.TargetItem)
  SharedDtor(*this);
}
inline void GetForecastResponse_TargetItem::SharedDtor(MessageLite& self) {
  GetForecastResponse_TargetItem& this_ = static_cast<GetForecastResponse_TargetItem&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.uid_.Destroy();
  this_._impl_.ticker_.Destroy();
  this_._impl_.company_.Destroy();
  this_._impl_.currency_.Destroy();
  this_._impl_.show_name_.Destroy();
  delete this_._impl_.recommendation_date_;
  delete this_._impl_.current_price_;
  delete this_._impl_.target_price_;
  delete this_._impl_.price_change_;
  delete this_._impl_.price_change_rel_;
  this_._impl_.~Impl_();
}

inline void* GetForecastResponse_TargetItem::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) GetForecastResponse_TargetItem(arena);
}
constexpr auto GetForecastResponse_TargetItem::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(GetForecastResponse_TargetItem),
                                            alignof(GetForecastResponse_TargetItem));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull GetForecastResponse_TargetItem::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_GetForecastResponse_TargetItem_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &GetForecastResponse_TargetItem::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<GetForecastResponse_TargetItem>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &GetForecastResponse_TargetItem::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<GetForecastResponse_TargetItem>(), &GetForecastResponse_TargetItem::ByteSizeLong,
            &GetForecastResponse_TargetItem::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(GetForecastResponse_TargetItem, _impl_._cached_size_),
        false,
    },
    &GetForecastResponse_TargetItem::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* GetForecastResponse_TargetItem::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 11, 5, 118, 2> GetForecastResponse_TargetItem::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetForecastResponse_TargetItem, _impl_._has_bits_),
    0, // no _extensions_
    11, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294965248,  // skipmap
    offsetof(decltype(_table_), field_entries),
    11,  // num_field_entries
    5,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_TargetItem>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string uid = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetForecastResponse_TargetItem, _impl_.uid_)}},
    // string ticker = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(GetForecastResponse_TargetItem, _impl_.ticker_)}},
    // string company = 3;
    {::_pbi::TcParser::FastUS1,
     {26, 63, 0, PROTOBUF_FIELD_OFFSET(GetForecastResponse_TargetItem, _impl_.company_)}},
    // .tinkoff.public.invest.api.contract.v1.Recommendation recommendation = 4;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetForecastResponse_TargetItem, _impl_.recommendation_), 63>(),
     {32, 63, 0, PROTOBUF_FIELD_OFFSET(GetForecastResponse_TargetItem, _impl_.recommendation_)}},
    // .google.protobuf.Timestamp recommendation_date = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 0, 0, PROTOBUF_FIELD_OFFSET(GetForecastResponse_TargetItem, _impl_.recommendation_date_)}},
    // string currency = 6;
    {::_pbi::TcParser::FastUS1,
     {50, 63, 0, PROTOBUF_FIELD_OFFSET(GetForecastResponse_TargetItem, _impl_.currency_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation current_price = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 1, 1, PROTOBUF_FIELD_OFFSET(GetForecastResponse_TargetItem, _impl_.current_price_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation target_price = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 2, 2, PROTOBUF_FIELD_OFFSET(GetForecastResponse_TargetItem, _impl_.target_price_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation price_change = 9;
    {::_pbi::TcParser::FastMtS1,
     {74, 3, 3, PROTOBUF_FIELD_OFFSET(GetForecastResponse_TargetItem, _impl_.price_change_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation price_change_rel = 10;
    {::_pbi::TcParser::FastMtS1,
     {82, 4, 4, PROTOBUF_FIELD_OFFSET(GetForecastResponse_TargetItem, _impl_.price_change_rel_)}},
    // string show_name = 11;
    {::_pbi::TcParser::FastUS1,
     {90, 63, 0, PROTOBUF_FIELD_OFFSET(GetForecastResponse_TargetItem, _impl_.show_name_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string uid = 1;
    {PROTOBUF_FIELD_OFFSET(GetForecastResponse_TargetItem, _impl_.uid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string ticker = 2;
    {PROTOBUF_FIELD_OFFSET(GetForecastResponse_TargetItem, _impl_.ticker_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string company = 3;
    {PROTOBUF_FIELD_OFFSET(GetForecastResponse_TargetItem, _impl_.company_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public.invest.api.contract.v1.Recommendation recommendation = 4;
    {PROTOBUF_FIELD_OFFSET(GetForecastResponse_TargetItem, _impl_.recommendation_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // .google.protobuf.Timestamp recommendation_date = 5;
    {PROTOBUF_FIELD_OFFSET(GetForecastResponse_TargetItem, _impl_.recommendation_date_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string currency = 6;
    {PROTOBUF_FIELD_OFFSET(GetForecastResponse_TargetItem, _impl_.currency_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public.invest.api.contract.v1.Quotation current_price = 7;
    {PROTOBUF_FIELD_OFFSET(GetForecastResponse_TargetItem, _impl_.current_price_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation target_price = 8;
    {PROTOBUF_FIELD_OFFSET(GetForecastResponse_TargetItem, _impl_.target_price_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation price_change = 9;
    {PROTOBUF_FIELD_OFFSET(GetForecastResponse_TargetItem, _impl_.price_change_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation price_change_rel = 10;
    {PROTOBUF_FIELD_OFFSET(GetForecastResponse_TargetItem, _impl_.price_change_rel_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // string show_name = 11;
    {PROTOBUF_FIELD_OFFSET(GetForecastResponse_TargetItem, _impl_.show_name_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
  }}, {{
    "\104\3\6\7\0\0\10\0\0\0\0\11\0\0\0\0"
    "tinkoff.public.invest.api.contract.v1.GetForecastResponse.TargetItem"
    "uid"
    "ticker"
    "company"
    "currency"
    "show_name"
  }},
};

PROTOBUF_NOINLINE void GetForecastResponse_TargetItem::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.GetForecastResponse.TargetItem)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uid_.ClearToEmpty();
  _impl_.ticker_.ClearToEmpty();
  _impl_.company_.ClearToEmpty();
  _impl_.currency_.ClearToEmpty();
  _impl_.show_name_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.recommendation_date_ != nullptr);
      _impl_.recommendation_date_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.current_price_ != nullptr);
      _impl_.current_price_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.target_price_ != nullptr);
      _impl_.target_price_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.price_change_ != nullptr);
      _impl_.price_change_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.price_change_rel_ != nullptr);
      _impl_.price_change_rel_->Clear();
    }
  }
  _impl_.recommendation_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GetForecastResponse_TargetItem::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GetForecastResponse_TargetItem& this_ = static_cast<const GetForecastResponse_TargetItem&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GetForecastResponse_TargetItem::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GetForecastResponse_TargetItem& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.GetForecastResponse.TargetItem)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string uid = 1;
          if (!this_._internal_uid().empty()) {
            const std::string& _s = this_._internal_uid();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.GetForecastResponse.TargetItem.uid");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string ticker = 2;
          if (!this_._internal_ticker().empty()) {
            const std::string& _s = this_._internal_ticker();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.GetForecastResponse.TargetItem.ticker");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // string company = 3;
          if (!this_._internal_company().empty()) {
            const std::string& _s = this_._internal_company();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.GetForecastResponse.TargetItem.company");
            target = stream->WriteStringMaybeAliased(3, _s, target);
          }

          // .tinkoff.public.invest.api.contract.v1.Recommendation recommendation = 4;
          if (this_._internal_recommendation() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                4, this_._internal_recommendation(), target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .google.protobuf.Timestamp recommendation_date = 5;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                5, *this_._impl_.recommendation_date_, this_._impl_.recommendation_date_->GetCachedSize(), target,
                stream);
          }

          // string currency = 6;
          if (!this_._internal_currency().empty()) {
            const std::string& _s = this_._internal_currency();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.GetForecastResponse.TargetItem.currency");
            target = stream->WriteStringMaybeAliased(6, _s, target);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation current_price = 7;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                7, *this_._impl_.current_price_, this_._impl_.current_price_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation target_price = 8;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                8, *this_._impl_.target_price_, this_._impl_.target_price_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation price_change = 9;
          if (cached_has_bits & 0x00000008u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                9, *this_._impl_.price_change_, this_._impl_.price_change_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation price_change_rel = 10;
          if (cached_has_bits & 0x00000010u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                10, *this_._impl_.price_change_rel_, this_._impl_.price_change_rel_->GetCachedSize(), target,
                stream);
          }

          // string show_name = 11;
          if (!this_._internal_show_name().empty()) {
            const std::string& _s = this_._internal_show_name();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.GetForecastResponse.TargetItem.show_name");
            target = stream->WriteStringMaybeAliased(11, _s, target);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.GetForecastResponse.TargetItem)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GetForecastResponse_TargetItem::ByteSizeLong(const MessageLite& base) {
          const GetForecastResponse_TargetItem& this_ = static_cast<const GetForecastResponse_TargetItem&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GetForecastResponse_TargetItem::ByteSizeLong() const {
          const GetForecastResponse_TargetItem& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.GetForecastResponse.TargetItem)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string uid = 1;
            if (!this_._internal_uid().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_uid());
            }
            // string ticker = 2;
            if (!this_._internal_ticker().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_ticker());
            }
            // string company = 3;
            if (!this_._internal_company().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_company());
            }
            // string currency = 6;
            if (!this_._internal_currency().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_currency());
            }
            // string show_name = 11;
            if (!this_._internal_show_name().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_show_name());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x0000001fu) {
            // .google.protobuf.Timestamp recommendation_date = 5;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.recommendation_date_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation current_price = 7;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.current_price_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation target_price = 8;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.target_price_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation price_change = 9;
            if (cached_has_bits & 0x00000008u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.price_change_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation price_change_rel = 10;
            if (cached_has_bits & 0x00000010u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.price_change_rel_);
            }
          }
           {
            // .tinkoff.public.invest.api.contract.v1.Recommendation recommendation = 4;
            if (this_._internal_recommendation() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_recommendation());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GetForecastResponse_TargetItem::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GetForecastResponse_TargetItem*>(&to_msg);
  auto& from = static_cast<const GetForecastResponse_TargetItem&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.GetForecastResponse.TargetItem)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (!from._internal_ticker().empty()) {
    _this->_internal_set_ticker(from._internal_ticker());
  }
  if (!from._internal_company().empty()) {
    _this->_internal_set_company(from._internal_company());
  }
  if (!from._internal_currency().empty()) {
    _this->_internal_set_currency(from._internal_currency());
  }
  if (!from._internal_show_name().empty()) {
    _this->_internal_set_show_name(from._internal_show_name());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000001fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.recommendation_date_ != nullptr);
      if (_this->_impl_.recommendation_date_ == nullptr) {
        _this->_impl_.recommendation_date_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.recommendation_date_);
      } else {
        _this->_impl_.recommendation_date_->MergeFrom(*from._impl_.recommendation_date_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.current_price_ != nullptr);
      if (_this->_impl_.current_price_ == nullptr) {
        _this->_impl_.current_price_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.current_price_);
      } else {
        _this->_impl_.current_price_->MergeFrom(*from._impl_.current_price_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.target_price_ != nullptr);
      if (_this->_impl_.target_price_ == nullptr) {
        _this->_impl_.target_price_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.target_price_);
      } else {
        _this->_impl_.target_price_->MergeFrom(*from._impl_.target_price_);
      }
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(from._impl_.price_change_ != nullptr);
      if (_this->_impl_.price_change_ == nullptr) {
        _this->_impl_.price_change_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.price_change_);
      } else {
        _this->_impl_.price_change_->MergeFrom(*from._impl_.price_change_);
      }
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(from._impl_.price_change_rel_ != nullptr);
      if (_this->_impl_.price_change_rel_ == nullptr) {
        _this->_impl_.price_change_rel_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.price_change_rel_);
      } else {
        _this->_impl_.price_change_rel_->MergeFrom(*from._impl_.price_change_rel_);
      }
    }
  }
  if (from._internal_recommendation() != 0) {
    _this->_impl_.recommendation_ = from._impl_.recommendation_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetForecastResponse_TargetItem::CopyFrom(const GetForecastResponse_TargetItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.GetForecastResponse.TargetItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GetForecastResponse_TargetItem::InternalSwap(GetForecastResponse_TargetItem* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.uid_, &other->_impl_.uid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ticker_, &other->_impl_.ticker_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.company_, &other->_impl_.company_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.currency_, &other->_impl_.currency_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.show_name_, &other->_impl_.show_name_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetForecastResponse_TargetItem, _impl_.recommendation_)
      + sizeof(GetForecastResponse_TargetItem::_impl_.recommendation_)
      - PROTOBUF_FIELD_OFFSET(GetForecastResponse_TargetItem, _impl_.recommendation_date_)>(
          reinterpret_cast<char*>(&_impl_.recommendation_date_),
          reinterpret_cast<char*>(&other->_impl_.recommendation_date_));
}

::google::protobuf::Metadata GetForecastResponse_TargetItem::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GetForecastResponse_ConsensusItem::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GetForecastResponse_ConsensusItem>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GetForecastResponse_ConsensusItem, _impl_._has_bits_);
};

void GetForecastResponse_ConsensusItem::clear_current_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.current_price_ != nullptr) _impl_.current_price_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void GetForecastResponse_ConsensusItem::clear_consensus() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.consensus_ != nullptr) _impl_.consensus_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
void GetForecastResponse_ConsensusItem::clear_min_target() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.min_target_ != nullptr) _impl_.min_target_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
void GetForecastResponse_ConsensusItem::clear_max_target() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.max_target_ != nullptr) _impl_.max_target_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
void GetForecastResponse_ConsensusItem::clear_price_change() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.price_change_ != nullptr) _impl_.price_change_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
void GetForecastResponse_ConsensusItem::clear_price_change_rel() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.price_change_rel_ != nullptr) _impl_.price_change_rel_->Clear();
  _impl_._has_bits_[0] &= ~0x00000020u;
}
GetForecastResponse_ConsensusItem::GetForecastResponse_ConsensusItem(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.GetForecastResponse.ConsensusItem)
}
inline PROTOBUF_NDEBUG_INLINE GetForecastResponse_ConsensusItem::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        uid_(arena, from.uid_),
        ticker_(arena, from.ticker_),
        currency_(arena, from.currency_) {}

GetForecastResponse_ConsensusItem::GetForecastResponse_ConsensusItem(
    ::google::protobuf::Arena* arena,
    const GetForecastResponse_ConsensusItem& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GetForecastResponse_ConsensusItem* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.current_price_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.current_price_)
                        : nullptr;
  _impl_.consensus_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.consensus_)
                        : nullptr;
  _impl_.min_target_ = (cached_has_bits & 0x00000004u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.min_target_)
                        : nullptr;
  _impl_.max_target_ = (cached_has_bits & 0x00000008u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.max_target_)
                        : nullptr;
  _impl_.price_change_ = (cached_has_bits & 0x00000010u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.price_change_)
                        : nullptr;
  _impl_.price_change_rel_ = (cached_has_bits & 0x00000020u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(
                              arena, *from._impl_.price_change_rel_)
                        : nullptr;
  _impl_.recommendation_ = from._impl_.recommendation_;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.GetForecastResponse.ConsensusItem)
}
inline PROTOBUF_NDEBUG_INLINE GetForecastResponse_ConsensusItem::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        uid_(arena),
        ticker_(arena),
        currency_(arena) {}

inline void GetForecastResponse_ConsensusItem::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, current_price_),
           0,
           offsetof(Impl_, recommendation_) -
               offsetof(Impl_, current_price_) +
               sizeof(Impl_::recommendation_));
}
GetForecastResponse_ConsensusItem::~GetForecastResponse_ConsensusItem() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.GetForecastResponse.ConsensusItem)
  SharedDtor(*this);
}
inline void GetForecastResponse_ConsensusItem::SharedDtor(MessageLite& self) {
  GetForecastResponse_ConsensusItem& this_ = static_cast<GetForecastResponse_ConsensusItem&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.uid_.Destroy();
  this_._impl_.ticker_.Destroy();
  this_._impl_.currency_.Destroy();
  delete this_._impl_.current_price_;
  delete this_._impl_.consensus_;
  delete this_._impl_.min_target_;
  delete this_._impl_.max_target_;
  delete this_._impl_.price_change_;
  delete this_._impl_.price_change_rel_;
  this_._impl_.~Impl_();
}

inline void* GetForecastResponse_ConsensusItem::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) GetForecastResponse_ConsensusItem(arena);
}
constexpr auto GetForecastResponse_ConsensusItem::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(GetForecastResponse_ConsensusItem),
                                            alignof(GetForecastResponse_ConsensusItem));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull GetForecastResponse_ConsensusItem::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_GetForecastResponse_ConsensusItem_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &GetForecastResponse_ConsensusItem::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<GetForecastResponse_ConsensusItem>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &GetForecastResponse_ConsensusItem::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<GetForecastResponse_ConsensusItem>(), &GetForecastResponse_ConsensusItem::ByteSizeLong,
            &GetForecastResponse_ConsensusItem::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(GetForecastResponse_ConsensusItem, _impl_._cached_size_),
        false,
    },
    &GetForecastResponse_ConsensusItem::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* GetForecastResponse_ConsensusItem::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<4, 10, 6, 105, 2> GetForecastResponse_ConsensusItem::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetForecastResponse_ConsensusItem, _impl_._has_bits_),
    0, // no _extensions_
    10, 120,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294966272,  // skipmap
    offsetof(decltype(_table_), field_entries),
    10,  // num_field_entries
    6,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    {::_pbi::TcParser::MiniParse, {}},
    // string uid = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetForecastResponse_ConsensusItem, _impl_.uid_)}},
    // string ticker = 2;
    {::_pbi::TcParser::FastUS1,
     {18, 63, 0, PROTOBUF_FIELD_OFFSET(GetForecastResponse_ConsensusItem, _impl_.ticker_)}},
    // .tinkoff.public.invest.api.contract.v1.Recommendation recommendation = 3;
    {::_pbi::TcParser::SingularVarintNoZag1<::uint32_t, offsetof(GetForecastResponse_ConsensusItem, _impl_.recommendation_), 63>(),
     {24, 63, 0, PROTOBUF_FIELD_OFFSET(GetForecastResponse_ConsensusItem, _impl_.recommendation_)}},
    // string currency = 4;
    {::_pbi::TcParser::FastUS1,
     {34, 63, 0, PROTOBUF_FIELD_OFFSET(GetForecastResponse_ConsensusItem, _impl_.currency_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation current_price = 5;
    {::_pbi::TcParser::FastMtS1,
     {42, 0, 0, PROTOBUF_FIELD_OFFSET(GetForecastResponse_ConsensusItem, _impl_.current_price_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation consensus = 6;
    {::_pbi::TcParser::FastMtS1,
     {50, 1, 1, PROTOBUF_FIELD_OFFSET(GetForecastResponse_ConsensusItem, _impl_.consensus_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation min_target = 7;
    {::_pbi::TcParser::FastMtS1,
     {58, 2, 2, PROTOBUF_FIELD_OFFSET(GetForecastResponse_ConsensusItem, _impl_.min_target_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation max_target = 8;
    {::_pbi::TcParser::FastMtS1,
     {66, 3, 3, PROTOBUF_FIELD_OFFSET(GetForecastResponse_ConsensusItem, _impl_.max_target_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation price_change = 9;
    {::_pbi::TcParser::FastMtS1,
     {74, 4, 4, PROTOBUF_FIELD_OFFSET(GetForecastResponse_ConsensusItem, _impl_.price_change_)}},
    // .tinkoff.public.invest.api.contract.v1.Quotation price_change_rel = 10;
    {::_pbi::TcParser::FastMtS1,
     {82, 5, 5, PROTOBUF_FIELD_OFFSET(GetForecastResponse_ConsensusItem, _impl_.price_change_rel_)}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
    {::_pbi::TcParser::MiniParse, {}},
  }}, {{
    65535, 65535
  }}, {{
    // string uid = 1;
    {PROTOBUF_FIELD_OFFSET(GetForecastResponse_ConsensusItem, _impl_.uid_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // string ticker = 2;
    {PROTOBUF_FIELD_OFFSET(GetForecastResponse_ConsensusItem, _impl_.ticker_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public.invest.api.contract.v1.Recommendation recommendation = 3;
    {PROTOBUF_FIELD_OFFSET(GetForecastResponse_ConsensusItem, _impl_.recommendation_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kOpenEnum)},
    // string currency = 4;
    {PROTOBUF_FIELD_OFFSET(GetForecastResponse_ConsensusItem, _impl_.currency_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public.invest.api.contract.v1.Quotation current_price = 5;
    {PROTOBUF_FIELD_OFFSET(GetForecastResponse_ConsensusItem, _impl_.current_price_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation consensus = 6;
    {PROTOBUF_FIELD_OFFSET(GetForecastResponse_ConsensusItem, _impl_.consensus_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation min_target = 7;
    {PROTOBUF_FIELD_OFFSET(GetForecastResponse_ConsensusItem, _impl_.min_target_), _Internal::kHasBitsOffset + 2, 2,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation max_target = 8;
    {PROTOBUF_FIELD_OFFSET(GetForecastResponse_ConsensusItem, _impl_.max_target_), _Internal::kHasBitsOffset + 3, 3,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation price_change = 9;
    {PROTOBUF_FIELD_OFFSET(GetForecastResponse_ConsensusItem, _impl_.price_change_), _Internal::kHasBitsOffset + 4, 4,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.Quotation price_change_rel = 10;
    {PROTOBUF_FIELD_OFFSET(GetForecastResponse_ConsensusItem, _impl_.price_change_rel_), _Internal::kHasBitsOffset + 5, 5,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::Quotation>()},
  }}, {{
    "\107\3\6\0\10\0\0\0\0\0\0\0\0\0\0\0"
    "tinkoff.public.invest.api.contract.v1.GetForecastResponse.ConsensusItem"
    "uid"
    "ticker"
    "currency"
  }},
};

PROTOBUF_NOINLINE void GetForecastResponse_ConsensusItem::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.GetForecastResponse.ConsensusItem)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.uid_.ClearToEmpty();
  _impl_.ticker_.ClearToEmpty();
  _impl_.currency_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.current_price_ != nullptr);
      _impl_.current_price_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.consensus_ != nullptr);
      _impl_.consensus_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(_impl_.min_target_ != nullptr);
      _impl_.min_target_->Clear();
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(_impl_.max_target_ != nullptr);
      _impl_.max_target_->Clear();
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(_impl_.price_change_ != nullptr);
      _impl_.price_change_->Clear();
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(_impl_.price_change_rel_ != nullptr);
      _impl_.price_change_rel_->Clear();
    }
  }
  _impl_.recommendation_ = 0;
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GetForecastResponse_ConsensusItem::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GetForecastResponse_ConsensusItem& this_ = static_cast<const GetForecastResponse_ConsensusItem&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GetForecastResponse_ConsensusItem::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GetForecastResponse_ConsensusItem& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.GetForecastResponse.ConsensusItem)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string uid = 1;
          if (!this_._internal_uid().empty()) {
            const std::string& _s = this_._internal_uid();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.GetForecastResponse.ConsensusItem.uid");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          // string ticker = 2;
          if (!this_._internal_ticker().empty()) {
            const std::string& _s = this_._internal_ticker();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.GetForecastResponse.ConsensusItem.ticker");
            target = stream->WriteStringMaybeAliased(2, _s, target);
          }

          // .tinkoff.public.invest.api.contract.v1.Recommendation recommendation = 3;
          if (this_._internal_recommendation() != 0) {
            target = stream->EnsureSpace(target);
            target = ::_pbi::WireFormatLite::WriteEnumToArray(
                3, this_._internal_recommendation(), target);
          }

          // string currency = 4;
          if (!this_._internal_currency().empty()) {
            const std::string& _s = this_._internal_currency();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.GetForecastResponse.ConsensusItem.currency");
            target = stream->WriteStringMaybeAliased(4, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .tinkoff.public.invest.api.contract.v1.Quotation current_price = 5;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                5, *this_._impl_.current_price_, this_._impl_.current_price_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation consensus = 6;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                6, *this_._impl_.consensus_, this_._impl_.consensus_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation min_target = 7;
          if (cached_has_bits & 0x00000004u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                7, *this_._impl_.min_target_, this_._impl_.min_target_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation max_target = 8;
          if (cached_has_bits & 0x00000008u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                8, *this_._impl_.max_target_, this_._impl_.max_target_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation price_change = 9;
          if (cached_has_bits & 0x00000010u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                9, *this_._impl_.price_change_, this_._impl_.price_change_->GetCachedSize(), target,
                stream);
          }

          // .tinkoff.public.invest.api.contract.v1.Quotation price_change_rel = 10;
          if (cached_has_bits & 0x00000020u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                10, *this_._impl_.price_change_rel_, this_._impl_.price_change_rel_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.GetForecastResponse.ConsensusItem)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GetForecastResponse_ConsensusItem::ByteSizeLong(const MessageLite& base) {
          const GetForecastResponse_ConsensusItem& this_ = static_cast<const GetForecastResponse_ConsensusItem&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GetForecastResponse_ConsensusItem::ByteSizeLong() const {
          const GetForecastResponse_ConsensusItem& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.GetForecastResponse.ConsensusItem)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string uid = 1;
            if (!this_._internal_uid().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_uid());
            }
            // string ticker = 2;
            if (!this_._internal_ticker().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_ticker());
            }
            // string currency = 4;
            if (!this_._internal_currency().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_currency());
            }
          }
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x0000003fu) {
            // .tinkoff.public.invest.api.contract.v1.Quotation current_price = 5;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.current_price_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation consensus = 6;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.consensus_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation min_target = 7;
            if (cached_has_bits & 0x00000004u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.min_target_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation max_target = 8;
            if (cached_has_bits & 0x00000008u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.max_target_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation price_change = 9;
            if (cached_has_bits & 0x00000010u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.price_change_);
            }
            // .tinkoff.public.invest.api.contract.v1.Quotation price_change_rel = 10;
            if (cached_has_bits & 0x00000020u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.price_change_rel_);
            }
          }
           {
            // .tinkoff.public.invest.api.contract.v1.Recommendation recommendation = 3;
            if (this_._internal_recommendation() != 0) {
              total_size += 1 +
                            ::_pbi::WireFormatLite::EnumSize(this_._internal_recommendation());
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GetForecastResponse_ConsensusItem::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GetForecastResponse_ConsensusItem*>(&to_msg);
  auto& from = static_cast<const GetForecastResponse_ConsensusItem&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.GetForecastResponse.ConsensusItem)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_uid().empty()) {
    _this->_internal_set_uid(from._internal_uid());
  }
  if (!from._internal_ticker().empty()) {
    _this->_internal_set_ticker(from._internal_ticker());
  }
  if (!from._internal_currency().empty()) {
    _this->_internal_set_currency(from._internal_currency());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x0000003fu) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.current_price_ != nullptr);
      if (_this->_impl_.current_price_ == nullptr) {
        _this->_impl_.current_price_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.current_price_);
      } else {
        _this->_impl_.current_price_->MergeFrom(*from._impl_.current_price_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.consensus_ != nullptr);
      if (_this->_impl_.consensus_ == nullptr) {
        _this->_impl_.consensus_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.consensus_);
      } else {
        _this->_impl_.consensus_->MergeFrom(*from._impl_.consensus_);
      }
    }
    if (cached_has_bits & 0x00000004u) {
      ABSL_DCHECK(from._impl_.min_target_ != nullptr);
      if (_this->_impl_.min_target_ == nullptr) {
        _this->_impl_.min_target_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.min_target_);
      } else {
        _this->_impl_.min_target_->MergeFrom(*from._impl_.min_target_);
      }
    }
    if (cached_has_bits & 0x00000008u) {
      ABSL_DCHECK(from._impl_.max_target_ != nullptr);
      if (_this->_impl_.max_target_ == nullptr) {
        _this->_impl_.max_target_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.max_target_);
      } else {
        _this->_impl_.max_target_->MergeFrom(*from._impl_.max_target_);
      }
    }
    if (cached_has_bits & 0x00000010u) {
      ABSL_DCHECK(from._impl_.price_change_ != nullptr);
      if (_this->_impl_.price_change_ == nullptr) {
        _this->_impl_.price_change_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.price_change_);
      } else {
        _this->_impl_.price_change_->MergeFrom(*from._impl_.price_change_);
      }
    }
    if (cached_has_bits & 0x00000020u) {
      ABSL_DCHECK(from._impl_.price_change_rel_ != nullptr);
      if (_this->_impl_.price_change_rel_ == nullptr) {
        _this->_impl_.price_change_rel_ =
            ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::Quotation>(arena, *from._impl_.price_change_rel_);
      } else {
        _this->_impl_.price_change_rel_->MergeFrom(*from._impl_.price_change_rel_);
      }
    }
  }
  if (from._internal_recommendation() != 0) {
    _this->_impl_.recommendation_ = from._impl_.recommendation_;
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetForecastResponse_ConsensusItem::CopyFrom(const GetForecastResponse_ConsensusItem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.GetForecastResponse.ConsensusItem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GetForecastResponse_ConsensusItem::InternalSwap(GetForecastResponse_ConsensusItem* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.uid_, &other->_impl_.uid_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.ticker_, &other->_impl_.ticker_, arena);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.currency_, &other->_impl_.currency_, arena);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(GetForecastResponse_ConsensusItem, _impl_.recommendation_)
      + sizeof(GetForecastResponse_ConsensusItem::_impl_.recommendation_)
      - PROTOBUF_FIELD_OFFSET(GetForecastResponse_ConsensusItem, _impl_.current_price_)>(
          reinterpret_cast<char*>(&_impl_.current_price_),
          reinterpret_cast<char*>(&other->_impl_.current_price_));
}

::google::protobuf::Metadata GetForecastResponse_ConsensusItem::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class GetForecastResponse::_Internal {
 public:
  using HasBits =
      decltype(std::declval<GetForecastResponse>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(GetForecastResponse, _impl_._has_bits_);
};

GetForecastResponse::GetForecastResponse(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.GetForecastResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetForecastResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::GetForecastResponse& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        targets_{visibility, arena, from.targets_} {}

GetForecastResponse::GetForecastResponse(
    ::google::protobuf::Arena* arena,
    const GetForecastResponse& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  GetForecastResponse* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.consensus_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem>(
                              arena, *from._impl_.consensus_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.GetForecastResponse)
}
inline PROTOBUF_NDEBUG_INLINE GetForecastResponse::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        targets_{visibility, arena} {}

inline void GetForecastResponse::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.consensus_ = {};
}
GetForecastResponse::~GetForecastResponse() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.GetForecastResponse)
  SharedDtor(*this);
}
inline void GetForecastResponse::SharedDtor(MessageLite& self) {
  GetForecastResponse& this_ = static_cast<GetForecastResponse&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.consensus_;
  this_._impl_.~Impl_();
}

inline void* GetForecastResponse::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) GetForecastResponse(arena);
}
constexpr auto GetForecastResponse::InternalNewImpl_() {
  constexpr auto arena_bits = ::google::protobuf::internal::EncodePlacementArenaOffsets({
      PROTOBUF_FIELD_OFFSET(GetForecastResponse, _impl_.targets_) +
          decltype(GetForecastResponse::_impl_.targets_)::
              InternalGetArenaOffset(
                  ::google::protobuf::Message::internal_visibility()),
  });
  if (arena_bits.has_value()) {
    return ::google::protobuf::internal::MessageCreator::ZeroInit(
        sizeof(GetForecastResponse), alignof(GetForecastResponse), *arena_bits);
  } else {
    return ::google::protobuf::internal::MessageCreator(&GetForecastResponse::PlacementNew_,
                                 sizeof(GetForecastResponse),
                                 alignof(GetForecastResponse));
  }
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull GetForecastResponse::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_GetForecastResponse_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &GetForecastResponse::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<GetForecastResponse>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &GetForecastResponse::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<GetForecastResponse>(), &GetForecastResponse::ByteSizeLong,
            &GetForecastResponse::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(GetForecastResponse, _impl_._cached_size_),
        false,
    },
    &GetForecastResponse::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* GetForecastResponse::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> GetForecastResponse::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(GetForecastResponse, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::GetForecastResponse>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .tinkoff.public.invest.api.contract.v1.GetForecastResponse.ConsensusItem consensus = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 1, PROTOBUF_FIELD_OFFSET(GetForecastResponse, _impl_.consensus_)}},
    // repeated .tinkoff.public.invest.api.contract.v1.GetForecastResponse.TargetItem targets = 1;
    {::_pbi::TcParser::FastMtR1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(GetForecastResponse, _impl_.targets_)}},
  }}, {{
    65535, 65535
  }}, {{
    // repeated .tinkoff.public.invest.api.contract.v1.GetForecastResponse.TargetItem targets = 1;
    {PROTOBUF_FIELD_OFFSET(GetForecastResponse, _impl_.targets_), -1, 0,
    (0 | ::_fl::kFcRepeated | ::_fl::kMessage | ::_fl::kTvTable)},
    // .tinkoff.public.invest.api.contract.v1.GetForecastResponse.ConsensusItem consensus = 2;
    {PROTOBUF_FIELD_OFFSET(GetForecastResponse, _impl_.consensus_), _Internal::kHasBitsOffset + 0, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_TargetItem>()},
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void GetForecastResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.GetForecastResponse)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.targets_.Clear();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.consensus_ != nullptr);
    _impl_.consensus_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* GetForecastResponse::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const GetForecastResponse& this_ = static_cast<const GetForecastResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* GetForecastResponse::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const GetForecastResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.GetForecastResponse)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // repeated .tinkoff.public.invest.api.contract.v1.GetForecastResponse.TargetItem targets = 1;
          for (unsigned i = 0, n = static_cast<unsigned>(
                                   this_._internal_targets_size());
               i < n; i++) {
            const auto& repfield = this_._internal_targets().Get(i);
            target =
                ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                    1, repfield, repfield.GetCachedSize(),
                    target, stream);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .tinkoff.public.invest.api.contract.v1.GetForecastResponse.ConsensusItem consensus = 2;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.consensus_, this_._impl_.consensus_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.GetForecastResponse)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t GetForecastResponse::ByteSizeLong(const MessageLite& base) {
          const GetForecastResponse& this_ = static_cast<const GetForecastResponse&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t GetForecastResponse::ByteSizeLong() const {
          const GetForecastResponse& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.GetForecastResponse)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // repeated .tinkoff.public.invest.api.contract.v1.GetForecastResponse.TargetItem targets = 1;
            {
              total_size += 1UL * this_._internal_targets_size();
              for (const auto& msg : this_._internal_targets()) {
                total_size += ::google::protobuf::internal::WireFormatLite::MessageSize(msg);
              }
            }
          }
           {
            // .tinkoff.public.invest.api.contract.v1.GetForecastResponse.ConsensusItem consensus = 2;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.consensus_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void GetForecastResponse::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<GetForecastResponse*>(&to_msg);
  auto& from = static_cast<const GetForecastResponse&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.GetForecastResponse)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  _this->_internal_mutable_targets()->MergeFrom(
      from._internal_targets());
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.consensus_ != nullptr);
    if (_this->_impl_.consensus_ == nullptr) {
      _this->_impl_.consensus_ =
          ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::GetForecastResponse_ConsensusItem>(arena, *from._impl_.consensus_);
    } else {
      _this->_impl_.consensus_->MergeFrom(*from._impl_.consensus_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void GetForecastResponse::CopyFrom(const GetForecastResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.GetForecastResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void GetForecastResponse::InternalSwap(GetForecastResponse* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  _impl_.targets_.InternalSwap(&other->_impl_.targets_);
  swap(_impl_.consensus_, other->_impl_.consensus_);
}

::google::protobuf::Metadata GetForecastResponse::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TradingInterval_TimeInterval::_Internal {
 public:
  using HasBits =
      decltype(std::declval<TradingInterval_TimeInterval>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(TradingInterval_TimeInterval, _impl_._has_bits_);
};

void TradingInterval_TimeInterval::clear_start_ts() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.start_ts_ != nullptr) _impl_.start_ts_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
void TradingInterval_TimeInterval::clear_end_ts() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.end_ts_ != nullptr) _impl_.end_ts_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
TradingInterval_TimeInterval::TradingInterval_TimeInterval(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.TradingInterval.TimeInterval)
}
inline PROTOBUF_NDEBUG_INLINE TradingInterval_TimeInterval::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::TradingInterval_TimeInterval& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0} {}

TradingInterval_TimeInterval::TradingInterval_TimeInterval(
    ::google::protobuf::Arena* arena,
    const TradingInterval_TimeInterval& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TradingInterval_TimeInterval* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.start_ts_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.start_ts_)
                        : nullptr;
  _impl_.end_ts_ = (cached_has_bits & 0x00000002u) ? ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(
                              arena, *from._impl_.end_ts_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.TradingInterval.TimeInterval)
}
inline PROTOBUF_NDEBUG_INLINE TradingInterval_TimeInterval::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0} {}

inline void TradingInterval_TimeInterval::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  ::memset(reinterpret_cast<char *>(&_impl_) +
               offsetof(Impl_, start_ts_),
           0,
           offsetof(Impl_, end_ts_) -
               offsetof(Impl_, start_ts_) +
               sizeof(Impl_::end_ts_));
}
TradingInterval_TimeInterval::~TradingInterval_TimeInterval() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.TradingInterval.TimeInterval)
  SharedDtor(*this);
}
inline void TradingInterval_TimeInterval::SharedDtor(MessageLite& self) {
  TradingInterval_TimeInterval& this_ = static_cast<TradingInterval_TimeInterval&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  delete this_._impl_.start_ts_;
  delete this_._impl_.end_ts_;
  this_._impl_.~Impl_();
}

inline void* TradingInterval_TimeInterval::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) TradingInterval_TimeInterval(arena);
}
constexpr auto TradingInterval_TimeInterval::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::ZeroInit(sizeof(TradingInterval_TimeInterval),
                                            alignof(TradingInterval_TimeInterval));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull TradingInterval_TimeInterval::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_TradingInterval_TimeInterval_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &TradingInterval_TimeInterval::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<TradingInterval_TimeInterval>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &TradingInterval_TimeInterval::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<TradingInterval_TimeInterval>(), &TradingInterval_TimeInterval::ByteSizeLong,
            &TradingInterval_TimeInterval::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(TradingInterval_TimeInterval, _impl_._cached_size_),
        false,
    },
    &TradingInterval_TimeInterval::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* TradingInterval_TimeInterval::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 2, 0, 2> TradingInterval_TimeInterval::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TradingInterval_TimeInterval, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    2,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::TradingInterval_TimeInterval>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .google.protobuf.Timestamp end_ts = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 1, 1, PROTOBUF_FIELD_OFFSET(TradingInterval_TimeInterval, _impl_.end_ts_)}},
    // .google.protobuf.Timestamp start_ts = 1;
    {::_pbi::TcParser::FastMtS1,
     {10, 0, 0, PROTOBUF_FIELD_OFFSET(TradingInterval_TimeInterval, _impl_.start_ts_)}},
  }}, {{
    65535, 65535
  }}, {{
    // .google.protobuf.Timestamp start_ts = 1;
    {PROTOBUF_FIELD_OFFSET(TradingInterval_TimeInterval, _impl_.start_ts_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
    // .google.protobuf.Timestamp end_ts = 2;
    {PROTOBUF_FIELD_OFFSET(TradingInterval_TimeInterval, _impl_.end_ts_), _Internal::kHasBitsOffset + 1, 1,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
    {::_pbi::TcParser::GetTable<::google::protobuf::Timestamp>()},
  }}, {{
  }},
};

PROTOBUF_NOINLINE void TradingInterval_TimeInterval::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.TradingInterval.TimeInterval)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(_impl_.start_ts_ != nullptr);
      _impl_.start_ts_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(_impl_.end_ts_ != nullptr);
      _impl_.end_ts_->Clear();
    }
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* TradingInterval_TimeInterval::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const TradingInterval_TimeInterval& this_ = static_cast<const TradingInterval_TimeInterval&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* TradingInterval_TimeInterval::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const TradingInterval_TimeInterval& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.TradingInterval.TimeInterval)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          cached_has_bits = this_._impl_._has_bits_[0];
          // .google.protobuf.Timestamp start_ts = 1;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                1, *this_._impl_.start_ts_, this_._impl_.start_ts_->GetCachedSize(), target,
                stream);
          }

          // .google.protobuf.Timestamp end_ts = 2;
          if (cached_has_bits & 0x00000002u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.end_ts_, this_._impl_.end_ts_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.TradingInterval.TimeInterval)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t TradingInterval_TimeInterval::ByteSizeLong(const MessageLite& base) {
          const TradingInterval_TimeInterval& this_ = static_cast<const TradingInterval_TimeInterval&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t TradingInterval_TimeInterval::ByteSizeLong() const {
          const TradingInterval_TimeInterval& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.TradingInterval.TimeInterval)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
          cached_has_bits = this_._impl_._has_bits_[0];
          if (cached_has_bits & 0x00000003u) {
            // .google.protobuf.Timestamp start_ts = 1;
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.start_ts_);
            }
            // .google.protobuf.Timestamp end_ts = 2;
            if (cached_has_bits & 0x00000002u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.end_ts_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void TradingInterval_TimeInterval::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TradingInterval_TimeInterval*>(&to_msg);
  auto& from = static_cast<const TradingInterval_TimeInterval&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.TradingInterval.TimeInterval)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000003u) {
    if (cached_has_bits & 0x00000001u) {
      ABSL_DCHECK(from._impl_.start_ts_ != nullptr);
      if (_this->_impl_.start_ts_ == nullptr) {
        _this->_impl_.start_ts_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.start_ts_);
      } else {
        _this->_impl_.start_ts_->MergeFrom(*from._impl_.start_ts_);
      }
    }
    if (cached_has_bits & 0x00000002u) {
      ABSL_DCHECK(from._impl_.end_ts_ != nullptr);
      if (_this->_impl_.end_ts_ == nullptr) {
        _this->_impl_.end_ts_ =
            ::google::protobuf::Message::CopyConstruct<::google::protobuf::Timestamp>(arena, *from._impl_.end_ts_);
      } else {
        _this->_impl_.end_ts_->MergeFrom(*from._impl_.end_ts_);
      }
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TradingInterval_TimeInterval::CopyFrom(const TradingInterval_TimeInterval& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.TradingInterval.TimeInterval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TradingInterval_TimeInterval::InternalSwap(TradingInterval_TimeInterval* PROTOBUF_RESTRICT other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::google::protobuf::internal::memswap<
      PROTOBUF_FIELD_OFFSET(TradingInterval_TimeInterval, _impl_.end_ts_)
      + sizeof(TradingInterval_TimeInterval::_impl_.end_ts_)
      - PROTOBUF_FIELD_OFFSET(TradingInterval_TimeInterval, _impl_.start_ts_)>(
          reinterpret_cast<char*>(&_impl_.start_ts_),
          reinterpret_cast<char*>(&other->_impl_.start_ts_));
}

::google::protobuf::Metadata TradingInterval_TimeInterval::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// ===================================================================

class TradingInterval::_Internal {
 public:
  using HasBits =
      decltype(std::declval<TradingInterval>()._impl_._has_bits_);
  static constexpr ::int32_t kHasBitsOffset =
      8 * PROTOBUF_FIELD_OFFSET(TradingInterval, _impl_._has_bits_);
};

TradingInterval::TradingInterval(::google::protobuf::Arena* arena)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  SharedCtor(arena);
  // @@protoc_insertion_point(arena_constructor:tinkoff.public.invest.api.contract.v1.TradingInterval)
}
inline PROTOBUF_NDEBUG_INLINE TradingInterval::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility, ::google::protobuf::Arena* arena,
    const Impl_& from, const ::tinkoff::public_::invest::api::contract::v1::TradingInterval& from_msg)
      : _has_bits_{from._has_bits_},
        _cached_size_{0},
        type_(arena, from.type_) {}

TradingInterval::TradingInterval(
    ::google::protobuf::Arena* arena,
    const TradingInterval& from)
#if defined(PROTOBUF_CUSTOM_VTABLE)
    : ::google::protobuf::Message(arena, _class_data_.base()) {
#else   // PROTOBUF_CUSTOM_VTABLE
    : ::google::protobuf::Message(arena) {
#endif  // PROTOBUF_CUSTOM_VTABLE
  TradingInterval* const _this = this;
  (void)_this;
  _internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(
      from._internal_metadata_);
  new (&_impl_) Impl_(internal_visibility(), arena, from._impl_, from);
  ::uint32_t cached_has_bits = _impl_._has_bits_[0];
  _impl_.interval_ = (cached_has_bits & 0x00000001u) ? ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::TradingInterval_TimeInterval>(
                              arena, *from._impl_.interval_)
                        : nullptr;

  // @@protoc_insertion_point(copy_constructor:tinkoff.public.invest.api.contract.v1.TradingInterval)
}
inline PROTOBUF_NDEBUG_INLINE TradingInterval::Impl_::Impl_(
    ::google::protobuf::internal::InternalVisibility visibility,
    ::google::protobuf::Arena* arena)
      : _cached_size_{0},
        type_(arena) {}

inline void TradingInterval::SharedCtor(::_pb::Arena* arena) {
  new (&_impl_) Impl_(internal_visibility(), arena);
  _impl_.interval_ = {};
}
TradingInterval::~TradingInterval() {
  // @@protoc_insertion_point(destructor:tinkoff.public.invest.api.contract.v1.TradingInterval)
  SharedDtor(*this);
}
inline void TradingInterval::SharedDtor(MessageLite& self) {
  TradingInterval& this_ = static_cast<TradingInterval&>(self);
  this_._internal_metadata_.Delete<::google::protobuf::UnknownFieldSet>();
  ABSL_DCHECK(this_.GetArena() == nullptr);
  this_._impl_.type_.Destroy();
  delete this_._impl_.interval_;
  this_._impl_.~Impl_();
}

inline void* TradingInterval::PlacementNew_(const void*, void* mem,
                                        ::google::protobuf::Arena* arena) {
  return ::new (mem) TradingInterval(arena);
}
constexpr auto TradingInterval::InternalNewImpl_() {
  return ::google::protobuf::internal::MessageCreator::CopyInit(sizeof(TradingInterval),
                                            alignof(TradingInterval));
}
PROTOBUF_CONSTINIT
PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::google::protobuf::internal::ClassDataFull TradingInterval::_class_data_ = {
    ::google::protobuf::internal::ClassData{
        &_TradingInterval_default_instance_._instance,
        &_table_.header,
        nullptr,  // OnDemandRegisterArenaDtor
        nullptr,  // IsInitialized
        &TradingInterval::MergeImpl,
        ::google::protobuf::Message::GetNewImpl<TradingInterval>(),
#if defined(PROTOBUF_CUSTOM_VTABLE)
        &TradingInterval::SharedDtor,
        ::google::protobuf::Message::GetClearImpl<TradingInterval>(), &TradingInterval::ByteSizeLong,
            &TradingInterval::_InternalSerialize,
#endif  // PROTOBUF_CUSTOM_VTABLE
        PROTOBUF_FIELD_OFFSET(TradingInterval, _impl_._cached_size_),
        false,
    },
    &TradingInterval::kDescriptorMethods,
    &descriptor_table_instruments_2eproto,
    nullptr,  // tracker
};
const ::google::protobuf::internal::ClassData* TradingInterval::GetClassData() const {
  ::google::protobuf::internal::PrefetchToLocalCache(&_class_data_);
  ::google::protobuf::internal::PrefetchToLocalCache(_class_data_.tc_table);
  return _class_data_.base();
}
PROTOBUF_CONSTINIT PROTOBUF_ATTRIBUTE_INIT_PRIORITY1
const ::_pbi::TcParseTable<1, 2, 1, 66, 2> TradingInterval::_table_ = {
  {
    PROTOBUF_FIELD_OFFSET(TradingInterval, _impl_._has_bits_),
    0, // no _extensions_
    2, 8,  // max_field_number, fast_idx_mask
    offsetof(decltype(_table_), field_lookup_table),
    4294967292,  // skipmap
    offsetof(decltype(_table_), field_entries),
    2,  // num_field_entries
    1,  // num_aux_entries
    offsetof(decltype(_table_), aux_entries),
    _class_data_.base(),
    nullptr,  // post_loop_handler
    ::_pbi::TcParser::GenericFallback,  // fallback
    #ifdef PROTOBUF_PREFETCH_PARSE_TABLE
    ::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::TradingInterval>(),  // to_prefetch
    #endif  // PROTOBUF_PREFETCH_PARSE_TABLE
  }, {{
    // .tinkoff.public.invest.api.contract.v1.TradingInterval.TimeInterval interval = 2;
    {::_pbi::TcParser::FastMtS1,
     {18, 0, 0, PROTOBUF_FIELD_OFFSET(TradingInterval, _impl_.interval_)}},
    // string type = 1;
    {::_pbi::TcParser::FastUS1,
     {10, 63, 0, PROTOBUF_FIELD_OFFSET(TradingInterval, _impl_.type_)}},
  }}, {{
    65535, 65535
  }}, {{
    // string type = 1;
    {PROTOBUF_FIELD_OFFSET(TradingInterval, _impl_.type_), -1, 0,
    (0 | ::_fl::kFcSingular | ::_fl::kUtf8String | ::_fl::kRepAString)},
    // .tinkoff.public.invest.api.contract.v1.TradingInterval.TimeInterval interval = 2;
    {PROTOBUF_FIELD_OFFSET(TradingInterval, _impl_.interval_), _Internal::kHasBitsOffset + 0, 0,
    (0 | ::_fl::kFcOptional | ::_fl::kMessage | ::_fl::kTvTable)},
  }}, {{
    {::_pbi::TcParser::GetTable<::tinkoff::public_::invest::api::contract::v1::TradingInterval_TimeInterval>()},
  }}, {{
    "\65\4\0\0\0\0\0\0"
    "tinkoff.public.invest.api.contract.v1.TradingInterval"
    "type"
  }},
};

PROTOBUF_NOINLINE void TradingInterval::Clear() {
// @@protoc_insertion_point(message_clear_start:tinkoff.public.invest.api.contract.v1.TradingInterval)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _impl_.type_.ClearToEmpty();
  cached_has_bits = _impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(_impl_.interval_ != nullptr);
    _impl_.interval_->Clear();
  }
  _impl_._has_bits_.Clear();
  _internal_metadata_.Clear<::google::protobuf::UnknownFieldSet>();
}

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::uint8_t* TradingInterval::_InternalSerialize(
            const MessageLite& base, ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) {
          const TradingInterval& this_ = static_cast<const TradingInterval&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::uint8_t* TradingInterval::_InternalSerialize(
            ::uint8_t* target,
            ::google::protobuf::io::EpsCopyOutputStream* stream) const {
          const TradingInterval& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(serialize_to_array_start:tinkoff.public.invest.api.contract.v1.TradingInterval)
          ::uint32_t cached_has_bits = 0;
          (void)cached_has_bits;

          // string type = 1;
          if (!this_._internal_type().empty()) {
            const std::string& _s = this_._internal_type();
            ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
                _s.data(), static_cast<int>(_s.length()), ::google::protobuf::internal::WireFormatLite::SERIALIZE, "tinkoff.public.invest.api.contract.v1.TradingInterval.type");
            target = stream->WriteStringMaybeAliased(1, _s, target);
          }

          cached_has_bits = this_._impl_._has_bits_[0];
          // .tinkoff.public.invest.api.contract.v1.TradingInterval.TimeInterval interval = 2;
          if (cached_has_bits & 0x00000001u) {
            target = ::google::protobuf::internal::WireFormatLite::InternalWriteMessage(
                2, *this_._impl_.interval_, this_._impl_.interval_->GetCachedSize(), target,
                stream);
          }

          if (PROTOBUF_PREDICT_FALSE(this_._internal_metadata_.have_unknown_fields())) {
            target =
                ::_pbi::WireFormat::InternalSerializeUnknownFieldsToArray(
                    this_._internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance), target, stream);
          }
          // @@protoc_insertion_point(serialize_to_array_end:tinkoff.public.invest.api.contract.v1.TradingInterval)
          return target;
        }

#if defined(PROTOBUF_CUSTOM_VTABLE)
        ::size_t TradingInterval::ByteSizeLong(const MessageLite& base) {
          const TradingInterval& this_ = static_cast<const TradingInterval&>(base);
#else   // PROTOBUF_CUSTOM_VTABLE
        ::size_t TradingInterval::ByteSizeLong() const {
          const TradingInterval& this_ = *this;
#endif  // PROTOBUF_CUSTOM_VTABLE
          // @@protoc_insertion_point(message_byte_size_start:tinkoff.public.invest.api.contract.v1.TradingInterval)
          ::size_t total_size = 0;

          ::uint32_t cached_has_bits = 0;
          // Prevent compiler warnings about cached_has_bits being unused
          (void)cached_has_bits;

          ::_pbi::Prefetch5LinesFrom7Lines(&this_);
           {
            // string type = 1;
            if (!this_._internal_type().empty()) {
              total_size += 1 + ::google::protobuf::internal::WireFormatLite::StringSize(
                                              this_._internal_type());
            }
          }
           {
            // .tinkoff.public.invest.api.contract.v1.TradingInterval.TimeInterval interval = 2;
            cached_has_bits = this_._impl_._has_bits_[0];
            if (cached_has_bits & 0x00000001u) {
              total_size += 1 +
                            ::google::protobuf::internal::WireFormatLite::MessageSize(*this_._impl_.interval_);
            }
          }
          return this_.MaybeComputeUnknownFieldsSize(total_size,
                                                     &this_._impl_._cached_size_);
        }

void TradingInterval::MergeImpl(::google::protobuf::MessageLite& to_msg, const ::google::protobuf::MessageLite& from_msg) {
  auto* const _this = static_cast<TradingInterval*>(&to_msg);
  auto& from = static_cast<const TradingInterval&>(from_msg);
  ::google::protobuf::Arena* arena = _this->GetArena();
  // @@protoc_insertion_point(class_specific_merge_from_start:tinkoff.public.invest.api.contract.v1.TradingInterval)
  ABSL_DCHECK_NE(&from, _this);
  ::uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (!from._internal_type().empty()) {
    _this->_internal_set_type(from._internal_type());
  }
  cached_has_bits = from._impl_._has_bits_[0];
  if (cached_has_bits & 0x00000001u) {
    ABSL_DCHECK(from._impl_.interval_ != nullptr);
    if (_this->_impl_.interval_ == nullptr) {
      _this->_impl_.interval_ =
          ::google::protobuf::Message::CopyConstruct<::tinkoff::public_::invest::api::contract::v1::TradingInterval_TimeInterval>(arena, *from._impl_.interval_);
    } else {
      _this->_impl_.interval_->MergeFrom(*from._impl_.interval_);
    }
  }
  _this->_impl_._has_bits_[0] |= cached_has_bits;
  _this->_internal_metadata_.MergeFrom<::google::protobuf::UnknownFieldSet>(from._internal_metadata_);
}

void TradingInterval::CopyFrom(const TradingInterval& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tinkoff.public.invest.api.contract.v1.TradingInterval)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}


void TradingInterval::InternalSwap(TradingInterval* PROTOBUF_RESTRICT other) {
  using std::swap;
  auto* arena = GetArena();
  ABSL_DCHECK_EQ(arena, other->GetArena());
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(_impl_._has_bits_[0], other->_impl_._has_bits_[0]);
  ::_pbi::ArenaStringPtr::InternalSwap(&_impl_.type_, &other->_impl_.type_, arena);
  swap(_impl_.interval_, other->_impl_.interval_);
}

::google::protobuf::Metadata TradingInterval::GetMetadata() const {
  return ::google::protobuf::Message::GetMetadataImpl(GetClassData()->full());
}
// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace contract
}  // namespace api
}  // namespace invest
}  // namespace public_
}  // namespace tinkoff
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google
// @@protoc_insertion_point(global_scope)
PROTOBUF_ATTRIBUTE_INIT_PRIORITY2 static ::std::false_type
    _static_init2_ PROTOBUF_UNUSED =
        (::_pbi::AddDescriptors(&descriptor_table_instruments_2eproto),
         ::std::false_type{});
#include "google/protobuf/port_undef.inc"
