// Generated by the gRPC C++ plugin.
// If you make any local change, they will be lost.
// source: signals.proto

#include "signals.pb.h"
#include "signals.grpc.pb.h"

#include <functional>
#include <grpcpp/support/async_stream.h>
#include <grpcpp/support/async_unary_call.h>
#include <grpcpp/impl/channel_interface.h>
#include <grpcpp/impl/client_unary_call.h>
#include <grpcpp/support/client_callback.h>
#include <grpcpp/support/message_allocator.h>
#include <grpcpp/support/method_handler.h>
#include <grpcpp/impl/rpc_service_method.h>
#include <grpcpp/support/server_callback.h>
#include <grpcpp/impl/server_callback_handlers.h>
#include <grpcpp/server_context.h>
#include <grpcpp/impl/service_type.h>
#include <grpcpp/support/sync_stream.h>
namespace tinkoff {
namespace public_ {
namespace invest {
namespace api {
namespace contract {
namespace v1 {

static const char* SignalService_method_names[] = {
  "/tinkoff.public.invest.api.contract.v1.SignalService/GetStrategies",
  "/tinkoff.public.invest.api.contract.v1.SignalService/GetSignals",
};

std::unique_ptr< SignalService::Stub> SignalService::NewStub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options) {
  (void)options;
  std::unique_ptr< SignalService::Stub> stub(new SignalService::Stub(channel, options));
  return stub;
}

SignalService::Stub::Stub(const std::shared_ptr< ::grpc::ChannelInterface>& channel, const ::grpc::StubOptions& options)
  : channel_(channel), rpcmethod_GetStrategies_(SignalService_method_names[0], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  , rpcmethod_GetSignals_(SignalService_method_names[1], options.suffix_for_stats(),::grpc::internal::RpcMethod::NORMAL_RPC, channel)
  {}

::grpc::Status SignalService::Stub::GetStrategies(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetStrategiesRequest& request, ::tinkoff::public_::invest::api::contract::v1::GetStrategiesResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tinkoff::public_::invest::api::contract::v1::GetStrategiesRequest, ::tinkoff::public_::invest::api::contract::v1::GetStrategiesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetStrategies_, context, request, response);
}

void SignalService::Stub::async::GetStrategies(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetStrategiesRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetStrategiesResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tinkoff::public_::invest::api::contract::v1::GetStrategiesRequest, ::tinkoff::public_::invest::api::contract::v1::GetStrategiesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetStrategies_, context, request, response, std::move(f));
}

void SignalService::Stub::async::GetStrategies(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetStrategiesRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetStrategiesResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetStrategies_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetStrategiesResponse>* SignalService::Stub::PrepareAsyncGetStrategiesRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetStrategiesRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tinkoff::public_::invest::api::contract::v1::GetStrategiesResponse, ::tinkoff::public_::invest::api::contract::v1::GetStrategiesRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetStrategies_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetStrategiesResponse>* SignalService::Stub::AsyncGetStrategiesRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetStrategiesRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetStrategiesRaw(context, request, cq);
  result->StartCall();
  return result;
}

::grpc::Status SignalService::Stub::GetSignals(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetSignalsRequest& request, ::tinkoff::public_::invest::api::contract::v1::GetSignalsResponse* response) {
  return ::grpc::internal::BlockingUnaryCall< ::tinkoff::public_::invest::api::contract::v1::GetSignalsRequest, ::tinkoff::public_::invest::api::contract::v1::GetSignalsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), rpcmethod_GetSignals_, context, request, response);
}

void SignalService::Stub::async::GetSignals(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetSignalsRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetSignalsResponse* response, std::function<void(::grpc::Status)> f) {
  ::grpc::internal::CallbackUnaryCall< ::tinkoff::public_::invest::api::contract::v1::GetSignalsRequest, ::tinkoff::public_::invest::api::contract::v1::GetSignalsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSignals_, context, request, response, std::move(f));
}

void SignalService::Stub::async::GetSignals(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetSignalsRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetSignalsResponse* response, ::grpc::ClientUnaryReactor* reactor) {
  ::grpc::internal::ClientCallbackUnaryFactory::Create< ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(stub_->channel_.get(), stub_->rpcmethod_GetSignals_, context, request, response, reactor);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetSignalsResponse>* SignalService::Stub::PrepareAsyncGetSignalsRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetSignalsRequest& request, ::grpc::CompletionQueue* cq) {
  return ::grpc::internal::ClientAsyncResponseReaderHelper::Create< ::tinkoff::public_::invest::api::contract::v1::GetSignalsResponse, ::tinkoff::public_::invest::api::contract::v1::GetSignalsRequest, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(channel_.get(), cq, rpcmethod_GetSignals_, context, request);
}

::grpc::ClientAsyncResponseReader< ::tinkoff::public_::invest::api::contract::v1::GetSignalsResponse>* SignalService::Stub::AsyncGetSignalsRaw(::grpc::ClientContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetSignalsRequest& request, ::grpc::CompletionQueue* cq) {
  auto* result =
    this->PrepareAsyncGetSignalsRaw(context, request, cq);
  result->StartCall();
  return result;
}

SignalService::Service::Service() {
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SignalService_method_names[0],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SignalService::Service, ::tinkoff::public_::invest::api::contract::v1::GetStrategiesRequest, ::tinkoff::public_::invest::api::contract::v1::GetStrategiesResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SignalService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tinkoff::public_::invest::api::contract::v1::GetStrategiesRequest* req,
             ::tinkoff::public_::invest::api::contract::v1::GetStrategiesResponse* resp) {
               return service->GetStrategies(ctx, req, resp);
             }, this)));
  AddMethod(new ::grpc::internal::RpcServiceMethod(
      SignalService_method_names[1],
      ::grpc::internal::RpcMethod::NORMAL_RPC,
      new ::grpc::internal::RpcMethodHandler< SignalService::Service, ::tinkoff::public_::invest::api::contract::v1::GetSignalsRequest, ::tinkoff::public_::invest::api::contract::v1::GetSignalsResponse, ::grpc::protobuf::MessageLite, ::grpc::protobuf::MessageLite>(
          [](SignalService::Service* service,
             ::grpc::ServerContext* ctx,
             const ::tinkoff::public_::invest::api::contract::v1::GetSignalsRequest* req,
             ::tinkoff::public_::invest::api::contract::v1::GetSignalsResponse* resp) {
               return service->GetSignals(ctx, req, resp);
             }, this)));
}

SignalService::Service::~Service() {
}

::grpc::Status SignalService::Service::GetStrategies(::grpc::ServerContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetStrategiesRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetStrategiesResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}

::grpc::Status SignalService::Service::GetSignals(::grpc::ServerContext* context, const ::tinkoff::public_::invest::api::contract::v1::GetSignalsRequest* request, ::tinkoff::public_::invest::api::contract::v1::GetSignalsResponse* response) {
  (void) context;
  (void) request;
  (void) response;
  return ::grpc::Status(::grpc::StatusCode::UNIMPLEMENTED, "");
}


}  // namespace tinkoff
}  // namespace public_
}  // namespace invest
}  // namespace api
}  // namespace contract
}  // namespace v1

