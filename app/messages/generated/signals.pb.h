// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: signals.proto
// Protobuf C++ Version: 5.29.3

#ifndef signals_2eproto_2epb_2eh
#define signals_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/timestamp.pb.h"
#include <google/api/field_behavior.pb.h>
#include "common.pb.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_signals_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_signals_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_signals_2eproto;
namespace tinkoff {
namespace pub {
namespace invest {
namespace api {
namespace contract {
namespace v1 {
class GetSignalsRequest;
struct GetSignalsRequestDefaultTypeInternal;
extern GetSignalsRequestDefaultTypeInternal _GetSignalsRequest_default_instance_;
class GetSignalsResponse;
struct GetSignalsResponseDefaultTypeInternal;
extern GetSignalsResponseDefaultTypeInternal _GetSignalsResponse_default_instance_;
class GetStrategiesRequest;
struct GetStrategiesRequestDefaultTypeInternal;
extern GetStrategiesRequestDefaultTypeInternal _GetStrategiesRequest_default_instance_;
class GetStrategiesResponse;
struct GetStrategiesResponseDefaultTypeInternal;
extern GetStrategiesResponseDefaultTypeInternal _GetStrategiesResponse_default_instance_;
class Signal;
struct SignalDefaultTypeInternal;
extern SignalDefaultTypeInternal _Signal_default_instance_;
class Strategy;
struct StrategyDefaultTypeInternal;
extern StrategyDefaultTypeInternal _Strategy_default_instance_;
}  // namespace v1
}  // namespace contract
}  // namespace api
}  // namespace invest
}  // namespace pub
}  // namespace tinkoff
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace tinkoff {
namespace pub {
namespace invest {
namespace api {
namespace contract {
namespace v1 {
enum StrategyType : int {
  STRATEGY_TYPE_UNSPECIFIED = 0,
  STRATEGY_TYPE_TECHNICAL = 1,
  STRATEGY_TYPE_FUNDAMENTAL = 2,
  StrategyType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  StrategyType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool StrategyType_IsValid(int value);
extern const uint32_t StrategyType_internal_data_[];
constexpr StrategyType StrategyType_MIN = static_cast<StrategyType>(0);
constexpr StrategyType StrategyType_MAX = static_cast<StrategyType>(2);
constexpr int StrategyType_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
StrategyType_descriptor();
template <typename T>
const std::string& StrategyType_Name(T value) {
  static_assert(std::is_same<T, StrategyType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to StrategyType_Name().");
  return StrategyType_Name(static_cast<StrategyType>(value));
}
template <>
inline const std::string& StrategyType_Name(StrategyType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<StrategyType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool StrategyType_Parse(absl::string_view name, StrategyType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<StrategyType>(
      StrategyType_descriptor(), name, value);
}
enum SignalDirection : int {
  SIGNAL_DIRECTION_UNSPECIFIED = 0,
  SIGNAL_DIRECTION_BUY = 1,
  SIGNAL_DIRECTION_SELL = 2,
  SignalDirection_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  SignalDirection_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool SignalDirection_IsValid(int value);
extern const uint32_t SignalDirection_internal_data_[];
constexpr SignalDirection SignalDirection_MIN = static_cast<SignalDirection>(0);
constexpr SignalDirection SignalDirection_MAX = static_cast<SignalDirection>(2);
constexpr int SignalDirection_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
SignalDirection_descriptor();
template <typename T>
const std::string& SignalDirection_Name(T value) {
  static_assert(std::is_same<T, SignalDirection>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to SignalDirection_Name().");
  return SignalDirection_Name(static_cast<SignalDirection>(value));
}
template <>
inline const std::string& SignalDirection_Name(SignalDirection value) {
  return ::google::protobuf::internal::NameOfDenseEnum<SignalDirection_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool SignalDirection_Parse(absl::string_view name, SignalDirection* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SignalDirection>(
      SignalDirection_descriptor(), name, value);
}
enum SignalState : int {
  SIGNAL_STATE_UNSPECIFIED = 0,
  SIGNAL_STATE_ACTIVE = 1,
  SIGNAL_STATE_CLOSED = 2,
  SIGNAL_STATE_ALL = 3,
  SignalState_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  SignalState_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool SignalState_IsValid(int value);
extern const uint32_t SignalState_internal_data_[];
constexpr SignalState SignalState_MIN = static_cast<SignalState>(0);
constexpr SignalState SignalState_MAX = static_cast<SignalState>(3);
constexpr int SignalState_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
SignalState_descriptor();
template <typename T>
const std::string& SignalState_Name(T value) {
  static_assert(std::is_same<T, SignalState>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to SignalState_Name().");
  return SignalState_Name(static_cast<SignalState>(value));
}
template <>
inline const std::string& SignalState_Name(SignalState value) {
  return ::google::protobuf::internal::NameOfDenseEnum<SignalState_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool SignalState_Parse(absl::string_view name, SignalState* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SignalState>(
      SignalState_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class GetStrategiesRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.pub.invest.api.contract.v1.GetStrategiesRequest) */ {
 public:
  inline GetStrategiesRequest() : GetStrategiesRequest(nullptr) {}
  ~GetStrategiesRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetStrategiesRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetStrategiesRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetStrategiesRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetStrategiesRequest(const GetStrategiesRequest& from) : GetStrategiesRequest(nullptr, from) {}
  inline GetStrategiesRequest(GetStrategiesRequest&& from) noexcept
      : GetStrategiesRequest(nullptr, std::move(from)) {}
  inline GetStrategiesRequest& operator=(const GetStrategiesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStrategiesRequest& operator=(GetStrategiesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetStrategiesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetStrategiesRequest* internal_default_instance() {
    return reinterpret_cast<const GetStrategiesRequest*>(
        &_GetStrategiesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(GetStrategiesRequest& a, GetStrategiesRequest& b) { a.Swap(&b); }
  inline void Swap(GetStrategiesRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetStrategiesRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetStrategiesRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetStrategiesRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetStrategiesRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetStrategiesRequest& from) { GetStrategiesRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetStrategiesRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tinkoff.pub.invest.api.contract.v1.GetStrategiesRequest"; }

 protected:
  explicit GetStrategiesRequest(::google::protobuf::Arena* arena);
  GetStrategiesRequest(::google::protobuf::Arena* arena, const GetStrategiesRequest& from);
  GetStrategiesRequest(::google::protobuf::Arena* arena, GetStrategiesRequest&& from) noexcept
      : GetStrategiesRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kStrategyIdFieldNumber = 1,
  };
  // optional string strategy_id = 1;
  bool has_strategy_id() const;
  void clear_strategy_id() ;
  const std::string& strategy_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_strategy_id(Arg_&& arg, Args_... args);
  std::string* mutable_strategy_id();
  PROTOBUF_NODISCARD std::string* release_strategy_id();
  void set_allocated_strategy_id(std::string* value);

  private:
  const std::string& _internal_strategy_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strategy_id(
      const std::string& value);
  std::string* _internal_mutable_strategy_id();

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.pub.invest.api.contract.v1.GetStrategiesRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      75, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetStrategiesRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr strategy_id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_signals_2eproto;
};
// -------------------------------------------------------------------

class Strategy final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.pub.invest.api.contract.v1.Strategy) */ {
 public:
  inline Strategy() : Strategy(nullptr) {}
  ~Strategy() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Strategy* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Strategy));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Strategy(
      ::google::protobuf::internal::ConstantInitialized);

  inline Strategy(const Strategy& from) : Strategy(nullptr, from) {}
  inline Strategy(Strategy&& from) noexcept
      : Strategy(nullptr, std::move(from)) {}
  inline Strategy& operator=(const Strategy& from) {
    CopyFrom(from);
    return *this;
  }
  inline Strategy& operator=(Strategy&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Strategy& default_instance() {
    return *internal_default_instance();
  }
  static inline const Strategy* internal_default_instance() {
    return reinterpret_cast<const Strategy*>(
        &_Strategy_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(Strategy& a, Strategy& b) { a.Swap(&b); }
  inline void Swap(Strategy* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Strategy* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Strategy* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Strategy>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Strategy& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Strategy& from) { Strategy::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Strategy* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tinkoff.pub.invest.api.contract.v1.Strategy"; }

 protected:
  explicit Strategy(::google::protobuf::Arena* arena);
  Strategy(::google::protobuf::Arena* arena, const Strategy& from);
  Strategy(::google::protobuf::Arena* arena, Strategy&& from) noexcept
      : Strategy(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kStrategyIdFieldNumber = 1,
    kStrategyNameFieldNumber = 2,
    kStrategyDescriptionFieldNumber = 3,
    kStrategyUrlFieldNumber = 4,
    kAverageSignalYieldFieldNumber = 9,
    kAverageSignalYieldYearFieldNumber = 10,
    kYieldFieldNumber = 11,
    kYieldYearFieldNumber = 12,
    kStrategyTypeFieldNumber = 5,
    kActiveSignalsFieldNumber = 6,
    kTimeInPositionFieldNumber = 8,
    kTotalSignalsFieldNumber = 7,
  };
  // string strategy_id = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_strategy_id() ;
  const std::string& strategy_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_strategy_id(Arg_&& arg, Args_... args);
  std::string* mutable_strategy_id();
  PROTOBUF_NODISCARD std::string* release_strategy_id();
  void set_allocated_strategy_id(std::string* value);

  private:
  const std::string& _internal_strategy_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strategy_id(
      const std::string& value);
  std::string* _internal_mutable_strategy_id();

  public:
  // string strategy_name = 2 [(.google.api.field_behavior) = REQUIRED];
  void clear_strategy_name() ;
  const std::string& strategy_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_strategy_name(Arg_&& arg, Args_... args);
  std::string* mutable_strategy_name();
  PROTOBUF_NODISCARD std::string* release_strategy_name();
  void set_allocated_strategy_name(std::string* value);

  private:
  const std::string& _internal_strategy_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strategy_name(
      const std::string& value);
  std::string* _internal_mutable_strategy_name();

  public:
  // optional string strategy_description = 3;
  bool has_strategy_description() const;
  void clear_strategy_description() ;
  const std::string& strategy_description() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_strategy_description(Arg_&& arg, Args_... args);
  std::string* mutable_strategy_description();
  PROTOBUF_NODISCARD std::string* release_strategy_description();
  void set_allocated_strategy_description(std::string* value);

  private:
  const std::string& _internal_strategy_description() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strategy_description(
      const std::string& value);
  std::string* _internal_mutable_strategy_description();

  public:
  // optional string strategy_url = 4;
  bool has_strategy_url() const;
  void clear_strategy_url() ;
  const std::string& strategy_url() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_strategy_url(Arg_&& arg, Args_... args);
  std::string* mutable_strategy_url();
  PROTOBUF_NODISCARD std::string* release_strategy_url();
  void set_allocated_strategy_url(std::string* value);

  private:
  const std::string& _internal_strategy_url() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strategy_url(
      const std::string& value);
  std::string* _internal_mutable_strategy_url();

  public:
  // .tinkoff.pub.invest.api.contract.v1.Quotation average_signal_yield = 9 [(.google.api.field_behavior) = REQUIRED];
  bool has_average_signal_yield() const;
  void clear_average_signal_yield() ;
  const ::tinkoff::pub::invest::api::contract::v1::Quotation& average_signal_yield() const;
  PROTOBUF_NODISCARD ::tinkoff::pub::invest::api::contract::v1::Quotation* release_average_signal_yield();
  ::tinkoff::pub::invest::api::contract::v1::Quotation* mutable_average_signal_yield();
  void set_allocated_average_signal_yield(::tinkoff::pub::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_average_signal_yield(::tinkoff::pub::invest::api::contract::v1::Quotation* value);
  ::tinkoff::pub::invest::api::contract::v1::Quotation* unsafe_arena_release_average_signal_yield();

  private:
  const ::tinkoff::pub::invest::api::contract::v1::Quotation& _internal_average_signal_yield() const;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* _internal_mutable_average_signal_yield();

  public:
  // .tinkoff.pub.invest.api.contract.v1.Quotation average_signal_yield_year = 10 [(.google.api.field_behavior) = REQUIRED];
  bool has_average_signal_yield_year() const;
  void clear_average_signal_yield_year() ;
  const ::tinkoff::pub::invest::api::contract::v1::Quotation& average_signal_yield_year() const;
  PROTOBUF_NODISCARD ::tinkoff::pub::invest::api::contract::v1::Quotation* release_average_signal_yield_year();
  ::tinkoff::pub::invest::api::contract::v1::Quotation* mutable_average_signal_yield_year();
  void set_allocated_average_signal_yield_year(::tinkoff::pub::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_average_signal_yield_year(::tinkoff::pub::invest::api::contract::v1::Quotation* value);
  ::tinkoff::pub::invest::api::contract::v1::Quotation* unsafe_arena_release_average_signal_yield_year();

  private:
  const ::tinkoff::pub::invest::api::contract::v1::Quotation& _internal_average_signal_yield_year() const;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* _internal_mutable_average_signal_yield_year();

  public:
  // .tinkoff.pub.invest.api.contract.v1.Quotation yield = 11 [(.google.api.field_behavior) = REQUIRED];
  bool has_yield() const;
  void clear_yield() ;
  const ::tinkoff::pub::invest::api::contract::v1::Quotation& yield() const;
  PROTOBUF_NODISCARD ::tinkoff::pub::invest::api::contract::v1::Quotation* release_yield();
  ::tinkoff::pub::invest::api::contract::v1::Quotation* mutable_yield();
  void set_allocated_yield(::tinkoff::pub::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_yield(::tinkoff::pub::invest::api::contract::v1::Quotation* value);
  ::tinkoff::pub::invest::api::contract::v1::Quotation* unsafe_arena_release_yield();

  private:
  const ::tinkoff::pub::invest::api::contract::v1::Quotation& _internal_yield() const;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* _internal_mutable_yield();

  public:
  // .tinkoff.pub.invest.api.contract.v1.Quotation yield_year = 12 [(.google.api.field_behavior) = REQUIRED];
  bool has_yield_year() const;
  void clear_yield_year() ;
  const ::tinkoff::pub::invest::api::contract::v1::Quotation& yield_year() const;
  PROTOBUF_NODISCARD ::tinkoff::pub::invest::api::contract::v1::Quotation* release_yield_year();
  ::tinkoff::pub::invest::api::contract::v1::Quotation* mutable_yield_year();
  void set_allocated_yield_year(::tinkoff::pub::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_yield_year(::tinkoff::pub::invest::api::contract::v1::Quotation* value);
  ::tinkoff::pub::invest::api::contract::v1::Quotation* unsafe_arena_release_yield_year();

  private:
  const ::tinkoff::pub::invest::api::contract::v1::Quotation& _internal_yield_year() const;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* _internal_mutable_yield_year();

  public:
  // .tinkoff.pub.invest.api.contract.v1.StrategyType strategy_type = 5 [(.google.api.field_behavior) = REQUIRED];
  void clear_strategy_type() ;
  ::tinkoff::pub::invest::api::contract::v1::StrategyType strategy_type() const;
  void set_strategy_type(::tinkoff::pub::invest::api::contract::v1::StrategyType value);

  private:
  ::tinkoff::pub::invest::api::contract::v1::StrategyType _internal_strategy_type() const;
  void _internal_set_strategy_type(::tinkoff::pub::invest::api::contract::v1::StrategyType value);

  public:
  // int32 active_signals = 6 [(.google.api.field_behavior) = REQUIRED];
  void clear_active_signals() ;
  ::int32_t active_signals() const;
  void set_active_signals(::int32_t value);

  private:
  ::int32_t _internal_active_signals() const;
  void _internal_set_active_signals(::int32_t value);

  public:
  // int64 time_in_position = 8 [(.google.api.field_behavior) = REQUIRED];
  void clear_time_in_position() ;
  ::int64_t time_in_position() const;
  void set_time_in_position(::int64_t value);

  private:
  ::int64_t _internal_time_in_position() const;
  void _internal_set_time_in_position(::int64_t value);

  public:
  // int32 total_signals = 7 [(.google.api.field_behavior) = REQUIRED];
  void clear_total_signals() ;
  ::int32_t total_signals() const;
  void set_total_signals(::int32_t value);

  private:
  ::int32_t _internal_total_signals() const;
  void _internal_set_total_signals(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.pub.invest.api.contract.v1.Strategy)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 12, 4,
      116, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Strategy& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr strategy_id_;
    ::google::protobuf::internal::ArenaStringPtr strategy_name_;
    ::google::protobuf::internal::ArenaStringPtr strategy_description_;
    ::google::protobuf::internal::ArenaStringPtr strategy_url_;
    ::tinkoff::pub::invest::api::contract::v1::Quotation* average_signal_yield_;
    ::tinkoff::pub::invest::api::contract::v1::Quotation* average_signal_yield_year_;
    ::tinkoff::pub::invest::api::contract::v1::Quotation* yield_;
    ::tinkoff::pub::invest::api::contract::v1::Quotation* yield_year_;
    int strategy_type_;
    ::int32_t active_signals_;
    ::int64_t time_in_position_;
    ::int32_t total_signals_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_signals_2eproto;
};
// -------------------------------------------------------------------

class Signal final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.pub.invest.api.contract.v1.Signal) */ {
 public:
  inline Signal() : Signal(nullptr) {}
  ~Signal() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Signal* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Signal));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Signal(
      ::google::protobuf::internal::ConstantInitialized);

  inline Signal(const Signal& from) : Signal(nullptr, from) {}
  inline Signal(Signal&& from) noexcept
      : Signal(nullptr, std::move(from)) {}
  inline Signal& operator=(const Signal& from) {
    CopyFrom(from);
    return *this;
  }
  inline Signal& operator=(Signal&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Signal& default_instance() {
    return *internal_default_instance();
  }
  static inline const Signal* internal_default_instance() {
    return reinterpret_cast<const Signal*>(
        &_Signal_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(Signal& a, Signal& b) { a.Swap(&b); }
  inline void Swap(Signal* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Signal* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Signal* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Signal>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Signal& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Signal& from) { Signal::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Signal* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tinkoff.pub.invest.api.contract.v1.Signal"; }

 protected:
  explicit Signal(::google::protobuf::Arena* arena);
  Signal(::google::protobuf::Arena* arena, const Signal& from);
  Signal(::google::protobuf::Arena* arena, Signal&& from) noexcept
      : Signal(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSignalIdFieldNumber = 1,
    kStrategyIdFieldNumber = 2,
    kStrategyNameFieldNumber = 3,
    kInstrumentUidFieldNumber = 4,
    kInfoFieldNumber = 8,
    kNameFieldNumber = 9,
    kCreateDtFieldNumber = 5,
    kInitialPriceFieldNumber = 7,
    kTargetPriceFieldNumber = 10,
    kEndDtFieldNumber = 11,
    kStoplossFieldNumber = 13,
    kClosePriceFieldNumber = 14,
    kCloseDtFieldNumber = 15,
    kDirectionFieldNumber = 6,
    kProbabilityFieldNumber = 12,
  };
  // string signal_id = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_signal_id() ;
  const std::string& signal_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_signal_id(Arg_&& arg, Args_... args);
  std::string* mutable_signal_id();
  PROTOBUF_NODISCARD std::string* release_signal_id();
  void set_allocated_signal_id(std::string* value);

  private:
  const std::string& _internal_signal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signal_id(
      const std::string& value);
  std::string* _internal_mutable_signal_id();

  public:
  // string strategy_id = 2 [(.google.api.field_behavior) = REQUIRED];
  void clear_strategy_id() ;
  const std::string& strategy_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_strategy_id(Arg_&& arg, Args_... args);
  std::string* mutable_strategy_id();
  PROTOBUF_NODISCARD std::string* release_strategy_id();
  void set_allocated_strategy_id(std::string* value);

  private:
  const std::string& _internal_strategy_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strategy_id(
      const std::string& value);
  std::string* _internal_mutable_strategy_id();

  public:
  // string strategy_name = 3 [(.google.api.field_behavior) = REQUIRED];
  void clear_strategy_name() ;
  const std::string& strategy_name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_strategy_name(Arg_&& arg, Args_... args);
  std::string* mutable_strategy_name();
  PROTOBUF_NODISCARD std::string* release_strategy_name();
  void set_allocated_strategy_name(std::string* value);

  private:
  const std::string& _internal_strategy_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strategy_name(
      const std::string& value);
  std::string* _internal_mutable_strategy_name();

  public:
  // string instrument_uid = 4 [(.google.api.field_behavior) = REQUIRED];
  void clear_instrument_uid() ;
  const std::string& instrument_uid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_instrument_uid(Arg_&& arg, Args_... args);
  std::string* mutable_instrument_uid();
  PROTOBUF_NODISCARD std::string* release_instrument_uid();
  void set_allocated_instrument_uid(std::string* value);

  private:
  const std::string& _internal_instrument_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_uid(
      const std::string& value);
  std::string* _internal_mutable_instrument_uid();

  public:
  // optional string info = 8;
  bool has_info() const;
  void clear_info() ;
  const std::string& info() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_info(Arg_&& arg, Args_... args);
  std::string* mutable_info();
  PROTOBUF_NODISCARD std::string* release_info();
  void set_allocated_info(std::string* value);

  private:
  const std::string& _internal_info() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_info(
      const std::string& value);
  std::string* _internal_mutable_info();

  public:
  // string name = 9 [(.google.api.field_behavior) = REQUIRED];
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // .google.protobuf.Timestamp create_dt = 5 [(.google.api.field_behavior) = REQUIRED];
  bool has_create_dt() const;
  void clear_create_dt() ;
  const ::google::protobuf::Timestamp& create_dt() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_create_dt();
  ::google::protobuf::Timestamp* mutable_create_dt();
  void set_allocated_create_dt(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_create_dt(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_create_dt();

  private:
  const ::google::protobuf::Timestamp& _internal_create_dt() const;
  ::google::protobuf::Timestamp* _internal_mutable_create_dt();

  public:
  // .tinkoff.pub.invest.api.contract.v1.Quotation initial_price = 7 [(.google.api.field_behavior) = REQUIRED];
  bool has_initial_price() const;
  void clear_initial_price() ;
  const ::tinkoff::pub::invest::api::contract::v1::Quotation& initial_price() const;
  PROTOBUF_NODISCARD ::tinkoff::pub::invest::api::contract::v1::Quotation* release_initial_price();
  ::tinkoff::pub::invest::api::contract::v1::Quotation* mutable_initial_price();
  void set_allocated_initial_price(::tinkoff::pub::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_initial_price(::tinkoff::pub::invest::api::contract::v1::Quotation* value);
  ::tinkoff::pub::invest::api::contract::v1::Quotation* unsafe_arena_release_initial_price();

  private:
  const ::tinkoff::pub::invest::api::contract::v1::Quotation& _internal_initial_price() const;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* _internal_mutable_initial_price();

  public:
  // .tinkoff.pub.invest.api.contract.v1.Quotation target_price = 10 [(.google.api.field_behavior) = REQUIRED];
  bool has_target_price() const;
  void clear_target_price() ;
  const ::tinkoff::pub::invest::api::contract::v1::Quotation& target_price() const;
  PROTOBUF_NODISCARD ::tinkoff::pub::invest::api::contract::v1::Quotation* release_target_price();
  ::tinkoff::pub::invest::api::contract::v1::Quotation* mutable_target_price();
  void set_allocated_target_price(::tinkoff::pub::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_target_price(::tinkoff::pub::invest::api::contract::v1::Quotation* value);
  ::tinkoff::pub::invest::api::contract::v1::Quotation* unsafe_arena_release_target_price();

  private:
  const ::tinkoff::pub::invest::api::contract::v1::Quotation& _internal_target_price() const;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* _internal_mutable_target_price();

  public:
  // .google.protobuf.Timestamp end_dt = 11 [(.google.api.field_behavior) = REQUIRED];
  bool has_end_dt() const;
  void clear_end_dt() ;
  const ::google::protobuf::Timestamp& end_dt() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_end_dt();
  ::google::protobuf::Timestamp* mutable_end_dt();
  void set_allocated_end_dt(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_end_dt(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_end_dt();

  private:
  const ::google::protobuf::Timestamp& _internal_end_dt() const;
  ::google::protobuf::Timestamp* _internal_mutable_end_dt();

  public:
  // optional .tinkoff.pub.invest.api.contract.v1.Quotation stoploss = 13;
  bool has_stoploss() const;
  void clear_stoploss() ;
  const ::tinkoff::pub::invest::api::contract::v1::Quotation& stoploss() const;
  PROTOBUF_NODISCARD ::tinkoff::pub::invest::api::contract::v1::Quotation* release_stoploss();
  ::tinkoff::pub::invest::api::contract::v1::Quotation* mutable_stoploss();
  void set_allocated_stoploss(::tinkoff::pub::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_stoploss(::tinkoff::pub::invest::api::contract::v1::Quotation* value);
  ::tinkoff::pub::invest::api::contract::v1::Quotation* unsafe_arena_release_stoploss();

  private:
  const ::tinkoff::pub::invest::api::contract::v1::Quotation& _internal_stoploss() const;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* _internal_mutable_stoploss();

  public:
  // optional .tinkoff.pub.invest.api.contract.v1.Quotation close_price = 14;
  bool has_close_price() const;
  void clear_close_price() ;
  const ::tinkoff::pub::invest::api::contract::v1::Quotation& close_price() const;
  PROTOBUF_NODISCARD ::tinkoff::pub::invest::api::contract::v1::Quotation* release_close_price();
  ::tinkoff::pub::invest::api::contract::v1::Quotation* mutable_close_price();
  void set_allocated_close_price(::tinkoff::pub::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_close_price(::tinkoff::pub::invest::api::contract::v1::Quotation* value);
  ::tinkoff::pub::invest::api::contract::v1::Quotation* unsafe_arena_release_close_price();

  private:
  const ::tinkoff::pub::invest::api::contract::v1::Quotation& _internal_close_price() const;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* _internal_mutable_close_price();

  public:
  // optional .google.protobuf.Timestamp close_dt = 15;
  bool has_close_dt() const;
  void clear_close_dt() ;
  const ::google::protobuf::Timestamp& close_dt() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_close_dt();
  ::google::protobuf::Timestamp* mutable_close_dt();
  void set_allocated_close_dt(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_close_dt(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_close_dt();

  private:
  const ::google::protobuf::Timestamp& _internal_close_dt() const;
  ::google::protobuf::Timestamp* _internal_mutable_close_dt();

  public:
  // .tinkoff.pub.invest.api.contract.v1.SignalDirection direction = 6 [(.google.api.field_behavior) = REQUIRED];
  void clear_direction() ;
  ::tinkoff::pub::invest::api::contract::v1::SignalDirection direction() const;
  void set_direction(::tinkoff::pub::invest::api::contract::v1::SignalDirection value);

  private:
  ::tinkoff::pub::invest::api::contract::v1::SignalDirection _internal_direction() const;
  void _internal_set_direction(::tinkoff::pub::invest::api::contract::v1::SignalDirection value);

  public:
  // optional int32 probability = 12;
  bool has_probability() const;
  void clear_probability() ;
  ::int32_t probability() const;
  void set_probability(::int32_t value);

  private:
  ::int32_t _internal_probability() const;
  void _internal_set_probability(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.pub.invest.api.contract.v1.Signal)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 15, 7,
      113, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Signal& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr signal_id_;
    ::google::protobuf::internal::ArenaStringPtr strategy_id_;
    ::google::protobuf::internal::ArenaStringPtr strategy_name_;
    ::google::protobuf::internal::ArenaStringPtr instrument_uid_;
    ::google::protobuf::internal::ArenaStringPtr info_;
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::Timestamp* create_dt_;
    ::tinkoff::pub::invest::api::contract::v1::Quotation* initial_price_;
    ::tinkoff::pub::invest::api::contract::v1::Quotation* target_price_;
    ::google::protobuf::Timestamp* end_dt_;
    ::tinkoff::pub::invest::api::contract::v1::Quotation* stoploss_;
    ::tinkoff::pub::invest::api::contract::v1::Quotation* close_price_;
    ::google::protobuf::Timestamp* close_dt_;
    int direction_;
    ::int32_t probability_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_signals_2eproto;
};
// -------------------------------------------------------------------

class GetSignalsRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.pub.invest.api.contract.v1.GetSignalsRequest) */ {
 public:
  inline GetSignalsRequest() : GetSignalsRequest(nullptr) {}
  ~GetSignalsRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetSignalsRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetSignalsRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetSignalsRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetSignalsRequest(const GetSignalsRequest& from) : GetSignalsRequest(nullptr, from) {}
  inline GetSignalsRequest(GetSignalsRequest&& from) noexcept
      : GetSignalsRequest(nullptr, std::move(from)) {}
  inline GetSignalsRequest& operator=(const GetSignalsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSignalsRequest& operator=(GetSignalsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSignalsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSignalsRequest* internal_default_instance() {
    return reinterpret_cast<const GetSignalsRequest*>(
        &_GetSignalsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(GetSignalsRequest& a, GetSignalsRequest& b) { a.Swap(&b); }
  inline void Swap(GetSignalsRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSignalsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSignalsRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetSignalsRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetSignalsRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetSignalsRequest& from) { GetSignalsRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetSignalsRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tinkoff.pub.invest.api.contract.v1.GetSignalsRequest"; }

 protected:
  explicit GetSignalsRequest(::google::protobuf::Arena* arena);
  GetSignalsRequest(::google::protobuf::Arena* arena, const GetSignalsRequest& from);
  GetSignalsRequest(::google::protobuf::Arena* arena, GetSignalsRequest&& from) noexcept
      : GetSignalsRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSignalIdFieldNumber = 1,
    kStrategyIdFieldNumber = 2,
    kInstrumentUidFieldNumber = 4,
    kFromFieldNumber = 5,
    kToFieldNumber = 6,
    kPagingFieldNumber = 9,
    kStrategyTypeFieldNumber = 3,
    kDirectionFieldNumber = 7,
    kActiveFieldNumber = 8,
  };
  // optional string signal_id = 1;
  bool has_signal_id() const;
  void clear_signal_id() ;
  const std::string& signal_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_signal_id(Arg_&& arg, Args_... args);
  std::string* mutable_signal_id();
  PROTOBUF_NODISCARD std::string* release_signal_id();
  void set_allocated_signal_id(std::string* value);

  private:
  const std::string& _internal_signal_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_signal_id(
      const std::string& value);
  std::string* _internal_mutable_signal_id();

  public:
  // optional string strategy_id = 2;
  bool has_strategy_id() const;
  void clear_strategy_id() ;
  const std::string& strategy_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_strategy_id(Arg_&& arg, Args_... args);
  std::string* mutable_strategy_id();
  PROTOBUF_NODISCARD std::string* release_strategy_id();
  void set_allocated_strategy_id(std::string* value);

  private:
  const std::string& _internal_strategy_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_strategy_id(
      const std::string& value);
  std::string* _internal_mutable_strategy_id();

  public:
  // optional string instrument_uid = 4;
  bool has_instrument_uid() const;
  void clear_instrument_uid() ;
  const std::string& instrument_uid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_instrument_uid(Arg_&& arg, Args_... args);
  std::string* mutable_instrument_uid();
  PROTOBUF_NODISCARD std::string* release_instrument_uid();
  void set_allocated_instrument_uid(std::string* value);

  private:
  const std::string& _internal_instrument_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_uid(
      const std::string& value);
  std::string* _internal_mutable_instrument_uid();

  public:
  // optional .google.protobuf.Timestamp from = 5;
  bool has_from() const;
  void clear_from() ;
  const ::google::protobuf::Timestamp& from() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_from();
  ::google::protobuf::Timestamp* mutable_from();
  void set_allocated_from(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_from(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_from();

  private:
  const ::google::protobuf::Timestamp& _internal_from() const;
  ::google::protobuf::Timestamp* _internal_mutable_from();

  public:
  // optional .google.protobuf.Timestamp to = 6;
  bool has_to() const;
  void clear_to() ;
  const ::google::protobuf::Timestamp& to() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_to();
  ::google::protobuf::Timestamp* mutable_to();
  void set_allocated_to(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_to(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_to();

  private:
  const ::google::protobuf::Timestamp& _internal_to() const;
  ::google::protobuf::Timestamp* _internal_mutable_to();

  public:
  // optional .tinkoff.pub.invest.api.contract.v1.Page paging = 9;
  bool has_paging() const;
  void clear_paging() ;
  const ::tinkoff::pub::invest::api::contract::v1::Page& paging() const;
  PROTOBUF_NODISCARD ::tinkoff::pub::invest::api::contract::v1::Page* release_paging();
  ::tinkoff::pub::invest::api::contract::v1::Page* mutable_paging();
  void set_allocated_paging(::tinkoff::pub::invest::api::contract::v1::Page* value);
  void unsafe_arena_set_allocated_paging(::tinkoff::pub::invest::api::contract::v1::Page* value);
  ::tinkoff::pub::invest::api::contract::v1::Page* unsafe_arena_release_paging();

  private:
  const ::tinkoff::pub::invest::api::contract::v1::Page& _internal_paging() const;
  ::tinkoff::pub::invest::api::contract::v1::Page* _internal_mutable_paging();

  public:
  // optional .tinkoff.pub.invest.api.contract.v1.StrategyType strategy_type = 3;
  bool has_strategy_type() const;
  void clear_strategy_type() ;
  ::tinkoff::pub::invest::api::contract::v1::StrategyType strategy_type() const;
  void set_strategy_type(::tinkoff::pub::invest::api::contract::v1::StrategyType value);

  private:
  ::tinkoff::pub::invest::api::contract::v1::StrategyType _internal_strategy_type() const;
  void _internal_set_strategy_type(::tinkoff::pub::invest::api::contract::v1::StrategyType value);

  public:
  // optional .tinkoff.pub.invest.api.contract.v1.SignalDirection direction = 7;
  bool has_direction() const;
  void clear_direction() ;
  ::tinkoff::pub::invest::api::contract::v1::SignalDirection direction() const;
  void set_direction(::tinkoff::pub::invest::api::contract::v1::SignalDirection value);

  private:
  ::tinkoff::pub::invest::api::contract::v1::SignalDirection _internal_direction() const;
  void _internal_set_direction(::tinkoff::pub::invest::api::contract::v1::SignalDirection value);

  public:
  // optional .tinkoff.pub.invest.api.contract.v1.SignalState active = 8;
  bool has_active() const;
  void clear_active() ;
  ::tinkoff::pub::invest::api::contract::v1::SignalState active() const;
  void set_active(::tinkoff::pub::invest::api::contract::v1::SignalState value);

  private:
  ::tinkoff::pub::invest::api::contract::v1::SignalState _internal_active() const;
  void _internal_set_active(::tinkoff::pub::invest::api::contract::v1::SignalState value);

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.pub.invest.api.contract.v1.GetSignalsRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 3,
      103, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetSignalsRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr signal_id_;
    ::google::protobuf::internal::ArenaStringPtr strategy_id_;
    ::google::protobuf::internal::ArenaStringPtr instrument_uid_;
    ::google::protobuf::Timestamp* from_;
    ::google::protobuf::Timestamp* to_;
    ::tinkoff::pub::invest::api::contract::v1::Page* paging_;
    int strategy_type_;
    int direction_;
    int active_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_signals_2eproto;
};
// -------------------------------------------------------------------

class GetStrategiesResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.pub.invest.api.contract.v1.GetStrategiesResponse) */ {
 public:
  inline GetStrategiesResponse() : GetStrategiesResponse(nullptr) {}
  ~GetStrategiesResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetStrategiesResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetStrategiesResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetStrategiesResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetStrategiesResponse(const GetStrategiesResponse& from) : GetStrategiesResponse(nullptr, from) {}
  inline GetStrategiesResponse(GetStrategiesResponse&& from) noexcept
      : GetStrategiesResponse(nullptr, std::move(from)) {}
  inline GetStrategiesResponse& operator=(const GetStrategiesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetStrategiesResponse& operator=(GetStrategiesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetStrategiesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetStrategiesResponse* internal_default_instance() {
    return reinterpret_cast<const GetStrategiesResponse*>(
        &_GetStrategiesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(GetStrategiesResponse& a, GetStrategiesResponse& b) { a.Swap(&b); }
  inline void Swap(GetStrategiesResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetStrategiesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetStrategiesResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetStrategiesResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetStrategiesResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetStrategiesResponse& from) { GetStrategiesResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetStrategiesResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tinkoff.pub.invest.api.contract.v1.GetStrategiesResponse"; }

 protected:
  explicit GetStrategiesResponse(::google::protobuf::Arena* arena);
  GetStrategiesResponse(::google::protobuf::Arena* arena, const GetStrategiesResponse& from);
  GetStrategiesResponse(::google::protobuf::Arena* arena, GetStrategiesResponse&& from) noexcept
      : GetStrategiesResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kStrategiesFieldNumber = 1,
  };
  // repeated .tinkoff.pub.invest.api.contract.v1.Strategy strategies = 1;
  int strategies_size() const;
  private:
  int _internal_strategies_size() const;

  public:
  void clear_strategies() ;
  ::tinkoff::pub::invest::api::contract::v1::Strategy* mutable_strategies(int index);
  ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::Strategy>* mutable_strategies();

  private:
  const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::Strategy>& _internal_strategies() const;
  ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::Strategy>* _internal_mutable_strategies();
  public:
  const ::tinkoff::pub::invest::api::contract::v1::Strategy& strategies(int index) const;
  ::tinkoff::pub::invest::api::contract::v1::Strategy* add_strategies();
  const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::Strategy>& strategies() const;
  // @@protoc_insertion_point(class_scope:tinkoff.pub.invest.api.contract.v1.GetStrategiesResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetStrategiesResponse& from_msg);
    ::google::protobuf::RepeatedPtrField< ::tinkoff::pub::invest::api::contract::v1::Strategy > strategies_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_signals_2eproto;
};
// -------------------------------------------------------------------

class GetSignalsResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.pub.invest.api.contract.v1.GetSignalsResponse) */ {
 public:
  inline GetSignalsResponse() : GetSignalsResponse(nullptr) {}
  ~GetSignalsResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetSignalsResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetSignalsResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetSignalsResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetSignalsResponse(const GetSignalsResponse& from) : GetSignalsResponse(nullptr, from) {}
  inline GetSignalsResponse(GetSignalsResponse&& from) noexcept
      : GetSignalsResponse(nullptr, std::move(from)) {}
  inline GetSignalsResponse& operator=(const GetSignalsResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetSignalsResponse& operator=(GetSignalsResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetSignalsResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetSignalsResponse* internal_default_instance() {
    return reinterpret_cast<const GetSignalsResponse*>(
        &_GetSignalsResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(GetSignalsResponse& a, GetSignalsResponse& b) { a.Swap(&b); }
  inline void Swap(GetSignalsResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetSignalsResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetSignalsResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetSignalsResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetSignalsResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetSignalsResponse& from) { GetSignalsResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetSignalsResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tinkoff.pub.invest.api.contract.v1.GetSignalsResponse"; }

 protected:
  explicit GetSignalsResponse(::google::protobuf::Arena* arena);
  GetSignalsResponse(::google::protobuf::Arena* arena, const GetSignalsResponse& from);
  GetSignalsResponse(::google::protobuf::Arena* arena, GetSignalsResponse&& from) noexcept
      : GetSignalsResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSignalsFieldNumber = 1,
    kPagingFieldNumber = 2,
  };
  // repeated .tinkoff.pub.invest.api.contract.v1.Signal signals = 1;
  int signals_size() const;
  private:
  int _internal_signals_size() const;

  public:
  void clear_signals() ;
  ::tinkoff::pub::invest::api::contract::v1::Signal* mutable_signals(int index);
  ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::Signal>* mutable_signals();

  private:
  const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::Signal>& _internal_signals() const;
  ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::Signal>* _internal_mutable_signals();
  public:
  const ::tinkoff::pub::invest::api::contract::v1::Signal& signals(int index) const;
  ::tinkoff::pub::invest::api::contract::v1::Signal* add_signals();
  const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::Signal>& signals() const;
  // .tinkoff.pub.invest.api.contract.v1.PageResponse paging = 2;
  bool has_paging() const;
  void clear_paging() ;
  const ::tinkoff::pub::invest::api::contract::v1::PageResponse& paging() const;
  PROTOBUF_NODISCARD ::tinkoff::pub::invest::api::contract::v1::PageResponse* release_paging();
  ::tinkoff::pub::invest::api::contract::v1::PageResponse* mutable_paging();
  void set_allocated_paging(::tinkoff::pub::invest::api::contract::v1::PageResponse* value);
  void unsafe_arena_set_allocated_paging(::tinkoff::pub::invest::api::contract::v1::PageResponse* value);
  ::tinkoff::pub::invest::api::contract::v1::PageResponse* unsafe_arena_release_paging();

  private:
  const ::tinkoff::pub::invest::api::contract::v1::PageResponse& _internal_paging() const;
  ::tinkoff::pub::invest::api::contract::v1::PageResponse* _internal_mutable_paging();

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.pub.invest.api.contract.v1.GetSignalsResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 2,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetSignalsResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::tinkoff::pub::invest::api::contract::v1::Signal > signals_;
    ::tinkoff::pub::invest::api::contract::v1::PageResponse* paging_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_signals_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// GetStrategiesRequest

// optional string strategy_id = 1;
inline bool GetStrategiesRequest::has_strategy_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void GetStrategiesRequest::clear_strategy_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.strategy_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetStrategiesRequest::strategy_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetStrategiesRequest.strategy_id)
  return _internal_strategy_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetStrategiesRequest::set_strategy_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.strategy_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.GetStrategiesRequest.strategy_id)
}
inline std::string* GetStrategiesRequest::mutable_strategy_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_strategy_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.GetStrategiesRequest.strategy_id)
  return _s;
}
inline const std::string& GetStrategiesRequest::_internal_strategy_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.strategy_id_.Get();
}
inline void GetStrategiesRequest::_internal_set_strategy_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.strategy_id_.Set(value, GetArena());
}
inline std::string* GetStrategiesRequest::_internal_mutable_strategy_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.strategy_id_.Mutable( GetArena());
}
inline std::string* GetStrategiesRequest::release_strategy_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.GetStrategiesRequest.strategy_id)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.strategy_id_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.strategy_id_.Set("", GetArena());
  }
  return released;
}
inline void GetStrategiesRequest::set_allocated_strategy_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.strategy_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.strategy_id_.IsDefault()) {
    _impl_.strategy_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.GetStrategiesRequest.strategy_id)
}

// -------------------------------------------------------------------

// GetStrategiesResponse

// repeated .tinkoff.pub.invest.api.contract.v1.Strategy strategies = 1;
inline int GetStrategiesResponse::_internal_strategies_size() const {
  return _internal_strategies().size();
}
inline int GetStrategiesResponse::strategies_size() const {
  return _internal_strategies_size();
}
inline void GetStrategiesResponse::clear_strategies() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.strategies_.Clear();
}
inline ::tinkoff::pub::invest::api::contract::v1::Strategy* GetStrategiesResponse::mutable_strategies(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.GetStrategiesResponse.strategies)
  return _internal_mutable_strategies()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::Strategy>* GetStrategiesResponse::mutable_strategies()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.pub.invest.api.contract.v1.GetStrategiesResponse.strategies)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_strategies();
}
inline const ::tinkoff::pub::invest::api::contract::v1::Strategy& GetStrategiesResponse::strategies(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetStrategiesResponse.strategies)
  return _internal_strategies().Get(index);
}
inline ::tinkoff::pub::invest::api::contract::v1::Strategy* GetStrategiesResponse::add_strategies() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tinkoff::pub::invest::api::contract::v1::Strategy* _add = _internal_mutable_strategies()->Add();
  // @@protoc_insertion_point(field_add:tinkoff.pub.invest.api.contract.v1.GetStrategiesResponse.strategies)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::Strategy>& GetStrategiesResponse::strategies() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tinkoff.pub.invest.api.contract.v1.GetStrategiesResponse.strategies)
  return _internal_strategies();
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::Strategy>&
GetStrategiesResponse::_internal_strategies() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.strategies_;
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::Strategy>*
GetStrategiesResponse::_internal_mutable_strategies() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.strategies_;
}

// -------------------------------------------------------------------

// Strategy

// string strategy_id = 1 [(.google.api.field_behavior) = REQUIRED];
inline void Strategy::clear_strategy_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.strategy_id_.ClearToEmpty();
}
inline const std::string& Strategy::strategy_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.Strategy.strategy_id)
  return _internal_strategy_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Strategy::set_strategy_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.strategy_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.Strategy.strategy_id)
}
inline std::string* Strategy::mutable_strategy_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_strategy_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.Strategy.strategy_id)
  return _s;
}
inline const std::string& Strategy::_internal_strategy_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.strategy_id_.Get();
}
inline void Strategy::_internal_set_strategy_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.strategy_id_.Set(value, GetArena());
}
inline std::string* Strategy::_internal_mutable_strategy_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.strategy_id_.Mutable( GetArena());
}
inline std::string* Strategy::release_strategy_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.Strategy.strategy_id)
  return _impl_.strategy_id_.Release();
}
inline void Strategy::set_allocated_strategy_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.strategy_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.strategy_id_.IsDefault()) {
    _impl_.strategy_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.Strategy.strategy_id)
}

// string strategy_name = 2 [(.google.api.field_behavior) = REQUIRED];
inline void Strategy::clear_strategy_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.strategy_name_.ClearToEmpty();
}
inline const std::string& Strategy::strategy_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.Strategy.strategy_name)
  return _internal_strategy_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Strategy::set_strategy_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.strategy_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.Strategy.strategy_name)
}
inline std::string* Strategy::mutable_strategy_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_strategy_name();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.Strategy.strategy_name)
  return _s;
}
inline const std::string& Strategy::_internal_strategy_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.strategy_name_.Get();
}
inline void Strategy::_internal_set_strategy_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.strategy_name_.Set(value, GetArena());
}
inline std::string* Strategy::_internal_mutable_strategy_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.strategy_name_.Mutable( GetArena());
}
inline std::string* Strategy::release_strategy_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.Strategy.strategy_name)
  return _impl_.strategy_name_.Release();
}
inline void Strategy::set_allocated_strategy_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.strategy_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.strategy_name_.IsDefault()) {
    _impl_.strategy_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.Strategy.strategy_name)
}

// optional string strategy_description = 3;
inline bool Strategy::has_strategy_description() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Strategy::clear_strategy_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.strategy_description_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Strategy::strategy_description() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.Strategy.strategy_description)
  return _internal_strategy_description();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Strategy::set_strategy_description(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.strategy_description_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.Strategy.strategy_description)
}
inline std::string* Strategy::mutable_strategy_description() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_strategy_description();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.Strategy.strategy_description)
  return _s;
}
inline const std::string& Strategy::_internal_strategy_description() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.strategy_description_.Get();
}
inline void Strategy::_internal_set_strategy_description(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.strategy_description_.Set(value, GetArena());
}
inline std::string* Strategy::_internal_mutable_strategy_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.strategy_description_.Mutable( GetArena());
}
inline std::string* Strategy::release_strategy_description() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.Strategy.strategy_description)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.strategy_description_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.strategy_description_.Set("", GetArena());
  }
  return released;
}
inline void Strategy::set_allocated_strategy_description(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.strategy_description_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.strategy_description_.IsDefault()) {
    _impl_.strategy_description_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.Strategy.strategy_description)
}

// optional string strategy_url = 4;
inline bool Strategy::has_strategy_url() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void Strategy::clear_strategy_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.strategy_url_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& Strategy::strategy_url() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.Strategy.strategy_url)
  return _internal_strategy_url();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Strategy::set_strategy_url(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.strategy_url_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.Strategy.strategy_url)
}
inline std::string* Strategy::mutable_strategy_url() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_strategy_url();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.Strategy.strategy_url)
  return _s;
}
inline const std::string& Strategy::_internal_strategy_url() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.strategy_url_.Get();
}
inline void Strategy::_internal_set_strategy_url(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.strategy_url_.Set(value, GetArena());
}
inline std::string* Strategy::_internal_mutable_strategy_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.strategy_url_.Mutable( GetArena());
}
inline std::string* Strategy::release_strategy_url() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.Strategy.strategy_url)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.strategy_url_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.strategy_url_.Set("", GetArena());
  }
  return released;
}
inline void Strategy::set_allocated_strategy_url(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.strategy_url_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.strategy_url_.IsDefault()) {
    _impl_.strategy_url_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.Strategy.strategy_url)
}

// .tinkoff.pub.invest.api.contract.v1.StrategyType strategy_type = 5 [(.google.api.field_behavior) = REQUIRED];
inline void Strategy::clear_strategy_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.strategy_type_ = 0;
}
inline ::tinkoff::pub::invest::api::contract::v1::StrategyType Strategy::strategy_type() const {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.Strategy.strategy_type)
  return _internal_strategy_type();
}
inline void Strategy::set_strategy_type(::tinkoff::pub::invest::api::contract::v1::StrategyType value) {
  _internal_set_strategy_type(value);
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.Strategy.strategy_type)
}
inline ::tinkoff::pub::invest::api::contract::v1::StrategyType Strategy::_internal_strategy_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tinkoff::pub::invest::api::contract::v1::StrategyType>(_impl_.strategy_type_);
}
inline void Strategy::_internal_set_strategy_type(::tinkoff::pub::invest::api::contract::v1::StrategyType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.strategy_type_ = value;
}

// int32 active_signals = 6 [(.google.api.field_behavior) = REQUIRED];
inline void Strategy::clear_active_signals() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.active_signals_ = 0;
}
inline ::int32_t Strategy::active_signals() const {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.Strategy.active_signals)
  return _internal_active_signals();
}
inline void Strategy::set_active_signals(::int32_t value) {
  _internal_set_active_signals(value);
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.Strategy.active_signals)
}
inline ::int32_t Strategy::_internal_active_signals() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.active_signals_;
}
inline void Strategy::_internal_set_active_signals(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.active_signals_ = value;
}

// int32 total_signals = 7 [(.google.api.field_behavior) = REQUIRED];
inline void Strategy::clear_total_signals() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_signals_ = 0;
}
inline ::int32_t Strategy::total_signals() const {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.Strategy.total_signals)
  return _internal_total_signals();
}
inline void Strategy::set_total_signals(::int32_t value) {
  _internal_set_total_signals(value);
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.Strategy.total_signals)
}
inline ::int32_t Strategy::_internal_total_signals() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.total_signals_;
}
inline void Strategy::_internal_set_total_signals(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.total_signals_ = value;
}

// int64 time_in_position = 8 [(.google.api.field_behavior) = REQUIRED];
inline void Strategy::clear_time_in_position() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_in_position_ = ::int64_t{0};
}
inline ::int64_t Strategy::time_in_position() const {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.Strategy.time_in_position)
  return _internal_time_in_position();
}
inline void Strategy::set_time_in_position(::int64_t value) {
  _internal_set_time_in_position(value);
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.Strategy.time_in_position)
}
inline ::int64_t Strategy::_internal_time_in_position() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.time_in_position_;
}
inline void Strategy::_internal_set_time_in_position(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.time_in_position_ = value;
}

// .tinkoff.pub.invest.api.contract.v1.Quotation average_signal_yield = 9 [(.google.api.field_behavior) = REQUIRED];
inline bool Strategy::has_average_signal_yield() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.average_signal_yield_ != nullptr);
  return value;
}
inline const ::tinkoff::pub::invest::api::contract::v1::Quotation& Strategy::_internal_average_signal_yield() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tinkoff::pub::invest::api::contract::v1::Quotation* p = _impl_.average_signal_yield_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::pub::invest::api::contract::v1::Quotation&>(::tinkoff::pub::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::pub::invest::api::contract::v1::Quotation& Strategy::average_signal_yield() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.Strategy.average_signal_yield)
  return _internal_average_signal_yield();
}
inline void Strategy::unsafe_arena_set_allocated_average_signal_yield(::tinkoff::pub::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.average_signal_yield_);
  }
  _impl_.average_signal_yield_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.Strategy.average_signal_yield)
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* Strategy::release_average_signal_yield() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* released = _impl_.average_signal_yield_;
  _impl_.average_signal_yield_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* Strategy::unsafe_arena_release_average_signal_yield() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.Strategy.average_signal_yield)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* temp = _impl_.average_signal_yield_;
  _impl_.average_signal_yield_ = nullptr;
  return temp;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* Strategy::_internal_mutable_average_signal_yield() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.average_signal_yield_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::pub::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.average_signal_yield_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.average_signal_yield_;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* Strategy::mutable_average_signal_yield() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* _msg = _internal_mutable_average_signal_yield();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.Strategy.average_signal_yield)
  return _msg;
}
inline void Strategy::set_allocated_average_signal_yield(::tinkoff::pub::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.average_signal_yield_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.average_signal_yield_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.Strategy.average_signal_yield)
}

// .tinkoff.pub.invest.api.contract.v1.Quotation average_signal_yield_year = 10 [(.google.api.field_behavior) = REQUIRED];
inline bool Strategy::has_average_signal_yield_year() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.average_signal_yield_year_ != nullptr);
  return value;
}
inline const ::tinkoff::pub::invest::api::contract::v1::Quotation& Strategy::_internal_average_signal_yield_year() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tinkoff::pub::invest::api::contract::v1::Quotation* p = _impl_.average_signal_yield_year_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::pub::invest::api::contract::v1::Quotation&>(::tinkoff::pub::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::pub::invest::api::contract::v1::Quotation& Strategy::average_signal_yield_year() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.Strategy.average_signal_yield_year)
  return _internal_average_signal_yield_year();
}
inline void Strategy::unsafe_arena_set_allocated_average_signal_yield_year(::tinkoff::pub::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.average_signal_yield_year_);
  }
  _impl_.average_signal_yield_year_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.Strategy.average_signal_yield_year)
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* Strategy::release_average_signal_yield_year() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* released = _impl_.average_signal_yield_year_;
  _impl_.average_signal_yield_year_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* Strategy::unsafe_arena_release_average_signal_yield_year() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.Strategy.average_signal_yield_year)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* temp = _impl_.average_signal_yield_year_;
  _impl_.average_signal_yield_year_ = nullptr;
  return temp;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* Strategy::_internal_mutable_average_signal_yield_year() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.average_signal_yield_year_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::pub::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.average_signal_yield_year_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.average_signal_yield_year_;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* Strategy::mutable_average_signal_yield_year() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* _msg = _internal_mutable_average_signal_yield_year();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.Strategy.average_signal_yield_year)
  return _msg;
}
inline void Strategy::set_allocated_average_signal_yield_year(::tinkoff::pub::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.average_signal_yield_year_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.average_signal_yield_year_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.Strategy.average_signal_yield_year)
}

// .tinkoff.pub.invest.api.contract.v1.Quotation yield = 11 [(.google.api.field_behavior) = REQUIRED];
inline bool Strategy::has_yield() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.yield_ != nullptr);
  return value;
}
inline const ::tinkoff::pub::invest::api::contract::v1::Quotation& Strategy::_internal_yield() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tinkoff::pub::invest::api::contract::v1::Quotation* p = _impl_.yield_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::pub::invest::api::contract::v1::Quotation&>(::tinkoff::pub::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::pub::invest::api::contract::v1::Quotation& Strategy::yield() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.Strategy.yield)
  return _internal_yield();
}
inline void Strategy::unsafe_arena_set_allocated_yield(::tinkoff::pub::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.yield_);
  }
  _impl_.yield_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.Strategy.yield)
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* Strategy::release_yield() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* released = _impl_.yield_;
  _impl_.yield_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* Strategy::unsafe_arena_release_yield() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.Strategy.yield)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* temp = _impl_.yield_;
  _impl_.yield_ = nullptr;
  return temp;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* Strategy::_internal_mutable_yield() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.yield_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::pub::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.yield_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.yield_;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* Strategy::mutable_yield() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000010u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* _msg = _internal_mutable_yield();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.Strategy.yield)
  return _msg;
}
inline void Strategy::set_allocated_yield(::tinkoff::pub::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.yield_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.yield_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.Strategy.yield)
}

// .tinkoff.pub.invest.api.contract.v1.Quotation yield_year = 12 [(.google.api.field_behavior) = REQUIRED];
inline bool Strategy::has_yield_year() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.yield_year_ != nullptr);
  return value;
}
inline const ::tinkoff::pub::invest::api::contract::v1::Quotation& Strategy::_internal_yield_year() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tinkoff::pub::invest::api::contract::v1::Quotation* p = _impl_.yield_year_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::pub::invest::api::contract::v1::Quotation&>(::tinkoff::pub::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::pub::invest::api::contract::v1::Quotation& Strategy::yield_year() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.Strategy.yield_year)
  return _internal_yield_year();
}
inline void Strategy::unsafe_arena_set_allocated_yield_year(::tinkoff::pub::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.yield_year_);
  }
  _impl_.yield_year_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.Strategy.yield_year)
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* Strategy::release_yield_year() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* released = _impl_.yield_year_;
  _impl_.yield_year_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* Strategy::unsafe_arena_release_yield_year() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.Strategy.yield_year)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* temp = _impl_.yield_year_;
  _impl_.yield_year_ = nullptr;
  return temp;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* Strategy::_internal_mutable_yield_year() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.yield_year_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::pub::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.yield_year_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.yield_year_;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* Strategy::mutable_yield_year() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000020u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* _msg = _internal_mutable_yield_year();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.Strategy.yield_year)
  return _msg;
}
inline void Strategy::set_allocated_yield_year(::tinkoff::pub::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.yield_year_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.yield_year_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.Strategy.yield_year)
}

// -------------------------------------------------------------------

// GetSignalsRequest

// optional string signal_id = 1;
inline bool GetSignalsRequest::has_signal_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void GetSignalsRequest::clear_signal_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.signal_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetSignalsRequest::signal_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetSignalsRequest.signal_id)
  return _internal_signal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetSignalsRequest::set_signal_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.signal_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.GetSignalsRequest.signal_id)
}
inline std::string* GetSignalsRequest::mutable_signal_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_signal_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.GetSignalsRequest.signal_id)
  return _s;
}
inline const std::string& GetSignalsRequest::_internal_signal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.signal_id_.Get();
}
inline void GetSignalsRequest::_internal_set_signal_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.signal_id_.Set(value, GetArena());
}
inline std::string* GetSignalsRequest::_internal_mutable_signal_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.signal_id_.Mutable( GetArena());
}
inline std::string* GetSignalsRequest::release_signal_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.GetSignalsRequest.signal_id)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.signal_id_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.signal_id_.Set("", GetArena());
  }
  return released;
}
inline void GetSignalsRequest::set_allocated_signal_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.signal_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.signal_id_.IsDefault()) {
    _impl_.signal_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.GetSignalsRequest.signal_id)
}

// optional string strategy_id = 2;
inline bool GetSignalsRequest::has_strategy_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void GetSignalsRequest::clear_strategy_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.strategy_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GetSignalsRequest::strategy_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetSignalsRequest.strategy_id)
  return _internal_strategy_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetSignalsRequest::set_strategy_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.strategy_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.GetSignalsRequest.strategy_id)
}
inline std::string* GetSignalsRequest::mutable_strategy_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_strategy_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.GetSignalsRequest.strategy_id)
  return _s;
}
inline const std::string& GetSignalsRequest::_internal_strategy_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.strategy_id_.Get();
}
inline void GetSignalsRequest::_internal_set_strategy_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.strategy_id_.Set(value, GetArena());
}
inline std::string* GetSignalsRequest::_internal_mutable_strategy_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.strategy_id_.Mutable( GetArena());
}
inline std::string* GetSignalsRequest::release_strategy_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.GetSignalsRequest.strategy_id)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.strategy_id_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.strategy_id_.Set("", GetArena());
  }
  return released;
}
inline void GetSignalsRequest::set_allocated_strategy_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.strategy_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.strategy_id_.IsDefault()) {
    _impl_.strategy_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.GetSignalsRequest.strategy_id)
}

// optional .tinkoff.pub.invest.api.contract.v1.StrategyType strategy_type = 3;
inline bool GetSignalsRequest::has_strategy_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  return value;
}
inline void GetSignalsRequest::clear_strategy_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.strategy_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000040u;
}
inline ::tinkoff::pub::invest::api::contract::v1::StrategyType GetSignalsRequest::strategy_type() const {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetSignalsRequest.strategy_type)
  return _internal_strategy_type();
}
inline void GetSignalsRequest::set_strategy_type(::tinkoff::pub::invest::api::contract::v1::StrategyType value) {
  _internal_set_strategy_type(value);
  _impl_._has_bits_[0] |= 0x00000040u;
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.GetSignalsRequest.strategy_type)
}
inline ::tinkoff::pub::invest::api::contract::v1::StrategyType GetSignalsRequest::_internal_strategy_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tinkoff::pub::invest::api::contract::v1::StrategyType>(_impl_.strategy_type_);
}
inline void GetSignalsRequest::_internal_set_strategy_type(::tinkoff::pub::invest::api::contract::v1::StrategyType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.strategy_type_ = value;
}

// optional string instrument_uid = 4;
inline bool GetSignalsRequest::has_instrument_uid() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  return value;
}
inline void GetSignalsRequest::clear_instrument_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_uid_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const std::string& GetSignalsRequest::instrument_uid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetSignalsRequest.instrument_uid)
  return _internal_instrument_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetSignalsRequest::set_instrument_uid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.instrument_uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.GetSignalsRequest.instrument_uid)
}
inline std::string* GetSignalsRequest::mutable_instrument_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_instrument_uid();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.GetSignalsRequest.instrument_uid)
  return _s;
}
inline const std::string& GetSignalsRequest::_internal_instrument_uid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.instrument_uid_.Get();
}
inline void GetSignalsRequest::_internal_set_instrument_uid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  _impl_.instrument_uid_.Set(value, GetArena());
}
inline std::string* GetSignalsRequest::_internal_mutable_instrument_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000004u;
  return _impl_.instrument_uid_.Mutable( GetArena());
}
inline std::string* GetSignalsRequest::release_instrument_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.GetSignalsRequest.instrument_uid)
  if ((_impl_._has_bits_[0] & 0x00000004u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000004u;
  auto* released = _impl_.instrument_uid_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.instrument_uid_.Set("", GetArena());
  }
  return released;
}
inline void GetSignalsRequest::set_allocated_instrument_uid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  _impl_.instrument_uid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.instrument_uid_.IsDefault()) {
    _impl_.instrument_uid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.GetSignalsRequest.instrument_uid)
}

// optional .google.protobuf.Timestamp from = 5;
inline bool GetSignalsRequest::has_from() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.from_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& GetSignalsRequest::_internal_from() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.from_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& GetSignalsRequest::from() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetSignalsRequest.from)
  return _internal_from();
}
inline void GetSignalsRequest::unsafe_arena_set_allocated_from(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.from_);
  }
  _impl_.from_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.GetSignalsRequest.from)
}
inline ::google::protobuf::Timestamp* GetSignalsRequest::release_from() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::google::protobuf::Timestamp* released = _impl_.from_;
  _impl_.from_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* GetSignalsRequest::unsafe_arena_release_from() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.GetSignalsRequest.from)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::google::protobuf::Timestamp* temp = _impl_.from_;
  _impl_.from_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* GetSignalsRequest::_internal_mutable_from() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.from_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.from_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.from_;
}
inline ::google::protobuf::Timestamp* GetSignalsRequest::mutable_from() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_from();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.GetSignalsRequest.from)
  return _msg;
}
inline void GetSignalsRequest::set_allocated_from(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.from_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.from_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.GetSignalsRequest.from)
}

// optional .google.protobuf.Timestamp to = 6;
inline bool GetSignalsRequest::has_to() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.to_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& GetSignalsRequest::_internal_to() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.to_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& GetSignalsRequest::to() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetSignalsRequest.to)
  return _internal_to();
}
inline void GetSignalsRequest::unsafe_arena_set_allocated_to(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.to_);
  }
  _impl_.to_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.GetSignalsRequest.to)
}
inline ::google::protobuf::Timestamp* GetSignalsRequest::release_to() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::google::protobuf::Timestamp* released = _impl_.to_;
  _impl_.to_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* GetSignalsRequest::unsafe_arena_release_to() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.GetSignalsRequest.to)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::google::protobuf::Timestamp* temp = _impl_.to_;
  _impl_.to_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* GetSignalsRequest::_internal_mutable_to() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.to_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.to_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.to_;
}
inline ::google::protobuf::Timestamp* GetSignalsRequest::mutable_to() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000010u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.GetSignalsRequest.to)
  return _msg;
}
inline void GetSignalsRequest::set_allocated_to(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.to_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.to_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.GetSignalsRequest.to)
}

// optional .tinkoff.pub.invest.api.contract.v1.SignalDirection direction = 7;
inline bool GetSignalsRequest::has_direction() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  return value;
}
inline void GetSignalsRequest::clear_direction() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.direction_ = 0;
  _impl_._has_bits_[0] &= ~0x00000080u;
}
inline ::tinkoff::pub::invest::api::contract::v1::SignalDirection GetSignalsRequest::direction() const {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetSignalsRequest.direction)
  return _internal_direction();
}
inline void GetSignalsRequest::set_direction(::tinkoff::pub::invest::api::contract::v1::SignalDirection value) {
  _internal_set_direction(value);
  _impl_._has_bits_[0] |= 0x00000080u;
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.GetSignalsRequest.direction)
}
inline ::tinkoff::pub::invest::api::contract::v1::SignalDirection GetSignalsRequest::_internal_direction() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tinkoff::pub::invest::api::contract::v1::SignalDirection>(_impl_.direction_);
}
inline void GetSignalsRequest::_internal_set_direction(::tinkoff::pub::invest::api::contract::v1::SignalDirection value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.direction_ = value;
}

// optional .tinkoff.pub.invest.api.contract.v1.SignalState active = 8;
inline bool GetSignalsRequest::has_active() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void GetSignalsRequest::clear_active() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.active_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::tinkoff::pub::invest::api::contract::v1::SignalState GetSignalsRequest::active() const {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetSignalsRequest.active)
  return _internal_active();
}
inline void GetSignalsRequest::set_active(::tinkoff::pub::invest::api::contract::v1::SignalState value) {
  _internal_set_active(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.GetSignalsRequest.active)
}
inline ::tinkoff::pub::invest::api::contract::v1::SignalState GetSignalsRequest::_internal_active() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tinkoff::pub::invest::api::contract::v1::SignalState>(_impl_.active_);
}
inline void GetSignalsRequest::_internal_set_active(::tinkoff::pub::invest::api::contract::v1::SignalState value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.active_ = value;
}

// optional .tinkoff.pub.invest.api.contract.v1.Page paging = 9;
inline bool GetSignalsRequest::has_paging() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.paging_ != nullptr);
  return value;
}
inline const ::tinkoff::pub::invest::api::contract::v1::Page& GetSignalsRequest::_internal_paging() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tinkoff::pub::invest::api::contract::v1::Page* p = _impl_.paging_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::pub::invest::api::contract::v1::Page&>(::tinkoff::pub::invest::api::contract::v1::_Page_default_instance_);
}
inline const ::tinkoff::pub::invest::api::contract::v1::Page& GetSignalsRequest::paging() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetSignalsRequest.paging)
  return _internal_paging();
}
inline void GetSignalsRequest::unsafe_arena_set_allocated_paging(::tinkoff::pub::invest::api::contract::v1::Page* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.paging_);
  }
  _impl_.paging_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Page*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.GetSignalsRequest.paging)
}
inline ::tinkoff::pub::invest::api::contract::v1::Page* GetSignalsRequest::release_paging() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::tinkoff::pub::invest::api::contract::v1::Page* released = _impl_.paging_;
  _impl_.paging_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tinkoff::pub::invest::api::contract::v1::Page* GetSignalsRequest::unsafe_arena_release_paging() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.GetSignalsRequest.paging)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::tinkoff::pub::invest::api::contract::v1::Page* temp = _impl_.paging_;
  _impl_.paging_ = nullptr;
  return temp;
}
inline ::tinkoff::pub::invest::api::contract::v1::Page* GetSignalsRequest::_internal_mutable_paging() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.paging_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::pub::invest::api::contract::v1::Page>(GetArena());
    _impl_.paging_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Page*>(p);
  }
  return _impl_.paging_;
}
inline ::tinkoff::pub::invest::api::contract::v1::Page* GetSignalsRequest::mutable_paging() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000020u;
  ::tinkoff::pub::invest::api::contract::v1::Page* _msg = _internal_mutable_paging();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.GetSignalsRequest.paging)
  return _msg;
}
inline void GetSignalsRequest::set_allocated_paging(::tinkoff::pub::invest::api::contract::v1::Page* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.paging_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.paging_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Page*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.GetSignalsRequest.paging)
}

// -------------------------------------------------------------------

// GetSignalsResponse

// repeated .tinkoff.pub.invest.api.contract.v1.Signal signals = 1;
inline int GetSignalsResponse::_internal_signals_size() const {
  return _internal_signals().size();
}
inline int GetSignalsResponse::signals_size() const {
  return _internal_signals_size();
}
inline void GetSignalsResponse::clear_signals() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.signals_.Clear();
}
inline ::tinkoff::pub::invest::api::contract::v1::Signal* GetSignalsResponse::mutable_signals(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.GetSignalsResponse.signals)
  return _internal_mutable_signals()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::Signal>* GetSignalsResponse::mutable_signals()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.pub.invest.api.contract.v1.GetSignalsResponse.signals)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_signals();
}
inline const ::tinkoff::pub::invest::api::contract::v1::Signal& GetSignalsResponse::signals(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetSignalsResponse.signals)
  return _internal_signals().Get(index);
}
inline ::tinkoff::pub::invest::api::contract::v1::Signal* GetSignalsResponse::add_signals() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tinkoff::pub::invest::api::contract::v1::Signal* _add = _internal_mutable_signals()->Add();
  // @@protoc_insertion_point(field_add:tinkoff.pub.invest.api.contract.v1.GetSignalsResponse.signals)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::Signal>& GetSignalsResponse::signals() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tinkoff.pub.invest.api.contract.v1.GetSignalsResponse.signals)
  return _internal_signals();
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::Signal>&
GetSignalsResponse::_internal_signals() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.signals_;
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::Signal>*
GetSignalsResponse::_internal_mutable_signals() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.signals_;
}

// .tinkoff.pub.invest.api.contract.v1.PageResponse paging = 2;
inline bool GetSignalsResponse::has_paging() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.paging_ != nullptr);
  return value;
}
inline const ::tinkoff::pub::invest::api::contract::v1::PageResponse& GetSignalsResponse::_internal_paging() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tinkoff::pub::invest::api::contract::v1::PageResponse* p = _impl_.paging_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::pub::invest::api::contract::v1::PageResponse&>(::tinkoff::pub::invest::api::contract::v1::_PageResponse_default_instance_);
}
inline const ::tinkoff::pub::invest::api::contract::v1::PageResponse& GetSignalsResponse::paging() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetSignalsResponse.paging)
  return _internal_paging();
}
inline void GetSignalsResponse::unsafe_arena_set_allocated_paging(::tinkoff::pub::invest::api::contract::v1::PageResponse* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.paging_);
  }
  _impl_.paging_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::PageResponse*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.GetSignalsResponse.paging)
}
inline ::tinkoff::pub::invest::api::contract::v1::PageResponse* GetSignalsResponse::release_paging() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::pub::invest::api::contract::v1::PageResponse* released = _impl_.paging_;
  _impl_.paging_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tinkoff::pub::invest::api::contract::v1::PageResponse* GetSignalsResponse::unsafe_arena_release_paging() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.GetSignalsResponse.paging)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::pub::invest::api::contract::v1::PageResponse* temp = _impl_.paging_;
  _impl_.paging_ = nullptr;
  return temp;
}
inline ::tinkoff::pub::invest::api::contract::v1::PageResponse* GetSignalsResponse::_internal_mutable_paging() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.paging_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::pub::invest::api::contract::v1::PageResponse>(GetArena());
    _impl_.paging_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::PageResponse*>(p);
  }
  return _impl_.paging_;
}
inline ::tinkoff::pub::invest::api::contract::v1::PageResponse* GetSignalsResponse::mutable_paging() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::tinkoff::pub::invest::api::contract::v1::PageResponse* _msg = _internal_mutable_paging();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.GetSignalsResponse.paging)
  return _msg;
}
inline void GetSignalsResponse::set_allocated_paging(::tinkoff::pub::invest::api::contract::v1::PageResponse* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.paging_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.paging_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::PageResponse*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.GetSignalsResponse.paging)
}

// -------------------------------------------------------------------

// Signal

// string signal_id = 1 [(.google.api.field_behavior) = REQUIRED];
inline void Signal::clear_signal_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.signal_id_.ClearToEmpty();
}
inline const std::string& Signal::signal_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.Signal.signal_id)
  return _internal_signal_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Signal::set_signal_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.signal_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.Signal.signal_id)
}
inline std::string* Signal::mutable_signal_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_signal_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.Signal.signal_id)
  return _s;
}
inline const std::string& Signal::_internal_signal_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.signal_id_.Get();
}
inline void Signal::_internal_set_signal_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.signal_id_.Set(value, GetArena());
}
inline std::string* Signal::_internal_mutable_signal_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.signal_id_.Mutable( GetArena());
}
inline std::string* Signal::release_signal_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.Signal.signal_id)
  return _impl_.signal_id_.Release();
}
inline void Signal::set_allocated_signal_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.signal_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.signal_id_.IsDefault()) {
    _impl_.signal_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.Signal.signal_id)
}

// string strategy_id = 2 [(.google.api.field_behavior) = REQUIRED];
inline void Signal::clear_strategy_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.strategy_id_.ClearToEmpty();
}
inline const std::string& Signal::strategy_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.Signal.strategy_id)
  return _internal_strategy_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Signal::set_strategy_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.strategy_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.Signal.strategy_id)
}
inline std::string* Signal::mutable_strategy_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_strategy_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.Signal.strategy_id)
  return _s;
}
inline const std::string& Signal::_internal_strategy_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.strategy_id_.Get();
}
inline void Signal::_internal_set_strategy_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.strategy_id_.Set(value, GetArena());
}
inline std::string* Signal::_internal_mutable_strategy_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.strategy_id_.Mutable( GetArena());
}
inline std::string* Signal::release_strategy_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.Signal.strategy_id)
  return _impl_.strategy_id_.Release();
}
inline void Signal::set_allocated_strategy_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.strategy_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.strategy_id_.IsDefault()) {
    _impl_.strategy_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.Signal.strategy_id)
}

// string strategy_name = 3 [(.google.api.field_behavior) = REQUIRED];
inline void Signal::clear_strategy_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.strategy_name_.ClearToEmpty();
}
inline const std::string& Signal::strategy_name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.Signal.strategy_name)
  return _internal_strategy_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Signal::set_strategy_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.strategy_name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.Signal.strategy_name)
}
inline std::string* Signal::mutable_strategy_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_strategy_name();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.Signal.strategy_name)
  return _s;
}
inline const std::string& Signal::_internal_strategy_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.strategy_name_.Get();
}
inline void Signal::_internal_set_strategy_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.strategy_name_.Set(value, GetArena());
}
inline std::string* Signal::_internal_mutable_strategy_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.strategy_name_.Mutable( GetArena());
}
inline std::string* Signal::release_strategy_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.Signal.strategy_name)
  return _impl_.strategy_name_.Release();
}
inline void Signal::set_allocated_strategy_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.strategy_name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.strategy_name_.IsDefault()) {
    _impl_.strategy_name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.Signal.strategy_name)
}

// string instrument_uid = 4 [(.google.api.field_behavior) = REQUIRED];
inline void Signal::clear_instrument_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_uid_.ClearToEmpty();
}
inline const std::string& Signal::instrument_uid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.Signal.instrument_uid)
  return _internal_instrument_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Signal::set_instrument_uid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.Signal.instrument_uid)
}
inline std::string* Signal::mutable_instrument_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_instrument_uid();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.Signal.instrument_uid)
  return _s;
}
inline const std::string& Signal::_internal_instrument_uid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.instrument_uid_.Get();
}
inline void Signal::_internal_set_instrument_uid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_uid_.Set(value, GetArena());
}
inline std::string* Signal::_internal_mutable_instrument_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.instrument_uid_.Mutable( GetArena());
}
inline std::string* Signal::release_instrument_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.Signal.instrument_uid)
  return _impl_.instrument_uid_.Release();
}
inline void Signal::set_allocated_instrument_uid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_uid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.instrument_uid_.IsDefault()) {
    _impl_.instrument_uid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.Signal.instrument_uid)
}

// .google.protobuf.Timestamp create_dt = 5 [(.google.api.field_behavior) = REQUIRED];
inline bool Signal::has_create_dt() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.create_dt_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& Signal::_internal_create_dt() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.create_dt_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& Signal::create_dt() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.Signal.create_dt)
  return _internal_create_dt();
}
inline void Signal::unsafe_arena_set_allocated_create_dt(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.create_dt_);
  }
  _impl_.create_dt_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.Signal.create_dt)
}
inline ::google::protobuf::Timestamp* Signal::release_create_dt() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* released = _impl_.create_dt_;
  _impl_.create_dt_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* Signal::unsafe_arena_release_create_dt() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.Signal.create_dt)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* temp = _impl_.create_dt_;
  _impl_.create_dt_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Signal::_internal_mutable_create_dt() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.create_dt_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.create_dt_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.create_dt_;
}
inline ::google::protobuf::Timestamp* Signal::mutable_create_dt() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_create_dt();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.Signal.create_dt)
  return _msg;
}
inline void Signal::set_allocated_create_dt(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.create_dt_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.create_dt_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.Signal.create_dt)
}

// .tinkoff.pub.invest.api.contract.v1.SignalDirection direction = 6 [(.google.api.field_behavior) = REQUIRED];
inline void Signal::clear_direction() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.direction_ = 0;
}
inline ::tinkoff::pub::invest::api::contract::v1::SignalDirection Signal::direction() const {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.Signal.direction)
  return _internal_direction();
}
inline void Signal::set_direction(::tinkoff::pub::invest::api::contract::v1::SignalDirection value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.Signal.direction)
}
inline ::tinkoff::pub::invest::api::contract::v1::SignalDirection Signal::_internal_direction() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tinkoff::pub::invest::api::contract::v1::SignalDirection>(_impl_.direction_);
}
inline void Signal::_internal_set_direction(::tinkoff::pub::invest::api::contract::v1::SignalDirection value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.direction_ = value;
}

// .tinkoff.pub.invest.api.contract.v1.Quotation initial_price = 7 [(.google.api.field_behavior) = REQUIRED];
inline bool Signal::has_initial_price() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.initial_price_ != nullptr);
  return value;
}
inline const ::tinkoff::pub::invest::api::contract::v1::Quotation& Signal::_internal_initial_price() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tinkoff::pub::invest::api::contract::v1::Quotation* p = _impl_.initial_price_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::pub::invest::api::contract::v1::Quotation&>(::tinkoff::pub::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::pub::invest::api::contract::v1::Quotation& Signal::initial_price() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.Signal.initial_price)
  return _internal_initial_price();
}
inline void Signal::unsafe_arena_set_allocated_initial_price(::tinkoff::pub::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.initial_price_);
  }
  _impl_.initial_price_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.Signal.initial_price)
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* Signal::release_initial_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* released = _impl_.initial_price_;
  _impl_.initial_price_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* Signal::unsafe_arena_release_initial_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.Signal.initial_price)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* temp = _impl_.initial_price_;
  _impl_.initial_price_ = nullptr;
  return temp;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* Signal::_internal_mutable_initial_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.initial_price_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::pub::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.initial_price_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.initial_price_;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* Signal::mutable_initial_price() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* _msg = _internal_mutable_initial_price();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.Signal.initial_price)
  return _msg;
}
inline void Signal::set_allocated_initial_price(::tinkoff::pub::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.initial_price_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.initial_price_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.Signal.initial_price)
}

// optional string info = 8;
inline bool Signal::has_info() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void Signal::clear_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.info_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& Signal::info() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.Signal.info)
  return _internal_info();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Signal::set_info(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.info_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.Signal.info)
}
inline std::string* Signal::mutable_info() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_info();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.Signal.info)
  return _s;
}
inline const std::string& Signal::_internal_info() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.info_.Get();
}
inline void Signal::_internal_set_info(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.info_.Set(value, GetArena());
}
inline std::string* Signal::_internal_mutable_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.info_.Mutable( GetArena());
}
inline std::string* Signal::release_info() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.Signal.info)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.info_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.info_.Set("", GetArena());
  }
  return released;
}
inline void Signal::set_allocated_info(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.info_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.info_.IsDefault()) {
    _impl_.info_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.Signal.info)
}

// string name = 9 [(.google.api.field_behavior) = REQUIRED];
inline void Signal::clear_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& Signal::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.Signal.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Signal::set_name(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.Signal.name)
}
inline std::string* Signal::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.Signal.name)
  return _s;
}
inline const std::string& Signal::_internal_name() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.name_.Get();
}
inline void Signal::_internal_set_name(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.Set(value, GetArena());
}
inline std::string* Signal::_internal_mutable_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* Signal::release_name() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.Signal.name)
  return _impl_.name_.Release();
}
inline void Signal::set_allocated_name(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.name_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.name_.IsDefault()) {
    _impl_.name_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.Signal.name)
}

// .tinkoff.pub.invest.api.contract.v1.Quotation target_price = 10 [(.google.api.field_behavior) = REQUIRED];
inline bool Signal::has_target_price() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.target_price_ != nullptr);
  return value;
}
inline const ::tinkoff::pub::invest::api::contract::v1::Quotation& Signal::_internal_target_price() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tinkoff::pub::invest::api::contract::v1::Quotation* p = _impl_.target_price_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::pub::invest::api::contract::v1::Quotation&>(::tinkoff::pub::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::pub::invest::api::contract::v1::Quotation& Signal::target_price() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.Signal.target_price)
  return _internal_target_price();
}
inline void Signal::unsafe_arena_set_allocated_target_price(::tinkoff::pub::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.target_price_);
  }
  _impl_.target_price_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.Signal.target_price)
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* Signal::release_target_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* released = _impl_.target_price_;
  _impl_.target_price_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* Signal::unsafe_arena_release_target_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.Signal.target_price)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* temp = _impl_.target_price_;
  _impl_.target_price_ = nullptr;
  return temp;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* Signal::_internal_mutable_target_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.target_price_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::pub::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.target_price_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.target_price_;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* Signal::mutable_target_price() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* _msg = _internal_mutable_target_price();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.Signal.target_price)
  return _msg;
}
inline void Signal::set_allocated_target_price(::tinkoff::pub::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.target_price_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.target_price_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.Signal.target_price)
}

// .google.protobuf.Timestamp end_dt = 11 [(.google.api.field_behavior) = REQUIRED];
inline bool Signal::has_end_dt() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.end_dt_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& Signal::_internal_end_dt() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.end_dt_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& Signal::end_dt() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.Signal.end_dt)
  return _internal_end_dt();
}
inline void Signal::unsafe_arena_set_allocated_end_dt(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.end_dt_);
  }
  _impl_.end_dt_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.Signal.end_dt)
}
inline ::google::protobuf::Timestamp* Signal::release_end_dt() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::google::protobuf::Timestamp* released = _impl_.end_dt_;
  _impl_.end_dt_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* Signal::unsafe_arena_release_end_dt() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.Signal.end_dt)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::google::protobuf::Timestamp* temp = _impl_.end_dt_;
  _impl_.end_dt_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Signal::_internal_mutable_end_dt() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.end_dt_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.end_dt_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.end_dt_;
}
inline ::google::protobuf::Timestamp* Signal::mutable_end_dt() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000010u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_end_dt();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.Signal.end_dt)
  return _msg;
}
inline void Signal::set_allocated_end_dt(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.end_dt_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.end_dt_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.Signal.end_dt)
}

// optional int32 probability = 12;
inline bool Signal::has_probability() const {
  bool value = (_impl_._has_bits_[0] & 0x00000100u) != 0;
  return value;
}
inline void Signal::clear_probability() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.probability_ = 0;
  _impl_._has_bits_[0] &= ~0x00000100u;
}
inline ::int32_t Signal::probability() const {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.Signal.probability)
  return _internal_probability();
}
inline void Signal::set_probability(::int32_t value) {
  _internal_set_probability(value);
  _impl_._has_bits_[0] |= 0x00000100u;
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.Signal.probability)
}
inline ::int32_t Signal::_internal_probability() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.probability_;
}
inline void Signal::_internal_set_probability(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.probability_ = value;
}

// optional .tinkoff.pub.invest.api.contract.v1.Quotation stoploss = 13;
inline bool Signal::has_stoploss() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.stoploss_ != nullptr);
  return value;
}
inline const ::tinkoff::pub::invest::api::contract::v1::Quotation& Signal::_internal_stoploss() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tinkoff::pub::invest::api::contract::v1::Quotation* p = _impl_.stoploss_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::pub::invest::api::contract::v1::Quotation&>(::tinkoff::pub::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::pub::invest::api::contract::v1::Quotation& Signal::stoploss() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.Signal.stoploss)
  return _internal_stoploss();
}
inline void Signal::unsafe_arena_set_allocated_stoploss(::tinkoff::pub::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.stoploss_);
  }
  _impl_.stoploss_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.Signal.stoploss)
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* Signal::release_stoploss() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* released = _impl_.stoploss_;
  _impl_.stoploss_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* Signal::unsafe_arena_release_stoploss() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.Signal.stoploss)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* temp = _impl_.stoploss_;
  _impl_.stoploss_ = nullptr;
  return temp;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* Signal::_internal_mutable_stoploss() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.stoploss_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::pub::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.stoploss_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.stoploss_;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* Signal::mutable_stoploss() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000020u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* _msg = _internal_mutable_stoploss();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.Signal.stoploss)
  return _msg;
}
inline void Signal::set_allocated_stoploss(::tinkoff::pub::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.stoploss_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.stoploss_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.Signal.stoploss)
}

// optional .tinkoff.pub.invest.api.contract.v1.Quotation close_price = 14;
inline bool Signal::has_close_price() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.close_price_ != nullptr);
  return value;
}
inline const ::tinkoff::pub::invest::api::contract::v1::Quotation& Signal::_internal_close_price() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tinkoff::pub::invest::api::contract::v1::Quotation* p = _impl_.close_price_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::pub::invest::api::contract::v1::Quotation&>(::tinkoff::pub::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::pub::invest::api::contract::v1::Quotation& Signal::close_price() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.Signal.close_price)
  return _internal_close_price();
}
inline void Signal::unsafe_arena_set_allocated_close_price(::tinkoff::pub::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.close_price_);
  }
  _impl_.close_price_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.Signal.close_price)
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* Signal::release_close_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* released = _impl_.close_price_;
  _impl_.close_price_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* Signal::unsafe_arena_release_close_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.Signal.close_price)

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* temp = _impl_.close_price_;
  _impl_.close_price_ = nullptr;
  return temp;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* Signal::_internal_mutable_close_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.close_price_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::pub::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.close_price_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.close_price_;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* Signal::mutable_close_price() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000040u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* _msg = _internal_mutable_close_price();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.Signal.close_price)
  return _msg;
}
inline void Signal::set_allocated_close_price(::tinkoff::pub::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.close_price_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }

  _impl_.close_price_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.Signal.close_price)
}

// optional .google.protobuf.Timestamp close_dt = 15;
inline bool Signal::has_close_dt() const {
  bool value = (_impl_._has_bits_[0] & 0x00000080u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.close_dt_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& Signal::_internal_close_dt() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.close_dt_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& Signal::close_dt() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.Signal.close_dt)
  return _internal_close_dt();
}
inline void Signal::unsafe_arena_set_allocated_close_dt(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.close_dt_);
  }
  _impl_.close_dt_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.Signal.close_dt)
}
inline ::google::protobuf::Timestamp* Signal::release_close_dt() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::google::protobuf::Timestamp* released = _impl_.close_dt_;
  _impl_.close_dt_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* Signal::unsafe_arena_release_close_dt() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.Signal.close_dt)

  _impl_._has_bits_[0] &= ~0x00000080u;
  ::google::protobuf::Timestamp* temp = _impl_.close_dt_;
  _impl_.close_dt_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Signal::_internal_mutable_close_dt() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.close_dt_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.close_dt_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.close_dt_;
}
inline ::google::protobuf::Timestamp* Signal::mutable_close_dt() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000080u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_close_dt();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.Signal.close_dt)
  return _msg;
}
inline void Signal::set_allocated_close_dt(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.close_dt_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000080u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000080u;
  }

  _impl_.close_dt_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.Signal.close_dt)
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace contract
}  // namespace api
}  // namespace invest
}  // namespace pub
}  // namespace tinkoff


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::tinkoff::pub::invest::api::contract::v1::StrategyType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tinkoff::pub::invest::api::contract::v1::StrategyType>() {
  return ::tinkoff::pub::invest::api::contract::v1::StrategyType_descriptor();
}
template <>
struct is_proto_enum<::tinkoff::pub::invest::api::contract::v1::SignalDirection> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tinkoff::pub::invest::api::contract::v1::SignalDirection>() {
  return ::tinkoff::pub::invest::api::contract::v1::SignalDirection_descriptor();
}
template <>
struct is_proto_enum<::tinkoff::pub::invest::api::contract::v1::SignalState> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tinkoff::pub::invest::api::contract::v1::SignalState>() {
  return ::tinkoff::pub::invest::api::contract::v1::SignalState_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // signals_2eproto_2epb_2eh
