// Generated by the protocol buffer compiler.  DO NOT EDIT!
// NO CHECKED-IN PROTOBUF GENCODE
// source: marketdata.proto
// Protobuf C++ Version: 5.29.3

#ifndef marketdata_2eproto_2epb_2eh
#define marketdata_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/runtime_version.h"
#if PROTOBUF_VERSION != 5029003
#error "Protobuf C++ gencode is built with an incompatible version of"
#error "Protobuf C++ headers/runtime. See"
#error "https://protobuf.dev/support/cross-version-runtime-guarantee/#cpp"
#endif
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/message_lite.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
#include "google/protobuf/timestamp.pb.h"
#include "common.pb.h"
#include <google/api/field_behavior.pb.h>
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_marketdata_2eproto

namespace google {
namespace protobuf {
namespace internal {
template <typename T>
::absl::string_view GetAnyMessageName();
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_marketdata_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_marketdata_2eproto;
namespace tinkoff {
namespace pub {
namespace invest {
namespace api {
namespace contract {
namespace v1 {
class Candle;
struct CandleDefaultTypeInternal;
extern CandleDefaultTypeInternal _Candle_default_instance_;
class CandleInstrument;
struct CandleInstrumentDefaultTypeInternal;
extern CandleInstrumentDefaultTypeInternal _CandleInstrument_default_instance_;
class CandleSubscription;
struct CandleSubscriptionDefaultTypeInternal;
extern CandleSubscriptionDefaultTypeInternal _CandleSubscription_default_instance_;
class GetCandlesRequest;
struct GetCandlesRequestDefaultTypeInternal;
extern GetCandlesRequestDefaultTypeInternal _GetCandlesRequest_default_instance_;
class GetCandlesResponse;
struct GetCandlesResponseDefaultTypeInternal;
extern GetCandlesResponseDefaultTypeInternal _GetCandlesResponse_default_instance_;
class GetClosePricesRequest;
struct GetClosePricesRequestDefaultTypeInternal;
extern GetClosePricesRequestDefaultTypeInternal _GetClosePricesRequest_default_instance_;
class GetClosePricesResponse;
struct GetClosePricesResponseDefaultTypeInternal;
extern GetClosePricesResponseDefaultTypeInternal _GetClosePricesResponse_default_instance_;
class GetLastPricesRequest;
struct GetLastPricesRequestDefaultTypeInternal;
extern GetLastPricesRequestDefaultTypeInternal _GetLastPricesRequest_default_instance_;
class GetLastPricesResponse;
struct GetLastPricesResponseDefaultTypeInternal;
extern GetLastPricesResponseDefaultTypeInternal _GetLastPricesResponse_default_instance_;
class GetLastTradesRequest;
struct GetLastTradesRequestDefaultTypeInternal;
extern GetLastTradesRequestDefaultTypeInternal _GetLastTradesRequest_default_instance_;
class GetLastTradesResponse;
struct GetLastTradesResponseDefaultTypeInternal;
extern GetLastTradesResponseDefaultTypeInternal _GetLastTradesResponse_default_instance_;
class GetMySubscriptions;
struct GetMySubscriptionsDefaultTypeInternal;
extern GetMySubscriptionsDefaultTypeInternal _GetMySubscriptions_default_instance_;
class GetOrderBookRequest;
struct GetOrderBookRequestDefaultTypeInternal;
extern GetOrderBookRequestDefaultTypeInternal _GetOrderBookRequest_default_instance_;
class GetOrderBookResponse;
struct GetOrderBookResponseDefaultTypeInternal;
extern GetOrderBookResponseDefaultTypeInternal _GetOrderBookResponse_default_instance_;
class GetTechAnalysisRequest;
struct GetTechAnalysisRequestDefaultTypeInternal;
extern GetTechAnalysisRequestDefaultTypeInternal _GetTechAnalysisRequest_default_instance_;
class GetTechAnalysisRequest_Deviation;
struct GetTechAnalysisRequest_DeviationDefaultTypeInternal;
extern GetTechAnalysisRequest_DeviationDefaultTypeInternal _GetTechAnalysisRequest_Deviation_default_instance_;
class GetTechAnalysisRequest_Smoothing;
struct GetTechAnalysisRequest_SmoothingDefaultTypeInternal;
extern GetTechAnalysisRequest_SmoothingDefaultTypeInternal _GetTechAnalysisRequest_Smoothing_default_instance_;
class GetTechAnalysisResponse;
struct GetTechAnalysisResponseDefaultTypeInternal;
extern GetTechAnalysisResponseDefaultTypeInternal _GetTechAnalysisResponse_default_instance_;
class GetTechAnalysisResponse_TechAnalysisItem;
struct GetTechAnalysisResponse_TechAnalysisItemDefaultTypeInternal;
extern GetTechAnalysisResponse_TechAnalysisItemDefaultTypeInternal _GetTechAnalysisResponse_TechAnalysisItem_default_instance_;
class GetTradingStatusRequest;
struct GetTradingStatusRequestDefaultTypeInternal;
extern GetTradingStatusRequestDefaultTypeInternal _GetTradingStatusRequest_default_instance_;
class GetTradingStatusResponse;
struct GetTradingStatusResponseDefaultTypeInternal;
extern GetTradingStatusResponseDefaultTypeInternal _GetTradingStatusResponse_default_instance_;
class GetTradingStatusesRequest;
struct GetTradingStatusesRequestDefaultTypeInternal;
extern GetTradingStatusesRequestDefaultTypeInternal _GetTradingStatusesRequest_default_instance_;
class GetTradingStatusesResponse;
struct GetTradingStatusesResponseDefaultTypeInternal;
extern GetTradingStatusesResponseDefaultTypeInternal _GetTradingStatusesResponse_default_instance_;
class HistoricCandle;
struct HistoricCandleDefaultTypeInternal;
extern HistoricCandleDefaultTypeInternal _HistoricCandle_default_instance_;
class InfoInstrument;
struct InfoInstrumentDefaultTypeInternal;
extern InfoInstrumentDefaultTypeInternal _InfoInstrument_default_instance_;
class InfoSubscription;
struct InfoSubscriptionDefaultTypeInternal;
extern InfoSubscriptionDefaultTypeInternal _InfoSubscription_default_instance_;
class InstrumentClosePriceRequest;
struct InstrumentClosePriceRequestDefaultTypeInternal;
extern InstrumentClosePriceRequestDefaultTypeInternal _InstrumentClosePriceRequest_default_instance_;
class InstrumentClosePriceResponse;
struct InstrumentClosePriceResponseDefaultTypeInternal;
extern InstrumentClosePriceResponseDefaultTypeInternal _InstrumentClosePriceResponse_default_instance_;
class LastPrice;
struct LastPriceDefaultTypeInternal;
extern LastPriceDefaultTypeInternal _LastPrice_default_instance_;
class LastPriceInstrument;
struct LastPriceInstrumentDefaultTypeInternal;
extern LastPriceInstrumentDefaultTypeInternal _LastPriceInstrument_default_instance_;
class LastPriceSubscription;
struct LastPriceSubscriptionDefaultTypeInternal;
extern LastPriceSubscriptionDefaultTypeInternal _LastPriceSubscription_default_instance_;
class MarketDataRequest;
struct MarketDataRequestDefaultTypeInternal;
extern MarketDataRequestDefaultTypeInternal _MarketDataRequest_default_instance_;
class MarketDataResponse;
struct MarketDataResponseDefaultTypeInternal;
extern MarketDataResponseDefaultTypeInternal _MarketDataResponse_default_instance_;
class MarketDataServerSideStreamRequest;
struct MarketDataServerSideStreamRequestDefaultTypeInternal;
extern MarketDataServerSideStreamRequestDefaultTypeInternal _MarketDataServerSideStreamRequest_default_instance_;
class Order;
struct OrderDefaultTypeInternal;
extern OrderDefaultTypeInternal _Order_default_instance_;
class OrderBook;
struct OrderBookDefaultTypeInternal;
extern OrderBookDefaultTypeInternal _OrderBook_default_instance_;
class OrderBookInstrument;
struct OrderBookInstrumentDefaultTypeInternal;
extern OrderBookInstrumentDefaultTypeInternal _OrderBookInstrument_default_instance_;
class OrderBookSubscription;
struct OrderBookSubscriptionDefaultTypeInternal;
extern OrderBookSubscriptionDefaultTypeInternal _OrderBookSubscription_default_instance_;
class SubscribeCandlesRequest;
struct SubscribeCandlesRequestDefaultTypeInternal;
extern SubscribeCandlesRequestDefaultTypeInternal _SubscribeCandlesRequest_default_instance_;
class SubscribeCandlesResponse;
struct SubscribeCandlesResponseDefaultTypeInternal;
extern SubscribeCandlesResponseDefaultTypeInternal _SubscribeCandlesResponse_default_instance_;
class SubscribeInfoRequest;
struct SubscribeInfoRequestDefaultTypeInternal;
extern SubscribeInfoRequestDefaultTypeInternal _SubscribeInfoRequest_default_instance_;
class SubscribeInfoResponse;
struct SubscribeInfoResponseDefaultTypeInternal;
extern SubscribeInfoResponseDefaultTypeInternal _SubscribeInfoResponse_default_instance_;
class SubscribeLastPriceRequest;
struct SubscribeLastPriceRequestDefaultTypeInternal;
extern SubscribeLastPriceRequestDefaultTypeInternal _SubscribeLastPriceRequest_default_instance_;
class SubscribeLastPriceResponse;
struct SubscribeLastPriceResponseDefaultTypeInternal;
extern SubscribeLastPriceResponseDefaultTypeInternal _SubscribeLastPriceResponse_default_instance_;
class SubscribeOrderBookRequest;
struct SubscribeOrderBookRequestDefaultTypeInternal;
extern SubscribeOrderBookRequestDefaultTypeInternal _SubscribeOrderBookRequest_default_instance_;
class SubscribeOrderBookResponse;
struct SubscribeOrderBookResponseDefaultTypeInternal;
extern SubscribeOrderBookResponseDefaultTypeInternal _SubscribeOrderBookResponse_default_instance_;
class SubscribeTradesRequest;
struct SubscribeTradesRequestDefaultTypeInternal;
extern SubscribeTradesRequestDefaultTypeInternal _SubscribeTradesRequest_default_instance_;
class SubscribeTradesResponse;
struct SubscribeTradesResponseDefaultTypeInternal;
extern SubscribeTradesResponseDefaultTypeInternal _SubscribeTradesResponse_default_instance_;
class Trade;
struct TradeDefaultTypeInternal;
extern TradeDefaultTypeInternal _Trade_default_instance_;
class TradeInstrument;
struct TradeInstrumentDefaultTypeInternal;
extern TradeInstrumentDefaultTypeInternal _TradeInstrument_default_instance_;
class TradeSubscription;
struct TradeSubscriptionDefaultTypeInternal;
extern TradeSubscriptionDefaultTypeInternal _TradeSubscription_default_instance_;
class TradingStatus;
struct TradingStatusDefaultTypeInternal;
extern TradingStatusDefaultTypeInternal _TradingStatus_default_instance_;
}  // namespace v1
}  // namespace contract
}  // namespace api
}  // namespace invest
}  // namespace pub
}  // namespace tinkoff
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

namespace tinkoff {
namespace pub {
namespace invest {
namespace api {
namespace contract {
namespace v1 {
enum GetCandlesRequest_CandleSource : int {
  GetCandlesRequest_CandleSource_CANDLE_SOURCE_UNSPECIFIED = 0,
  GetCandlesRequest_CandleSource_CANDLE_SOURCE_EXCHANGE = 1,
  GetCandlesRequest_CandleSource_CANDLE_SOURCE_INCLUDE_WEEKEND = 3,
  GetCandlesRequest_CandleSource_GetCandlesRequest_CandleSource_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  GetCandlesRequest_CandleSource_GetCandlesRequest_CandleSource_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool GetCandlesRequest_CandleSource_IsValid(int value);
extern const uint32_t GetCandlesRequest_CandleSource_internal_data_[];
constexpr GetCandlesRequest_CandleSource GetCandlesRequest_CandleSource_CandleSource_MIN = static_cast<GetCandlesRequest_CandleSource>(0);
constexpr GetCandlesRequest_CandleSource GetCandlesRequest_CandleSource_CandleSource_MAX = static_cast<GetCandlesRequest_CandleSource>(3);
constexpr int GetCandlesRequest_CandleSource_CandleSource_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
GetCandlesRequest_CandleSource_descriptor();
template <typename T>
const std::string& GetCandlesRequest_CandleSource_Name(T value) {
  static_assert(std::is_same<T, GetCandlesRequest_CandleSource>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to CandleSource_Name().");
  return GetCandlesRequest_CandleSource_Name(static_cast<GetCandlesRequest_CandleSource>(value));
}
template <>
inline const std::string& GetCandlesRequest_CandleSource_Name(GetCandlesRequest_CandleSource value) {
  return ::google::protobuf::internal::NameOfDenseEnum<GetCandlesRequest_CandleSource_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool GetCandlesRequest_CandleSource_Parse(absl::string_view name, GetCandlesRequest_CandleSource* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GetCandlesRequest_CandleSource>(
      GetCandlesRequest_CandleSource_descriptor(), name, value);
}
enum GetTechAnalysisRequest_IndicatorInterval : int {
  GetTechAnalysisRequest_IndicatorInterval_INDICATOR_INTERVAL_UNSPECIFIED = 0,
  GetTechAnalysisRequest_IndicatorInterval_INDICATOR_INTERVAL_ONE_MINUTE = 1,
  GetTechAnalysisRequest_IndicatorInterval_INDICATOR_INTERVAL_FIVE_MINUTES = 2,
  GetTechAnalysisRequest_IndicatorInterval_INDICATOR_INTERVAL_FIFTEEN_MINUTES = 3,
  GetTechAnalysisRequest_IndicatorInterval_INDICATOR_INTERVAL_ONE_HOUR = 4,
  GetTechAnalysisRequest_IndicatorInterval_INDICATOR_INTERVAL_ONE_DAY = 5,
  GetTechAnalysisRequest_IndicatorInterval_INDICATOR_INTERVAL_2_MIN = 6,
  GetTechAnalysisRequest_IndicatorInterval_INDICATOR_INTERVAL_3_MIN = 7,
  GetTechAnalysisRequest_IndicatorInterval_INDICATOR_INTERVAL_10_MIN = 8,
  GetTechAnalysisRequest_IndicatorInterval_INDICATOR_INTERVAL_30_MIN = 9,
  GetTechAnalysisRequest_IndicatorInterval_INDICATOR_INTERVAL_2_HOUR = 10,
  GetTechAnalysisRequest_IndicatorInterval_INDICATOR_INTERVAL_4_HOUR = 11,
  GetTechAnalysisRequest_IndicatorInterval_INDICATOR_INTERVAL_WEEK = 12,
  GetTechAnalysisRequest_IndicatorInterval_INDICATOR_INTERVAL_MONTH = 13,
  GetTechAnalysisRequest_IndicatorInterval_GetTechAnalysisRequest_IndicatorInterval_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  GetTechAnalysisRequest_IndicatorInterval_GetTechAnalysisRequest_IndicatorInterval_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool GetTechAnalysisRequest_IndicatorInterval_IsValid(int value);
extern const uint32_t GetTechAnalysisRequest_IndicatorInterval_internal_data_[];
constexpr GetTechAnalysisRequest_IndicatorInterval GetTechAnalysisRequest_IndicatorInterval_IndicatorInterval_MIN = static_cast<GetTechAnalysisRequest_IndicatorInterval>(0);
constexpr GetTechAnalysisRequest_IndicatorInterval GetTechAnalysisRequest_IndicatorInterval_IndicatorInterval_MAX = static_cast<GetTechAnalysisRequest_IndicatorInterval>(13);
constexpr int GetTechAnalysisRequest_IndicatorInterval_IndicatorInterval_ARRAYSIZE = 13 + 1;
const ::google::protobuf::EnumDescriptor*
GetTechAnalysisRequest_IndicatorInterval_descriptor();
template <typename T>
const std::string& GetTechAnalysisRequest_IndicatorInterval_Name(T value) {
  static_assert(std::is_same<T, GetTechAnalysisRequest_IndicatorInterval>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to IndicatorInterval_Name().");
  return GetTechAnalysisRequest_IndicatorInterval_Name(static_cast<GetTechAnalysisRequest_IndicatorInterval>(value));
}
template <>
inline const std::string& GetTechAnalysisRequest_IndicatorInterval_Name(GetTechAnalysisRequest_IndicatorInterval value) {
  return ::google::protobuf::internal::NameOfDenseEnum<GetTechAnalysisRequest_IndicatorInterval_descriptor,
                                                 0, 13>(
      static_cast<int>(value));
}
inline bool GetTechAnalysisRequest_IndicatorInterval_Parse(absl::string_view name, GetTechAnalysisRequest_IndicatorInterval* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GetTechAnalysisRequest_IndicatorInterval>(
      GetTechAnalysisRequest_IndicatorInterval_descriptor(), name, value);
}
enum GetTechAnalysisRequest_TypeOfPrice : int {
  GetTechAnalysisRequest_TypeOfPrice_TYPE_OF_PRICE_UNSPECIFIED = 0,
  GetTechAnalysisRequest_TypeOfPrice_TYPE_OF_PRICE_CLOSE = 1,
  GetTechAnalysisRequest_TypeOfPrice_TYPE_OF_PRICE_OPEN = 2,
  GetTechAnalysisRequest_TypeOfPrice_TYPE_OF_PRICE_HIGH = 3,
  GetTechAnalysisRequest_TypeOfPrice_TYPE_OF_PRICE_LOW = 4,
  GetTechAnalysisRequest_TypeOfPrice_TYPE_OF_PRICE_AVG = 5,
  GetTechAnalysisRequest_TypeOfPrice_GetTechAnalysisRequest_TypeOfPrice_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  GetTechAnalysisRequest_TypeOfPrice_GetTechAnalysisRequest_TypeOfPrice_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool GetTechAnalysisRequest_TypeOfPrice_IsValid(int value);
extern const uint32_t GetTechAnalysisRequest_TypeOfPrice_internal_data_[];
constexpr GetTechAnalysisRequest_TypeOfPrice GetTechAnalysisRequest_TypeOfPrice_TypeOfPrice_MIN = static_cast<GetTechAnalysisRequest_TypeOfPrice>(0);
constexpr GetTechAnalysisRequest_TypeOfPrice GetTechAnalysisRequest_TypeOfPrice_TypeOfPrice_MAX = static_cast<GetTechAnalysisRequest_TypeOfPrice>(5);
constexpr int GetTechAnalysisRequest_TypeOfPrice_TypeOfPrice_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
GetTechAnalysisRequest_TypeOfPrice_descriptor();
template <typename T>
const std::string& GetTechAnalysisRequest_TypeOfPrice_Name(T value) {
  static_assert(std::is_same<T, GetTechAnalysisRequest_TypeOfPrice>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to TypeOfPrice_Name().");
  return GetTechAnalysisRequest_TypeOfPrice_Name(static_cast<GetTechAnalysisRequest_TypeOfPrice>(value));
}
template <>
inline const std::string& GetTechAnalysisRequest_TypeOfPrice_Name(GetTechAnalysisRequest_TypeOfPrice value) {
  return ::google::protobuf::internal::NameOfDenseEnum<GetTechAnalysisRequest_TypeOfPrice_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool GetTechAnalysisRequest_TypeOfPrice_Parse(absl::string_view name, GetTechAnalysisRequest_TypeOfPrice* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GetTechAnalysisRequest_TypeOfPrice>(
      GetTechAnalysisRequest_TypeOfPrice_descriptor(), name, value);
}
enum GetTechAnalysisRequest_IndicatorType : int {
  GetTechAnalysisRequest_IndicatorType_INDICATOR_TYPE_UNSPECIFIED = 0,
  GetTechAnalysisRequest_IndicatorType_INDICATOR_TYPE_BB = 1,
  GetTechAnalysisRequest_IndicatorType_INDICATOR_TYPE_EMA = 2,
  GetTechAnalysisRequest_IndicatorType_INDICATOR_TYPE_RSI = 3,
  GetTechAnalysisRequest_IndicatorType_INDICATOR_TYPE_MACD = 4,
  GetTechAnalysisRequest_IndicatorType_INDICATOR_TYPE_SMA = 5,
  GetTechAnalysisRequest_IndicatorType_GetTechAnalysisRequest_IndicatorType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  GetTechAnalysisRequest_IndicatorType_GetTechAnalysisRequest_IndicatorType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool GetTechAnalysisRequest_IndicatorType_IsValid(int value);
extern const uint32_t GetTechAnalysisRequest_IndicatorType_internal_data_[];
constexpr GetTechAnalysisRequest_IndicatorType GetTechAnalysisRequest_IndicatorType_IndicatorType_MIN = static_cast<GetTechAnalysisRequest_IndicatorType>(0);
constexpr GetTechAnalysisRequest_IndicatorType GetTechAnalysisRequest_IndicatorType_IndicatorType_MAX = static_cast<GetTechAnalysisRequest_IndicatorType>(5);
constexpr int GetTechAnalysisRequest_IndicatorType_IndicatorType_ARRAYSIZE = 5 + 1;
const ::google::protobuf::EnumDescriptor*
GetTechAnalysisRequest_IndicatorType_descriptor();
template <typename T>
const std::string& GetTechAnalysisRequest_IndicatorType_Name(T value) {
  static_assert(std::is_same<T, GetTechAnalysisRequest_IndicatorType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to IndicatorType_Name().");
  return GetTechAnalysisRequest_IndicatorType_Name(static_cast<GetTechAnalysisRequest_IndicatorType>(value));
}
template <>
inline const std::string& GetTechAnalysisRequest_IndicatorType_Name(GetTechAnalysisRequest_IndicatorType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<GetTechAnalysisRequest_IndicatorType_descriptor,
                                                 0, 5>(
      static_cast<int>(value));
}
inline bool GetTechAnalysisRequest_IndicatorType_Parse(absl::string_view name, GetTechAnalysisRequest_IndicatorType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<GetTechAnalysisRequest_IndicatorType>(
      GetTechAnalysisRequest_IndicatorType_descriptor(), name, value);
}
enum SubscriptionAction : int {
  SUBSCRIPTION_ACTION_UNSPECIFIED = 0,
  SUBSCRIPTION_ACTION_SUBSCRIBE = 1,
  SUBSCRIPTION_ACTION_UNSUBSCRIBE = 2,
  SubscriptionAction_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  SubscriptionAction_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool SubscriptionAction_IsValid(int value);
extern const uint32_t SubscriptionAction_internal_data_[];
constexpr SubscriptionAction SubscriptionAction_MIN = static_cast<SubscriptionAction>(0);
constexpr SubscriptionAction SubscriptionAction_MAX = static_cast<SubscriptionAction>(2);
constexpr int SubscriptionAction_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
SubscriptionAction_descriptor();
template <typename T>
const std::string& SubscriptionAction_Name(T value) {
  static_assert(std::is_same<T, SubscriptionAction>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to SubscriptionAction_Name().");
  return SubscriptionAction_Name(static_cast<SubscriptionAction>(value));
}
template <>
inline const std::string& SubscriptionAction_Name(SubscriptionAction value) {
  return ::google::protobuf::internal::NameOfDenseEnum<SubscriptionAction_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool SubscriptionAction_Parse(absl::string_view name, SubscriptionAction* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SubscriptionAction>(
      SubscriptionAction_descriptor(), name, value);
}
enum SubscriptionInterval : int {
  SUBSCRIPTION_INTERVAL_UNSPECIFIED = 0,
  SUBSCRIPTION_INTERVAL_ONE_MINUTE = 1,
  SUBSCRIPTION_INTERVAL_FIVE_MINUTES = 2,
  SUBSCRIPTION_INTERVAL_FIFTEEN_MINUTES = 3,
  SUBSCRIPTION_INTERVAL_ONE_HOUR = 4,
  SUBSCRIPTION_INTERVAL_ONE_DAY = 5,
  SUBSCRIPTION_INTERVAL_2_MIN = 6,
  SUBSCRIPTION_INTERVAL_3_MIN = 7,
  SUBSCRIPTION_INTERVAL_10_MIN = 8,
  SUBSCRIPTION_INTERVAL_30_MIN = 9,
  SUBSCRIPTION_INTERVAL_2_HOUR = 10,
  SUBSCRIPTION_INTERVAL_4_HOUR = 11,
  SUBSCRIPTION_INTERVAL_WEEK = 12,
  SUBSCRIPTION_INTERVAL_MONTH = 13,
  SubscriptionInterval_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  SubscriptionInterval_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool SubscriptionInterval_IsValid(int value);
extern const uint32_t SubscriptionInterval_internal_data_[];
constexpr SubscriptionInterval SubscriptionInterval_MIN = static_cast<SubscriptionInterval>(0);
constexpr SubscriptionInterval SubscriptionInterval_MAX = static_cast<SubscriptionInterval>(13);
constexpr int SubscriptionInterval_ARRAYSIZE = 13 + 1;
const ::google::protobuf::EnumDescriptor*
SubscriptionInterval_descriptor();
template <typename T>
const std::string& SubscriptionInterval_Name(T value) {
  static_assert(std::is_same<T, SubscriptionInterval>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to SubscriptionInterval_Name().");
  return SubscriptionInterval_Name(static_cast<SubscriptionInterval>(value));
}
template <>
inline const std::string& SubscriptionInterval_Name(SubscriptionInterval value) {
  return ::google::protobuf::internal::NameOfDenseEnum<SubscriptionInterval_descriptor,
                                                 0, 13>(
      static_cast<int>(value));
}
inline bool SubscriptionInterval_Parse(absl::string_view name, SubscriptionInterval* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SubscriptionInterval>(
      SubscriptionInterval_descriptor(), name, value);
}
enum SubscriptionStatus : int {
  SUBSCRIPTION_STATUS_UNSPECIFIED = 0,
  SUBSCRIPTION_STATUS_SUCCESS = 1,
  SUBSCRIPTION_STATUS_INSTRUMENT_NOT_FOUND = 2,
  SUBSCRIPTION_STATUS_SUBSCRIPTION_ACTION_IS_INVALID = 3,
  SUBSCRIPTION_STATUS_DEPTH_IS_INVALID = 4,
  SUBSCRIPTION_STATUS_INTERVAL_IS_INVALID = 5,
  SUBSCRIPTION_STATUS_LIMIT_IS_EXCEEDED = 6,
  SUBSCRIPTION_STATUS_INTERNAL_ERROR = 7,
  SUBSCRIPTION_STATUS_TOO_MANY_REQUESTS = 8,
  SUBSCRIPTION_STATUS_SUBSCRIPTION_NOT_FOUND = 9,
  SUBSCRIPTION_STATUS_SOURCE_IS_INVALID = 10,
  SubscriptionStatus_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  SubscriptionStatus_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool SubscriptionStatus_IsValid(int value);
extern const uint32_t SubscriptionStatus_internal_data_[];
constexpr SubscriptionStatus SubscriptionStatus_MIN = static_cast<SubscriptionStatus>(0);
constexpr SubscriptionStatus SubscriptionStatus_MAX = static_cast<SubscriptionStatus>(10);
constexpr int SubscriptionStatus_ARRAYSIZE = 10 + 1;
const ::google::protobuf::EnumDescriptor*
SubscriptionStatus_descriptor();
template <typename T>
const std::string& SubscriptionStatus_Name(T value) {
  static_assert(std::is_same<T, SubscriptionStatus>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to SubscriptionStatus_Name().");
  return SubscriptionStatus_Name(static_cast<SubscriptionStatus>(value));
}
template <>
inline const std::string& SubscriptionStatus_Name(SubscriptionStatus value) {
  return ::google::protobuf::internal::NameOfDenseEnum<SubscriptionStatus_descriptor,
                                                 0, 10>(
      static_cast<int>(value));
}
inline bool SubscriptionStatus_Parse(absl::string_view name, SubscriptionStatus* value) {
  return ::google::protobuf::internal::ParseNamedEnum<SubscriptionStatus>(
      SubscriptionStatus_descriptor(), name, value);
}
enum TradeSourceType : int {
  TRADE_SOURCE_UNSPECIFIED = 0,
  TRADE_SOURCE_EXCHANGE = 1,
  TRADE_SOURCE_DEALER = 2,
  TRADE_SOURCE_ALL = 3,
  TradeSourceType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  TradeSourceType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool TradeSourceType_IsValid(int value);
extern const uint32_t TradeSourceType_internal_data_[];
constexpr TradeSourceType TradeSourceType_MIN = static_cast<TradeSourceType>(0);
constexpr TradeSourceType TradeSourceType_MAX = static_cast<TradeSourceType>(3);
constexpr int TradeSourceType_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
TradeSourceType_descriptor();
template <typename T>
const std::string& TradeSourceType_Name(T value) {
  static_assert(std::is_same<T, TradeSourceType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to TradeSourceType_Name().");
  return TradeSourceType_Name(static_cast<TradeSourceType>(value));
}
template <>
inline const std::string& TradeSourceType_Name(TradeSourceType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<TradeSourceType_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool TradeSourceType_Parse(absl::string_view name, TradeSourceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TradeSourceType>(
      TradeSourceType_descriptor(), name, value);
}
enum TradeDirection : int {
  TRADE_DIRECTION_UNSPECIFIED = 0,
  TRADE_DIRECTION_BUY = 1,
  TRADE_DIRECTION_SELL = 2,
  TradeDirection_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  TradeDirection_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool TradeDirection_IsValid(int value);
extern const uint32_t TradeDirection_internal_data_[];
constexpr TradeDirection TradeDirection_MIN = static_cast<TradeDirection>(0);
constexpr TradeDirection TradeDirection_MAX = static_cast<TradeDirection>(2);
constexpr int TradeDirection_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
TradeDirection_descriptor();
template <typename T>
const std::string& TradeDirection_Name(T value) {
  static_assert(std::is_same<T, TradeDirection>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to TradeDirection_Name().");
  return TradeDirection_Name(static_cast<TradeDirection>(value));
}
template <>
inline const std::string& TradeDirection_Name(TradeDirection value) {
  return ::google::protobuf::internal::NameOfDenseEnum<TradeDirection_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool TradeDirection_Parse(absl::string_view name, TradeDirection* value) {
  return ::google::protobuf::internal::ParseNamedEnum<TradeDirection>(
      TradeDirection_descriptor(), name, value);
}
enum CandleInterval : int {
  CANDLE_INTERVAL_UNSPECIFIED = 0,
  CANDLE_INTERVAL_1_MIN = 1,
  CANDLE_INTERVAL_5_MIN = 2,
  CANDLE_INTERVAL_15_MIN = 3,
  CANDLE_INTERVAL_HOUR = 4,
  CANDLE_INTERVAL_DAY = 5,
  CANDLE_INTERVAL_2_MIN = 6,
  CANDLE_INTERVAL_3_MIN = 7,
  CANDLE_INTERVAL_10_MIN = 8,
  CANDLE_INTERVAL_30_MIN = 9,
  CANDLE_INTERVAL_2_HOUR = 10,
  CANDLE_INTERVAL_4_HOUR = 11,
  CANDLE_INTERVAL_WEEK = 12,
  CANDLE_INTERVAL_MONTH = 13,
  CandleInterval_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  CandleInterval_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool CandleInterval_IsValid(int value);
extern const uint32_t CandleInterval_internal_data_[];
constexpr CandleInterval CandleInterval_MIN = static_cast<CandleInterval>(0);
constexpr CandleInterval CandleInterval_MAX = static_cast<CandleInterval>(13);
constexpr int CandleInterval_ARRAYSIZE = 13 + 1;
const ::google::protobuf::EnumDescriptor*
CandleInterval_descriptor();
template <typename T>
const std::string& CandleInterval_Name(T value) {
  static_assert(std::is_same<T, CandleInterval>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to CandleInterval_Name().");
  return CandleInterval_Name(static_cast<CandleInterval>(value));
}
template <>
inline const std::string& CandleInterval_Name(CandleInterval value) {
  return ::google::protobuf::internal::NameOfDenseEnum<CandleInterval_descriptor,
                                                 0, 13>(
      static_cast<int>(value));
}
inline bool CandleInterval_Parse(absl::string_view name, CandleInterval* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CandleInterval>(
      CandleInterval_descriptor(), name, value);
}
enum CandleSource : int {
  CANDLE_SOURCE_UNSPECIFIED = 0,
  CANDLE_SOURCE_EXCHANGE = 1,
  CANDLE_SOURCE_DEALER_WEEKEND = 2,
  CandleSource_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  CandleSource_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool CandleSource_IsValid(int value);
extern const uint32_t CandleSource_internal_data_[];
constexpr CandleSource CandleSource_MIN = static_cast<CandleSource>(0);
constexpr CandleSource CandleSource_MAX = static_cast<CandleSource>(2);
constexpr int CandleSource_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
CandleSource_descriptor();
template <typename T>
const std::string& CandleSource_Name(T value) {
  static_assert(std::is_same<T, CandleSource>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to CandleSource_Name().");
  return CandleSource_Name(static_cast<CandleSource>(value));
}
template <>
inline const std::string& CandleSource_Name(CandleSource value) {
  return ::google::protobuf::internal::NameOfDenseEnum<CandleSource_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool CandleSource_Parse(absl::string_view name, CandleSource* value) {
  return ::google::protobuf::internal::ParseNamedEnum<CandleSource>(
      CandleSource_descriptor(), name, value);
}
enum OrderBookType : int {
  ORDERBOOK_TYPE_UNSPECIFIED = 0,
  ORDERBOOK_TYPE_EXCHANGE = 1,
  ORDERBOOK_TYPE_DEALER = 2,
  ORDERBOOK_TYPE_ALL = 3,
  OrderBookType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  OrderBookType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool OrderBookType_IsValid(int value);
extern const uint32_t OrderBookType_internal_data_[];
constexpr OrderBookType OrderBookType_MIN = static_cast<OrderBookType>(0);
constexpr OrderBookType OrderBookType_MAX = static_cast<OrderBookType>(3);
constexpr int OrderBookType_ARRAYSIZE = 3 + 1;
const ::google::protobuf::EnumDescriptor*
OrderBookType_descriptor();
template <typename T>
const std::string& OrderBookType_Name(T value) {
  static_assert(std::is_same<T, OrderBookType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to OrderBookType_Name().");
  return OrderBookType_Name(static_cast<OrderBookType>(value));
}
template <>
inline const std::string& OrderBookType_Name(OrderBookType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<OrderBookType_descriptor,
                                                 0, 3>(
      static_cast<int>(value));
}
inline bool OrderBookType_Parse(absl::string_view name, OrderBookType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<OrderBookType>(
      OrderBookType_descriptor(), name, value);
}
enum LastPriceType : int {
  LAST_PRICE_UNSPECIFIED = 0,
  LAST_PRICE_EXCHANGE = 1,
  LAST_PRICE_DEALER = 2,
  LastPriceType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  LastPriceType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool LastPriceType_IsValid(int value);
extern const uint32_t LastPriceType_internal_data_[];
constexpr LastPriceType LastPriceType_MIN = static_cast<LastPriceType>(0);
constexpr LastPriceType LastPriceType_MAX = static_cast<LastPriceType>(2);
constexpr int LastPriceType_ARRAYSIZE = 2 + 1;
const ::google::protobuf::EnumDescriptor*
LastPriceType_descriptor();
template <typename T>
const std::string& LastPriceType_Name(T value) {
  static_assert(std::is_same<T, LastPriceType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to LastPriceType_Name().");
  return LastPriceType_Name(static_cast<LastPriceType>(value));
}
template <>
inline const std::string& LastPriceType_Name(LastPriceType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<LastPriceType_descriptor,
                                                 0, 2>(
      static_cast<int>(value));
}
inline bool LastPriceType_Parse(absl::string_view name, LastPriceType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<LastPriceType>(
      LastPriceType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class TradeSubscription final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.pub.invest.api.contract.v1.TradeSubscription) */ {
 public:
  inline TradeSubscription() : TradeSubscription(nullptr) {}
  ~TradeSubscription() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TradeSubscription* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TradeSubscription));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TradeSubscription(
      ::google::protobuf::internal::ConstantInitialized);

  inline TradeSubscription(const TradeSubscription& from) : TradeSubscription(nullptr, from) {}
  inline TradeSubscription(TradeSubscription&& from) noexcept
      : TradeSubscription(nullptr, std::move(from)) {}
  inline TradeSubscription& operator=(const TradeSubscription& from) {
    CopyFrom(from);
    return *this;
  }
  inline TradeSubscription& operator=(TradeSubscription&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TradeSubscription& default_instance() {
    return *internal_default_instance();
  }
  static inline const TradeSubscription* internal_default_instance() {
    return reinterpret_cast<const TradeSubscription*>(
        &_TradeSubscription_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 14;
  friend void swap(TradeSubscription& a, TradeSubscription& b) { a.Swap(&b); }
  inline void Swap(TradeSubscription* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TradeSubscription* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TradeSubscription* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TradeSubscription>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TradeSubscription& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TradeSubscription& from) { TradeSubscription::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TradeSubscription* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tinkoff.pub.invest.api.contract.v1.TradeSubscription"; }

 protected:
  explicit TradeSubscription(::google::protobuf::Arena* arena);
  TradeSubscription(::google::protobuf::Arena* arena, const TradeSubscription& from);
  TradeSubscription(::google::protobuf::Arena* arena, TradeSubscription&& from) noexcept
      : TradeSubscription(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFigiFieldNumber = 1,
    kInstrumentUidFieldNumber = 3,
    kStreamIdFieldNumber = 4,
    kSubscriptionIdFieldNumber = 5,
    kSubscriptionStatusFieldNumber = 2,
  };
  // string figi = 1;
  void clear_figi() ;
  const std::string& figi() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_figi(Arg_&& arg, Args_... args);
  std::string* mutable_figi();
  PROTOBUF_NODISCARD std::string* release_figi();
  void set_allocated_figi(std::string* value);

  private:
  const std::string& _internal_figi() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_figi(
      const std::string& value);
  std::string* _internal_mutable_figi();

  public:
  // string instrument_uid = 3;
  void clear_instrument_uid() ;
  const std::string& instrument_uid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_instrument_uid(Arg_&& arg, Args_... args);
  std::string* mutable_instrument_uid();
  PROTOBUF_NODISCARD std::string* release_instrument_uid();
  void set_allocated_instrument_uid(std::string* value);

  private:
  const std::string& _internal_instrument_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_uid(
      const std::string& value);
  std::string* _internal_mutable_instrument_uid();

  public:
  // string stream_id = 4;
  void clear_stream_id() ;
  const std::string& stream_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_stream_id(Arg_&& arg, Args_... args);
  std::string* mutable_stream_id();
  PROTOBUF_NODISCARD std::string* release_stream_id();
  void set_allocated_stream_id(std::string* value);

  private:
  const std::string& _internal_stream_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stream_id(
      const std::string& value);
  std::string* _internal_mutable_stream_id();

  public:
  // string subscription_id = 5;
  void clear_subscription_id() ;
  const std::string& subscription_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_subscription_id(Arg_&& arg, Args_... args);
  std::string* mutable_subscription_id();
  PROTOBUF_NODISCARD std::string* release_subscription_id();
  void set_allocated_subscription_id(std::string* value);

  private:
  const std::string& _internal_subscription_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subscription_id(
      const std::string& value);
  std::string* _internal_mutable_subscription_id();

  public:
  // .tinkoff.pub.invest.api.contract.v1.SubscriptionStatus subscription_status = 2;
  void clear_subscription_status() ;
  ::tinkoff::pub::invest::api::contract::v1::SubscriptionStatus subscription_status() const;
  void set_subscription_status(::tinkoff::pub::invest::api::contract::v1::SubscriptionStatus value);

  private:
  ::tinkoff::pub::invest::api::contract::v1::SubscriptionStatus _internal_subscription_status() const;
  void _internal_set_subscription_status(::tinkoff::pub::invest::api::contract::v1::SubscriptionStatus value);

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.pub.invest.api.contract.v1.TradeSubscription)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      103, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TradeSubscription& from_msg);
    ::google::protobuf::internal::ArenaStringPtr figi_;
    ::google::protobuf::internal::ArenaStringPtr instrument_uid_;
    ::google::protobuf::internal::ArenaStringPtr stream_id_;
    ::google::protobuf::internal::ArenaStringPtr subscription_id_;
    int subscription_status_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_marketdata_2eproto;
};
// -------------------------------------------------------------------

class TradeInstrument final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.pub.invest.api.contract.v1.TradeInstrument) */ {
 public:
  inline TradeInstrument() : TradeInstrument(nullptr) {}
  ~TradeInstrument() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TradeInstrument* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TradeInstrument));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TradeInstrument(
      ::google::protobuf::internal::ConstantInitialized);

  inline TradeInstrument(const TradeInstrument& from) : TradeInstrument(nullptr, from) {}
  inline TradeInstrument(TradeInstrument&& from) noexcept
      : TradeInstrument(nullptr, std::move(from)) {}
  inline TradeInstrument& operator=(const TradeInstrument& from) {
    CopyFrom(from);
    return *this;
  }
  inline TradeInstrument& operator=(TradeInstrument&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TradeInstrument& default_instance() {
    return *internal_default_instance();
  }
  static inline const TradeInstrument* internal_default_instance() {
    return reinterpret_cast<const TradeInstrument*>(
        &_TradeInstrument_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 12;
  friend void swap(TradeInstrument& a, TradeInstrument& b) { a.Swap(&b); }
  inline void Swap(TradeInstrument* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TradeInstrument* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TradeInstrument* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TradeInstrument>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TradeInstrument& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TradeInstrument& from) { TradeInstrument::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TradeInstrument* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tinkoff.pub.invest.api.contract.v1.TradeInstrument"; }

 protected:
  explicit TradeInstrument(::google::protobuf::Arena* arena);
  TradeInstrument(::google::protobuf::Arena* arena, const TradeInstrument& from);
  TradeInstrument(::google::protobuf::Arena* arena, TradeInstrument&& from) noexcept
      : TradeInstrument(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFigiFieldNumber = 1,
    kInstrumentIdFieldNumber = 2,
  };
  // string figi = 1 [deprecated = true];
  [[deprecated]]  void clear_figi() ;
  [[deprecated]] const std::string& figi() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  [[deprecated]] void set_figi(Arg_&& arg, Args_... args);
  [[deprecated]] std::string* mutable_figi();
  [[deprecated]] PROTOBUF_NODISCARD std::string* release_figi();
  [[deprecated]] void set_allocated_figi(std::string* value);

  private:
  const std::string& _internal_figi() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_figi(
      const std::string& value);
  std::string* _internal_mutable_figi();

  public:
  // string instrument_id = 2;
  void clear_instrument_id() ;
  const std::string& instrument_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_instrument_id(Arg_&& arg, Args_... args);
  std::string* mutable_instrument_id();
  PROTOBUF_NODISCARD std::string* release_instrument_id();
  void set_allocated_instrument_id(std::string* value);

  private:
  const std::string& _internal_instrument_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_id(
      const std::string& value);
  std::string* _internal_mutable_instrument_id();

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.pub.invest.api.contract.v1.TradeInstrument)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      76, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TradeInstrument& from_msg);
    ::google::protobuf::internal::ArenaStringPtr figi_;
    ::google::protobuf::internal::ArenaStringPtr instrument_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_marketdata_2eproto;
};
// -------------------------------------------------------------------

class OrderBookSubscription final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.pub.invest.api.contract.v1.OrderBookSubscription) */ {
 public:
  inline OrderBookSubscription() : OrderBookSubscription(nullptr) {}
  ~OrderBookSubscription() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(OrderBookSubscription* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(OrderBookSubscription));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR OrderBookSubscription(
      ::google::protobuf::internal::ConstantInitialized);

  inline OrderBookSubscription(const OrderBookSubscription& from) : OrderBookSubscription(nullptr, from) {}
  inline OrderBookSubscription(OrderBookSubscription&& from) noexcept
      : OrderBookSubscription(nullptr, std::move(from)) {}
  inline OrderBookSubscription& operator=(const OrderBookSubscription& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderBookSubscription& operator=(OrderBookSubscription&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OrderBookSubscription& default_instance() {
    return *internal_default_instance();
  }
  static inline const OrderBookSubscription* internal_default_instance() {
    return reinterpret_cast<const OrderBookSubscription*>(
        &_OrderBookSubscription_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 10;
  friend void swap(OrderBookSubscription& a, OrderBookSubscription& b) { a.Swap(&b); }
  inline void Swap(OrderBookSubscription* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderBookSubscription* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OrderBookSubscription* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<OrderBookSubscription>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const OrderBookSubscription& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const OrderBookSubscription& from) { OrderBookSubscription::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(OrderBookSubscription* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tinkoff.pub.invest.api.contract.v1.OrderBookSubscription"; }

 protected:
  explicit OrderBookSubscription(::google::protobuf::Arena* arena);
  OrderBookSubscription(::google::protobuf::Arena* arena, const OrderBookSubscription& from);
  OrderBookSubscription(::google::protobuf::Arena* arena, OrderBookSubscription&& from) noexcept
      : OrderBookSubscription(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFigiFieldNumber = 1,
    kInstrumentUidFieldNumber = 4,
    kStreamIdFieldNumber = 5,
    kSubscriptionIdFieldNumber = 6,
    kDepthFieldNumber = 2,
    kSubscriptionStatusFieldNumber = 3,
    kOrderBookTypeFieldNumber = 7,
  };
  // string figi = 1;
  void clear_figi() ;
  const std::string& figi() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_figi(Arg_&& arg, Args_... args);
  std::string* mutable_figi();
  PROTOBUF_NODISCARD std::string* release_figi();
  void set_allocated_figi(std::string* value);

  private:
  const std::string& _internal_figi() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_figi(
      const std::string& value);
  std::string* _internal_mutable_figi();

  public:
  // string instrument_uid = 4;
  void clear_instrument_uid() ;
  const std::string& instrument_uid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_instrument_uid(Arg_&& arg, Args_... args);
  std::string* mutable_instrument_uid();
  PROTOBUF_NODISCARD std::string* release_instrument_uid();
  void set_allocated_instrument_uid(std::string* value);

  private:
  const std::string& _internal_instrument_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_uid(
      const std::string& value);
  std::string* _internal_mutable_instrument_uid();

  public:
  // string stream_id = 5;
  void clear_stream_id() ;
  const std::string& stream_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_stream_id(Arg_&& arg, Args_... args);
  std::string* mutable_stream_id();
  PROTOBUF_NODISCARD std::string* release_stream_id();
  void set_allocated_stream_id(std::string* value);

  private:
  const std::string& _internal_stream_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stream_id(
      const std::string& value);
  std::string* _internal_mutable_stream_id();

  public:
  // string subscription_id = 6;
  void clear_subscription_id() ;
  const std::string& subscription_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_subscription_id(Arg_&& arg, Args_... args);
  std::string* mutable_subscription_id();
  PROTOBUF_NODISCARD std::string* release_subscription_id();
  void set_allocated_subscription_id(std::string* value);

  private:
  const std::string& _internal_subscription_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subscription_id(
      const std::string& value);
  std::string* _internal_mutable_subscription_id();

  public:
  // int32 depth = 2;
  void clear_depth() ;
  ::int32_t depth() const;
  void set_depth(::int32_t value);

  private:
  ::int32_t _internal_depth() const;
  void _internal_set_depth(::int32_t value);

  public:
  // .tinkoff.pub.invest.api.contract.v1.SubscriptionStatus subscription_status = 3;
  void clear_subscription_status() ;
  ::tinkoff::pub::invest::api::contract::v1::SubscriptionStatus subscription_status() const;
  void set_subscription_status(::tinkoff::pub::invest::api::contract::v1::SubscriptionStatus value);

  private:
  ::tinkoff::pub::invest::api::contract::v1::SubscriptionStatus _internal_subscription_status() const;
  void _internal_set_subscription_status(::tinkoff::pub::invest::api::contract::v1::SubscriptionStatus value);

  public:
  // .tinkoff.pub.invest.api.contract.v1.OrderBookType order_book_type = 7;
  void clear_order_book_type() ;
  ::tinkoff::pub::invest::api::contract::v1::OrderBookType order_book_type() const;
  void set_order_book_type(::tinkoff::pub::invest::api::contract::v1::OrderBookType value);

  private:
  ::tinkoff::pub::invest::api::contract::v1::OrderBookType _internal_order_book_type() const;
  void _internal_set_order_book_type(::tinkoff::pub::invest::api::contract::v1::OrderBookType value);

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.pub.invest.api.contract.v1.OrderBookSubscription)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 0,
      107, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const OrderBookSubscription& from_msg);
    ::google::protobuf::internal::ArenaStringPtr figi_;
    ::google::protobuf::internal::ArenaStringPtr instrument_uid_;
    ::google::protobuf::internal::ArenaStringPtr stream_id_;
    ::google::protobuf::internal::ArenaStringPtr subscription_id_;
    ::int32_t depth_;
    int subscription_status_;
    int order_book_type_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_marketdata_2eproto;
};
// -------------------------------------------------------------------

class OrderBookInstrument final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.pub.invest.api.contract.v1.OrderBookInstrument) */ {
 public:
  inline OrderBookInstrument() : OrderBookInstrument(nullptr) {}
  ~OrderBookInstrument() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(OrderBookInstrument* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(OrderBookInstrument));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR OrderBookInstrument(
      ::google::protobuf::internal::ConstantInitialized);

  inline OrderBookInstrument(const OrderBookInstrument& from) : OrderBookInstrument(nullptr, from) {}
  inline OrderBookInstrument(OrderBookInstrument&& from) noexcept
      : OrderBookInstrument(nullptr, std::move(from)) {}
  inline OrderBookInstrument& operator=(const OrderBookInstrument& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderBookInstrument& operator=(OrderBookInstrument&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OrderBookInstrument& default_instance() {
    return *internal_default_instance();
  }
  static inline const OrderBookInstrument* internal_default_instance() {
    return reinterpret_cast<const OrderBookInstrument*>(
        &_OrderBookInstrument_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 8;
  friend void swap(OrderBookInstrument& a, OrderBookInstrument& b) { a.Swap(&b); }
  inline void Swap(OrderBookInstrument* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderBookInstrument* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OrderBookInstrument* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<OrderBookInstrument>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const OrderBookInstrument& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const OrderBookInstrument& from) { OrderBookInstrument::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(OrderBookInstrument* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tinkoff.pub.invest.api.contract.v1.OrderBookInstrument"; }

 protected:
  explicit OrderBookInstrument(::google::protobuf::Arena* arena);
  OrderBookInstrument(::google::protobuf::Arena* arena, const OrderBookInstrument& from);
  OrderBookInstrument(::google::protobuf::Arena* arena, OrderBookInstrument&& from) noexcept
      : OrderBookInstrument(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFigiFieldNumber = 1,
    kInstrumentIdFieldNumber = 3,
    kDepthFieldNumber = 2,
    kOrderBookTypeFieldNumber = 4,
  };
  // string figi = 1 [deprecated = true];
  [[deprecated]]  void clear_figi() ;
  [[deprecated]] const std::string& figi() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  [[deprecated]] void set_figi(Arg_&& arg, Args_... args);
  [[deprecated]] std::string* mutable_figi();
  [[deprecated]] PROTOBUF_NODISCARD std::string* release_figi();
  [[deprecated]] void set_allocated_figi(std::string* value);

  private:
  const std::string& _internal_figi() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_figi(
      const std::string& value);
  std::string* _internal_mutable_figi();

  public:
  // string instrument_id = 3;
  void clear_instrument_id() ;
  const std::string& instrument_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_instrument_id(Arg_&& arg, Args_... args);
  std::string* mutable_instrument_id();
  PROTOBUF_NODISCARD std::string* release_instrument_id();
  void set_allocated_instrument_id(std::string* value);

  private:
  const std::string& _internal_instrument_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_id(
      const std::string& value);
  std::string* _internal_mutable_instrument_id();

  public:
  // int32 depth = 2;
  void clear_depth() ;
  ::int32_t depth() const;
  void set_depth(::int32_t value);

  private:
  ::int32_t _internal_depth() const;
  void _internal_set_depth(::int32_t value);

  public:
  // .tinkoff.pub.invest.api.contract.v1.OrderBookType order_book_type = 4;
  void clear_order_book_type() ;
  ::tinkoff::pub::invest::api::contract::v1::OrderBookType order_book_type() const;
  void set_order_book_type(::tinkoff::pub::invest::api::contract::v1::OrderBookType value);

  private:
  ::tinkoff::pub::invest::api::contract::v1::OrderBookType _internal_order_book_type() const;
  void _internal_set_order_book_type(::tinkoff::pub::invest::api::contract::v1::OrderBookType value);

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.pub.invest.api.contract.v1.OrderBookInstrument)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      80, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const OrderBookInstrument& from_msg);
    ::google::protobuf::internal::ArenaStringPtr figi_;
    ::google::protobuf::internal::ArenaStringPtr instrument_id_;
    ::int32_t depth_;
    int order_book_type_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_marketdata_2eproto;
};
// -------------------------------------------------------------------

class LastPriceSubscription final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.pub.invest.api.contract.v1.LastPriceSubscription) */ {
 public:
  inline LastPriceSubscription() : LastPriceSubscription(nullptr) {}
  ~LastPriceSubscription() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(LastPriceSubscription* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(LastPriceSubscription));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LastPriceSubscription(
      ::google::protobuf::internal::ConstantInitialized);

  inline LastPriceSubscription(const LastPriceSubscription& from) : LastPriceSubscription(nullptr, from) {}
  inline LastPriceSubscription(LastPriceSubscription&& from) noexcept
      : LastPriceSubscription(nullptr, std::move(from)) {}
  inline LastPriceSubscription& operator=(const LastPriceSubscription& from) {
    CopyFrom(from);
    return *this;
  }
  inline LastPriceSubscription& operator=(LastPriceSubscription&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LastPriceSubscription& default_instance() {
    return *internal_default_instance();
  }
  static inline const LastPriceSubscription* internal_default_instance() {
    return reinterpret_cast<const LastPriceSubscription*>(
        &_LastPriceSubscription_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 22;
  friend void swap(LastPriceSubscription& a, LastPriceSubscription& b) { a.Swap(&b); }
  inline void Swap(LastPriceSubscription* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LastPriceSubscription* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LastPriceSubscription* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<LastPriceSubscription>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LastPriceSubscription& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const LastPriceSubscription& from) { LastPriceSubscription::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(LastPriceSubscription* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tinkoff.pub.invest.api.contract.v1.LastPriceSubscription"; }

 protected:
  explicit LastPriceSubscription(::google::protobuf::Arena* arena);
  LastPriceSubscription(::google::protobuf::Arena* arena, const LastPriceSubscription& from);
  LastPriceSubscription(::google::protobuf::Arena* arena, LastPriceSubscription&& from) noexcept
      : LastPriceSubscription(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFigiFieldNumber = 1,
    kInstrumentUidFieldNumber = 3,
    kStreamIdFieldNumber = 4,
    kSubscriptionIdFieldNumber = 5,
    kSubscriptionStatusFieldNumber = 2,
  };
  // string figi = 1;
  void clear_figi() ;
  const std::string& figi() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_figi(Arg_&& arg, Args_... args);
  std::string* mutable_figi();
  PROTOBUF_NODISCARD std::string* release_figi();
  void set_allocated_figi(std::string* value);

  private:
  const std::string& _internal_figi() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_figi(
      const std::string& value);
  std::string* _internal_mutable_figi();

  public:
  // string instrument_uid = 3;
  void clear_instrument_uid() ;
  const std::string& instrument_uid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_instrument_uid(Arg_&& arg, Args_... args);
  std::string* mutable_instrument_uid();
  PROTOBUF_NODISCARD std::string* release_instrument_uid();
  void set_allocated_instrument_uid(std::string* value);

  private:
  const std::string& _internal_instrument_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_uid(
      const std::string& value);
  std::string* _internal_mutable_instrument_uid();

  public:
  // string stream_id = 4;
  void clear_stream_id() ;
  const std::string& stream_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_stream_id(Arg_&& arg, Args_... args);
  std::string* mutable_stream_id();
  PROTOBUF_NODISCARD std::string* release_stream_id();
  void set_allocated_stream_id(std::string* value);

  private:
  const std::string& _internal_stream_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stream_id(
      const std::string& value);
  std::string* _internal_mutable_stream_id();

  public:
  // string subscription_id = 5;
  void clear_subscription_id() ;
  const std::string& subscription_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_subscription_id(Arg_&& arg, Args_... args);
  std::string* mutable_subscription_id();
  PROTOBUF_NODISCARD std::string* release_subscription_id();
  void set_allocated_subscription_id(std::string* value);

  private:
  const std::string& _internal_subscription_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subscription_id(
      const std::string& value);
  std::string* _internal_mutable_subscription_id();

  public:
  // .tinkoff.pub.invest.api.contract.v1.SubscriptionStatus subscription_status = 2;
  void clear_subscription_status() ;
  ::tinkoff::pub::invest::api::contract::v1::SubscriptionStatus subscription_status() const;
  void set_subscription_status(::tinkoff::pub::invest::api::contract::v1::SubscriptionStatus value);

  private:
  ::tinkoff::pub::invest::api::contract::v1::SubscriptionStatus _internal_subscription_status() const;
  void _internal_set_subscription_status(::tinkoff::pub::invest::api::contract::v1::SubscriptionStatus value);

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.pub.invest.api.contract.v1.LastPriceSubscription)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      107, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const LastPriceSubscription& from_msg);
    ::google::protobuf::internal::ArenaStringPtr figi_;
    ::google::protobuf::internal::ArenaStringPtr instrument_uid_;
    ::google::protobuf::internal::ArenaStringPtr stream_id_;
    ::google::protobuf::internal::ArenaStringPtr subscription_id_;
    int subscription_status_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_marketdata_2eproto;
};
// -------------------------------------------------------------------

class LastPriceInstrument final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.pub.invest.api.contract.v1.LastPriceInstrument) */ {
 public:
  inline LastPriceInstrument() : LastPriceInstrument(nullptr) {}
  ~LastPriceInstrument() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(LastPriceInstrument* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(LastPriceInstrument));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LastPriceInstrument(
      ::google::protobuf::internal::ConstantInitialized);

  inline LastPriceInstrument(const LastPriceInstrument& from) : LastPriceInstrument(nullptr, from) {}
  inline LastPriceInstrument(LastPriceInstrument&& from) noexcept
      : LastPriceInstrument(nullptr, std::move(from)) {}
  inline LastPriceInstrument& operator=(const LastPriceInstrument& from) {
    CopyFrom(from);
    return *this;
  }
  inline LastPriceInstrument& operator=(LastPriceInstrument&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LastPriceInstrument& default_instance() {
    return *internal_default_instance();
  }
  static inline const LastPriceInstrument* internal_default_instance() {
    return reinterpret_cast<const LastPriceInstrument*>(
        &_LastPriceInstrument_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 20;
  friend void swap(LastPriceInstrument& a, LastPriceInstrument& b) { a.Swap(&b); }
  inline void Swap(LastPriceInstrument* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LastPriceInstrument* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LastPriceInstrument* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<LastPriceInstrument>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LastPriceInstrument& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const LastPriceInstrument& from) { LastPriceInstrument::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(LastPriceInstrument* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tinkoff.pub.invest.api.contract.v1.LastPriceInstrument"; }

 protected:
  explicit LastPriceInstrument(::google::protobuf::Arena* arena);
  LastPriceInstrument(::google::protobuf::Arena* arena, const LastPriceInstrument& from);
  LastPriceInstrument(::google::protobuf::Arena* arena, LastPriceInstrument&& from) noexcept
      : LastPriceInstrument(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFigiFieldNumber = 1,
    kInstrumentIdFieldNumber = 2,
  };
  // string figi = 1 [deprecated = true];
  [[deprecated]]  void clear_figi() ;
  [[deprecated]] const std::string& figi() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  [[deprecated]] void set_figi(Arg_&& arg, Args_... args);
  [[deprecated]] std::string* mutable_figi();
  [[deprecated]] PROTOBUF_NODISCARD std::string* release_figi();
  [[deprecated]] void set_allocated_figi(std::string* value);

  private:
  const std::string& _internal_figi() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_figi(
      const std::string& value);
  std::string* _internal_mutable_figi();

  public:
  // string instrument_id = 2;
  void clear_instrument_id() ;
  const std::string& instrument_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_instrument_id(Arg_&& arg, Args_... args);
  std::string* mutable_instrument_id();
  PROTOBUF_NODISCARD std::string* release_instrument_id();
  void set_allocated_instrument_id(std::string* value);

  private:
  const std::string& _internal_instrument_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_id(
      const std::string& value);
  std::string* _internal_mutable_instrument_id();

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.pub.invest.api.contract.v1.LastPriceInstrument)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      80, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const LastPriceInstrument& from_msg);
    ::google::protobuf::internal::ArenaStringPtr figi_;
    ::google::protobuf::internal::ArenaStringPtr instrument_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_marketdata_2eproto;
};
// -------------------------------------------------------------------

class InstrumentClosePriceRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.pub.invest.api.contract.v1.InstrumentClosePriceRequest) */ {
 public:
  inline InstrumentClosePriceRequest() : InstrumentClosePriceRequest(nullptr) {}
  ~InstrumentClosePriceRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(InstrumentClosePriceRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(InstrumentClosePriceRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR InstrumentClosePriceRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline InstrumentClosePriceRequest(const InstrumentClosePriceRequest& from) : InstrumentClosePriceRequest(nullptr, from) {}
  inline InstrumentClosePriceRequest(InstrumentClosePriceRequest&& from) noexcept
      : InstrumentClosePriceRequest(nullptr, std::move(from)) {}
  inline InstrumentClosePriceRequest& operator=(const InstrumentClosePriceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline InstrumentClosePriceRequest& operator=(InstrumentClosePriceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InstrumentClosePriceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const InstrumentClosePriceRequest* internal_default_instance() {
    return reinterpret_cast<const InstrumentClosePriceRequest*>(
        &_InstrumentClosePriceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 44;
  friend void swap(InstrumentClosePriceRequest& a, InstrumentClosePriceRequest& b) { a.Swap(&b); }
  inline void Swap(InstrumentClosePriceRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InstrumentClosePriceRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InstrumentClosePriceRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<InstrumentClosePriceRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const InstrumentClosePriceRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const InstrumentClosePriceRequest& from) { InstrumentClosePriceRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(InstrumentClosePriceRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tinkoff.pub.invest.api.contract.v1.InstrumentClosePriceRequest"; }

 protected:
  explicit InstrumentClosePriceRequest(::google::protobuf::Arena* arena);
  InstrumentClosePriceRequest(::google::protobuf::Arena* arena, const InstrumentClosePriceRequest& from);
  InstrumentClosePriceRequest(::google::protobuf::Arena* arena, InstrumentClosePriceRequest&& from) noexcept
      : InstrumentClosePriceRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kInstrumentIdFieldNumber = 1,
  };
  // string instrument_id = 1;
  void clear_instrument_id() ;
  const std::string& instrument_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_instrument_id(Arg_&& arg, Args_... args);
  std::string* mutable_instrument_id();
  PROTOBUF_NODISCARD std::string* release_instrument_id();
  void set_allocated_instrument_id(std::string* value);

  private:
  const std::string& _internal_instrument_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_id(
      const std::string& value);
  std::string* _internal_mutable_instrument_id();

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.pub.invest.api.contract.v1.InstrumentClosePriceRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      84, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const InstrumentClosePriceRequest& from_msg);
    ::google::protobuf::internal::ArenaStringPtr instrument_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_marketdata_2eproto;
};
// -------------------------------------------------------------------

class InfoSubscription final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.pub.invest.api.contract.v1.InfoSubscription) */ {
 public:
  inline InfoSubscription() : InfoSubscription(nullptr) {}
  ~InfoSubscription() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(InfoSubscription* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(InfoSubscription));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR InfoSubscription(
      ::google::protobuf::internal::ConstantInitialized);

  inline InfoSubscription(const InfoSubscription& from) : InfoSubscription(nullptr, from) {}
  inline InfoSubscription(InfoSubscription&& from) noexcept
      : InfoSubscription(nullptr, std::move(from)) {}
  inline InfoSubscription& operator=(const InfoSubscription& from) {
    CopyFrom(from);
    return *this;
  }
  inline InfoSubscription& operator=(InfoSubscription&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InfoSubscription& default_instance() {
    return *internal_default_instance();
  }
  static inline const InfoSubscription* internal_default_instance() {
    return reinterpret_cast<const InfoSubscription*>(
        &_InfoSubscription_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 18;
  friend void swap(InfoSubscription& a, InfoSubscription& b) { a.Swap(&b); }
  inline void Swap(InfoSubscription* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InfoSubscription* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InfoSubscription* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<InfoSubscription>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const InfoSubscription& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const InfoSubscription& from) { InfoSubscription::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(InfoSubscription* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tinkoff.pub.invest.api.contract.v1.InfoSubscription"; }

 protected:
  explicit InfoSubscription(::google::protobuf::Arena* arena);
  InfoSubscription(::google::protobuf::Arena* arena, const InfoSubscription& from);
  InfoSubscription(::google::protobuf::Arena* arena, InfoSubscription&& from) noexcept
      : InfoSubscription(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFigiFieldNumber = 1,
    kInstrumentUidFieldNumber = 3,
    kStreamIdFieldNumber = 4,
    kSubscriptionIdFieldNumber = 5,
    kSubscriptionStatusFieldNumber = 2,
  };
  // string figi = 1;
  void clear_figi() ;
  const std::string& figi() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_figi(Arg_&& arg, Args_... args);
  std::string* mutable_figi();
  PROTOBUF_NODISCARD std::string* release_figi();
  void set_allocated_figi(std::string* value);

  private:
  const std::string& _internal_figi() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_figi(
      const std::string& value);
  std::string* _internal_mutable_figi();

  public:
  // string instrument_uid = 3;
  void clear_instrument_uid() ;
  const std::string& instrument_uid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_instrument_uid(Arg_&& arg, Args_... args);
  std::string* mutable_instrument_uid();
  PROTOBUF_NODISCARD std::string* release_instrument_uid();
  void set_allocated_instrument_uid(std::string* value);

  private:
  const std::string& _internal_instrument_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_uid(
      const std::string& value);
  std::string* _internal_mutable_instrument_uid();

  public:
  // string stream_id = 4;
  void clear_stream_id() ;
  const std::string& stream_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_stream_id(Arg_&& arg, Args_... args);
  std::string* mutable_stream_id();
  PROTOBUF_NODISCARD std::string* release_stream_id();
  void set_allocated_stream_id(std::string* value);

  private:
  const std::string& _internal_stream_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stream_id(
      const std::string& value);
  std::string* _internal_mutable_stream_id();

  public:
  // string subscription_id = 5;
  void clear_subscription_id() ;
  const std::string& subscription_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_subscription_id(Arg_&& arg, Args_... args);
  std::string* mutable_subscription_id();
  PROTOBUF_NODISCARD std::string* release_subscription_id();
  void set_allocated_subscription_id(std::string* value);

  private:
  const std::string& _internal_subscription_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subscription_id(
      const std::string& value);
  std::string* _internal_mutable_subscription_id();

  public:
  // .tinkoff.pub.invest.api.contract.v1.SubscriptionStatus subscription_status = 2;
  void clear_subscription_status() ;
  ::tinkoff::pub::invest::api::contract::v1::SubscriptionStatus subscription_status() const;
  void set_subscription_status(::tinkoff::pub::invest::api::contract::v1::SubscriptionStatus value);

  private:
  ::tinkoff::pub::invest::api::contract::v1::SubscriptionStatus _internal_subscription_status() const;
  void _internal_set_subscription_status(::tinkoff::pub::invest::api::contract::v1::SubscriptionStatus value);

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.pub.invest.api.contract.v1.InfoSubscription)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 0,
      102, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const InfoSubscription& from_msg);
    ::google::protobuf::internal::ArenaStringPtr figi_;
    ::google::protobuf::internal::ArenaStringPtr instrument_uid_;
    ::google::protobuf::internal::ArenaStringPtr stream_id_;
    ::google::protobuf::internal::ArenaStringPtr subscription_id_;
    int subscription_status_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_marketdata_2eproto;
};
// -------------------------------------------------------------------

class InfoInstrument final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.pub.invest.api.contract.v1.InfoInstrument) */ {
 public:
  inline InfoInstrument() : InfoInstrument(nullptr) {}
  ~InfoInstrument() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(InfoInstrument* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(InfoInstrument));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR InfoInstrument(
      ::google::protobuf::internal::ConstantInitialized);

  inline InfoInstrument(const InfoInstrument& from) : InfoInstrument(nullptr, from) {}
  inline InfoInstrument(InfoInstrument&& from) noexcept
      : InfoInstrument(nullptr, std::move(from)) {}
  inline InfoInstrument& operator=(const InfoInstrument& from) {
    CopyFrom(from);
    return *this;
  }
  inline InfoInstrument& operator=(InfoInstrument&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InfoInstrument& default_instance() {
    return *internal_default_instance();
  }
  static inline const InfoInstrument* internal_default_instance() {
    return reinterpret_cast<const InfoInstrument*>(
        &_InfoInstrument_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 16;
  friend void swap(InfoInstrument& a, InfoInstrument& b) { a.Swap(&b); }
  inline void Swap(InfoInstrument* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InfoInstrument* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InfoInstrument* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<InfoInstrument>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const InfoInstrument& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const InfoInstrument& from) { InfoInstrument::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(InfoInstrument* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tinkoff.pub.invest.api.contract.v1.InfoInstrument"; }

 protected:
  explicit InfoInstrument(::google::protobuf::Arena* arena);
  InfoInstrument(::google::protobuf::Arena* arena, const InfoInstrument& from);
  InfoInstrument(::google::protobuf::Arena* arena, InfoInstrument&& from) noexcept
      : InfoInstrument(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFigiFieldNumber = 1,
    kInstrumentIdFieldNumber = 2,
  };
  // string figi = 1 [deprecated = true];
  [[deprecated]]  void clear_figi() ;
  [[deprecated]] const std::string& figi() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  [[deprecated]] void set_figi(Arg_&& arg, Args_... args);
  [[deprecated]] std::string* mutable_figi();
  [[deprecated]] PROTOBUF_NODISCARD std::string* release_figi();
  [[deprecated]] void set_allocated_figi(std::string* value);

  private:
  const std::string& _internal_figi() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_figi(
      const std::string& value);
  std::string* _internal_mutable_figi();

  public:
  // string instrument_id = 2;
  void clear_instrument_id() ;
  const std::string& instrument_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_instrument_id(Arg_&& arg, Args_... args);
  std::string* mutable_instrument_id();
  PROTOBUF_NODISCARD std::string* release_instrument_id();
  void set_allocated_instrument_id(std::string* value);

  private:
  const std::string& _internal_instrument_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_id(
      const std::string& value);
  std::string* _internal_mutable_instrument_id();

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.pub.invest.api.contract.v1.InfoInstrument)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      75, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const InfoInstrument& from_msg);
    ::google::protobuf::internal::ArenaStringPtr figi_;
    ::google::protobuf::internal::ArenaStringPtr instrument_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_marketdata_2eproto;
};
// -------------------------------------------------------------------

class GetTradingStatusesRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.pub.invest.api.contract.v1.GetTradingStatusesRequest) */ {
 public:
  inline GetTradingStatusesRequest() : GetTradingStatusesRequest(nullptr) {}
  ~GetTradingStatusesRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetTradingStatusesRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetTradingStatusesRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetTradingStatusesRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetTradingStatusesRequest(const GetTradingStatusesRequest& from) : GetTradingStatusesRequest(nullptr, from) {}
  inline GetTradingStatusesRequest(GetTradingStatusesRequest&& from) noexcept
      : GetTradingStatusesRequest(nullptr, std::move(from)) {}
  inline GetTradingStatusesRequest& operator=(const GetTradingStatusesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTradingStatusesRequest& operator=(GetTradingStatusesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetTradingStatusesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTradingStatusesRequest* internal_default_instance() {
    return reinterpret_cast<const GetTradingStatusesRequest*>(
        &_GetTradingStatusesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 37;
  friend void swap(GetTradingStatusesRequest& a, GetTradingStatusesRequest& b) { a.Swap(&b); }
  inline void Swap(GetTradingStatusesRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTradingStatusesRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetTradingStatusesRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetTradingStatusesRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetTradingStatusesRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetTradingStatusesRequest& from) { GetTradingStatusesRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetTradingStatusesRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tinkoff.pub.invest.api.contract.v1.GetTradingStatusesRequest"; }

 protected:
  explicit GetTradingStatusesRequest(::google::protobuf::Arena* arena);
  GetTradingStatusesRequest(::google::protobuf::Arena* arena, const GetTradingStatusesRequest& from);
  GetTradingStatusesRequest(::google::protobuf::Arena* arena, GetTradingStatusesRequest&& from) noexcept
      : GetTradingStatusesRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kInstrumentIdFieldNumber = 1,
  };
  // repeated string instrument_id = 1;
  int instrument_id_size() const;
  private:
  int _internal_instrument_id_size() const;

  public:
  void clear_instrument_id() ;
  const std::string& instrument_id(int index) const;
  std::string* mutable_instrument_id(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_instrument_id(int index, Arg_&& value, Args_... args);
  std::string* add_instrument_id();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_instrument_id(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& instrument_id() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_instrument_id();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_instrument_id() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_instrument_id();

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.pub.invest.api.contract.v1.GetTradingStatusesRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      82, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetTradingStatusesRequest& from_msg);
    ::google::protobuf::RepeatedPtrField<std::string> instrument_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_marketdata_2eproto;
};
// -------------------------------------------------------------------

class GetTradingStatusResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.pub.invest.api.contract.v1.GetTradingStatusResponse) */ {
 public:
  inline GetTradingStatusResponse() : GetTradingStatusResponse(nullptr) {}
  ~GetTradingStatusResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetTradingStatusResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetTradingStatusResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetTradingStatusResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetTradingStatusResponse(const GetTradingStatusResponse& from) : GetTradingStatusResponse(nullptr, from) {}
  inline GetTradingStatusResponse(GetTradingStatusResponse&& from) noexcept
      : GetTradingStatusResponse(nullptr, std::move(from)) {}
  inline GetTradingStatusResponse& operator=(const GetTradingStatusResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTradingStatusResponse& operator=(GetTradingStatusResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetTradingStatusResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTradingStatusResponse* internal_default_instance() {
    return reinterpret_cast<const GetTradingStatusResponse*>(
        &_GetTradingStatusResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 39;
  friend void swap(GetTradingStatusResponse& a, GetTradingStatusResponse& b) { a.Swap(&b); }
  inline void Swap(GetTradingStatusResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTradingStatusResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetTradingStatusResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetTradingStatusResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetTradingStatusResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetTradingStatusResponse& from) { GetTradingStatusResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetTradingStatusResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tinkoff.pub.invest.api.contract.v1.GetTradingStatusResponse"; }

 protected:
  explicit GetTradingStatusResponse(::google::protobuf::Arena* arena);
  GetTradingStatusResponse(::google::protobuf::Arena* arena, const GetTradingStatusResponse& from);
  GetTradingStatusResponse(::google::protobuf::Arena* arena, GetTradingStatusResponse&& from) noexcept
      : GetTradingStatusResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFigiFieldNumber = 1,
    kInstrumentUidFieldNumber = 6,
    kTradingStatusFieldNumber = 2,
    kLimitOrderAvailableFlagFieldNumber = 3,
    kMarketOrderAvailableFlagFieldNumber = 4,
    kApiTradeAvailableFlagFieldNumber = 5,
    kBestpriceOrderAvailableFlagFieldNumber = 8,
    kOnlyBestPriceFieldNumber = 9,
  };
  // string figi = 1;
  void clear_figi() ;
  const std::string& figi() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_figi(Arg_&& arg, Args_... args);
  std::string* mutable_figi();
  PROTOBUF_NODISCARD std::string* release_figi();
  void set_allocated_figi(std::string* value);

  private:
  const std::string& _internal_figi() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_figi(
      const std::string& value);
  std::string* _internal_mutable_figi();

  public:
  // string instrument_uid = 6;
  void clear_instrument_uid() ;
  const std::string& instrument_uid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_instrument_uid(Arg_&& arg, Args_... args);
  std::string* mutable_instrument_uid();
  PROTOBUF_NODISCARD std::string* release_instrument_uid();
  void set_allocated_instrument_uid(std::string* value);

  private:
  const std::string& _internal_instrument_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_uid(
      const std::string& value);
  std::string* _internal_mutable_instrument_uid();

  public:
  // .tinkoff.pub.invest.api.contract.v1.SecurityTradingStatus trading_status = 2;
  void clear_trading_status() ;
  ::tinkoff::pub::invest::api::contract::v1::SecurityTradingStatus trading_status() const;
  void set_trading_status(::tinkoff::pub::invest::api::contract::v1::SecurityTradingStatus value);

  private:
  ::tinkoff::pub::invest::api::contract::v1::SecurityTradingStatus _internal_trading_status() const;
  void _internal_set_trading_status(::tinkoff::pub::invest::api::contract::v1::SecurityTradingStatus value);

  public:
  // bool limit_order_available_flag = 3;
  void clear_limit_order_available_flag() ;
  bool limit_order_available_flag() const;
  void set_limit_order_available_flag(bool value);

  private:
  bool _internal_limit_order_available_flag() const;
  void _internal_set_limit_order_available_flag(bool value);

  public:
  // bool market_order_available_flag = 4;
  void clear_market_order_available_flag() ;
  bool market_order_available_flag() const;
  void set_market_order_available_flag(bool value);

  private:
  bool _internal_market_order_available_flag() const;
  void _internal_set_market_order_available_flag(bool value);

  public:
  // bool api_trade_available_flag = 5;
  void clear_api_trade_available_flag() ;
  bool api_trade_available_flag() const;
  void set_api_trade_available_flag(bool value);

  private:
  bool _internal_api_trade_available_flag() const;
  void _internal_set_api_trade_available_flag(bool value);

  public:
  // bool bestprice_order_available_flag = 8;
  void clear_bestprice_order_available_flag() ;
  bool bestprice_order_available_flag() const;
  void set_bestprice_order_available_flag(bool value);

  private:
  bool _internal_bestprice_order_available_flag() const;
  void _internal_set_bestprice_order_available_flag(bool value);

  public:
  // bool only_best_price = 9;
  void clear_only_best_price() ;
  bool only_best_price() const;
  void set_only_best_price(bool value);

  private:
  bool _internal_only_best_price() const;
  void _internal_set_only_best_price(bool value);

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.pub.invest.api.contract.v1.GetTradingStatusResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 8, 0,
      94, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetTradingStatusResponse& from_msg);
    ::google::protobuf::internal::ArenaStringPtr figi_;
    ::google::protobuf::internal::ArenaStringPtr instrument_uid_;
    int trading_status_;
    bool limit_order_available_flag_;
    bool market_order_available_flag_;
    bool api_trade_available_flag_;
    bool bestprice_order_available_flag_;
    bool only_best_price_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_marketdata_2eproto;
};
// -------------------------------------------------------------------

class GetTradingStatusRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.pub.invest.api.contract.v1.GetTradingStatusRequest) */ {
 public:
  inline GetTradingStatusRequest() : GetTradingStatusRequest(nullptr) {}
  ~GetTradingStatusRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetTradingStatusRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetTradingStatusRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetTradingStatusRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetTradingStatusRequest(const GetTradingStatusRequest& from) : GetTradingStatusRequest(nullptr, from) {}
  inline GetTradingStatusRequest(GetTradingStatusRequest&& from) noexcept
      : GetTradingStatusRequest(nullptr, std::move(from)) {}
  inline GetTradingStatusRequest& operator=(const GetTradingStatusRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTradingStatusRequest& operator=(GetTradingStatusRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetTradingStatusRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTradingStatusRequest* internal_default_instance() {
    return reinterpret_cast<const GetTradingStatusRequest*>(
        &_GetTradingStatusRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 36;
  friend void swap(GetTradingStatusRequest& a, GetTradingStatusRequest& b) { a.Swap(&b); }
  inline void Swap(GetTradingStatusRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTradingStatusRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetTradingStatusRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetTradingStatusRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetTradingStatusRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetTradingStatusRequest& from) { GetTradingStatusRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetTradingStatusRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tinkoff.pub.invest.api.contract.v1.GetTradingStatusRequest"; }

 protected:
  explicit GetTradingStatusRequest(::google::protobuf::Arena* arena);
  GetTradingStatusRequest(::google::protobuf::Arena* arena, const GetTradingStatusRequest& from);
  GetTradingStatusRequest(::google::protobuf::Arena* arena, GetTradingStatusRequest&& from) noexcept
      : GetTradingStatusRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFigiFieldNumber = 1,
    kInstrumentIdFieldNumber = 2,
  };
  // optional string figi = 1 [deprecated = true];
  [[deprecated]]  bool has_figi() const;
  [[deprecated]]  void clear_figi() ;
  [[deprecated]] const std::string& figi() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  [[deprecated]] void set_figi(Arg_&& arg, Args_... args);
  [[deprecated]] std::string* mutable_figi();
  [[deprecated]] PROTOBUF_NODISCARD std::string* release_figi();
  [[deprecated]] void set_allocated_figi(std::string* value);

  private:
  const std::string& _internal_figi() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_figi(
      const std::string& value);
  std::string* _internal_mutable_figi();

  public:
  // optional string instrument_id = 2;
  bool has_instrument_id() const;
  void clear_instrument_id() ;
  const std::string& instrument_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_instrument_id(Arg_&& arg, Args_... args);
  std::string* mutable_instrument_id();
  PROTOBUF_NODISCARD std::string* release_instrument_id();
  void set_allocated_instrument_id(std::string* value);

  private:
  const std::string& _internal_instrument_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_id(
      const std::string& value);
  std::string* _internal_mutable_instrument_id();

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.pub.invest.api.contract.v1.GetTradingStatusRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      84, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetTradingStatusRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr figi_;
    ::google::protobuf::internal::ArenaStringPtr instrument_id_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_marketdata_2eproto;
};
// -------------------------------------------------------------------

class GetTechAnalysisRequest_Smoothing final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisRequest.Smoothing) */ {
 public:
  inline GetTechAnalysisRequest_Smoothing() : GetTechAnalysisRequest_Smoothing(nullptr) {}
  ~GetTechAnalysisRequest_Smoothing() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetTechAnalysisRequest_Smoothing* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetTechAnalysisRequest_Smoothing));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetTechAnalysisRequest_Smoothing(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetTechAnalysisRequest_Smoothing(const GetTechAnalysisRequest_Smoothing& from) : GetTechAnalysisRequest_Smoothing(nullptr, from) {}
  inline GetTechAnalysisRequest_Smoothing(GetTechAnalysisRequest_Smoothing&& from) noexcept
      : GetTechAnalysisRequest_Smoothing(nullptr, std::move(from)) {}
  inline GetTechAnalysisRequest_Smoothing& operator=(const GetTechAnalysisRequest_Smoothing& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTechAnalysisRequest_Smoothing& operator=(GetTechAnalysisRequest_Smoothing&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetTechAnalysisRequest_Smoothing& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTechAnalysisRequest_Smoothing* internal_default_instance() {
    return reinterpret_cast<const GetTechAnalysisRequest_Smoothing*>(
        &_GetTechAnalysisRequest_Smoothing_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 47;
  friend void swap(GetTechAnalysisRequest_Smoothing& a, GetTechAnalysisRequest_Smoothing& b) { a.Swap(&b); }
  inline void Swap(GetTechAnalysisRequest_Smoothing* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTechAnalysisRequest_Smoothing* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetTechAnalysisRequest_Smoothing* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetTechAnalysisRequest_Smoothing>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetTechAnalysisRequest_Smoothing& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetTechAnalysisRequest_Smoothing& from) { GetTechAnalysisRequest_Smoothing::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetTechAnalysisRequest_Smoothing* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tinkoff.pub.invest.api.contract.v1.GetTechAnalysisRequest.Smoothing"; }

 protected:
  explicit GetTechAnalysisRequest_Smoothing(::google::protobuf::Arena* arena);
  GetTechAnalysisRequest_Smoothing(::google::protobuf::Arena* arena, const GetTechAnalysisRequest_Smoothing& from);
  GetTechAnalysisRequest_Smoothing(::google::protobuf::Arena* arena, GetTechAnalysisRequest_Smoothing&& from) noexcept
      : GetTechAnalysisRequest_Smoothing(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFastLengthFieldNumber = 1,
    kSlowLengthFieldNumber = 2,
    kSignalSmoothingFieldNumber = 3,
  };
  // int32 fast_length = 1;
  void clear_fast_length() ;
  ::int32_t fast_length() const;
  void set_fast_length(::int32_t value);

  private:
  ::int32_t _internal_fast_length() const;
  void _internal_set_fast_length(::int32_t value);

  public:
  // int32 slow_length = 2;
  void clear_slow_length() ;
  ::int32_t slow_length() const;
  void set_slow_length(::int32_t value);

  private:
  ::int32_t _internal_slow_length() const;
  void _internal_set_slow_length(::int32_t value);

  public:
  // int32 signal_smoothing = 3;
  void clear_signal_smoothing() ;
  ::int32_t signal_smoothing() const;
  void set_signal_smoothing(::int32_t value);

  private:
  ::int32_t _internal_signal_smoothing() const;
  void _internal_set_signal_smoothing(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisRequest.Smoothing)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetTechAnalysisRequest_Smoothing& from_msg);
    ::int32_t fast_length_;
    ::int32_t slow_length_;
    ::int32_t signal_smoothing_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_marketdata_2eproto;
};
// -------------------------------------------------------------------

class GetOrderBookRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.pub.invest.api.contract.v1.GetOrderBookRequest) */ {
 public:
  inline GetOrderBookRequest() : GetOrderBookRequest(nullptr) {}
  ~GetOrderBookRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetOrderBookRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetOrderBookRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetOrderBookRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetOrderBookRequest(const GetOrderBookRequest& from) : GetOrderBookRequest(nullptr, from) {}
  inline GetOrderBookRequest(GetOrderBookRequest&& from) noexcept
      : GetOrderBookRequest(nullptr, std::move(from)) {}
  inline GetOrderBookRequest& operator=(const GetOrderBookRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOrderBookRequest& operator=(GetOrderBookRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetOrderBookRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetOrderBookRequest* internal_default_instance() {
    return reinterpret_cast<const GetOrderBookRequest*>(
        &_GetOrderBookRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 34;
  friend void swap(GetOrderBookRequest& a, GetOrderBookRequest& b) { a.Swap(&b); }
  inline void Swap(GetOrderBookRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetOrderBookRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetOrderBookRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetOrderBookRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetOrderBookRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetOrderBookRequest& from) { GetOrderBookRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetOrderBookRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tinkoff.pub.invest.api.contract.v1.GetOrderBookRequest"; }

 protected:
  explicit GetOrderBookRequest(::google::protobuf::Arena* arena);
  GetOrderBookRequest(::google::protobuf::Arena* arena, const GetOrderBookRequest& from);
  GetOrderBookRequest(::google::protobuf::Arena* arena, GetOrderBookRequest&& from) noexcept
      : GetOrderBookRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFigiFieldNumber = 1,
    kInstrumentIdFieldNumber = 3,
    kDepthFieldNumber = 2,
  };
  // optional string figi = 1 [deprecated = true];
  [[deprecated]]  bool has_figi() const;
  [[deprecated]]  void clear_figi() ;
  [[deprecated]] const std::string& figi() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  [[deprecated]] void set_figi(Arg_&& arg, Args_... args);
  [[deprecated]] std::string* mutable_figi();
  [[deprecated]] PROTOBUF_NODISCARD std::string* release_figi();
  [[deprecated]] void set_allocated_figi(std::string* value);

  private:
  const std::string& _internal_figi() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_figi(
      const std::string& value);
  std::string* _internal_mutable_figi();

  public:
  // optional string instrument_id = 3;
  bool has_instrument_id() const;
  void clear_instrument_id() ;
  const std::string& instrument_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_instrument_id(Arg_&& arg, Args_... args);
  std::string* mutable_instrument_id();
  PROTOBUF_NODISCARD std::string* release_instrument_id();
  void set_allocated_instrument_id(std::string* value);

  private:
  const std::string& _internal_instrument_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_id(
      const std::string& value);
  std::string* _internal_mutable_instrument_id();

  public:
  // int32 depth = 2 [(.google.api.field_behavior) = REQUIRED];
  void clear_depth() ;
  ::int32_t depth() const;
  void set_depth(::int32_t value);

  private:
  ::int32_t _internal_depth() const;
  void _internal_set_depth(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.pub.invest.api.contract.v1.GetOrderBookRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      80, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetOrderBookRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr figi_;
    ::google::protobuf::internal::ArenaStringPtr instrument_id_;
    ::int32_t depth_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_marketdata_2eproto;
};
// -------------------------------------------------------------------

class GetMySubscriptions final : public ::google::protobuf::internal::ZeroFieldsBase
/* @@protoc_insertion_point(class_definition:tinkoff.pub.invest.api.contract.v1.GetMySubscriptions) */ {
 public:
  inline GetMySubscriptions() : GetMySubscriptions(nullptr) {}

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetMySubscriptions* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetMySubscriptions));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetMySubscriptions(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetMySubscriptions(const GetMySubscriptions& from) : GetMySubscriptions(nullptr, from) {}
  inline GetMySubscriptions(GetMySubscriptions&& from) noexcept
      : GetMySubscriptions(nullptr, std::move(from)) {}
  inline GetMySubscriptions& operator=(const GetMySubscriptions& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetMySubscriptions& operator=(GetMySubscriptions&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetMySubscriptions& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetMySubscriptions* internal_default_instance() {
    return reinterpret_cast<const GetMySubscriptions*>(
        &_GetMySubscriptions_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 42;
  friend void swap(GetMySubscriptions& a, GetMySubscriptions& b) { a.Swap(&b); }
  inline void Swap(GetMySubscriptions* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetMySubscriptions* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetMySubscriptions* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::internal::ZeroFieldsBase::DefaultConstruct<GetMySubscriptions>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const GetMySubscriptions& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const GetMySubscriptions& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }

  public:
  bool IsInitialized() const {
    return true;
  }
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tinkoff.pub.invest.api.contract.v1.GetMySubscriptions"; }

 protected:
  explicit GetMySubscriptions(::google::protobuf::Arena* arena);
  GetMySubscriptions(::google::protobuf::Arena* arena, const GetMySubscriptions& from);
  GetMySubscriptions(::google::protobuf::Arena* arena, GetMySubscriptions&& from) noexcept
      : GetMySubscriptions(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  // @@protoc_insertion_point(class_scope:tinkoff.pub.invest.api.contract.v1.GetMySubscriptions)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 0, 0,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetMySubscriptions& from_msg);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_marketdata_2eproto;
};
// -------------------------------------------------------------------

class GetLastPricesRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.pub.invest.api.contract.v1.GetLastPricesRequest) */ {
 public:
  inline GetLastPricesRequest() : GetLastPricesRequest(nullptr) {}
  ~GetLastPricesRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetLastPricesRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetLastPricesRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetLastPricesRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetLastPricesRequest(const GetLastPricesRequest& from) : GetLastPricesRequest(nullptr, from) {}
  inline GetLastPricesRequest(GetLastPricesRequest&& from) noexcept
      : GetLastPricesRequest(nullptr, std::move(from)) {}
  inline GetLastPricesRequest& operator=(const GetLastPricesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLastPricesRequest& operator=(GetLastPricesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetLastPricesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetLastPricesRequest* internal_default_instance() {
    return reinterpret_cast<const GetLastPricesRequest*>(
        &_GetLastPricesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 31;
  friend void swap(GetLastPricesRequest& a, GetLastPricesRequest& b) { a.Swap(&b); }
  inline void Swap(GetLastPricesRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLastPricesRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetLastPricesRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetLastPricesRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetLastPricesRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetLastPricesRequest& from) { GetLastPricesRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetLastPricesRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tinkoff.pub.invest.api.contract.v1.GetLastPricesRequest"; }

 protected:
  explicit GetLastPricesRequest(::google::protobuf::Arena* arena);
  GetLastPricesRequest(::google::protobuf::Arena* arena, const GetLastPricesRequest& from);
  GetLastPricesRequest(::google::protobuf::Arena* arena, GetLastPricesRequest&& from) noexcept
      : GetLastPricesRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFigiFieldNumber = 1,
    kInstrumentIdFieldNumber = 2,
    kLastPriceTypeFieldNumber = 3,
    kInstrumentStatusFieldNumber = 9,
  };
  // repeated string figi = 1 [deprecated = true];
  [[deprecated]]  int figi_size() const;
  private:
  int _internal_figi_size() const;

  public:
  [[deprecated]]  void clear_figi() ;
  [[deprecated]] const std::string& figi(int index) const;
  [[deprecated]] std::string* mutable_figi(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  [[deprecated]] void set_figi(int index, Arg_&& value, Args_... args);
  [[deprecated]] std::string* add_figi();
  template <typename Arg_ = const std::string&, typename... Args_>
  [[deprecated]] void add_figi(Arg_&& value, Args_... args);
  [[deprecated]] const ::google::protobuf::RepeatedPtrField<std::string>& figi() const;
  [[deprecated]] ::google::protobuf::RepeatedPtrField<std::string>* mutable_figi();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_figi() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_figi();

  public:
  // repeated string instrument_id = 2;
  int instrument_id_size() const;
  private:
  int _internal_instrument_id_size() const;

  public:
  void clear_instrument_id() ;
  const std::string& instrument_id(int index) const;
  std::string* mutable_instrument_id(int index);
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_instrument_id(int index, Arg_&& value, Args_... args);
  std::string* add_instrument_id();
  template <typename Arg_ = const std::string&, typename... Args_>
  void add_instrument_id(Arg_&& value, Args_... args);
  const ::google::protobuf::RepeatedPtrField<std::string>& instrument_id() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_instrument_id();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_instrument_id() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_instrument_id();

  public:
  // .tinkoff.pub.invest.api.contract.v1.LastPriceType last_price_type = 3;
  void clear_last_price_type() ;
  ::tinkoff::pub::invest::api::contract::v1::LastPriceType last_price_type() const;
  void set_last_price_type(::tinkoff::pub::invest::api::contract::v1::LastPriceType value);

  private:
  ::tinkoff::pub::invest::api::contract::v1::LastPriceType _internal_last_price_type() const;
  void _internal_set_last_price_type(::tinkoff::pub::invest::api::contract::v1::LastPriceType value);

  public:
  // optional .tinkoff.pub.invest.api.contract.v1.InstrumentStatus instrument_status = 9;
  bool has_instrument_status() const;
  void clear_instrument_status() ;
  ::tinkoff::pub::invest::api::contract::v1::InstrumentStatus instrument_status() const;
  void set_instrument_status(::tinkoff::pub::invest::api::contract::v1::InstrumentStatus value);

  private:
  ::tinkoff::pub::invest::api::contract::v1::InstrumentStatus _internal_instrument_status() const;
  void _internal_set_instrument_status(::tinkoff::pub::invest::api::contract::v1::InstrumentStatus value);

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.pub.invest.api.contract.v1.GetLastPricesRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 0,
      81, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetLastPricesRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField<std::string> figi_;
    ::google::protobuf::RepeatedPtrField<std::string> instrument_id_;
    int last_price_type_;
    int instrument_status_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_marketdata_2eproto;
};
// -------------------------------------------------------------------

class CandleSubscription final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.pub.invest.api.contract.v1.CandleSubscription) */ {
 public:
  inline CandleSubscription() : CandleSubscription(nullptr) {}
  ~CandleSubscription() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CandleSubscription* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CandleSubscription));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CandleSubscription(
      ::google::protobuf::internal::ConstantInitialized);

  inline CandleSubscription(const CandleSubscription& from) : CandleSubscription(nullptr, from) {}
  inline CandleSubscription(CandleSubscription&& from) noexcept
      : CandleSubscription(nullptr, std::move(from)) {}
  inline CandleSubscription& operator=(const CandleSubscription& from) {
    CopyFrom(from);
    return *this;
  }
  inline CandleSubscription& operator=(CandleSubscription&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CandleSubscription& default_instance() {
    return *internal_default_instance();
  }
  static inline const CandleSubscription* internal_default_instance() {
    return reinterpret_cast<const CandleSubscription*>(
        &_CandleSubscription_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 6;
  friend void swap(CandleSubscription& a, CandleSubscription& b) { a.Swap(&b); }
  inline void Swap(CandleSubscription* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CandleSubscription* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CandleSubscription* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CandleSubscription>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CandleSubscription& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CandleSubscription& from) { CandleSubscription::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CandleSubscription* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tinkoff.pub.invest.api.contract.v1.CandleSubscription"; }

 protected:
  explicit CandleSubscription(::google::protobuf::Arena* arena);
  CandleSubscription(::google::protobuf::Arena* arena, const CandleSubscription& from);
  CandleSubscription(::google::protobuf::Arena* arena, CandleSubscription&& from) noexcept
      : CandleSubscription(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFigiFieldNumber = 1,
    kInstrumentUidFieldNumber = 4,
    kStreamIdFieldNumber = 6,
    kSubscriptionIdFieldNumber = 7,
    kIntervalFieldNumber = 2,
    kSubscriptionStatusFieldNumber = 3,
    kWaitingCloseFieldNumber = 5,
    kCandleSourceTypeFieldNumber = 9,
  };
  // string figi = 1;
  void clear_figi() ;
  const std::string& figi() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_figi(Arg_&& arg, Args_... args);
  std::string* mutable_figi();
  PROTOBUF_NODISCARD std::string* release_figi();
  void set_allocated_figi(std::string* value);

  private:
  const std::string& _internal_figi() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_figi(
      const std::string& value);
  std::string* _internal_mutable_figi();

  public:
  // string instrument_uid = 4;
  void clear_instrument_uid() ;
  const std::string& instrument_uid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_instrument_uid(Arg_&& arg, Args_... args);
  std::string* mutable_instrument_uid();
  PROTOBUF_NODISCARD std::string* release_instrument_uid();
  void set_allocated_instrument_uid(std::string* value);

  private:
  const std::string& _internal_instrument_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_uid(
      const std::string& value);
  std::string* _internal_mutable_instrument_uid();

  public:
  // string stream_id = 6;
  void clear_stream_id() ;
  const std::string& stream_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_stream_id(Arg_&& arg, Args_... args);
  std::string* mutable_stream_id();
  PROTOBUF_NODISCARD std::string* release_stream_id();
  void set_allocated_stream_id(std::string* value);

  private:
  const std::string& _internal_stream_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_stream_id(
      const std::string& value);
  std::string* _internal_mutable_stream_id();

  public:
  // string subscription_id = 7;
  void clear_subscription_id() ;
  const std::string& subscription_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_subscription_id(Arg_&& arg, Args_... args);
  std::string* mutable_subscription_id();
  PROTOBUF_NODISCARD std::string* release_subscription_id();
  void set_allocated_subscription_id(std::string* value);

  private:
  const std::string& _internal_subscription_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_subscription_id(
      const std::string& value);
  std::string* _internal_mutable_subscription_id();

  public:
  // .tinkoff.pub.invest.api.contract.v1.SubscriptionInterval interval = 2;
  void clear_interval() ;
  ::tinkoff::pub::invest::api::contract::v1::SubscriptionInterval interval() const;
  void set_interval(::tinkoff::pub::invest::api::contract::v1::SubscriptionInterval value);

  private:
  ::tinkoff::pub::invest::api::contract::v1::SubscriptionInterval _internal_interval() const;
  void _internal_set_interval(::tinkoff::pub::invest::api::contract::v1::SubscriptionInterval value);

  public:
  // .tinkoff.pub.invest.api.contract.v1.SubscriptionStatus subscription_status = 3;
  void clear_subscription_status() ;
  ::tinkoff::pub::invest::api::contract::v1::SubscriptionStatus subscription_status() const;
  void set_subscription_status(::tinkoff::pub::invest::api::contract::v1::SubscriptionStatus value);

  private:
  ::tinkoff::pub::invest::api::contract::v1::SubscriptionStatus _internal_subscription_status() const;
  void _internal_set_subscription_status(::tinkoff::pub::invest::api::contract::v1::SubscriptionStatus value);

  public:
  // bool waiting_close = 5;
  void clear_waiting_close() ;
  bool waiting_close() const;
  void set_waiting_close(bool value);

  private:
  bool _internal_waiting_close() const;
  void _internal_set_waiting_close(bool value);

  public:
  // optional .tinkoff.pub.invest.api.contract.v1.GetCandlesRequest.CandleSource candle_source_type = 9;
  bool has_candle_source_type() const;
  void clear_candle_source_type() ;
  ::tinkoff::pub::invest::api::contract::v1::GetCandlesRequest_CandleSource candle_source_type() const;
  void set_candle_source_type(::tinkoff::pub::invest::api::contract::v1::GetCandlesRequest_CandleSource value);

  private:
  ::tinkoff::pub::invest::api::contract::v1::GetCandlesRequest_CandleSource _internal_candle_source_type() const;
  void _internal_set_candle_source_type(::tinkoff::pub::invest::api::contract::v1::GetCandlesRequest_CandleSource value);

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.pub.invest.api.contract.v1.CandleSubscription)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 8, 0,
      112, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CandleSubscription& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr figi_;
    ::google::protobuf::internal::ArenaStringPtr instrument_uid_;
    ::google::protobuf::internal::ArenaStringPtr stream_id_;
    ::google::protobuf::internal::ArenaStringPtr subscription_id_;
    int interval_;
    int subscription_status_;
    bool waiting_close_;
    int candle_source_type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_marketdata_2eproto;
};
// -------------------------------------------------------------------

class CandleInstrument final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.pub.invest.api.contract.v1.CandleInstrument) */ {
 public:
  inline CandleInstrument() : CandleInstrument(nullptr) {}
  ~CandleInstrument() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(CandleInstrument* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(CandleInstrument));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR CandleInstrument(
      ::google::protobuf::internal::ConstantInitialized);

  inline CandleInstrument(const CandleInstrument& from) : CandleInstrument(nullptr, from) {}
  inline CandleInstrument(CandleInstrument&& from) noexcept
      : CandleInstrument(nullptr, std::move(from)) {}
  inline CandleInstrument& operator=(const CandleInstrument& from) {
    CopyFrom(from);
    return *this;
  }
  inline CandleInstrument& operator=(CandleInstrument&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const CandleInstrument& default_instance() {
    return *internal_default_instance();
  }
  static inline const CandleInstrument* internal_default_instance() {
    return reinterpret_cast<const CandleInstrument*>(
        &_CandleInstrument_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 4;
  friend void swap(CandleInstrument& a, CandleInstrument& b) { a.Swap(&b); }
  inline void Swap(CandleInstrument* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CandleInstrument* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  CandleInstrument* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<CandleInstrument>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const CandleInstrument& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const CandleInstrument& from) { CandleInstrument::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(CandleInstrument* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tinkoff.pub.invest.api.contract.v1.CandleInstrument"; }

 protected:
  explicit CandleInstrument(::google::protobuf::Arena* arena);
  CandleInstrument(::google::protobuf::Arena* arena, const CandleInstrument& from);
  CandleInstrument(::google::protobuf::Arena* arena, CandleInstrument&& from) noexcept
      : CandleInstrument(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFigiFieldNumber = 1,
    kInstrumentIdFieldNumber = 3,
    kIntervalFieldNumber = 2,
  };
  // string figi = 1 [deprecated = true];
  [[deprecated]]  void clear_figi() ;
  [[deprecated]] const std::string& figi() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  [[deprecated]] void set_figi(Arg_&& arg, Args_... args);
  [[deprecated]] std::string* mutable_figi();
  [[deprecated]] PROTOBUF_NODISCARD std::string* release_figi();
  [[deprecated]] void set_allocated_figi(std::string* value);

  private:
  const std::string& _internal_figi() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_figi(
      const std::string& value);
  std::string* _internal_mutable_figi();

  public:
  // string instrument_id = 3;
  void clear_instrument_id() ;
  const std::string& instrument_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_instrument_id(Arg_&& arg, Args_... args);
  std::string* mutable_instrument_id();
  PROTOBUF_NODISCARD std::string* release_instrument_id();
  void set_allocated_instrument_id(std::string* value);

  private:
  const std::string& _internal_instrument_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_id(
      const std::string& value);
  std::string* _internal_mutable_instrument_id();

  public:
  // .tinkoff.pub.invest.api.contract.v1.SubscriptionInterval interval = 2;
  void clear_interval() ;
  ::tinkoff::pub::invest::api::contract::v1::SubscriptionInterval interval() const;
  void set_interval(::tinkoff::pub::invest::api::contract::v1::SubscriptionInterval value);

  private:
  ::tinkoff::pub::invest::api::contract::v1::SubscriptionInterval _internal_interval() const;
  void _internal_set_interval(::tinkoff::pub::invest::api::contract::v1::SubscriptionInterval value);

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.pub.invest.api.contract.v1.CandleInstrument)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 0,
      77, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const CandleInstrument& from_msg);
    ::google::protobuf::internal::ArenaStringPtr figi_;
    ::google::protobuf::internal::ArenaStringPtr instrument_id_;
    int interval_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_marketdata_2eproto;
};
// -------------------------------------------------------------------

class TradingStatus final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.pub.invest.api.contract.v1.TradingStatus) */ {
 public:
  inline TradingStatus() : TradingStatus(nullptr) {}
  ~TradingStatus() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(TradingStatus* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(TradingStatus));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR TradingStatus(
      ::google::protobuf::internal::ConstantInitialized);

  inline TradingStatus(const TradingStatus& from) : TradingStatus(nullptr, from) {}
  inline TradingStatus(TradingStatus&& from) noexcept
      : TradingStatus(nullptr, std::move(from)) {}
  inline TradingStatus& operator=(const TradingStatus& from) {
    CopyFrom(from);
    return *this;
  }
  inline TradingStatus& operator=(TradingStatus&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const TradingStatus& default_instance() {
    return *internal_default_instance();
  }
  static inline const TradingStatus* internal_default_instance() {
    return reinterpret_cast<const TradingStatus*>(
        &_TradingStatus_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 27;
  friend void swap(TradingStatus& a, TradingStatus& b) { a.Swap(&b); }
  inline void Swap(TradingStatus* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(TradingStatus* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  TradingStatus* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<TradingStatus>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const TradingStatus& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const TradingStatus& from) { TradingStatus::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(TradingStatus* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tinkoff.pub.invest.api.contract.v1.TradingStatus"; }

 protected:
  explicit TradingStatus(::google::protobuf::Arena* arena);
  TradingStatus(::google::protobuf::Arena* arena, const TradingStatus& from);
  TradingStatus(::google::protobuf::Arena* arena, TradingStatus&& from) noexcept
      : TradingStatus(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFigiFieldNumber = 1,
    kInstrumentUidFieldNumber = 6,
    kTimeFieldNumber = 3,
    kTradingStatusFieldNumber = 2,
    kLimitOrderAvailableFlagFieldNumber = 4,
    kMarketOrderAvailableFlagFieldNumber = 5,
  };
  // string figi = 1;
  void clear_figi() ;
  const std::string& figi() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_figi(Arg_&& arg, Args_... args);
  std::string* mutable_figi();
  PROTOBUF_NODISCARD std::string* release_figi();
  void set_allocated_figi(std::string* value);

  private:
  const std::string& _internal_figi() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_figi(
      const std::string& value);
  std::string* _internal_mutable_figi();

  public:
  // string instrument_uid = 6;
  void clear_instrument_uid() ;
  const std::string& instrument_uid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_instrument_uid(Arg_&& arg, Args_... args);
  std::string* mutable_instrument_uid();
  PROTOBUF_NODISCARD std::string* release_instrument_uid();
  void set_allocated_instrument_uid(std::string* value);

  private:
  const std::string& _internal_instrument_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_uid(
      const std::string& value);
  std::string* _internal_mutable_instrument_uid();

  public:
  // .google.protobuf.Timestamp time = 3;
  bool has_time() const;
  void clear_time() ;
  const ::google::protobuf::Timestamp& time() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_time();
  ::google::protobuf::Timestamp* mutable_time();
  void set_allocated_time(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_time(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_time();

  private:
  const ::google::protobuf::Timestamp& _internal_time() const;
  ::google::protobuf::Timestamp* _internal_mutable_time();

  public:
  // .tinkoff.pub.invest.api.contract.v1.SecurityTradingStatus trading_status = 2;
  void clear_trading_status() ;
  ::tinkoff::pub::invest::api::contract::v1::SecurityTradingStatus trading_status() const;
  void set_trading_status(::tinkoff::pub::invest::api::contract::v1::SecurityTradingStatus value);

  private:
  ::tinkoff::pub::invest::api::contract::v1::SecurityTradingStatus _internal_trading_status() const;
  void _internal_set_trading_status(::tinkoff::pub::invest::api::contract::v1::SecurityTradingStatus value);

  public:
  // bool limit_order_available_flag = 4;
  void clear_limit_order_available_flag() ;
  bool limit_order_available_flag() const;
  void set_limit_order_available_flag(bool value);

  private:
  bool _internal_limit_order_available_flag() const;
  void _internal_set_limit_order_available_flag(bool value);

  public:
  // bool market_order_available_flag = 5;
  void clear_market_order_available_flag() ;
  bool market_order_available_flag() const;
  void set_market_order_available_flag(bool value);

  private:
  bool _internal_market_order_available_flag() const;
  void _internal_set_market_order_available_flag(bool value);

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.pub.invest.api.contract.v1.TradingStatus)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 1,
      75, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const TradingStatus& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr figi_;
    ::google::protobuf::internal::ArenaStringPtr instrument_uid_;
    ::google::protobuf::Timestamp* time_;
    int trading_status_;
    bool limit_order_available_flag_;
    bool market_order_available_flag_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_marketdata_2eproto;
};
// -------------------------------------------------------------------

class Trade final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.pub.invest.api.contract.v1.Trade) */ {
 public:
  inline Trade() : Trade(nullptr) {}
  ~Trade() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Trade* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Trade));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Trade(
      ::google::protobuf::internal::ConstantInitialized);

  inline Trade(const Trade& from) : Trade(nullptr, from) {}
  inline Trade(Trade&& from) noexcept
      : Trade(nullptr, std::move(from)) {}
  inline Trade& operator=(const Trade& from) {
    CopyFrom(from);
    return *this;
  }
  inline Trade& operator=(Trade&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Trade& default_instance() {
    return *internal_default_instance();
  }
  static inline const Trade* internal_default_instance() {
    return reinterpret_cast<const Trade*>(
        &_Trade_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 26;
  friend void swap(Trade& a, Trade& b) { a.Swap(&b); }
  inline void Swap(Trade* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Trade* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Trade* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Trade>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Trade& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Trade& from) { Trade::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Trade* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tinkoff.pub.invest.api.contract.v1.Trade"; }

 protected:
  explicit Trade(::google::protobuf::Arena* arena);
  Trade(::google::protobuf::Arena* arena, const Trade& from);
  Trade(::google::protobuf::Arena* arena, Trade&& from) noexcept
      : Trade(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFigiFieldNumber = 1,
    kInstrumentUidFieldNumber = 6,
    kPriceFieldNumber = 3,
    kTimeFieldNumber = 5,
    kQuantityFieldNumber = 4,
    kDirectionFieldNumber = 2,
    kTradeSourceFieldNumber = 7,
  };
  // string figi = 1;
  void clear_figi() ;
  const std::string& figi() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_figi(Arg_&& arg, Args_... args);
  std::string* mutable_figi();
  PROTOBUF_NODISCARD std::string* release_figi();
  void set_allocated_figi(std::string* value);

  private:
  const std::string& _internal_figi() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_figi(
      const std::string& value);
  std::string* _internal_mutable_figi();

  public:
  // string instrument_uid = 6;
  void clear_instrument_uid() ;
  const std::string& instrument_uid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_instrument_uid(Arg_&& arg, Args_... args);
  std::string* mutable_instrument_uid();
  PROTOBUF_NODISCARD std::string* release_instrument_uid();
  void set_allocated_instrument_uid(std::string* value);

  private:
  const std::string& _internal_instrument_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_uid(
      const std::string& value);
  std::string* _internal_mutable_instrument_uid();

  public:
  // .tinkoff.pub.invest.api.contract.v1.Quotation price = 3;
  bool has_price() const;
  void clear_price() ;
  const ::tinkoff::pub::invest::api::contract::v1::Quotation& price() const;
  PROTOBUF_NODISCARD ::tinkoff::pub::invest::api::contract::v1::Quotation* release_price();
  ::tinkoff::pub::invest::api::contract::v1::Quotation* mutable_price();
  void set_allocated_price(::tinkoff::pub::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_price(::tinkoff::pub::invest::api::contract::v1::Quotation* value);
  ::tinkoff::pub::invest::api::contract::v1::Quotation* unsafe_arena_release_price();

  private:
  const ::tinkoff::pub::invest::api::contract::v1::Quotation& _internal_price() const;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* _internal_mutable_price();

  public:
  // .google.protobuf.Timestamp time = 5;
  bool has_time() const;
  void clear_time() ;
  const ::google::protobuf::Timestamp& time() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_time();
  ::google::protobuf::Timestamp* mutable_time();
  void set_allocated_time(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_time(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_time();

  private:
  const ::google::protobuf::Timestamp& _internal_time() const;
  ::google::protobuf::Timestamp* _internal_mutable_time();

  public:
  // int64 quantity = 4;
  void clear_quantity() ;
  ::int64_t quantity() const;
  void set_quantity(::int64_t value);

  private:
  ::int64_t _internal_quantity() const;
  void _internal_set_quantity(::int64_t value);

  public:
  // .tinkoff.pub.invest.api.contract.v1.TradeDirection direction = 2;
  void clear_direction() ;
  ::tinkoff::pub::invest::api::contract::v1::TradeDirection direction() const;
  void set_direction(::tinkoff::pub::invest::api::contract::v1::TradeDirection value);

  private:
  ::tinkoff::pub::invest::api::contract::v1::TradeDirection _internal_direction() const;
  void _internal_set_direction(::tinkoff::pub::invest::api::contract::v1::TradeDirection value);

  public:
  // .tinkoff.pub.invest.api.contract.v1.TradeSourceType trade_source = 7;
  void clear_trade_source() ;
  ::tinkoff::pub::invest::api::contract::v1::TradeSourceType trade_source() const;
  void set_trade_source(::tinkoff::pub::invest::api::contract::v1::TradeSourceType value);

  private:
  ::tinkoff::pub::invest::api::contract::v1::TradeSourceType _internal_trade_source() const;
  void _internal_set_trade_source(::tinkoff::pub::invest::api::contract::v1::TradeSourceType value);

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.pub.invest.api.contract.v1.Trade)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 2,
      67, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Trade& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr figi_;
    ::google::protobuf::internal::ArenaStringPtr instrument_uid_;
    ::tinkoff::pub::invest::api::contract::v1::Quotation* price_;
    ::google::protobuf::Timestamp* time_;
    ::int64_t quantity_;
    int direction_;
    int trade_source_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_marketdata_2eproto;
};
// -------------------------------------------------------------------

class SubscribeTradesResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.pub.invest.api.contract.v1.SubscribeTradesResponse) */ {
 public:
  inline SubscribeTradesResponse() : SubscribeTradesResponse(nullptr) {}
  ~SubscribeTradesResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SubscribeTradesResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SubscribeTradesResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SubscribeTradesResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline SubscribeTradesResponse(const SubscribeTradesResponse& from) : SubscribeTradesResponse(nullptr, from) {}
  inline SubscribeTradesResponse(SubscribeTradesResponse&& from) noexcept
      : SubscribeTradesResponse(nullptr, std::move(from)) {}
  inline SubscribeTradesResponse& operator=(const SubscribeTradesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeTradesResponse& operator=(SubscribeTradesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeTradesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeTradesResponse* internal_default_instance() {
    return reinterpret_cast<const SubscribeTradesResponse*>(
        &_SubscribeTradesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 13;
  friend void swap(SubscribeTradesResponse& a, SubscribeTradesResponse& b) { a.Swap(&b); }
  inline void Swap(SubscribeTradesResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeTradesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeTradesResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SubscribeTradesResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SubscribeTradesResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SubscribeTradesResponse& from) { SubscribeTradesResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SubscribeTradesResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tinkoff.pub.invest.api.contract.v1.SubscribeTradesResponse"; }

 protected:
  explicit SubscribeTradesResponse(::google::protobuf::Arena* arena);
  SubscribeTradesResponse(::google::protobuf::Arena* arena, const SubscribeTradesResponse& from);
  SubscribeTradesResponse(::google::protobuf::Arena* arena, SubscribeTradesResponse&& from) noexcept
      : SubscribeTradesResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTradeSubscriptionsFieldNumber = 2,
    kTrackingIdFieldNumber = 1,
    kTradeSourceFieldNumber = 3,
  };
  // repeated .tinkoff.pub.invest.api.contract.v1.TradeSubscription trade_subscriptions = 2;
  int trade_subscriptions_size() const;
  private:
  int _internal_trade_subscriptions_size() const;

  public:
  void clear_trade_subscriptions() ;
  ::tinkoff::pub::invest::api::contract::v1::TradeSubscription* mutable_trade_subscriptions(int index);
  ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::TradeSubscription>* mutable_trade_subscriptions();

  private:
  const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::TradeSubscription>& _internal_trade_subscriptions() const;
  ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::TradeSubscription>* _internal_mutable_trade_subscriptions();
  public:
  const ::tinkoff::pub::invest::api::contract::v1::TradeSubscription& trade_subscriptions(int index) const;
  ::tinkoff::pub::invest::api::contract::v1::TradeSubscription* add_trade_subscriptions();
  const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::TradeSubscription>& trade_subscriptions() const;
  // string tracking_id = 1;
  void clear_tracking_id() ;
  const std::string& tracking_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_tracking_id(Arg_&& arg, Args_... args);
  std::string* mutable_tracking_id();
  PROTOBUF_NODISCARD std::string* release_tracking_id();
  void set_allocated_tracking_id(std::string* value);

  private:
  const std::string& _internal_tracking_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tracking_id(
      const std::string& value);
  std::string* _internal_mutable_tracking_id();

  public:
  // .tinkoff.pub.invest.api.contract.v1.TradeSourceType trade_source = 3;
  void clear_trade_source() ;
  ::tinkoff::pub::invest::api::contract::v1::TradeSourceType trade_source() const;
  void set_trade_source(::tinkoff::pub::invest::api::contract::v1::TradeSourceType value);

  private:
  ::tinkoff::pub::invest::api::contract::v1::TradeSourceType _internal_trade_source() const;
  void _internal_set_trade_source(::tinkoff::pub::invest::api::contract::v1::TradeSourceType value);

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.pub.invest.api.contract.v1.SubscribeTradesResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      78, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SubscribeTradesResponse& from_msg);
    ::google::protobuf::RepeatedPtrField< ::tinkoff::pub::invest::api::contract::v1::TradeSubscription > trade_subscriptions_;
    ::google::protobuf::internal::ArenaStringPtr tracking_id_;
    int trade_source_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_marketdata_2eproto;
};
// -------------------------------------------------------------------

class SubscribeTradesRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.pub.invest.api.contract.v1.SubscribeTradesRequest) */ {
 public:
  inline SubscribeTradesRequest() : SubscribeTradesRequest(nullptr) {}
  ~SubscribeTradesRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SubscribeTradesRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SubscribeTradesRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SubscribeTradesRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline SubscribeTradesRequest(const SubscribeTradesRequest& from) : SubscribeTradesRequest(nullptr, from) {}
  inline SubscribeTradesRequest(SubscribeTradesRequest&& from) noexcept
      : SubscribeTradesRequest(nullptr, std::move(from)) {}
  inline SubscribeTradesRequest& operator=(const SubscribeTradesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeTradesRequest& operator=(SubscribeTradesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeTradesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeTradesRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeTradesRequest*>(
        &_SubscribeTradesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 11;
  friend void swap(SubscribeTradesRequest& a, SubscribeTradesRequest& b) { a.Swap(&b); }
  inline void Swap(SubscribeTradesRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeTradesRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeTradesRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SubscribeTradesRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SubscribeTradesRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SubscribeTradesRequest& from) { SubscribeTradesRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SubscribeTradesRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tinkoff.pub.invest.api.contract.v1.SubscribeTradesRequest"; }

 protected:
  explicit SubscribeTradesRequest(::google::protobuf::Arena* arena);
  SubscribeTradesRequest(::google::protobuf::Arena* arena, const SubscribeTradesRequest& from);
  SubscribeTradesRequest(::google::protobuf::Arena* arena, SubscribeTradesRequest&& from) noexcept
      : SubscribeTradesRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kInstrumentsFieldNumber = 2,
    kSubscriptionActionFieldNumber = 1,
    kTradeSourceFieldNumber = 3,
  };
  // repeated .tinkoff.pub.invest.api.contract.v1.TradeInstrument instruments = 2;
  int instruments_size() const;
  private:
  int _internal_instruments_size() const;

  public:
  void clear_instruments() ;
  ::tinkoff::pub::invest::api::contract::v1::TradeInstrument* mutable_instruments(int index);
  ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::TradeInstrument>* mutable_instruments();

  private:
  const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::TradeInstrument>& _internal_instruments() const;
  ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::TradeInstrument>* _internal_mutable_instruments();
  public:
  const ::tinkoff::pub::invest::api::contract::v1::TradeInstrument& instruments(int index) const;
  ::tinkoff::pub::invest::api::contract::v1::TradeInstrument* add_instruments();
  const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::TradeInstrument>& instruments() const;
  // .tinkoff.pub.invest.api.contract.v1.SubscriptionAction subscription_action = 1;
  void clear_subscription_action() ;
  ::tinkoff::pub::invest::api::contract::v1::SubscriptionAction subscription_action() const;
  void set_subscription_action(::tinkoff::pub::invest::api::contract::v1::SubscriptionAction value);

  private:
  ::tinkoff::pub::invest::api::contract::v1::SubscriptionAction _internal_subscription_action() const;
  void _internal_set_subscription_action(::tinkoff::pub::invest::api::contract::v1::SubscriptionAction value);

  public:
  // .tinkoff.pub.invest.api.contract.v1.TradeSourceType trade_source = 3;
  void clear_trade_source() ;
  ::tinkoff::pub::invest::api::contract::v1::TradeSourceType trade_source() const;
  void set_trade_source(::tinkoff::pub::invest::api::contract::v1::TradeSourceType value);

  private:
  ::tinkoff::pub::invest::api::contract::v1::TradeSourceType _internal_trade_source() const;
  void _internal_set_trade_source(::tinkoff::pub::invest::api::contract::v1::TradeSourceType value);

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.pub.invest.api.contract.v1.SubscribeTradesRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 3, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SubscribeTradesRequest& from_msg);
    ::google::protobuf::RepeatedPtrField< ::tinkoff::pub::invest::api::contract::v1::TradeInstrument > instruments_;
    int subscription_action_;
    int trade_source_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_marketdata_2eproto;
};
// -------------------------------------------------------------------

class SubscribeOrderBookResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.pub.invest.api.contract.v1.SubscribeOrderBookResponse) */ {
 public:
  inline SubscribeOrderBookResponse() : SubscribeOrderBookResponse(nullptr) {}
  ~SubscribeOrderBookResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SubscribeOrderBookResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SubscribeOrderBookResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SubscribeOrderBookResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline SubscribeOrderBookResponse(const SubscribeOrderBookResponse& from) : SubscribeOrderBookResponse(nullptr, from) {}
  inline SubscribeOrderBookResponse(SubscribeOrderBookResponse&& from) noexcept
      : SubscribeOrderBookResponse(nullptr, std::move(from)) {}
  inline SubscribeOrderBookResponse& operator=(const SubscribeOrderBookResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeOrderBookResponse& operator=(SubscribeOrderBookResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeOrderBookResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeOrderBookResponse* internal_default_instance() {
    return reinterpret_cast<const SubscribeOrderBookResponse*>(
        &_SubscribeOrderBookResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 9;
  friend void swap(SubscribeOrderBookResponse& a, SubscribeOrderBookResponse& b) { a.Swap(&b); }
  inline void Swap(SubscribeOrderBookResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeOrderBookResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeOrderBookResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SubscribeOrderBookResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SubscribeOrderBookResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SubscribeOrderBookResponse& from) { SubscribeOrderBookResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SubscribeOrderBookResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tinkoff.pub.invest.api.contract.v1.SubscribeOrderBookResponse"; }

 protected:
  explicit SubscribeOrderBookResponse(::google::protobuf::Arena* arena);
  SubscribeOrderBookResponse(::google::protobuf::Arena* arena, const SubscribeOrderBookResponse& from);
  SubscribeOrderBookResponse(::google::protobuf::Arena* arena, SubscribeOrderBookResponse&& from) noexcept
      : SubscribeOrderBookResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kOrderBookSubscriptionsFieldNumber = 2,
    kTrackingIdFieldNumber = 1,
  };
  // repeated .tinkoff.pub.invest.api.contract.v1.OrderBookSubscription order_book_subscriptions = 2;
  int order_book_subscriptions_size() const;
  private:
  int _internal_order_book_subscriptions_size() const;

  public:
  void clear_order_book_subscriptions() ;
  ::tinkoff::pub::invest::api::contract::v1::OrderBookSubscription* mutable_order_book_subscriptions(int index);
  ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::OrderBookSubscription>* mutable_order_book_subscriptions();

  private:
  const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::OrderBookSubscription>& _internal_order_book_subscriptions() const;
  ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::OrderBookSubscription>* _internal_mutable_order_book_subscriptions();
  public:
  const ::tinkoff::pub::invest::api::contract::v1::OrderBookSubscription& order_book_subscriptions(int index) const;
  ::tinkoff::pub::invest::api::contract::v1::OrderBookSubscription* add_order_book_subscriptions();
  const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::OrderBookSubscription>& order_book_subscriptions() const;
  // string tracking_id = 1;
  void clear_tracking_id() ;
  const std::string& tracking_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_tracking_id(Arg_&& arg, Args_... args);
  std::string* mutable_tracking_id();
  PROTOBUF_NODISCARD std::string* release_tracking_id();
  void set_allocated_tracking_id(std::string* value);

  private:
  const std::string& _internal_tracking_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tracking_id(
      const std::string& value);
  std::string* _internal_mutable_tracking_id();

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.pub.invest.api.contract.v1.SubscribeOrderBookResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      81, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SubscribeOrderBookResponse& from_msg);
    ::google::protobuf::RepeatedPtrField< ::tinkoff::pub::invest::api::contract::v1::OrderBookSubscription > order_book_subscriptions_;
    ::google::protobuf::internal::ArenaStringPtr tracking_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_marketdata_2eproto;
};
// -------------------------------------------------------------------

class SubscribeOrderBookRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.pub.invest.api.contract.v1.SubscribeOrderBookRequest) */ {
 public:
  inline SubscribeOrderBookRequest() : SubscribeOrderBookRequest(nullptr) {}
  ~SubscribeOrderBookRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SubscribeOrderBookRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SubscribeOrderBookRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SubscribeOrderBookRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline SubscribeOrderBookRequest(const SubscribeOrderBookRequest& from) : SubscribeOrderBookRequest(nullptr, from) {}
  inline SubscribeOrderBookRequest(SubscribeOrderBookRequest&& from) noexcept
      : SubscribeOrderBookRequest(nullptr, std::move(from)) {}
  inline SubscribeOrderBookRequest& operator=(const SubscribeOrderBookRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeOrderBookRequest& operator=(SubscribeOrderBookRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeOrderBookRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeOrderBookRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeOrderBookRequest*>(
        &_SubscribeOrderBookRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 7;
  friend void swap(SubscribeOrderBookRequest& a, SubscribeOrderBookRequest& b) { a.Swap(&b); }
  inline void Swap(SubscribeOrderBookRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeOrderBookRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeOrderBookRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SubscribeOrderBookRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SubscribeOrderBookRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SubscribeOrderBookRequest& from) { SubscribeOrderBookRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SubscribeOrderBookRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tinkoff.pub.invest.api.contract.v1.SubscribeOrderBookRequest"; }

 protected:
  explicit SubscribeOrderBookRequest(::google::protobuf::Arena* arena);
  SubscribeOrderBookRequest(::google::protobuf::Arena* arena, const SubscribeOrderBookRequest& from);
  SubscribeOrderBookRequest(::google::protobuf::Arena* arena, SubscribeOrderBookRequest&& from) noexcept
      : SubscribeOrderBookRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kInstrumentsFieldNumber = 2,
    kSubscriptionActionFieldNumber = 1,
  };
  // repeated .tinkoff.pub.invest.api.contract.v1.OrderBookInstrument instruments = 2;
  int instruments_size() const;
  private:
  int _internal_instruments_size() const;

  public:
  void clear_instruments() ;
  ::tinkoff::pub::invest::api::contract::v1::OrderBookInstrument* mutable_instruments(int index);
  ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::OrderBookInstrument>* mutable_instruments();

  private:
  const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::OrderBookInstrument>& _internal_instruments() const;
  ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::OrderBookInstrument>* _internal_mutable_instruments();
  public:
  const ::tinkoff::pub::invest::api::contract::v1::OrderBookInstrument& instruments(int index) const;
  ::tinkoff::pub::invest::api::contract::v1::OrderBookInstrument* add_instruments();
  const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::OrderBookInstrument>& instruments() const;
  // .tinkoff.pub.invest.api.contract.v1.SubscriptionAction subscription_action = 1;
  void clear_subscription_action() ;
  ::tinkoff::pub::invest::api::contract::v1::SubscriptionAction subscription_action() const;
  void set_subscription_action(::tinkoff::pub::invest::api::contract::v1::SubscriptionAction value);

  private:
  ::tinkoff::pub::invest::api::contract::v1::SubscriptionAction _internal_subscription_action() const;
  void _internal_set_subscription_action(::tinkoff::pub::invest::api::contract::v1::SubscriptionAction value);

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.pub.invest.api.contract.v1.SubscribeOrderBookRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SubscribeOrderBookRequest& from_msg);
    ::google::protobuf::RepeatedPtrField< ::tinkoff::pub::invest::api::contract::v1::OrderBookInstrument > instruments_;
    int subscription_action_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_marketdata_2eproto;
};
// -------------------------------------------------------------------

class SubscribeLastPriceResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.pub.invest.api.contract.v1.SubscribeLastPriceResponse) */ {
 public:
  inline SubscribeLastPriceResponse() : SubscribeLastPriceResponse(nullptr) {}
  ~SubscribeLastPriceResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SubscribeLastPriceResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SubscribeLastPriceResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SubscribeLastPriceResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline SubscribeLastPriceResponse(const SubscribeLastPriceResponse& from) : SubscribeLastPriceResponse(nullptr, from) {}
  inline SubscribeLastPriceResponse(SubscribeLastPriceResponse&& from) noexcept
      : SubscribeLastPriceResponse(nullptr, std::move(from)) {}
  inline SubscribeLastPriceResponse& operator=(const SubscribeLastPriceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeLastPriceResponse& operator=(SubscribeLastPriceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeLastPriceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeLastPriceResponse* internal_default_instance() {
    return reinterpret_cast<const SubscribeLastPriceResponse*>(
        &_SubscribeLastPriceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 21;
  friend void swap(SubscribeLastPriceResponse& a, SubscribeLastPriceResponse& b) { a.Swap(&b); }
  inline void Swap(SubscribeLastPriceResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeLastPriceResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeLastPriceResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SubscribeLastPriceResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SubscribeLastPriceResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SubscribeLastPriceResponse& from) { SubscribeLastPriceResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SubscribeLastPriceResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tinkoff.pub.invest.api.contract.v1.SubscribeLastPriceResponse"; }

 protected:
  explicit SubscribeLastPriceResponse(::google::protobuf::Arena* arena);
  SubscribeLastPriceResponse(::google::protobuf::Arena* arena, const SubscribeLastPriceResponse& from);
  SubscribeLastPriceResponse(::google::protobuf::Arena* arena, SubscribeLastPriceResponse&& from) noexcept
      : SubscribeLastPriceResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLastPriceSubscriptionsFieldNumber = 2,
    kTrackingIdFieldNumber = 1,
  };
  // repeated .tinkoff.pub.invest.api.contract.v1.LastPriceSubscription last_price_subscriptions = 2;
  int last_price_subscriptions_size() const;
  private:
  int _internal_last_price_subscriptions_size() const;

  public:
  void clear_last_price_subscriptions() ;
  ::tinkoff::pub::invest::api::contract::v1::LastPriceSubscription* mutable_last_price_subscriptions(int index);
  ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::LastPriceSubscription>* mutable_last_price_subscriptions();

  private:
  const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::LastPriceSubscription>& _internal_last_price_subscriptions() const;
  ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::LastPriceSubscription>* _internal_mutable_last_price_subscriptions();
  public:
  const ::tinkoff::pub::invest::api::contract::v1::LastPriceSubscription& last_price_subscriptions(int index) const;
  ::tinkoff::pub::invest::api::contract::v1::LastPriceSubscription* add_last_price_subscriptions();
  const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::LastPriceSubscription>& last_price_subscriptions() const;
  // string tracking_id = 1;
  void clear_tracking_id() ;
  const std::string& tracking_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_tracking_id(Arg_&& arg, Args_... args);
  std::string* mutable_tracking_id();
  PROTOBUF_NODISCARD std::string* release_tracking_id();
  void set_allocated_tracking_id(std::string* value);

  private:
  const std::string& _internal_tracking_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tracking_id(
      const std::string& value);
  std::string* _internal_mutable_tracking_id();

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.pub.invest.api.contract.v1.SubscribeLastPriceResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      81, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SubscribeLastPriceResponse& from_msg);
    ::google::protobuf::RepeatedPtrField< ::tinkoff::pub::invest::api::contract::v1::LastPriceSubscription > last_price_subscriptions_;
    ::google::protobuf::internal::ArenaStringPtr tracking_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_marketdata_2eproto;
};
// -------------------------------------------------------------------

class SubscribeLastPriceRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.pub.invest.api.contract.v1.SubscribeLastPriceRequest) */ {
 public:
  inline SubscribeLastPriceRequest() : SubscribeLastPriceRequest(nullptr) {}
  ~SubscribeLastPriceRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SubscribeLastPriceRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SubscribeLastPriceRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SubscribeLastPriceRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline SubscribeLastPriceRequest(const SubscribeLastPriceRequest& from) : SubscribeLastPriceRequest(nullptr, from) {}
  inline SubscribeLastPriceRequest(SubscribeLastPriceRequest&& from) noexcept
      : SubscribeLastPriceRequest(nullptr, std::move(from)) {}
  inline SubscribeLastPriceRequest& operator=(const SubscribeLastPriceRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeLastPriceRequest& operator=(SubscribeLastPriceRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeLastPriceRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeLastPriceRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeLastPriceRequest*>(
        &_SubscribeLastPriceRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 19;
  friend void swap(SubscribeLastPriceRequest& a, SubscribeLastPriceRequest& b) { a.Swap(&b); }
  inline void Swap(SubscribeLastPriceRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeLastPriceRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeLastPriceRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SubscribeLastPriceRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SubscribeLastPriceRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SubscribeLastPriceRequest& from) { SubscribeLastPriceRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SubscribeLastPriceRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tinkoff.pub.invest.api.contract.v1.SubscribeLastPriceRequest"; }

 protected:
  explicit SubscribeLastPriceRequest(::google::protobuf::Arena* arena);
  SubscribeLastPriceRequest(::google::protobuf::Arena* arena, const SubscribeLastPriceRequest& from);
  SubscribeLastPriceRequest(::google::protobuf::Arena* arena, SubscribeLastPriceRequest&& from) noexcept
      : SubscribeLastPriceRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kInstrumentsFieldNumber = 2,
    kSubscriptionActionFieldNumber = 1,
  };
  // repeated .tinkoff.pub.invest.api.contract.v1.LastPriceInstrument instruments = 2;
  int instruments_size() const;
  private:
  int _internal_instruments_size() const;

  public:
  void clear_instruments() ;
  ::tinkoff::pub::invest::api::contract::v1::LastPriceInstrument* mutable_instruments(int index);
  ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::LastPriceInstrument>* mutable_instruments();

  private:
  const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::LastPriceInstrument>& _internal_instruments() const;
  ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::LastPriceInstrument>* _internal_mutable_instruments();
  public:
  const ::tinkoff::pub::invest::api::contract::v1::LastPriceInstrument& instruments(int index) const;
  ::tinkoff::pub::invest::api::contract::v1::LastPriceInstrument* add_instruments();
  const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::LastPriceInstrument>& instruments() const;
  // .tinkoff.pub.invest.api.contract.v1.SubscriptionAction subscription_action = 1;
  void clear_subscription_action() ;
  ::tinkoff::pub::invest::api::contract::v1::SubscriptionAction subscription_action() const;
  void set_subscription_action(::tinkoff::pub::invest::api::contract::v1::SubscriptionAction value);

  private:
  ::tinkoff::pub::invest::api::contract::v1::SubscriptionAction _internal_subscription_action() const;
  void _internal_set_subscription_action(::tinkoff::pub::invest::api::contract::v1::SubscriptionAction value);

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.pub.invest.api.contract.v1.SubscribeLastPriceRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SubscribeLastPriceRequest& from_msg);
    ::google::protobuf::RepeatedPtrField< ::tinkoff::pub::invest::api::contract::v1::LastPriceInstrument > instruments_;
    int subscription_action_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_marketdata_2eproto;
};
// -------------------------------------------------------------------

class SubscribeInfoResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.pub.invest.api.contract.v1.SubscribeInfoResponse) */ {
 public:
  inline SubscribeInfoResponse() : SubscribeInfoResponse(nullptr) {}
  ~SubscribeInfoResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SubscribeInfoResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SubscribeInfoResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SubscribeInfoResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline SubscribeInfoResponse(const SubscribeInfoResponse& from) : SubscribeInfoResponse(nullptr, from) {}
  inline SubscribeInfoResponse(SubscribeInfoResponse&& from) noexcept
      : SubscribeInfoResponse(nullptr, std::move(from)) {}
  inline SubscribeInfoResponse& operator=(const SubscribeInfoResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeInfoResponse& operator=(SubscribeInfoResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeInfoResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeInfoResponse* internal_default_instance() {
    return reinterpret_cast<const SubscribeInfoResponse*>(
        &_SubscribeInfoResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 17;
  friend void swap(SubscribeInfoResponse& a, SubscribeInfoResponse& b) { a.Swap(&b); }
  inline void Swap(SubscribeInfoResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeInfoResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeInfoResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SubscribeInfoResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SubscribeInfoResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SubscribeInfoResponse& from) { SubscribeInfoResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SubscribeInfoResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tinkoff.pub.invest.api.contract.v1.SubscribeInfoResponse"; }

 protected:
  explicit SubscribeInfoResponse(::google::protobuf::Arena* arena);
  SubscribeInfoResponse(::google::protobuf::Arena* arena, const SubscribeInfoResponse& from);
  SubscribeInfoResponse(::google::protobuf::Arena* arena, SubscribeInfoResponse&& from) noexcept
      : SubscribeInfoResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kInfoSubscriptionsFieldNumber = 2,
    kTrackingIdFieldNumber = 1,
  };
  // repeated .tinkoff.pub.invest.api.contract.v1.InfoSubscription info_subscriptions = 2;
  int info_subscriptions_size() const;
  private:
  int _internal_info_subscriptions_size() const;

  public:
  void clear_info_subscriptions() ;
  ::tinkoff::pub::invest::api::contract::v1::InfoSubscription* mutable_info_subscriptions(int index);
  ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::InfoSubscription>* mutable_info_subscriptions();

  private:
  const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::InfoSubscription>& _internal_info_subscriptions() const;
  ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::InfoSubscription>* _internal_mutable_info_subscriptions();
  public:
  const ::tinkoff::pub::invest::api::contract::v1::InfoSubscription& info_subscriptions(int index) const;
  ::tinkoff::pub::invest::api::contract::v1::InfoSubscription* add_info_subscriptions();
  const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::InfoSubscription>& info_subscriptions() const;
  // string tracking_id = 1;
  void clear_tracking_id() ;
  const std::string& tracking_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_tracking_id(Arg_&& arg, Args_... args);
  std::string* mutable_tracking_id();
  PROTOBUF_NODISCARD std::string* release_tracking_id();
  void set_allocated_tracking_id(std::string* value);

  private:
  const std::string& _internal_tracking_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tracking_id(
      const std::string& value);
  std::string* _internal_mutable_tracking_id();

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.pub.invest.api.contract.v1.SubscribeInfoResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      76, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SubscribeInfoResponse& from_msg);
    ::google::protobuf::RepeatedPtrField< ::tinkoff::pub::invest::api::contract::v1::InfoSubscription > info_subscriptions_;
    ::google::protobuf::internal::ArenaStringPtr tracking_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_marketdata_2eproto;
};
// -------------------------------------------------------------------

class SubscribeInfoRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.pub.invest.api.contract.v1.SubscribeInfoRequest) */ {
 public:
  inline SubscribeInfoRequest() : SubscribeInfoRequest(nullptr) {}
  ~SubscribeInfoRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SubscribeInfoRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SubscribeInfoRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SubscribeInfoRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline SubscribeInfoRequest(const SubscribeInfoRequest& from) : SubscribeInfoRequest(nullptr, from) {}
  inline SubscribeInfoRequest(SubscribeInfoRequest&& from) noexcept
      : SubscribeInfoRequest(nullptr, std::move(from)) {}
  inline SubscribeInfoRequest& operator=(const SubscribeInfoRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeInfoRequest& operator=(SubscribeInfoRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeInfoRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeInfoRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeInfoRequest*>(
        &_SubscribeInfoRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 15;
  friend void swap(SubscribeInfoRequest& a, SubscribeInfoRequest& b) { a.Swap(&b); }
  inline void Swap(SubscribeInfoRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeInfoRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeInfoRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SubscribeInfoRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SubscribeInfoRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SubscribeInfoRequest& from) { SubscribeInfoRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SubscribeInfoRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tinkoff.pub.invest.api.contract.v1.SubscribeInfoRequest"; }

 protected:
  explicit SubscribeInfoRequest(::google::protobuf::Arena* arena);
  SubscribeInfoRequest(::google::protobuf::Arena* arena, const SubscribeInfoRequest& from);
  SubscribeInfoRequest(::google::protobuf::Arena* arena, SubscribeInfoRequest&& from) noexcept
      : SubscribeInfoRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kInstrumentsFieldNumber = 2,
    kSubscriptionActionFieldNumber = 1,
  };
  // repeated .tinkoff.pub.invest.api.contract.v1.InfoInstrument instruments = 2;
  int instruments_size() const;
  private:
  int _internal_instruments_size() const;

  public:
  void clear_instruments() ;
  ::tinkoff::pub::invest::api::contract::v1::InfoInstrument* mutable_instruments(int index);
  ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::InfoInstrument>* mutable_instruments();

  private:
  const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::InfoInstrument>& _internal_instruments() const;
  ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::InfoInstrument>* _internal_mutable_instruments();
  public:
  const ::tinkoff::pub::invest::api::contract::v1::InfoInstrument& instruments(int index) const;
  ::tinkoff::pub::invest::api::contract::v1::InfoInstrument* add_instruments();
  const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::InfoInstrument>& instruments() const;
  // .tinkoff.pub.invest.api.contract.v1.SubscriptionAction subscription_action = 1;
  void clear_subscription_action() ;
  ::tinkoff::pub::invest::api::contract::v1::SubscriptionAction subscription_action() const;
  void set_subscription_action(::tinkoff::pub::invest::api::contract::v1::SubscriptionAction value);

  private:
  ::tinkoff::pub::invest::api::contract::v1::SubscriptionAction _internal_subscription_action() const;
  void _internal_set_subscription_action(::tinkoff::pub::invest::api::contract::v1::SubscriptionAction value);

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.pub.invest.api.contract.v1.SubscribeInfoRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SubscribeInfoRequest& from_msg);
    ::google::protobuf::RepeatedPtrField< ::tinkoff::pub::invest::api::contract::v1::InfoInstrument > instruments_;
    int subscription_action_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_marketdata_2eproto;
};
// -------------------------------------------------------------------

class SubscribeCandlesResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.pub.invest.api.contract.v1.SubscribeCandlesResponse) */ {
 public:
  inline SubscribeCandlesResponse() : SubscribeCandlesResponse(nullptr) {}
  ~SubscribeCandlesResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SubscribeCandlesResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SubscribeCandlesResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SubscribeCandlesResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline SubscribeCandlesResponse(const SubscribeCandlesResponse& from) : SubscribeCandlesResponse(nullptr, from) {}
  inline SubscribeCandlesResponse(SubscribeCandlesResponse&& from) noexcept
      : SubscribeCandlesResponse(nullptr, std::move(from)) {}
  inline SubscribeCandlesResponse& operator=(const SubscribeCandlesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeCandlesResponse& operator=(SubscribeCandlesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeCandlesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeCandlesResponse* internal_default_instance() {
    return reinterpret_cast<const SubscribeCandlesResponse*>(
        &_SubscribeCandlesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 5;
  friend void swap(SubscribeCandlesResponse& a, SubscribeCandlesResponse& b) { a.Swap(&b); }
  inline void Swap(SubscribeCandlesResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeCandlesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeCandlesResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SubscribeCandlesResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SubscribeCandlesResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SubscribeCandlesResponse& from) { SubscribeCandlesResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SubscribeCandlesResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tinkoff.pub.invest.api.contract.v1.SubscribeCandlesResponse"; }

 protected:
  explicit SubscribeCandlesResponse(::google::protobuf::Arena* arena);
  SubscribeCandlesResponse(::google::protobuf::Arena* arena, const SubscribeCandlesResponse& from);
  SubscribeCandlesResponse(::google::protobuf::Arena* arena, SubscribeCandlesResponse&& from) noexcept
      : SubscribeCandlesResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCandlesSubscriptionsFieldNumber = 2,
    kTrackingIdFieldNumber = 1,
  };
  // repeated .tinkoff.pub.invest.api.contract.v1.CandleSubscription candles_subscriptions = 2;
  int candles_subscriptions_size() const;
  private:
  int _internal_candles_subscriptions_size() const;

  public:
  void clear_candles_subscriptions() ;
  ::tinkoff::pub::invest::api::contract::v1::CandleSubscription* mutable_candles_subscriptions(int index);
  ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::CandleSubscription>* mutable_candles_subscriptions();

  private:
  const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::CandleSubscription>& _internal_candles_subscriptions() const;
  ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::CandleSubscription>* _internal_mutable_candles_subscriptions();
  public:
  const ::tinkoff::pub::invest::api::contract::v1::CandleSubscription& candles_subscriptions(int index) const;
  ::tinkoff::pub::invest::api::contract::v1::CandleSubscription* add_candles_subscriptions();
  const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::CandleSubscription>& candles_subscriptions() const;
  // string tracking_id = 1;
  void clear_tracking_id() ;
  const std::string& tracking_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_tracking_id(Arg_&& arg, Args_... args);
  std::string* mutable_tracking_id();
  PROTOBUF_NODISCARD std::string* release_tracking_id();
  void set_allocated_tracking_id(std::string* value);

  private:
  const std::string& _internal_tracking_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_tracking_id(
      const std::string& value);
  std::string* _internal_mutable_tracking_id();

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.pub.invest.api.contract.v1.SubscribeCandlesResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      79, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SubscribeCandlesResponse& from_msg);
    ::google::protobuf::RepeatedPtrField< ::tinkoff::pub::invest::api::contract::v1::CandleSubscription > candles_subscriptions_;
    ::google::protobuf::internal::ArenaStringPtr tracking_id_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_marketdata_2eproto;
};
// -------------------------------------------------------------------

class SubscribeCandlesRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.pub.invest.api.contract.v1.SubscribeCandlesRequest) */ {
 public:
  inline SubscribeCandlesRequest() : SubscribeCandlesRequest(nullptr) {}
  ~SubscribeCandlesRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(SubscribeCandlesRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(SubscribeCandlesRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR SubscribeCandlesRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline SubscribeCandlesRequest(const SubscribeCandlesRequest& from) : SubscribeCandlesRequest(nullptr, from) {}
  inline SubscribeCandlesRequest(SubscribeCandlesRequest&& from) noexcept
      : SubscribeCandlesRequest(nullptr, std::move(from)) {}
  inline SubscribeCandlesRequest& operator=(const SubscribeCandlesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline SubscribeCandlesRequest& operator=(SubscribeCandlesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const SubscribeCandlesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const SubscribeCandlesRequest* internal_default_instance() {
    return reinterpret_cast<const SubscribeCandlesRequest*>(
        &_SubscribeCandlesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 3;
  friend void swap(SubscribeCandlesRequest& a, SubscribeCandlesRequest& b) { a.Swap(&b); }
  inline void Swap(SubscribeCandlesRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(SubscribeCandlesRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  SubscribeCandlesRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<SubscribeCandlesRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const SubscribeCandlesRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const SubscribeCandlesRequest& from) { SubscribeCandlesRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(SubscribeCandlesRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tinkoff.pub.invest.api.contract.v1.SubscribeCandlesRequest"; }

 protected:
  explicit SubscribeCandlesRequest(::google::protobuf::Arena* arena);
  SubscribeCandlesRequest(::google::protobuf::Arena* arena, const SubscribeCandlesRequest& from);
  SubscribeCandlesRequest(::google::protobuf::Arena* arena, SubscribeCandlesRequest&& from) noexcept
      : SubscribeCandlesRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kInstrumentsFieldNumber = 2,
    kSubscriptionActionFieldNumber = 1,
    kWaitingCloseFieldNumber = 3,
    kCandleSourceTypeFieldNumber = 9,
  };
  // repeated .tinkoff.pub.invest.api.contract.v1.CandleInstrument instruments = 2;
  int instruments_size() const;
  private:
  int _internal_instruments_size() const;

  public:
  void clear_instruments() ;
  ::tinkoff::pub::invest::api::contract::v1::CandleInstrument* mutable_instruments(int index);
  ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::CandleInstrument>* mutable_instruments();

  private:
  const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::CandleInstrument>& _internal_instruments() const;
  ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::CandleInstrument>* _internal_mutable_instruments();
  public:
  const ::tinkoff::pub::invest::api::contract::v1::CandleInstrument& instruments(int index) const;
  ::tinkoff::pub::invest::api::contract::v1::CandleInstrument* add_instruments();
  const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::CandleInstrument>& instruments() const;
  // .tinkoff.pub.invest.api.contract.v1.SubscriptionAction subscription_action = 1;
  void clear_subscription_action() ;
  ::tinkoff::pub::invest::api::contract::v1::SubscriptionAction subscription_action() const;
  void set_subscription_action(::tinkoff::pub::invest::api::contract::v1::SubscriptionAction value);

  private:
  ::tinkoff::pub::invest::api::contract::v1::SubscriptionAction _internal_subscription_action() const;
  void _internal_set_subscription_action(::tinkoff::pub::invest::api::contract::v1::SubscriptionAction value);

  public:
  // bool waiting_close = 3;
  void clear_waiting_close() ;
  bool waiting_close() const;
  void set_waiting_close(bool value);

  private:
  bool _internal_waiting_close() const;
  void _internal_set_waiting_close(bool value);

  public:
  // optional .tinkoff.pub.invest.api.contract.v1.GetCandlesRequest.CandleSource candle_source_type = 9;
  bool has_candle_source_type() const;
  void clear_candle_source_type() ;
  ::tinkoff::pub::invest::api::contract::v1::GetCandlesRequest_CandleSource candle_source_type() const;
  void set_candle_source_type(::tinkoff::pub::invest::api::contract::v1::GetCandlesRequest_CandleSource value);

  private:
  ::tinkoff::pub::invest::api::contract::v1::GetCandlesRequest_CandleSource _internal_candle_source_type() const;
  void _internal_set_candle_source_type(::tinkoff::pub::invest::api::contract::v1::GetCandlesRequest_CandleSource value);

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.pub.invest.api.contract.v1.SubscribeCandlesRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 4, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const SubscribeCandlesRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::tinkoff::pub::invest::api::contract::v1::CandleInstrument > instruments_;
    int subscription_action_;
    bool waiting_close_;
    int candle_source_type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_marketdata_2eproto;
};
// -------------------------------------------------------------------

class Order final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.pub.invest.api.contract.v1.Order) */ {
 public:
  inline Order() : Order(nullptr) {}
  ~Order() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Order* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Order));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Order(
      ::google::protobuf::internal::ConstantInitialized);

  inline Order(const Order& from) : Order(nullptr, from) {}
  inline Order(Order&& from) noexcept
      : Order(nullptr, std::move(from)) {}
  inline Order& operator=(const Order& from) {
    CopyFrom(from);
    return *this;
  }
  inline Order& operator=(Order&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Order& default_instance() {
    return *internal_default_instance();
  }
  static inline const Order* internal_default_instance() {
    return reinterpret_cast<const Order*>(
        &_Order_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 25;
  friend void swap(Order& a, Order& b) { a.Swap(&b); }
  inline void Swap(Order* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Order* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Order* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Order>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Order& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Order& from) { Order::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Order* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tinkoff.pub.invest.api.contract.v1.Order"; }

 protected:
  explicit Order(::google::protobuf::Arena* arena);
  Order(::google::protobuf::Arena* arena, const Order& from);
  Order(::google::protobuf::Arena* arena, Order&& from) noexcept
      : Order(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kPriceFieldNumber = 1,
    kQuantityFieldNumber = 2,
  };
  // .tinkoff.pub.invest.api.contract.v1.Quotation price = 1;
  bool has_price() const;
  void clear_price() ;
  const ::tinkoff::pub::invest::api::contract::v1::Quotation& price() const;
  PROTOBUF_NODISCARD ::tinkoff::pub::invest::api::contract::v1::Quotation* release_price();
  ::tinkoff::pub::invest::api::contract::v1::Quotation* mutable_price();
  void set_allocated_price(::tinkoff::pub::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_price(::tinkoff::pub::invest::api::contract::v1::Quotation* value);
  ::tinkoff::pub::invest::api::contract::v1::Quotation* unsafe_arena_release_price();

  private:
  const ::tinkoff::pub::invest::api::contract::v1::Quotation& _internal_price() const;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* _internal_mutable_price();

  public:
  // int64 quantity = 2;
  void clear_quantity() ;
  ::int64_t quantity() const;
  void set_quantity(::int64_t value);

  private:
  ::int64_t _internal_quantity() const;
  void _internal_set_quantity(::int64_t value);

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.pub.invest.api.contract.v1.Order)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Order& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::tinkoff::pub::invest::api::contract::v1::Quotation* price_;
    ::int64_t quantity_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_marketdata_2eproto;
};
// -------------------------------------------------------------------

class LastPrice final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.pub.invest.api.contract.v1.LastPrice) */ {
 public:
  inline LastPrice() : LastPrice(nullptr) {}
  ~LastPrice() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(LastPrice* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(LastPrice));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR LastPrice(
      ::google::protobuf::internal::ConstantInitialized);

  inline LastPrice(const LastPrice& from) : LastPrice(nullptr, from) {}
  inline LastPrice(LastPrice&& from) noexcept
      : LastPrice(nullptr, std::move(from)) {}
  inline LastPrice& operator=(const LastPrice& from) {
    CopyFrom(from);
    return *this;
  }
  inline LastPrice& operator=(LastPrice&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const LastPrice& default_instance() {
    return *internal_default_instance();
  }
  static inline const LastPrice* internal_default_instance() {
    return reinterpret_cast<const LastPrice*>(
        &_LastPrice_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 33;
  friend void swap(LastPrice& a, LastPrice& b) { a.Swap(&b); }
  inline void Swap(LastPrice* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(LastPrice* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  LastPrice* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<LastPrice>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const LastPrice& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const LastPrice& from) { LastPrice::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(LastPrice* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tinkoff.pub.invest.api.contract.v1.LastPrice"; }

 protected:
  explicit LastPrice(::google::protobuf::Arena* arena);
  LastPrice(::google::protobuf::Arena* arena, const LastPrice& from);
  LastPrice(::google::protobuf::Arena* arena, LastPrice&& from) noexcept
      : LastPrice(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFigiFieldNumber = 1,
    kInstrumentUidFieldNumber = 11,
    kPriceFieldNumber = 2,
    kTimeFieldNumber = 3,
    kLastPriceTypeFieldNumber = 12,
  };
  // string figi = 1;
  void clear_figi() ;
  const std::string& figi() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_figi(Arg_&& arg, Args_... args);
  std::string* mutable_figi();
  PROTOBUF_NODISCARD std::string* release_figi();
  void set_allocated_figi(std::string* value);

  private:
  const std::string& _internal_figi() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_figi(
      const std::string& value);
  std::string* _internal_mutable_figi();

  public:
  // string instrument_uid = 11;
  void clear_instrument_uid() ;
  const std::string& instrument_uid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_instrument_uid(Arg_&& arg, Args_... args);
  std::string* mutable_instrument_uid();
  PROTOBUF_NODISCARD std::string* release_instrument_uid();
  void set_allocated_instrument_uid(std::string* value);

  private:
  const std::string& _internal_instrument_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_uid(
      const std::string& value);
  std::string* _internal_mutable_instrument_uid();

  public:
  // .tinkoff.pub.invest.api.contract.v1.Quotation price = 2;
  bool has_price() const;
  void clear_price() ;
  const ::tinkoff::pub::invest::api::contract::v1::Quotation& price() const;
  PROTOBUF_NODISCARD ::tinkoff::pub::invest::api::contract::v1::Quotation* release_price();
  ::tinkoff::pub::invest::api::contract::v1::Quotation* mutable_price();
  void set_allocated_price(::tinkoff::pub::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_price(::tinkoff::pub::invest::api::contract::v1::Quotation* value);
  ::tinkoff::pub::invest::api::contract::v1::Quotation* unsafe_arena_release_price();

  private:
  const ::tinkoff::pub::invest::api::contract::v1::Quotation& _internal_price() const;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* _internal_mutable_price();

  public:
  // .google.protobuf.Timestamp time = 3;
  bool has_time() const;
  void clear_time() ;
  const ::google::protobuf::Timestamp& time() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_time();
  ::google::protobuf::Timestamp* mutable_time();
  void set_allocated_time(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_time(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_time();

  private:
  const ::google::protobuf::Timestamp& _internal_time() const;
  ::google::protobuf::Timestamp* _internal_mutable_time();

  public:
  // .tinkoff.pub.invest.api.contract.v1.LastPriceType last_price_type = 12;
  void clear_last_price_type() ;
  ::tinkoff::pub::invest::api::contract::v1::LastPriceType last_price_type() const;
  void set_last_price_type(::tinkoff::pub::invest::api::contract::v1::LastPriceType value);

  private:
  ::tinkoff::pub::invest::api::contract::v1::LastPriceType _internal_last_price_type() const;
  void _internal_set_last_price_type(::tinkoff::pub::invest::api::contract::v1::LastPriceType value);

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.pub.invest.api.contract.v1.LastPrice)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      2, 5, 2,
      71, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const LastPrice& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr figi_;
    ::google::protobuf::internal::ArenaStringPtr instrument_uid_;
    ::tinkoff::pub::invest::api::contract::v1::Quotation* price_;
    ::google::protobuf::Timestamp* time_;
    int last_price_type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_marketdata_2eproto;
};
// -------------------------------------------------------------------

class InstrumentClosePriceResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.pub.invest.api.contract.v1.InstrumentClosePriceResponse) */ {
 public:
  inline InstrumentClosePriceResponse() : InstrumentClosePriceResponse(nullptr) {}
  ~InstrumentClosePriceResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(InstrumentClosePriceResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(InstrumentClosePriceResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR InstrumentClosePriceResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline InstrumentClosePriceResponse(const InstrumentClosePriceResponse& from) : InstrumentClosePriceResponse(nullptr, from) {}
  inline InstrumentClosePriceResponse(InstrumentClosePriceResponse&& from) noexcept
      : InstrumentClosePriceResponse(nullptr, std::move(from)) {}
  inline InstrumentClosePriceResponse& operator=(const InstrumentClosePriceResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline InstrumentClosePriceResponse& operator=(InstrumentClosePriceResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const InstrumentClosePriceResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const InstrumentClosePriceResponse* internal_default_instance() {
    return reinterpret_cast<const InstrumentClosePriceResponse*>(
        &_InstrumentClosePriceResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 46;
  friend void swap(InstrumentClosePriceResponse& a, InstrumentClosePriceResponse& b) { a.Swap(&b); }
  inline void Swap(InstrumentClosePriceResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(InstrumentClosePriceResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  InstrumentClosePriceResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<InstrumentClosePriceResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const InstrumentClosePriceResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const InstrumentClosePriceResponse& from) { InstrumentClosePriceResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(InstrumentClosePriceResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tinkoff.pub.invest.api.contract.v1.InstrumentClosePriceResponse"; }

 protected:
  explicit InstrumentClosePriceResponse(::google::protobuf::Arena* arena);
  InstrumentClosePriceResponse(::google::protobuf::Arena* arena, const InstrumentClosePriceResponse& from);
  InstrumentClosePriceResponse(::google::protobuf::Arena* arena, InstrumentClosePriceResponse&& from) noexcept
      : InstrumentClosePriceResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFigiFieldNumber = 1,
    kInstrumentUidFieldNumber = 2,
    kPriceFieldNumber = 11,
    kEveningSessionPriceFieldNumber = 12,
    kTimeFieldNumber = 21,
  };
  // string figi = 1;
  void clear_figi() ;
  const std::string& figi() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_figi(Arg_&& arg, Args_... args);
  std::string* mutable_figi();
  PROTOBUF_NODISCARD std::string* release_figi();
  void set_allocated_figi(std::string* value);

  private:
  const std::string& _internal_figi() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_figi(
      const std::string& value);
  std::string* _internal_mutable_figi();

  public:
  // string instrument_uid = 2;
  void clear_instrument_uid() ;
  const std::string& instrument_uid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_instrument_uid(Arg_&& arg, Args_... args);
  std::string* mutable_instrument_uid();
  PROTOBUF_NODISCARD std::string* release_instrument_uid();
  void set_allocated_instrument_uid(std::string* value);

  private:
  const std::string& _internal_instrument_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_uid(
      const std::string& value);
  std::string* _internal_mutable_instrument_uid();

  public:
  // .tinkoff.pub.invest.api.contract.v1.Quotation price = 11;
  bool has_price() const;
  void clear_price() ;
  const ::tinkoff::pub::invest::api::contract::v1::Quotation& price() const;
  PROTOBUF_NODISCARD ::tinkoff::pub::invest::api::contract::v1::Quotation* release_price();
  ::tinkoff::pub::invest::api::contract::v1::Quotation* mutable_price();
  void set_allocated_price(::tinkoff::pub::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_price(::tinkoff::pub::invest::api::contract::v1::Quotation* value);
  ::tinkoff::pub::invest::api::contract::v1::Quotation* unsafe_arena_release_price();

  private:
  const ::tinkoff::pub::invest::api::contract::v1::Quotation& _internal_price() const;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* _internal_mutable_price();

  public:
  // .tinkoff.pub.invest.api.contract.v1.Quotation evening_session_price = 12;
  bool has_evening_session_price() const;
  void clear_evening_session_price() ;
  const ::tinkoff::pub::invest::api::contract::v1::Quotation& evening_session_price() const;
  PROTOBUF_NODISCARD ::tinkoff::pub::invest::api::contract::v1::Quotation* release_evening_session_price();
  ::tinkoff::pub::invest::api::contract::v1::Quotation* mutable_evening_session_price();
  void set_allocated_evening_session_price(::tinkoff::pub::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_evening_session_price(::tinkoff::pub::invest::api::contract::v1::Quotation* value);
  ::tinkoff::pub::invest::api::contract::v1::Quotation* unsafe_arena_release_evening_session_price();

  private:
  const ::tinkoff::pub::invest::api::contract::v1::Quotation& _internal_evening_session_price() const;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* _internal_mutable_evening_session_price();

  public:
  // .google.protobuf.Timestamp time = 21;
  bool has_time() const;
  void clear_time() ;
  const ::google::protobuf::Timestamp& time() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_time();
  ::google::protobuf::Timestamp* mutable_time();
  void set_allocated_time(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_time(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_time();

  private:
  const ::google::protobuf::Timestamp& _internal_time() const;
  ::google::protobuf::Timestamp* _internal_mutable_time();

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.pub.invest.api.contract.v1.InstrumentClosePriceResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 3,
      90, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const InstrumentClosePriceResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr figi_;
    ::google::protobuf::internal::ArenaStringPtr instrument_uid_;
    ::tinkoff::pub::invest::api::contract::v1::Quotation* price_;
    ::tinkoff::pub::invest::api::contract::v1::Quotation* evening_session_price_;
    ::google::protobuf::Timestamp* time_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_marketdata_2eproto;
};
// -------------------------------------------------------------------

class HistoricCandle final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.pub.invest.api.contract.v1.HistoricCandle) */ {
 public:
  inline HistoricCandle() : HistoricCandle(nullptr) {}
  ~HistoricCandle() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(HistoricCandle* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(HistoricCandle));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR HistoricCandle(
      ::google::protobuf::internal::ConstantInitialized);

  inline HistoricCandle(const HistoricCandle& from) : HistoricCandle(nullptr, from) {}
  inline HistoricCandle(HistoricCandle&& from) noexcept
      : HistoricCandle(nullptr, std::move(from)) {}
  inline HistoricCandle& operator=(const HistoricCandle& from) {
    CopyFrom(from);
    return *this;
  }
  inline HistoricCandle& operator=(HistoricCandle&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const HistoricCandle& default_instance() {
    return *internal_default_instance();
  }
  static inline const HistoricCandle* internal_default_instance() {
    return reinterpret_cast<const HistoricCandle*>(
        &_HistoricCandle_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 30;
  friend void swap(HistoricCandle& a, HistoricCandle& b) { a.Swap(&b); }
  inline void Swap(HistoricCandle* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HistoricCandle* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  HistoricCandle* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<HistoricCandle>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const HistoricCandle& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const HistoricCandle& from) { HistoricCandle::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(HistoricCandle* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tinkoff.pub.invest.api.contract.v1.HistoricCandle"; }

 protected:
  explicit HistoricCandle(::google::protobuf::Arena* arena);
  HistoricCandle(::google::protobuf::Arena* arena, const HistoricCandle& from);
  HistoricCandle(::google::protobuf::Arena* arena, HistoricCandle&& from) noexcept
      : HistoricCandle(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kOpenFieldNumber = 1,
    kHighFieldNumber = 2,
    kLowFieldNumber = 3,
    kCloseFieldNumber = 4,
    kTimeFieldNumber = 6,
    kVolumeFieldNumber = 5,
    kIsCompleteFieldNumber = 7,
    kCandleSourceFieldNumber = 9,
  };
  // .tinkoff.pub.invest.api.contract.v1.Quotation open = 1;
  bool has_open() const;
  void clear_open() ;
  const ::tinkoff::pub::invest::api::contract::v1::Quotation& open() const;
  PROTOBUF_NODISCARD ::tinkoff::pub::invest::api::contract::v1::Quotation* release_open();
  ::tinkoff::pub::invest::api::contract::v1::Quotation* mutable_open();
  void set_allocated_open(::tinkoff::pub::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_open(::tinkoff::pub::invest::api::contract::v1::Quotation* value);
  ::tinkoff::pub::invest::api::contract::v1::Quotation* unsafe_arena_release_open();

  private:
  const ::tinkoff::pub::invest::api::contract::v1::Quotation& _internal_open() const;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* _internal_mutable_open();

  public:
  // .tinkoff.pub.invest.api.contract.v1.Quotation high = 2;
  bool has_high() const;
  void clear_high() ;
  const ::tinkoff::pub::invest::api::contract::v1::Quotation& high() const;
  PROTOBUF_NODISCARD ::tinkoff::pub::invest::api::contract::v1::Quotation* release_high();
  ::tinkoff::pub::invest::api::contract::v1::Quotation* mutable_high();
  void set_allocated_high(::tinkoff::pub::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_high(::tinkoff::pub::invest::api::contract::v1::Quotation* value);
  ::tinkoff::pub::invest::api::contract::v1::Quotation* unsafe_arena_release_high();

  private:
  const ::tinkoff::pub::invest::api::contract::v1::Quotation& _internal_high() const;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* _internal_mutable_high();

  public:
  // .tinkoff.pub.invest.api.contract.v1.Quotation low = 3;
  bool has_low() const;
  void clear_low() ;
  const ::tinkoff::pub::invest::api::contract::v1::Quotation& low() const;
  PROTOBUF_NODISCARD ::tinkoff::pub::invest::api::contract::v1::Quotation* release_low();
  ::tinkoff::pub::invest::api::contract::v1::Quotation* mutable_low();
  void set_allocated_low(::tinkoff::pub::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_low(::tinkoff::pub::invest::api::contract::v1::Quotation* value);
  ::tinkoff::pub::invest::api::contract::v1::Quotation* unsafe_arena_release_low();

  private:
  const ::tinkoff::pub::invest::api::contract::v1::Quotation& _internal_low() const;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* _internal_mutable_low();

  public:
  // .tinkoff.pub.invest.api.contract.v1.Quotation close = 4;
  bool has_close() const;
  void clear_close() ;
  const ::tinkoff::pub::invest::api::contract::v1::Quotation& close() const;
  PROTOBUF_NODISCARD ::tinkoff::pub::invest::api::contract::v1::Quotation* release_close();
  ::tinkoff::pub::invest::api::contract::v1::Quotation* mutable_close();
  void set_allocated_close(::tinkoff::pub::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_close(::tinkoff::pub::invest::api::contract::v1::Quotation* value);
  ::tinkoff::pub::invest::api::contract::v1::Quotation* unsafe_arena_release_close();

  private:
  const ::tinkoff::pub::invest::api::contract::v1::Quotation& _internal_close() const;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* _internal_mutable_close();

  public:
  // .google.protobuf.Timestamp time = 6;
  bool has_time() const;
  void clear_time() ;
  const ::google::protobuf::Timestamp& time() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_time();
  ::google::protobuf::Timestamp* mutable_time();
  void set_allocated_time(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_time(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_time();

  private:
  const ::google::protobuf::Timestamp& _internal_time() const;
  ::google::protobuf::Timestamp* _internal_mutable_time();

  public:
  // int64 volume = 5;
  void clear_volume() ;
  ::int64_t volume() const;
  void set_volume(::int64_t value);

  private:
  ::int64_t _internal_volume() const;
  void _internal_set_volume(::int64_t value);

  public:
  // bool is_complete = 7;
  void clear_is_complete() ;
  bool is_complete() const;
  void set_is_complete(bool value);

  private:
  bool _internal_is_complete() const;
  void _internal_set_is_complete(bool value);

  public:
  // .tinkoff.pub.invest.api.contract.v1.CandleSource candle_source = 9;
  void clear_candle_source() ;
  ::tinkoff::pub::invest::api::contract::v1::CandleSource candle_source() const;
  void set_candle_source(::tinkoff::pub::invest::api::contract::v1::CandleSource value);

  private:
  ::tinkoff::pub::invest::api::contract::v1::CandleSource _internal_candle_source() const;
  void _internal_set_candle_source(::tinkoff::pub::invest::api::contract::v1::CandleSource value);

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.pub.invest.api.contract.v1.HistoricCandle)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 8, 5,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const HistoricCandle& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::tinkoff::pub::invest::api::contract::v1::Quotation* open_;
    ::tinkoff::pub::invest::api::contract::v1::Quotation* high_;
    ::tinkoff::pub::invest::api::contract::v1::Quotation* low_;
    ::tinkoff::pub::invest::api::contract::v1::Quotation* close_;
    ::google::protobuf::Timestamp* time_;
    ::int64_t volume_;
    bool is_complete_;
    int candle_source_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_marketdata_2eproto;
};
// -------------------------------------------------------------------

class GetTradingStatusesResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.pub.invest.api.contract.v1.GetTradingStatusesResponse) */ {
 public:
  inline GetTradingStatusesResponse() : GetTradingStatusesResponse(nullptr) {}
  ~GetTradingStatusesResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetTradingStatusesResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetTradingStatusesResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetTradingStatusesResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetTradingStatusesResponse(const GetTradingStatusesResponse& from) : GetTradingStatusesResponse(nullptr, from) {}
  inline GetTradingStatusesResponse(GetTradingStatusesResponse&& from) noexcept
      : GetTradingStatusesResponse(nullptr, std::move(from)) {}
  inline GetTradingStatusesResponse& operator=(const GetTradingStatusesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTradingStatusesResponse& operator=(GetTradingStatusesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetTradingStatusesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTradingStatusesResponse* internal_default_instance() {
    return reinterpret_cast<const GetTradingStatusesResponse*>(
        &_GetTradingStatusesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 38;
  friend void swap(GetTradingStatusesResponse& a, GetTradingStatusesResponse& b) { a.Swap(&b); }
  inline void Swap(GetTradingStatusesResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTradingStatusesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetTradingStatusesResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetTradingStatusesResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetTradingStatusesResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetTradingStatusesResponse& from) { GetTradingStatusesResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetTradingStatusesResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tinkoff.pub.invest.api.contract.v1.GetTradingStatusesResponse"; }

 protected:
  explicit GetTradingStatusesResponse(::google::protobuf::Arena* arena);
  GetTradingStatusesResponse(::google::protobuf::Arena* arena, const GetTradingStatusesResponse& from);
  GetTradingStatusesResponse(::google::protobuf::Arena* arena, GetTradingStatusesResponse&& from) noexcept
      : GetTradingStatusesResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTradingStatusesFieldNumber = 1,
  };
  // repeated .tinkoff.pub.invest.api.contract.v1.GetTradingStatusResponse trading_statuses = 1;
  int trading_statuses_size() const;
  private:
  int _internal_trading_statuses_size() const;

  public:
  void clear_trading_statuses() ;
  ::tinkoff::pub::invest::api::contract::v1::GetTradingStatusResponse* mutable_trading_statuses(int index);
  ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::GetTradingStatusResponse>* mutable_trading_statuses();

  private:
  const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::GetTradingStatusResponse>& _internal_trading_statuses() const;
  ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::GetTradingStatusResponse>* _internal_mutable_trading_statuses();
  public:
  const ::tinkoff::pub::invest::api::contract::v1::GetTradingStatusResponse& trading_statuses(int index) const;
  ::tinkoff::pub::invest::api::contract::v1::GetTradingStatusResponse* add_trading_statuses();
  const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::GetTradingStatusResponse>& trading_statuses() const;
  // @@protoc_insertion_point(class_scope:tinkoff.pub.invest.api.contract.v1.GetTradingStatusesResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetTradingStatusesResponse& from_msg);
    ::google::protobuf::RepeatedPtrField< ::tinkoff::pub::invest::api::contract::v1::GetTradingStatusResponse > trading_statuses_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_marketdata_2eproto;
};
// -------------------------------------------------------------------

class GetTechAnalysisResponse_TechAnalysisItem final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItem) */ {
 public:
  inline GetTechAnalysisResponse_TechAnalysisItem() : GetTechAnalysisResponse_TechAnalysisItem(nullptr) {}
  ~GetTechAnalysisResponse_TechAnalysisItem() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetTechAnalysisResponse_TechAnalysisItem* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetTechAnalysisResponse_TechAnalysisItem));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetTechAnalysisResponse_TechAnalysisItem(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetTechAnalysisResponse_TechAnalysisItem(const GetTechAnalysisResponse_TechAnalysisItem& from) : GetTechAnalysisResponse_TechAnalysisItem(nullptr, from) {}
  inline GetTechAnalysisResponse_TechAnalysisItem(GetTechAnalysisResponse_TechAnalysisItem&& from) noexcept
      : GetTechAnalysisResponse_TechAnalysisItem(nullptr, std::move(from)) {}
  inline GetTechAnalysisResponse_TechAnalysisItem& operator=(const GetTechAnalysisResponse_TechAnalysisItem& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTechAnalysisResponse_TechAnalysisItem& operator=(GetTechAnalysisResponse_TechAnalysisItem&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetTechAnalysisResponse_TechAnalysisItem& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTechAnalysisResponse_TechAnalysisItem* internal_default_instance() {
    return reinterpret_cast<const GetTechAnalysisResponse_TechAnalysisItem*>(
        &_GetTechAnalysisResponse_TechAnalysisItem_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 50;
  friend void swap(GetTechAnalysisResponse_TechAnalysisItem& a, GetTechAnalysisResponse_TechAnalysisItem& b) { a.Swap(&b); }
  inline void Swap(GetTechAnalysisResponse_TechAnalysisItem* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTechAnalysisResponse_TechAnalysisItem* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetTechAnalysisResponse_TechAnalysisItem* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetTechAnalysisResponse_TechAnalysisItem>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetTechAnalysisResponse_TechAnalysisItem& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetTechAnalysisResponse_TechAnalysisItem& from) { GetTechAnalysisResponse_TechAnalysisItem::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetTechAnalysisResponse_TechAnalysisItem* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tinkoff.pub.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItem"; }

 protected:
  explicit GetTechAnalysisResponse_TechAnalysisItem(::google::protobuf::Arena* arena);
  GetTechAnalysisResponse_TechAnalysisItem(::google::protobuf::Arena* arena, const GetTechAnalysisResponse_TechAnalysisItem& from);
  GetTechAnalysisResponse_TechAnalysisItem(::google::protobuf::Arena* arena, GetTechAnalysisResponse_TechAnalysisItem&& from) noexcept
      : GetTechAnalysisResponse_TechAnalysisItem(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTimestampFieldNumber = 1,
    kMiddleBandFieldNumber = 2,
    kUpperBandFieldNumber = 3,
    kLowerBandFieldNumber = 4,
    kSignalFieldNumber = 5,
    kMacdFieldNumber = 6,
  };
  // .google.protobuf.Timestamp timestamp = 1;
  bool has_timestamp() const;
  void clear_timestamp() ;
  const ::google::protobuf::Timestamp& timestamp() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_timestamp();
  ::google::protobuf::Timestamp* mutable_timestamp();
  void set_allocated_timestamp(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_timestamp(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_timestamp();

  private:
  const ::google::protobuf::Timestamp& _internal_timestamp() const;
  ::google::protobuf::Timestamp* _internal_mutable_timestamp();

  public:
  // optional .tinkoff.pub.invest.api.contract.v1.Quotation middle_band = 2;
  bool has_middle_band() const;
  void clear_middle_band() ;
  const ::tinkoff::pub::invest::api::contract::v1::Quotation& middle_band() const;
  PROTOBUF_NODISCARD ::tinkoff::pub::invest::api::contract::v1::Quotation* release_middle_band();
  ::tinkoff::pub::invest::api::contract::v1::Quotation* mutable_middle_band();
  void set_allocated_middle_band(::tinkoff::pub::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_middle_band(::tinkoff::pub::invest::api::contract::v1::Quotation* value);
  ::tinkoff::pub::invest::api::contract::v1::Quotation* unsafe_arena_release_middle_band();

  private:
  const ::tinkoff::pub::invest::api::contract::v1::Quotation& _internal_middle_band() const;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* _internal_mutable_middle_band();

  public:
  // optional .tinkoff.pub.invest.api.contract.v1.Quotation upper_band = 3;
  bool has_upper_band() const;
  void clear_upper_band() ;
  const ::tinkoff::pub::invest::api::contract::v1::Quotation& upper_band() const;
  PROTOBUF_NODISCARD ::tinkoff::pub::invest::api::contract::v1::Quotation* release_upper_band();
  ::tinkoff::pub::invest::api::contract::v1::Quotation* mutable_upper_band();
  void set_allocated_upper_band(::tinkoff::pub::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_upper_band(::tinkoff::pub::invest::api::contract::v1::Quotation* value);
  ::tinkoff::pub::invest::api::contract::v1::Quotation* unsafe_arena_release_upper_band();

  private:
  const ::tinkoff::pub::invest::api::contract::v1::Quotation& _internal_upper_band() const;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* _internal_mutable_upper_band();

  public:
  // optional .tinkoff.pub.invest.api.contract.v1.Quotation lower_band = 4;
  bool has_lower_band() const;
  void clear_lower_band() ;
  const ::tinkoff::pub::invest::api::contract::v1::Quotation& lower_band() const;
  PROTOBUF_NODISCARD ::tinkoff::pub::invest::api::contract::v1::Quotation* release_lower_band();
  ::tinkoff::pub::invest::api::contract::v1::Quotation* mutable_lower_band();
  void set_allocated_lower_band(::tinkoff::pub::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_lower_band(::tinkoff::pub::invest::api::contract::v1::Quotation* value);
  ::tinkoff::pub::invest::api::contract::v1::Quotation* unsafe_arena_release_lower_band();

  private:
  const ::tinkoff::pub::invest::api::contract::v1::Quotation& _internal_lower_band() const;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* _internal_mutable_lower_band();

  public:
  // optional .tinkoff.pub.invest.api.contract.v1.Quotation signal = 5;
  bool has_signal() const;
  void clear_signal() ;
  const ::tinkoff::pub::invest::api::contract::v1::Quotation& signal() const;
  PROTOBUF_NODISCARD ::tinkoff::pub::invest::api::contract::v1::Quotation* release_signal();
  ::tinkoff::pub::invest::api::contract::v1::Quotation* mutable_signal();
  void set_allocated_signal(::tinkoff::pub::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_signal(::tinkoff::pub::invest::api::contract::v1::Quotation* value);
  ::tinkoff::pub::invest::api::contract::v1::Quotation* unsafe_arena_release_signal();

  private:
  const ::tinkoff::pub::invest::api::contract::v1::Quotation& _internal_signal() const;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* _internal_mutable_signal();

  public:
  // optional .tinkoff.pub.invest.api.contract.v1.Quotation macd = 6;
  bool has_macd() const;
  void clear_macd() ;
  const ::tinkoff::pub::invest::api::contract::v1::Quotation& macd() const;
  PROTOBUF_NODISCARD ::tinkoff::pub::invest::api::contract::v1::Quotation* release_macd();
  ::tinkoff::pub::invest::api::contract::v1::Quotation* mutable_macd();
  void set_allocated_macd(::tinkoff::pub::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_macd(::tinkoff::pub::invest::api::contract::v1::Quotation* value);
  ::tinkoff::pub::invest::api::contract::v1::Quotation* unsafe_arena_release_macd();

  private:
  const ::tinkoff::pub::invest::api::contract::v1::Quotation& _internal_macd() const;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* _internal_mutable_macd();

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItem)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 6,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetTechAnalysisResponse_TechAnalysisItem& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::Timestamp* timestamp_;
    ::tinkoff::pub::invest::api::contract::v1::Quotation* middle_band_;
    ::tinkoff::pub::invest::api::contract::v1::Quotation* upper_band_;
    ::tinkoff::pub::invest::api::contract::v1::Quotation* lower_band_;
    ::tinkoff::pub::invest::api::contract::v1::Quotation* signal_;
    ::tinkoff::pub::invest::api::contract::v1::Quotation* macd_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_marketdata_2eproto;
};
// -------------------------------------------------------------------

class GetTechAnalysisRequest_Deviation final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisRequest.Deviation) */ {
 public:
  inline GetTechAnalysisRequest_Deviation() : GetTechAnalysisRequest_Deviation(nullptr) {}
  ~GetTechAnalysisRequest_Deviation() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetTechAnalysisRequest_Deviation* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetTechAnalysisRequest_Deviation));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetTechAnalysisRequest_Deviation(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetTechAnalysisRequest_Deviation(const GetTechAnalysisRequest_Deviation& from) : GetTechAnalysisRequest_Deviation(nullptr, from) {}
  inline GetTechAnalysisRequest_Deviation(GetTechAnalysisRequest_Deviation&& from) noexcept
      : GetTechAnalysisRequest_Deviation(nullptr, std::move(from)) {}
  inline GetTechAnalysisRequest_Deviation& operator=(const GetTechAnalysisRequest_Deviation& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTechAnalysisRequest_Deviation& operator=(GetTechAnalysisRequest_Deviation&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetTechAnalysisRequest_Deviation& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTechAnalysisRequest_Deviation* internal_default_instance() {
    return reinterpret_cast<const GetTechAnalysisRequest_Deviation*>(
        &_GetTechAnalysisRequest_Deviation_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 48;
  friend void swap(GetTechAnalysisRequest_Deviation& a, GetTechAnalysisRequest_Deviation& b) { a.Swap(&b); }
  inline void Swap(GetTechAnalysisRequest_Deviation* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTechAnalysisRequest_Deviation* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetTechAnalysisRequest_Deviation* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetTechAnalysisRequest_Deviation>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetTechAnalysisRequest_Deviation& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetTechAnalysisRequest_Deviation& from) { GetTechAnalysisRequest_Deviation::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetTechAnalysisRequest_Deviation* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tinkoff.pub.invest.api.contract.v1.GetTechAnalysisRequest.Deviation"; }

 protected:
  explicit GetTechAnalysisRequest_Deviation(::google::protobuf::Arena* arena);
  GetTechAnalysisRequest_Deviation(::google::protobuf::Arena* arena, const GetTechAnalysisRequest_Deviation& from);
  GetTechAnalysisRequest_Deviation(::google::protobuf::Arena* arena, GetTechAnalysisRequest_Deviation&& from) noexcept
      : GetTechAnalysisRequest_Deviation(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kDeviationMultiplierFieldNumber = 1,
  };
  // .tinkoff.pub.invest.api.contract.v1.Quotation deviation_multiplier = 1;
  bool has_deviation_multiplier() const;
  void clear_deviation_multiplier() ;
  const ::tinkoff::pub::invest::api::contract::v1::Quotation& deviation_multiplier() const;
  PROTOBUF_NODISCARD ::tinkoff::pub::invest::api::contract::v1::Quotation* release_deviation_multiplier();
  ::tinkoff::pub::invest::api::contract::v1::Quotation* mutable_deviation_multiplier();
  void set_allocated_deviation_multiplier(::tinkoff::pub::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_deviation_multiplier(::tinkoff::pub::invest::api::contract::v1::Quotation* value);
  ::tinkoff::pub::invest::api::contract::v1::Quotation* unsafe_arena_release_deviation_multiplier();

  private:
  const ::tinkoff::pub::invest::api::contract::v1::Quotation& _internal_deviation_multiplier() const;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* _internal_mutable_deviation_multiplier();

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisRequest.Deviation)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetTechAnalysisRequest_Deviation& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::tinkoff::pub::invest::api::contract::v1::Quotation* deviation_multiplier_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_marketdata_2eproto;
};
// -------------------------------------------------------------------

class GetLastTradesRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.pub.invest.api.contract.v1.GetLastTradesRequest) */ {
 public:
  inline GetLastTradesRequest() : GetLastTradesRequest(nullptr) {}
  ~GetLastTradesRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetLastTradesRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetLastTradesRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetLastTradesRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetLastTradesRequest(const GetLastTradesRequest& from) : GetLastTradesRequest(nullptr, from) {}
  inline GetLastTradesRequest(GetLastTradesRequest&& from) noexcept
      : GetLastTradesRequest(nullptr, std::move(from)) {}
  inline GetLastTradesRequest& operator=(const GetLastTradesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLastTradesRequest& operator=(GetLastTradesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetLastTradesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetLastTradesRequest* internal_default_instance() {
    return reinterpret_cast<const GetLastTradesRequest*>(
        &_GetLastTradesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 40;
  friend void swap(GetLastTradesRequest& a, GetLastTradesRequest& b) { a.Swap(&b); }
  inline void Swap(GetLastTradesRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLastTradesRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetLastTradesRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetLastTradesRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetLastTradesRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetLastTradesRequest& from) { GetLastTradesRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetLastTradesRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tinkoff.pub.invest.api.contract.v1.GetLastTradesRequest"; }

 protected:
  explicit GetLastTradesRequest(::google::protobuf::Arena* arena);
  GetLastTradesRequest(::google::protobuf::Arena* arena, const GetLastTradesRequest& from);
  GetLastTradesRequest(::google::protobuf::Arena* arena, GetLastTradesRequest&& from) noexcept
      : GetLastTradesRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFigiFieldNumber = 1,
    kInstrumentIdFieldNumber = 4,
    kFromFieldNumber = 2,
    kToFieldNumber = 3,
    kTradeSourceFieldNumber = 5,
  };
  // optional string figi = 1 [deprecated = true];
  [[deprecated]]  bool has_figi() const;
  [[deprecated]]  void clear_figi() ;
  [[deprecated]] const std::string& figi() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  [[deprecated]] void set_figi(Arg_&& arg, Args_... args);
  [[deprecated]] std::string* mutable_figi();
  [[deprecated]] PROTOBUF_NODISCARD std::string* release_figi();
  [[deprecated]] void set_allocated_figi(std::string* value);

  private:
  const std::string& _internal_figi() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_figi(
      const std::string& value);
  std::string* _internal_mutable_figi();

  public:
  // optional string instrument_id = 4;
  bool has_instrument_id() const;
  void clear_instrument_id() ;
  const std::string& instrument_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_instrument_id(Arg_&& arg, Args_... args);
  std::string* mutable_instrument_id();
  PROTOBUF_NODISCARD std::string* release_instrument_id();
  void set_allocated_instrument_id(std::string* value);

  private:
  const std::string& _internal_instrument_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_id(
      const std::string& value);
  std::string* _internal_mutable_instrument_id();

  public:
  // .google.protobuf.Timestamp from = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_from() const;
  void clear_from() ;
  const ::google::protobuf::Timestamp& from() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_from();
  ::google::protobuf::Timestamp* mutable_from();
  void set_allocated_from(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_from(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_from();

  private:
  const ::google::protobuf::Timestamp& _internal_from() const;
  ::google::protobuf::Timestamp* _internal_mutable_from();

  public:
  // .google.protobuf.Timestamp to = 3 [(.google.api.field_behavior) = REQUIRED];
  bool has_to() const;
  void clear_to() ;
  const ::google::protobuf::Timestamp& to() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_to();
  ::google::protobuf::Timestamp* mutable_to();
  void set_allocated_to(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_to(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_to();

  private:
  const ::google::protobuf::Timestamp& _internal_to() const;
  ::google::protobuf::Timestamp* _internal_mutable_to();

  public:
  // .tinkoff.pub.invest.api.contract.v1.TradeSourceType trade_source = 5;
  void clear_trade_source() ;
  ::tinkoff::pub::invest::api::contract::v1::TradeSourceType trade_source() const;
  void set_trade_source(::tinkoff::pub::invest::api::contract::v1::TradeSourceType value);

  private:
  ::tinkoff::pub::invest::api::contract::v1::TradeSourceType _internal_trade_source() const;
  void _internal_set_trade_source(::tinkoff::pub::invest::api::contract::v1::TradeSourceType value);

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.pub.invest.api.contract.v1.GetLastTradesRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 5, 2,
      81, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetLastTradesRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr figi_;
    ::google::protobuf::internal::ArenaStringPtr instrument_id_;
    ::google::protobuf::Timestamp* from_;
    ::google::protobuf::Timestamp* to_;
    int trade_source_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_marketdata_2eproto;
};
// -------------------------------------------------------------------

class GetClosePricesRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.pub.invest.api.contract.v1.GetClosePricesRequest) */ {
 public:
  inline GetClosePricesRequest() : GetClosePricesRequest(nullptr) {}
  ~GetClosePricesRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetClosePricesRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetClosePricesRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetClosePricesRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetClosePricesRequest(const GetClosePricesRequest& from) : GetClosePricesRequest(nullptr, from) {}
  inline GetClosePricesRequest(GetClosePricesRequest&& from) noexcept
      : GetClosePricesRequest(nullptr, std::move(from)) {}
  inline GetClosePricesRequest& operator=(const GetClosePricesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetClosePricesRequest& operator=(GetClosePricesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetClosePricesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetClosePricesRequest* internal_default_instance() {
    return reinterpret_cast<const GetClosePricesRequest*>(
        &_GetClosePricesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 43;
  friend void swap(GetClosePricesRequest& a, GetClosePricesRequest& b) { a.Swap(&b); }
  inline void Swap(GetClosePricesRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetClosePricesRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetClosePricesRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetClosePricesRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetClosePricesRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetClosePricesRequest& from) { GetClosePricesRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetClosePricesRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tinkoff.pub.invest.api.contract.v1.GetClosePricesRequest"; }

 protected:
  explicit GetClosePricesRequest(::google::protobuf::Arena* arena);
  GetClosePricesRequest(::google::protobuf::Arena* arena, const GetClosePricesRequest& from);
  GetClosePricesRequest(::google::protobuf::Arena* arena, GetClosePricesRequest&& from) noexcept
      : GetClosePricesRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kInstrumentsFieldNumber = 1,
    kInstrumentStatusFieldNumber = 9,
  };
  // repeated .tinkoff.pub.invest.api.contract.v1.InstrumentClosePriceRequest instruments = 1 [(.google.api.field_behavior) = REQUIRED];
  int instruments_size() const;
  private:
  int _internal_instruments_size() const;

  public:
  void clear_instruments() ;
  ::tinkoff::pub::invest::api::contract::v1::InstrumentClosePriceRequest* mutable_instruments(int index);
  ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::InstrumentClosePriceRequest>* mutable_instruments();

  private:
  const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::InstrumentClosePriceRequest>& _internal_instruments() const;
  ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::InstrumentClosePriceRequest>* _internal_mutable_instruments();
  public:
  const ::tinkoff::pub::invest::api::contract::v1::InstrumentClosePriceRequest& instruments(int index) const;
  ::tinkoff::pub::invest::api::contract::v1::InstrumentClosePriceRequest* add_instruments();
  const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::InstrumentClosePriceRequest>& instruments() const;
  // optional .tinkoff.pub.invest.api.contract.v1.InstrumentStatus instrument_status = 9;
  bool has_instrument_status() const;
  void clear_instrument_status() ;
  ::tinkoff::pub::invest::api::contract::v1::InstrumentStatus instrument_status() const;
  void set_instrument_status(::tinkoff::pub::invest::api::contract::v1::InstrumentStatus value);

  private:
  ::tinkoff::pub::invest::api::contract::v1::InstrumentStatus _internal_instrument_status() const;
  void _internal_set_instrument_status(::tinkoff::pub::invest::api::contract::v1::InstrumentStatus value);

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.pub.invest.api.contract.v1.GetClosePricesRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 2, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetClosePricesRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::tinkoff::pub::invest::api::contract::v1::InstrumentClosePriceRequest > instruments_;
    int instrument_status_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_marketdata_2eproto;
};
// -------------------------------------------------------------------

class GetCandlesRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.pub.invest.api.contract.v1.GetCandlesRequest) */ {
 public:
  inline GetCandlesRequest() : GetCandlesRequest(nullptr) {}
  ~GetCandlesRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetCandlesRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetCandlesRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetCandlesRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetCandlesRequest(const GetCandlesRequest& from) : GetCandlesRequest(nullptr, from) {}
  inline GetCandlesRequest(GetCandlesRequest&& from) noexcept
      : GetCandlesRequest(nullptr, std::move(from)) {}
  inline GetCandlesRequest& operator=(const GetCandlesRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCandlesRequest& operator=(GetCandlesRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCandlesRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCandlesRequest* internal_default_instance() {
    return reinterpret_cast<const GetCandlesRequest*>(
        &_GetCandlesRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 28;
  friend void swap(GetCandlesRequest& a, GetCandlesRequest& b) { a.Swap(&b); }
  inline void Swap(GetCandlesRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCandlesRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetCandlesRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetCandlesRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetCandlesRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetCandlesRequest& from) { GetCandlesRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetCandlesRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tinkoff.pub.invest.api.contract.v1.GetCandlesRequest"; }

 protected:
  explicit GetCandlesRequest(::google::protobuf::Arena* arena);
  GetCandlesRequest(::google::protobuf::Arena* arena, const GetCandlesRequest& from);
  GetCandlesRequest(::google::protobuf::Arena* arena, GetCandlesRequest&& from) noexcept
      : GetCandlesRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using CandleSource = GetCandlesRequest_CandleSource;
  static constexpr CandleSource CANDLE_SOURCE_UNSPECIFIED = GetCandlesRequest_CandleSource_CANDLE_SOURCE_UNSPECIFIED;
  static constexpr CandleSource CANDLE_SOURCE_EXCHANGE = GetCandlesRequest_CandleSource_CANDLE_SOURCE_EXCHANGE;
  static constexpr CandleSource CANDLE_SOURCE_INCLUDE_WEEKEND = GetCandlesRequest_CandleSource_CANDLE_SOURCE_INCLUDE_WEEKEND;
  static inline bool CandleSource_IsValid(int value) {
    return GetCandlesRequest_CandleSource_IsValid(value);
  }
  static constexpr CandleSource CandleSource_MIN = GetCandlesRequest_CandleSource_CandleSource_MIN;
  static constexpr CandleSource CandleSource_MAX = GetCandlesRequest_CandleSource_CandleSource_MAX;
  static constexpr int CandleSource_ARRAYSIZE = GetCandlesRequest_CandleSource_CandleSource_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* CandleSource_descriptor() {
    return GetCandlesRequest_CandleSource_descriptor();
  }
  template <typename T>
  static inline const std::string& CandleSource_Name(T value) {
    return GetCandlesRequest_CandleSource_Name(value);
  }
  static inline bool CandleSource_Parse(absl::string_view name, CandleSource* value) {
    return GetCandlesRequest_CandleSource_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kFigiFieldNumber = 1,
    kInstrumentIdFieldNumber = 5,
    kFromFieldNumber = 2,
    kToFieldNumber = 3,
    kIntervalFieldNumber = 4,
    kCandleSourceTypeFieldNumber = 7,
    kLimitFieldNumber = 10,
  };
  // optional string figi = 1 [deprecated = true];
  [[deprecated]]  bool has_figi() const;
  [[deprecated]]  void clear_figi() ;
  [[deprecated]] const std::string& figi() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  [[deprecated]] void set_figi(Arg_&& arg, Args_... args);
  [[deprecated]] std::string* mutable_figi();
  [[deprecated]] PROTOBUF_NODISCARD std::string* release_figi();
  [[deprecated]] void set_allocated_figi(std::string* value);

  private:
  const std::string& _internal_figi() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_figi(
      const std::string& value);
  std::string* _internal_mutable_figi();

  public:
  // optional string instrument_id = 5;
  bool has_instrument_id() const;
  void clear_instrument_id() ;
  const std::string& instrument_id() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_instrument_id(Arg_&& arg, Args_... args);
  std::string* mutable_instrument_id();
  PROTOBUF_NODISCARD std::string* release_instrument_id();
  void set_allocated_instrument_id(std::string* value);

  private:
  const std::string& _internal_instrument_id() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_id(
      const std::string& value);
  std::string* _internal_mutable_instrument_id();

  public:
  // .google.protobuf.Timestamp from = 2 [(.google.api.field_behavior) = REQUIRED];
  bool has_from() const;
  void clear_from() ;
  const ::google::protobuf::Timestamp& from() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_from();
  ::google::protobuf::Timestamp* mutable_from();
  void set_allocated_from(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_from(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_from();

  private:
  const ::google::protobuf::Timestamp& _internal_from() const;
  ::google::protobuf::Timestamp* _internal_mutable_from();

  public:
  // .google.protobuf.Timestamp to = 3 [(.google.api.field_behavior) = REQUIRED];
  bool has_to() const;
  void clear_to() ;
  const ::google::protobuf::Timestamp& to() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_to();
  ::google::protobuf::Timestamp* mutable_to();
  void set_allocated_to(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_to(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_to();

  private:
  const ::google::protobuf::Timestamp& _internal_to() const;
  ::google::protobuf::Timestamp* _internal_mutable_to();

  public:
  // .tinkoff.pub.invest.api.contract.v1.CandleInterval interval = 4 [(.google.api.field_behavior) = REQUIRED];
  void clear_interval() ;
  ::tinkoff::pub::invest::api::contract::v1::CandleInterval interval() const;
  void set_interval(::tinkoff::pub::invest::api::contract::v1::CandleInterval value);

  private:
  ::tinkoff::pub::invest::api::contract::v1::CandleInterval _internal_interval() const;
  void _internal_set_interval(::tinkoff::pub::invest::api::contract::v1::CandleInterval value);

  public:
  // optional .tinkoff.pub.invest.api.contract.v1.GetCandlesRequest.CandleSource candle_source_type = 7;
  bool has_candle_source_type() const;
  void clear_candle_source_type() ;
  ::tinkoff::pub::invest::api::contract::v1::GetCandlesRequest_CandleSource candle_source_type() const;
  void set_candle_source_type(::tinkoff::pub::invest::api::contract::v1::GetCandlesRequest_CandleSource value);

  private:
  ::tinkoff::pub::invest::api::contract::v1::GetCandlesRequest_CandleSource _internal_candle_source_type() const;
  void _internal_set_candle_source_type(::tinkoff::pub::invest::api::contract::v1::GetCandlesRequest_CandleSource value);

  public:
  // optional int32 limit = 10;
  bool has_limit() const;
  void clear_limit() ;
  ::int32_t limit() const;
  void set_limit(::int32_t value);

  private:
  ::int32_t _internal_limit() const;
  void _internal_set_limit(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.pub.invest.api.contract.v1.GetCandlesRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 7, 2,
      78, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetCandlesRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr figi_;
    ::google::protobuf::internal::ArenaStringPtr instrument_id_;
    ::google::protobuf::Timestamp* from_;
    ::google::protobuf::Timestamp* to_;
    int interval_;
    int candle_source_type_;
    ::int32_t limit_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_marketdata_2eproto;
};
// -------------------------------------------------------------------

class Candle final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.pub.invest.api.contract.v1.Candle) */ {
 public:
  inline Candle() : Candle(nullptr) {}
  ~Candle() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(Candle* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(Candle));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR Candle(
      ::google::protobuf::internal::ConstantInitialized);

  inline Candle(const Candle& from) : Candle(nullptr, from) {}
  inline Candle(Candle&& from) noexcept
      : Candle(nullptr, std::move(from)) {}
  inline Candle& operator=(const Candle& from) {
    CopyFrom(from);
    return *this;
  }
  inline Candle& operator=(Candle&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Candle& default_instance() {
    return *internal_default_instance();
  }
  static inline const Candle* internal_default_instance() {
    return reinterpret_cast<const Candle*>(
        &_Candle_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 23;
  friend void swap(Candle& a, Candle& b) { a.Swap(&b); }
  inline void Swap(Candle* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Candle* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  Candle* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<Candle>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const Candle& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const Candle& from) { Candle::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(Candle* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tinkoff.pub.invest.api.contract.v1.Candle"; }

 protected:
  explicit Candle(::google::protobuf::Arena* arena);
  Candle(::google::protobuf::Arena* arena, const Candle& from);
  Candle(::google::protobuf::Arena* arena, Candle&& from) noexcept
      : Candle(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kFigiFieldNumber = 1,
    kInstrumentUidFieldNumber = 10,
    kOpenFieldNumber = 3,
    kHighFieldNumber = 4,
    kLowFieldNumber = 5,
    kCloseFieldNumber = 6,
    kTimeFieldNumber = 8,
    kLastTradeTsFieldNumber = 9,
    kVolumeFieldNumber = 7,
    kIntervalFieldNumber = 2,
    kCandleSourceTypeFieldNumber = 19,
  };
  // string figi = 1;
  void clear_figi() ;
  const std::string& figi() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_figi(Arg_&& arg, Args_... args);
  std::string* mutable_figi();
  PROTOBUF_NODISCARD std::string* release_figi();
  void set_allocated_figi(std::string* value);

  private:
  const std::string& _internal_figi() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_figi(
      const std::string& value);
  std::string* _internal_mutable_figi();

  public:
  // string instrument_uid = 10;
  void clear_instrument_uid() ;
  const std::string& instrument_uid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_instrument_uid(Arg_&& arg, Args_... args);
  std::string* mutable_instrument_uid();
  PROTOBUF_NODISCARD std::string* release_instrument_uid();
  void set_allocated_instrument_uid(std::string* value);

  private:
  const std::string& _internal_instrument_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_uid(
      const std::string& value);
  std::string* _internal_mutable_instrument_uid();

  public:
  // .tinkoff.pub.invest.api.contract.v1.Quotation open = 3;
  bool has_open() const;
  void clear_open() ;
  const ::tinkoff::pub::invest::api::contract::v1::Quotation& open() const;
  PROTOBUF_NODISCARD ::tinkoff::pub::invest::api::contract::v1::Quotation* release_open();
  ::tinkoff::pub::invest::api::contract::v1::Quotation* mutable_open();
  void set_allocated_open(::tinkoff::pub::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_open(::tinkoff::pub::invest::api::contract::v1::Quotation* value);
  ::tinkoff::pub::invest::api::contract::v1::Quotation* unsafe_arena_release_open();

  private:
  const ::tinkoff::pub::invest::api::contract::v1::Quotation& _internal_open() const;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* _internal_mutable_open();

  public:
  // .tinkoff.pub.invest.api.contract.v1.Quotation high = 4;
  bool has_high() const;
  void clear_high() ;
  const ::tinkoff::pub::invest::api::contract::v1::Quotation& high() const;
  PROTOBUF_NODISCARD ::tinkoff::pub::invest::api::contract::v1::Quotation* release_high();
  ::tinkoff::pub::invest::api::contract::v1::Quotation* mutable_high();
  void set_allocated_high(::tinkoff::pub::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_high(::tinkoff::pub::invest::api::contract::v1::Quotation* value);
  ::tinkoff::pub::invest::api::contract::v1::Quotation* unsafe_arena_release_high();

  private:
  const ::tinkoff::pub::invest::api::contract::v1::Quotation& _internal_high() const;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* _internal_mutable_high();

  public:
  // .tinkoff.pub.invest.api.contract.v1.Quotation low = 5;
  bool has_low() const;
  void clear_low() ;
  const ::tinkoff::pub::invest::api::contract::v1::Quotation& low() const;
  PROTOBUF_NODISCARD ::tinkoff::pub::invest::api::contract::v1::Quotation* release_low();
  ::tinkoff::pub::invest::api::contract::v1::Quotation* mutable_low();
  void set_allocated_low(::tinkoff::pub::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_low(::tinkoff::pub::invest::api::contract::v1::Quotation* value);
  ::tinkoff::pub::invest::api::contract::v1::Quotation* unsafe_arena_release_low();

  private:
  const ::tinkoff::pub::invest::api::contract::v1::Quotation& _internal_low() const;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* _internal_mutable_low();

  public:
  // .tinkoff.pub.invest.api.contract.v1.Quotation close = 6;
  bool has_close() const;
  void clear_close() ;
  const ::tinkoff::pub::invest::api::contract::v1::Quotation& close() const;
  PROTOBUF_NODISCARD ::tinkoff::pub::invest::api::contract::v1::Quotation* release_close();
  ::tinkoff::pub::invest::api::contract::v1::Quotation* mutable_close();
  void set_allocated_close(::tinkoff::pub::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_close(::tinkoff::pub::invest::api::contract::v1::Quotation* value);
  ::tinkoff::pub::invest::api::contract::v1::Quotation* unsafe_arena_release_close();

  private:
  const ::tinkoff::pub::invest::api::contract::v1::Quotation& _internal_close() const;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* _internal_mutable_close();

  public:
  // .google.protobuf.Timestamp time = 8;
  bool has_time() const;
  void clear_time() ;
  const ::google::protobuf::Timestamp& time() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_time();
  ::google::protobuf::Timestamp* mutable_time();
  void set_allocated_time(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_time(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_time();

  private:
  const ::google::protobuf::Timestamp& _internal_time() const;
  ::google::protobuf::Timestamp* _internal_mutable_time();

  public:
  // .google.protobuf.Timestamp last_trade_ts = 9;
  bool has_last_trade_ts() const;
  void clear_last_trade_ts() ;
  const ::google::protobuf::Timestamp& last_trade_ts() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_last_trade_ts();
  ::google::protobuf::Timestamp* mutable_last_trade_ts();
  void set_allocated_last_trade_ts(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_last_trade_ts(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_last_trade_ts();

  private:
  const ::google::protobuf::Timestamp& _internal_last_trade_ts() const;
  ::google::protobuf::Timestamp* _internal_mutable_last_trade_ts();

  public:
  // int64 volume = 7;
  void clear_volume() ;
  ::int64_t volume() const;
  void set_volume(::int64_t value);

  private:
  ::int64_t _internal_volume() const;
  void _internal_set_volume(::int64_t value);

  public:
  // .tinkoff.pub.invest.api.contract.v1.SubscriptionInterval interval = 2;
  void clear_interval() ;
  ::tinkoff::pub::invest::api::contract::v1::SubscriptionInterval interval() const;
  void set_interval(::tinkoff::pub::invest::api::contract::v1::SubscriptionInterval value);

  private:
  ::tinkoff::pub::invest::api::contract::v1::SubscriptionInterval _internal_interval() const;
  void _internal_set_interval(::tinkoff::pub::invest::api::contract::v1::SubscriptionInterval value);

  public:
  // .tinkoff.pub.invest.api.contract.v1.CandleSource candle_source_type = 19;
  void clear_candle_source_type() ;
  ::tinkoff::pub::invest::api::contract::v1::CandleSource candle_source_type() const;
  void set_candle_source_type(::tinkoff::pub::invest::api::contract::v1::CandleSource value);

  private:
  ::tinkoff::pub::invest::api::contract::v1::CandleSource _internal_candle_source_type() const;
  void _internal_set_candle_source_type(::tinkoff::pub::invest::api::contract::v1::CandleSource value);

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.pub.invest.api.contract.v1.Candle)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 11, 6,
      76, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const Candle& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr figi_;
    ::google::protobuf::internal::ArenaStringPtr instrument_uid_;
    ::tinkoff::pub::invest::api::contract::v1::Quotation* open_;
    ::tinkoff::pub::invest::api::contract::v1::Quotation* high_;
    ::tinkoff::pub::invest::api::contract::v1::Quotation* low_;
    ::tinkoff::pub::invest::api::contract::v1::Quotation* close_;
    ::google::protobuf::Timestamp* time_;
    ::google::protobuf::Timestamp* last_trade_ts_;
    ::int64_t volume_;
    int interval_;
    int candle_source_type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_marketdata_2eproto;
};
// -------------------------------------------------------------------

class OrderBook final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.pub.invest.api.contract.v1.OrderBook) */ {
 public:
  inline OrderBook() : OrderBook(nullptr) {}
  ~OrderBook() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(OrderBook* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(OrderBook));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR OrderBook(
      ::google::protobuf::internal::ConstantInitialized);

  inline OrderBook(const OrderBook& from) : OrderBook(nullptr, from) {}
  inline OrderBook(OrderBook&& from) noexcept
      : OrderBook(nullptr, std::move(from)) {}
  inline OrderBook& operator=(const OrderBook& from) {
    CopyFrom(from);
    return *this;
  }
  inline OrderBook& operator=(OrderBook&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const OrderBook& default_instance() {
    return *internal_default_instance();
  }
  static inline const OrderBook* internal_default_instance() {
    return reinterpret_cast<const OrderBook*>(
        &_OrderBook_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 24;
  friend void swap(OrderBook& a, OrderBook& b) { a.Swap(&b); }
  inline void Swap(OrderBook* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(OrderBook* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  OrderBook* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<OrderBook>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const OrderBook& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const OrderBook& from) { OrderBook::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(OrderBook* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tinkoff.pub.invest.api.contract.v1.OrderBook"; }

 protected:
  explicit OrderBook(::google::protobuf::Arena* arena);
  OrderBook(::google::protobuf::Arena* arena, const OrderBook& from);
  OrderBook(::google::protobuf::Arena* arena, OrderBook&& from) noexcept
      : OrderBook(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBidsFieldNumber = 4,
    kAsksFieldNumber = 5,
    kFigiFieldNumber = 1,
    kInstrumentUidFieldNumber = 9,
    kTimeFieldNumber = 6,
    kLimitUpFieldNumber = 7,
    kLimitDownFieldNumber = 8,
    kDepthFieldNumber = 2,
    kIsConsistentFieldNumber = 3,
    kOrderBookTypeFieldNumber = 10,
  };
  // repeated .tinkoff.pub.invest.api.contract.v1.Order bids = 4;
  int bids_size() const;
  private:
  int _internal_bids_size() const;

  public:
  void clear_bids() ;
  ::tinkoff::pub::invest::api::contract::v1::Order* mutable_bids(int index);
  ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::Order>* mutable_bids();

  private:
  const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::Order>& _internal_bids() const;
  ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::Order>* _internal_mutable_bids();
  public:
  const ::tinkoff::pub::invest::api::contract::v1::Order& bids(int index) const;
  ::tinkoff::pub::invest::api::contract::v1::Order* add_bids();
  const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::Order>& bids() const;
  // repeated .tinkoff.pub.invest.api.contract.v1.Order asks = 5;
  int asks_size() const;
  private:
  int _internal_asks_size() const;

  public:
  void clear_asks() ;
  ::tinkoff::pub::invest::api::contract::v1::Order* mutable_asks(int index);
  ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::Order>* mutable_asks();

  private:
  const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::Order>& _internal_asks() const;
  ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::Order>* _internal_mutable_asks();
  public:
  const ::tinkoff::pub::invest::api::contract::v1::Order& asks(int index) const;
  ::tinkoff::pub::invest::api::contract::v1::Order* add_asks();
  const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::Order>& asks() const;
  // string figi = 1;
  void clear_figi() ;
  const std::string& figi() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_figi(Arg_&& arg, Args_... args);
  std::string* mutable_figi();
  PROTOBUF_NODISCARD std::string* release_figi();
  void set_allocated_figi(std::string* value);

  private:
  const std::string& _internal_figi() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_figi(
      const std::string& value);
  std::string* _internal_mutable_figi();

  public:
  // string instrument_uid = 9;
  void clear_instrument_uid() ;
  const std::string& instrument_uid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_instrument_uid(Arg_&& arg, Args_... args);
  std::string* mutable_instrument_uid();
  PROTOBUF_NODISCARD std::string* release_instrument_uid();
  void set_allocated_instrument_uid(std::string* value);

  private:
  const std::string& _internal_instrument_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_uid(
      const std::string& value);
  std::string* _internal_mutable_instrument_uid();

  public:
  // .google.protobuf.Timestamp time = 6;
  bool has_time() const;
  void clear_time() ;
  const ::google::protobuf::Timestamp& time() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_time();
  ::google::protobuf::Timestamp* mutable_time();
  void set_allocated_time(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_time(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_time();

  private:
  const ::google::protobuf::Timestamp& _internal_time() const;
  ::google::protobuf::Timestamp* _internal_mutable_time();

  public:
  // .tinkoff.pub.invest.api.contract.v1.Quotation limit_up = 7;
  bool has_limit_up() const;
  void clear_limit_up() ;
  const ::tinkoff::pub::invest::api::contract::v1::Quotation& limit_up() const;
  PROTOBUF_NODISCARD ::tinkoff::pub::invest::api::contract::v1::Quotation* release_limit_up();
  ::tinkoff::pub::invest::api::contract::v1::Quotation* mutable_limit_up();
  void set_allocated_limit_up(::tinkoff::pub::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_limit_up(::tinkoff::pub::invest::api::contract::v1::Quotation* value);
  ::tinkoff::pub::invest::api::contract::v1::Quotation* unsafe_arena_release_limit_up();

  private:
  const ::tinkoff::pub::invest::api::contract::v1::Quotation& _internal_limit_up() const;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* _internal_mutable_limit_up();

  public:
  // .tinkoff.pub.invest.api.contract.v1.Quotation limit_down = 8;
  bool has_limit_down() const;
  void clear_limit_down() ;
  const ::tinkoff::pub::invest::api::contract::v1::Quotation& limit_down() const;
  PROTOBUF_NODISCARD ::tinkoff::pub::invest::api::contract::v1::Quotation* release_limit_down();
  ::tinkoff::pub::invest::api::contract::v1::Quotation* mutable_limit_down();
  void set_allocated_limit_down(::tinkoff::pub::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_limit_down(::tinkoff::pub::invest::api::contract::v1::Quotation* value);
  ::tinkoff::pub::invest::api::contract::v1::Quotation* unsafe_arena_release_limit_down();

  private:
  const ::tinkoff::pub::invest::api::contract::v1::Quotation& _internal_limit_down() const;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* _internal_mutable_limit_down();

  public:
  // int32 depth = 2;
  void clear_depth() ;
  ::int32_t depth() const;
  void set_depth(::int32_t value);

  private:
  ::int32_t _internal_depth() const;
  void _internal_set_depth(::int32_t value);

  public:
  // bool is_consistent = 3;
  void clear_is_consistent() ;
  bool is_consistent() const;
  void set_is_consistent(bool value);

  private:
  bool _internal_is_consistent() const;
  void _internal_set_is_consistent(bool value);

  public:
  // .tinkoff.pub.invest.api.contract.v1.OrderBookType order_book_type = 10;
  void clear_order_book_type() ;
  ::tinkoff::pub::invest::api::contract::v1::OrderBookType order_book_type() const;
  void set_order_book_type(::tinkoff::pub::invest::api::contract::v1::OrderBookType value);

  private:
  ::tinkoff::pub::invest::api::contract::v1::OrderBookType _internal_order_book_type() const;
  void _internal_set_order_book_type(::tinkoff::pub::invest::api::contract::v1::OrderBookType value);

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.pub.invest.api.contract.v1.OrderBook)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 10, 5,
      79, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const OrderBook& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::tinkoff::pub::invest::api::contract::v1::Order > bids_;
    ::google::protobuf::RepeatedPtrField< ::tinkoff::pub::invest::api::contract::v1::Order > asks_;
    ::google::protobuf::internal::ArenaStringPtr figi_;
    ::google::protobuf::internal::ArenaStringPtr instrument_uid_;
    ::google::protobuf::Timestamp* time_;
    ::tinkoff::pub::invest::api::contract::v1::Quotation* limit_up_;
    ::tinkoff::pub::invest::api::contract::v1::Quotation* limit_down_;
    ::int32_t depth_;
    bool is_consistent_;
    int order_book_type_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_marketdata_2eproto;
};
// -------------------------------------------------------------------

class MarketDataServerSideStreamRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.pub.invest.api.contract.v1.MarketDataServerSideStreamRequest) */ {
 public:
  inline MarketDataServerSideStreamRequest() : MarketDataServerSideStreamRequest(nullptr) {}
  ~MarketDataServerSideStreamRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MarketDataServerSideStreamRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MarketDataServerSideStreamRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MarketDataServerSideStreamRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline MarketDataServerSideStreamRequest(const MarketDataServerSideStreamRequest& from) : MarketDataServerSideStreamRequest(nullptr, from) {}
  inline MarketDataServerSideStreamRequest(MarketDataServerSideStreamRequest&& from) noexcept
      : MarketDataServerSideStreamRequest(nullptr, std::move(from)) {}
  inline MarketDataServerSideStreamRequest& operator=(const MarketDataServerSideStreamRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketDataServerSideStreamRequest& operator=(MarketDataServerSideStreamRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MarketDataServerSideStreamRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const MarketDataServerSideStreamRequest* internal_default_instance() {
    return reinterpret_cast<const MarketDataServerSideStreamRequest*>(
        &_MarketDataServerSideStreamRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 1;
  friend void swap(MarketDataServerSideStreamRequest& a, MarketDataServerSideStreamRequest& b) { a.Swap(&b); }
  inline void Swap(MarketDataServerSideStreamRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketDataServerSideStreamRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MarketDataServerSideStreamRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MarketDataServerSideStreamRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MarketDataServerSideStreamRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MarketDataServerSideStreamRequest& from) { MarketDataServerSideStreamRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MarketDataServerSideStreamRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tinkoff.pub.invest.api.contract.v1.MarketDataServerSideStreamRequest"; }

 protected:
  explicit MarketDataServerSideStreamRequest(::google::protobuf::Arena* arena);
  MarketDataServerSideStreamRequest(::google::protobuf::Arena* arena, const MarketDataServerSideStreamRequest& from);
  MarketDataServerSideStreamRequest(::google::protobuf::Arena* arena, MarketDataServerSideStreamRequest&& from) noexcept
      : MarketDataServerSideStreamRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSubscribeCandlesRequestFieldNumber = 1,
    kSubscribeOrderBookRequestFieldNumber = 2,
    kSubscribeTradesRequestFieldNumber = 3,
    kSubscribeInfoRequestFieldNumber = 4,
    kSubscribeLastPriceRequestFieldNumber = 5,
    kPingSettingsFieldNumber = 15,
  };
  // .tinkoff.pub.invest.api.contract.v1.SubscribeCandlesRequest subscribe_candles_request = 1;
  bool has_subscribe_candles_request() const;
  void clear_subscribe_candles_request() ;
  const ::tinkoff::pub::invest::api::contract::v1::SubscribeCandlesRequest& subscribe_candles_request() const;
  PROTOBUF_NODISCARD ::tinkoff::pub::invest::api::contract::v1::SubscribeCandlesRequest* release_subscribe_candles_request();
  ::tinkoff::pub::invest::api::contract::v1::SubscribeCandlesRequest* mutable_subscribe_candles_request();
  void set_allocated_subscribe_candles_request(::tinkoff::pub::invest::api::contract::v1::SubscribeCandlesRequest* value);
  void unsafe_arena_set_allocated_subscribe_candles_request(::tinkoff::pub::invest::api::contract::v1::SubscribeCandlesRequest* value);
  ::tinkoff::pub::invest::api::contract::v1::SubscribeCandlesRequest* unsafe_arena_release_subscribe_candles_request();

  private:
  const ::tinkoff::pub::invest::api::contract::v1::SubscribeCandlesRequest& _internal_subscribe_candles_request() const;
  ::tinkoff::pub::invest::api::contract::v1::SubscribeCandlesRequest* _internal_mutable_subscribe_candles_request();

  public:
  // .tinkoff.pub.invest.api.contract.v1.SubscribeOrderBookRequest subscribe_order_book_request = 2;
  bool has_subscribe_order_book_request() const;
  void clear_subscribe_order_book_request() ;
  const ::tinkoff::pub::invest::api::contract::v1::SubscribeOrderBookRequest& subscribe_order_book_request() const;
  PROTOBUF_NODISCARD ::tinkoff::pub::invest::api::contract::v1::SubscribeOrderBookRequest* release_subscribe_order_book_request();
  ::tinkoff::pub::invest::api::contract::v1::SubscribeOrderBookRequest* mutable_subscribe_order_book_request();
  void set_allocated_subscribe_order_book_request(::tinkoff::pub::invest::api::contract::v1::SubscribeOrderBookRequest* value);
  void unsafe_arena_set_allocated_subscribe_order_book_request(::tinkoff::pub::invest::api::contract::v1::SubscribeOrderBookRequest* value);
  ::tinkoff::pub::invest::api::contract::v1::SubscribeOrderBookRequest* unsafe_arena_release_subscribe_order_book_request();

  private:
  const ::tinkoff::pub::invest::api::contract::v1::SubscribeOrderBookRequest& _internal_subscribe_order_book_request() const;
  ::tinkoff::pub::invest::api::contract::v1::SubscribeOrderBookRequest* _internal_mutable_subscribe_order_book_request();

  public:
  // .tinkoff.pub.invest.api.contract.v1.SubscribeTradesRequest subscribe_trades_request = 3;
  bool has_subscribe_trades_request() const;
  void clear_subscribe_trades_request() ;
  const ::tinkoff::pub::invest::api::contract::v1::SubscribeTradesRequest& subscribe_trades_request() const;
  PROTOBUF_NODISCARD ::tinkoff::pub::invest::api::contract::v1::SubscribeTradesRequest* release_subscribe_trades_request();
  ::tinkoff::pub::invest::api::contract::v1::SubscribeTradesRequest* mutable_subscribe_trades_request();
  void set_allocated_subscribe_trades_request(::tinkoff::pub::invest::api::contract::v1::SubscribeTradesRequest* value);
  void unsafe_arena_set_allocated_subscribe_trades_request(::tinkoff::pub::invest::api::contract::v1::SubscribeTradesRequest* value);
  ::tinkoff::pub::invest::api::contract::v1::SubscribeTradesRequest* unsafe_arena_release_subscribe_trades_request();

  private:
  const ::tinkoff::pub::invest::api::contract::v1::SubscribeTradesRequest& _internal_subscribe_trades_request() const;
  ::tinkoff::pub::invest::api::contract::v1::SubscribeTradesRequest* _internal_mutable_subscribe_trades_request();

  public:
  // .tinkoff.pub.invest.api.contract.v1.SubscribeInfoRequest subscribe_info_request = 4;
  bool has_subscribe_info_request() const;
  void clear_subscribe_info_request() ;
  const ::tinkoff::pub::invest::api::contract::v1::SubscribeInfoRequest& subscribe_info_request() const;
  PROTOBUF_NODISCARD ::tinkoff::pub::invest::api::contract::v1::SubscribeInfoRequest* release_subscribe_info_request();
  ::tinkoff::pub::invest::api::contract::v1::SubscribeInfoRequest* mutable_subscribe_info_request();
  void set_allocated_subscribe_info_request(::tinkoff::pub::invest::api::contract::v1::SubscribeInfoRequest* value);
  void unsafe_arena_set_allocated_subscribe_info_request(::tinkoff::pub::invest::api::contract::v1::SubscribeInfoRequest* value);
  ::tinkoff::pub::invest::api::contract::v1::SubscribeInfoRequest* unsafe_arena_release_subscribe_info_request();

  private:
  const ::tinkoff::pub::invest::api::contract::v1::SubscribeInfoRequest& _internal_subscribe_info_request() const;
  ::tinkoff::pub::invest::api::contract::v1::SubscribeInfoRequest* _internal_mutable_subscribe_info_request();

  public:
  // .tinkoff.pub.invest.api.contract.v1.SubscribeLastPriceRequest subscribe_last_price_request = 5;
  bool has_subscribe_last_price_request() const;
  void clear_subscribe_last_price_request() ;
  const ::tinkoff::pub::invest::api::contract::v1::SubscribeLastPriceRequest& subscribe_last_price_request() const;
  PROTOBUF_NODISCARD ::tinkoff::pub::invest::api::contract::v1::SubscribeLastPriceRequest* release_subscribe_last_price_request();
  ::tinkoff::pub::invest::api::contract::v1::SubscribeLastPriceRequest* mutable_subscribe_last_price_request();
  void set_allocated_subscribe_last_price_request(::tinkoff::pub::invest::api::contract::v1::SubscribeLastPriceRequest* value);
  void unsafe_arena_set_allocated_subscribe_last_price_request(::tinkoff::pub::invest::api::contract::v1::SubscribeLastPriceRequest* value);
  ::tinkoff::pub::invest::api::contract::v1::SubscribeLastPriceRequest* unsafe_arena_release_subscribe_last_price_request();

  private:
  const ::tinkoff::pub::invest::api::contract::v1::SubscribeLastPriceRequest& _internal_subscribe_last_price_request() const;
  ::tinkoff::pub::invest::api::contract::v1::SubscribeLastPriceRequest* _internal_mutable_subscribe_last_price_request();

  public:
  // .tinkoff.pub.invest.api.contract.v1.PingDelaySettings ping_settings = 15;
  bool has_ping_settings() const;
  void clear_ping_settings() ;
  const ::tinkoff::pub::invest::api::contract::v1::PingDelaySettings& ping_settings() const;
  PROTOBUF_NODISCARD ::tinkoff::pub::invest::api::contract::v1::PingDelaySettings* release_ping_settings();
  ::tinkoff::pub::invest::api::contract::v1::PingDelaySettings* mutable_ping_settings();
  void set_allocated_ping_settings(::tinkoff::pub::invest::api::contract::v1::PingDelaySettings* value);
  void unsafe_arena_set_allocated_ping_settings(::tinkoff::pub::invest::api::contract::v1::PingDelaySettings* value);
  ::tinkoff::pub::invest::api::contract::v1::PingDelaySettings* unsafe_arena_release_ping_settings();

  private:
  const ::tinkoff::pub::invest::api::contract::v1::PingDelaySettings& _internal_ping_settings() const;
  ::tinkoff::pub::invest::api::contract::v1::PingDelaySettings* _internal_mutable_ping_settings();

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.pub.invest.api.contract.v1.MarketDataServerSideStreamRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      3, 6, 6,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MarketDataServerSideStreamRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::tinkoff::pub::invest::api::contract::v1::SubscribeCandlesRequest* subscribe_candles_request_;
    ::tinkoff::pub::invest::api::contract::v1::SubscribeOrderBookRequest* subscribe_order_book_request_;
    ::tinkoff::pub::invest::api::contract::v1::SubscribeTradesRequest* subscribe_trades_request_;
    ::tinkoff::pub::invest::api::contract::v1::SubscribeInfoRequest* subscribe_info_request_;
    ::tinkoff::pub::invest::api::contract::v1::SubscribeLastPriceRequest* subscribe_last_price_request_;
    ::tinkoff::pub::invest::api::contract::v1::PingDelaySettings* ping_settings_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_marketdata_2eproto;
};
// -------------------------------------------------------------------

class MarketDataRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.pub.invest.api.contract.v1.MarketDataRequest) */ {
 public:
  inline MarketDataRequest() : MarketDataRequest(nullptr) {}
  ~MarketDataRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MarketDataRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MarketDataRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MarketDataRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline MarketDataRequest(const MarketDataRequest& from) : MarketDataRequest(nullptr, from) {}
  inline MarketDataRequest(MarketDataRequest&& from) noexcept
      : MarketDataRequest(nullptr, std::move(from)) {}
  inline MarketDataRequest& operator=(const MarketDataRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketDataRequest& operator=(MarketDataRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MarketDataRequest& default_instance() {
    return *internal_default_instance();
  }
  enum PayloadCase {
    kSubscribeCandlesRequest = 1,
    kSubscribeOrderBookRequest = 2,
    kSubscribeTradesRequest = 3,
    kSubscribeInfoRequest = 4,
    kSubscribeLastPriceRequest = 5,
    kGetMySubscriptions = 6,
    kPing = 7,
    kPingSettings = 15,
    PAYLOAD_NOT_SET = 0,
  };
  static inline const MarketDataRequest* internal_default_instance() {
    return reinterpret_cast<const MarketDataRequest*>(
        &_MarketDataRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 0;
  friend void swap(MarketDataRequest& a, MarketDataRequest& b) { a.Swap(&b); }
  inline void Swap(MarketDataRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketDataRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MarketDataRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MarketDataRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MarketDataRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MarketDataRequest& from) { MarketDataRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MarketDataRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tinkoff.pub.invest.api.contract.v1.MarketDataRequest"; }

 protected:
  explicit MarketDataRequest(::google::protobuf::Arena* arena);
  MarketDataRequest(::google::protobuf::Arena* arena, const MarketDataRequest& from);
  MarketDataRequest(::google::protobuf::Arena* arena, MarketDataRequest&& from) noexcept
      : MarketDataRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSubscribeCandlesRequestFieldNumber = 1,
    kSubscribeOrderBookRequestFieldNumber = 2,
    kSubscribeTradesRequestFieldNumber = 3,
    kSubscribeInfoRequestFieldNumber = 4,
    kSubscribeLastPriceRequestFieldNumber = 5,
    kGetMySubscriptionsFieldNumber = 6,
    kPingFieldNumber = 7,
    kPingSettingsFieldNumber = 15,
  };
  // .tinkoff.pub.invest.api.contract.v1.SubscribeCandlesRequest subscribe_candles_request = 1;
  bool has_subscribe_candles_request() const;
  private:
  bool _internal_has_subscribe_candles_request() const;

  public:
  void clear_subscribe_candles_request() ;
  const ::tinkoff::pub::invest::api::contract::v1::SubscribeCandlesRequest& subscribe_candles_request() const;
  PROTOBUF_NODISCARD ::tinkoff::pub::invest::api::contract::v1::SubscribeCandlesRequest* release_subscribe_candles_request();
  ::tinkoff::pub::invest::api::contract::v1::SubscribeCandlesRequest* mutable_subscribe_candles_request();
  void set_allocated_subscribe_candles_request(::tinkoff::pub::invest::api::contract::v1::SubscribeCandlesRequest* value);
  void unsafe_arena_set_allocated_subscribe_candles_request(::tinkoff::pub::invest::api::contract::v1::SubscribeCandlesRequest* value);
  ::tinkoff::pub::invest::api::contract::v1::SubscribeCandlesRequest* unsafe_arena_release_subscribe_candles_request();

  private:
  const ::tinkoff::pub::invest::api::contract::v1::SubscribeCandlesRequest& _internal_subscribe_candles_request() const;
  ::tinkoff::pub::invest::api::contract::v1::SubscribeCandlesRequest* _internal_mutable_subscribe_candles_request();

  public:
  // .tinkoff.pub.invest.api.contract.v1.SubscribeOrderBookRequest subscribe_order_book_request = 2;
  bool has_subscribe_order_book_request() const;
  private:
  bool _internal_has_subscribe_order_book_request() const;

  public:
  void clear_subscribe_order_book_request() ;
  const ::tinkoff::pub::invest::api::contract::v1::SubscribeOrderBookRequest& subscribe_order_book_request() const;
  PROTOBUF_NODISCARD ::tinkoff::pub::invest::api::contract::v1::SubscribeOrderBookRequest* release_subscribe_order_book_request();
  ::tinkoff::pub::invest::api::contract::v1::SubscribeOrderBookRequest* mutable_subscribe_order_book_request();
  void set_allocated_subscribe_order_book_request(::tinkoff::pub::invest::api::contract::v1::SubscribeOrderBookRequest* value);
  void unsafe_arena_set_allocated_subscribe_order_book_request(::tinkoff::pub::invest::api::contract::v1::SubscribeOrderBookRequest* value);
  ::tinkoff::pub::invest::api::contract::v1::SubscribeOrderBookRequest* unsafe_arena_release_subscribe_order_book_request();

  private:
  const ::tinkoff::pub::invest::api::contract::v1::SubscribeOrderBookRequest& _internal_subscribe_order_book_request() const;
  ::tinkoff::pub::invest::api::contract::v1::SubscribeOrderBookRequest* _internal_mutable_subscribe_order_book_request();

  public:
  // .tinkoff.pub.invest.api.contract.v1.SubscribeTradesRequest subscribe_trades_request = 3;
  bool has_subscribe_trades_request() const;
  private:
  bool _internal_has_subscribe_trades_request() const;

  public:
  void clear_subscribe_trades_request() ;
  const ::tinkoff::pub::invest::api::contract::v1::SubscribeTradesRequest& subscribe_trades_request() const;
  PROTOBUF_NODISCARD ::tinkoff::pub::invest::api::contract::v1::SubscribeTradesRequest* release_subscribe_trades_request();
  ::tinkoff::pub::invest::api::contract::v1::SubscribeTradesRequest* mutable_subscribe_trades_request();
  void set_allocated_subscribe_trades_request(::tinkoff::pub::invest::api::contract::v1::SubscribeTradesRequest* value);
  void unsafe_arena_set_allocated_subscribe_trades_request(::tinkoff::pub::invest::api::contract::v1::SubscribeTradesRequest* value);
  ::tinkoff::pub::invest::api::contract::v1::SubscribeTradesRequest* unsafe_arena_release_subscribe_trades_request();

  private:
  const ::tinkoff::pub::invest::api::contract::v1::SubscribeTradesRequest& _internal_subscribe_trades_request() const;
  ::tinkoff::pub::invest::api::contract::v1::SubscribeTradesRequest* _internal_mutable_subscribe_trades_request();

  public:
  // .tinkoff.pub.invest.api.contract.v1.SubscribeInfoRequest subscribe_info_request = 4;
  bool has_subscribe_info_request() const;
  private:
  bool _internal_has_subscribe_info_request() const;

  public:
  void clear_subscribe_info_request() ;
  const ::tinkoff::pub::invest::api::contract::v1::SubscribeInfoRequest& subscribe_info_request() const;
  PROTOBUF_NODISCARD ::tinkoff::pub::invest::api::contract::v1::SubscribeInfoRequest* release_subscribe_info_request();
  ::tinkoff::pub::invest::api::contract::v1::SubscribeInfoRequest* mutable_subscribe_info_request();
  void set_allocated_subscribe_info_request(::tinkoff::pub::invest::api::contract::v1::SubscribeInfoRequest* value);
  void unsafe_arena_set_allocated_subscribe_info_request(::tinkoff::pub::invest::api::contract::v1::SubscribeInfoRequest* value);
  ::tinkoff::pub::invest::api::contract::v1::SubscribeInfoRequest* unsafe_arena_release_subscribe_info_request();

  private:
  const ::tinkoff::pub::invest::api::contract::v1::SubscribeInfoRequest& _internal_subscribe_info_request() const;
  ::tinkoff::pub::invest::api::contract::v1::SubscribeInfoRequest* _internal_mutable_subscribe_info_request();

  public:
  // .tinkoff.pub.invest.api.contract.v1.SubscribeLastPriceRequest subscribe_last_price_request = 5;
  bool has_subscribe_last_price_request() const;
  private:
  bool _internal_has_subscribe_last_price_request() const;

  public:
  void clear_subscribe_last_price_request() ;
  const ::tinkoff::pub::invest::api::contract::v1::SubscribeLastPriceRequest& subscribe_last_price_request() const;
  PROTOBUF_NODISCARD ::tinkoff::pub::invest::api::contract::v1::SubscribeLastPriceRequest* release_subscribe_last_price_request();
  ::tinkoff::pub::invest::api::contract::v1::SubscribeLastPriceRequest* mutable_subscribe_last_price_request();
  void set_allocated_subscribe_last_price_request(::tinkoff::pub::invest::api::contract::v1::SubscribeLastPriceRequest* value);
  void unsafe_arena_set_allocated_subscribe_last_price_request(::tinkoff::pub::invest::api::contract::v1::SubscribeLastPriceRequest* value);
  ::tinkoff::pub::invest::api::contract::v1::SubscribeLastPriceRequest* unsafe_arena_release_subscribe_last_price_request();

  private:
  const ::tinkoff::pub::invest::api::contract::v1::SubscribeLastPriceRequest& _internal_subscribe_last_price_request() const;
  ::tinkoff::pub::invest::api::contract::v1::SubscribeLastPriceRequest* _internal_mutable_subscribe_last_price_request();

  public:
  // .tinkoff.pub.invest.api.contract.v1.GetMySubscriptions get_my_subscriptions = 6;
  bool has_get_my_subscriptions() const;
  private:
  bool _internal_has_get_my_subscriptions() const;

  public:
  void clear_get_my_subscriptions() ;
  const ::tinkoff::pub::invest::api::contract::v1::GetMySubscriptions& get_my_subscriptions() const;
  PROTOBUF_NODISCARD ::tinkoff::pub::invest::api::contract::v1::GetMySubscriptions* release_get_my_subscriptions();
  ::tinkoff::pub::invest::api::contract::v1::GetMySubscriptions* mutable_get_my_subscriptions();
  void set_allocated_get_my_subscriptions(::tinkoff::pub::invest::api::contract::v1::GetMySubscriptions* value);
  void unsafe_arena_set_allocated_get_my_subscriptions(::tinkoff::pub::invest::api::contract::v1::GetMySubscriptions* value);
  ::tinkoff::pub::invest::api::contract::v1::GetMySubscriptions* unsafe_arena_release_get_my_subscriptions();

  private:
  const ::tinkoff::pub::invest::api::contract::v1::GetMySubscriptions& _internal_get_my_subscriptions() const;
  ::tinkoff::pub::invest::api::contract::v1::GetMySubscriptions* _internal_mutable_get_my_subscriptions();

  public:
  // .tinkoff.pub.invest.api.contract.v1.PingRequest ping = 7;
  bool has_ping() const;
  private:
  bool _internal_has_ping() const;

  public:
  void clear_ping() ;
  const ::tinkoff::pub::invest::api::contract::v1::PingRequest& ping() const;
  PROTOBUF_NODISCARD ::tinkoff::pub::invest::api::contract::v1::PingRequest* release_ping();
  ::tinkoff::pub::invest::api::contract::v1::PingRequest* mutable_ping();
  void set_allocated_ping(::tinkoff::pub::invest::api::contract::v1::PingRequest* value);
  void unsafe_arena_set_allocated_ping(::tinkoff::pub::invest::api::contract::v1::PingRequest* value);
  ::tinkoff::pub::invest::api::contract::v1::PingRequest* unsafe_arena_release_ping();

  private:
  const ::tinkoff::pub::invest::api::contract::v1::PingRequest& _internal_ping() const;
  ::tinkoff::pub::invest::api::contract::v1::PingRequest* _internal_mutable_ping();

  public:
  // .tinkoff.pub.invest.api.contract.v1.PingDelaySettings ping_settings = 15;
  bool has_ping_settings() const;
  private:
  bool _internal_has_ping_settings() const;

  public:
  void clear_ping_settings() ;
  const ::tinkoff::pub::invest::api::contract::v1::PingDelaySettings& ping_settings() const;
  PROTOBUF_NODISCARD ::tinkoff::pub::invest::api::contract::v1::PingDelaySettings* release_ping_settings();
  ::tinkoff::pub::invest::api::contract::v1::PingDelaySettings* mutable_ping_settings();
  void set_allocated_ping_settings(::tinkoff::pub::invest::api::contract::v1::PingDelaySettings* value);
  void unsafe_arena_set_allocated_ping_settings(::tinkoff::pub::invest::api::contract::v1::PingDelaySettings* value);
  ::tinkoff::pub::invest::api::contract::v1::PingDelaySettings* unsafe_arena_release_ping_settings();

  private:
  const ::tinkoff::pub::invest::api::contract::v1::PingDelaySettings& _internal_ping_settings() const;
  ::tinkoff::pub::invest::api::contract::v1::PingDelaySettings* _internal_mutable_ping_settings();

  public:
  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:tinkoff.pub.invest.api.contract.v1.MarketDataRequest)
 private:
  class _Internal;
  void set_has_subscribe_candles_request();
  void set_has_subscribe_order_book_request();
  void set_has_subscribe_trades_request();
  void set_has_subscribe_info_request();
  void set_has_subscribe_last_price_request();
  void set_has_get_my_subscriptions();
  void set_has_ping();
  void set_has_ping_settings();
  inline bool has_payload() const;
  inline void clear_has_payload();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 8, 8,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MarketDataRequest& from_msg);
    union PayloadUnion {
      constexpr PayloadUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::tinkoff::pub::invest::api::contract::v1::SubscribeCandlesRequest* subscribe_candles_request_;
      ::tinkoff::pub::invest::api::contract::v1::SubscribeOrderBookRequest* subscribe_order_book_request_;
      ::tinkoff::pub::invest::api::contract::v1::SubscribeTradesRequest* subscribe_trades_request_;
      ::tinkoff::pub::invest::api::contract::v1::SubscribeInfoRequest* subscribe_info_request_;
      ::tinkoff::pub::invest::api::contract::v1::SubscribeLastPriceRequest* subscribe_last_price_request_;
      ::tinkoff::pub::invest::api::contract::v1::GetMySubscriptions* get_my_subscriptions_;
      ::tinkoff::pub::invest::api::contract::v1::PingRequest* ping_;
      ::tinkoff::pub::invest::api::contract::v1::PingDelaySettings* ping_settings_;
    } payload_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_marketdata_2eproto;
};
// -------------------------------------------------------------------

class GetTechAnalysisResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisResponse) */ {
 public:
  inline GetTechAnalysisResponse() : GetTechAnalysisResponse(nullptr) {}
  ~GetTechAnalysisResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetTechAnalysisResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetTechAnalysisResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetTechAnalysisResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetTechAnalysisResponse(const GetTechAnalysisResponse& from) : GetTechAnalysisResponse(nullptr, from) {}
  inline GetTechAnalysisResponse(GetTechAnalysisResponse&& from) noexcept
      : GetTechAnalysisResponse(nullptr, std::move(from)) {}
  inline GetTechAnalysisResponse& operator=(const GetTechAnalysisResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTechAnalysisResponse& operator=(GetTechAnalysisResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetTechAnalysisResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTechAnalysisResponse* internal_default_instance() {
    return reinterpret_cast<const GetTechAnalysisResponse*>(
        &_GetTechAnalysisResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 51;
  friend void swap(GetTechAnalysisResponse& a, GetTechAnalysisResponse& b) { a.Swap(&b); }
  inline void Swap(GetTechAnalysisResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTechAnalysisResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetTechAnalysisResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetTechAnalysisResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetTechAnalysisResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetTechAnalysisResponse& from) { GetTechAnalysisResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetTechAnalysisResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tinkoff.pub.invest.api.contract.v1.GetTechAnalysisResponse"; }

 protected:
  explicit GetTechAnalysisResponse(::google::protobuf::Arena* arena);
  GetTechAnalysisResponse(::google::protobuf::Arena* arena, const GetTechAnalysisResponse& from);
  GetTechAnalysisResponse(::google::protobuf::Arena* arena, GetTechAnalysisResponse&& from) noexcept
      : GetTechAnalysisResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using TechAnalysisItem = GetTechAnalysisResponse_TechAnalysisItem;

  // accessors -------------------------------------------------------
  enum : int {
    kTechnicalIndicatorsFieldNumber = 1,
  };
  // repeated .tinkoff.pub.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItem technical_indicators = 1;
  int technical_indicators_size() const;
  private:
  int _internal_technical_indicators_size() const;

  public:
  void clear_technical_indicators() ;
  ::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisResponse_TechAnalysisItem* mutable_technical_indicators(int index);
  ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisResponse_TechAnalysisItem>* mutable_technical_indicators();

  private:
  const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisResponse_TechAnalysisItem>& _internal_technical_indicators() const;
  ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisResponse_TechAnalysisItem>* _internal_mutable_technical_indicators();
  public:
  const ::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisResponse_TechAnalysisItem& technical_indicators(int index) const;
  ::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisResponse_TechAnalysisItem* add_technical_indicators();
  const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisResponse_TechAnalysisItem>& technical_indicators() const;
  // @@protoc_insertion_point(class_scope:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetTechAnalysisResponse& from_msg);
    ::google::protobuf::RepeatedPtrField< ::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisResponse_TechAnalysisItem > technical_indicators_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_marketdata_2eproto;
};
// -------------------------------------------------------------------

class GetTechAnalysisRequest final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisRequest) */ {
 public:
  inline GetTechAnalysisRequest() : GetTechAnalysisRequest(nullptr) {}
  ~GetTechAnalysisRequest() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetTechAnalysisRequest* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetTechAnalysisRequest));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetTechAnalysisRequest(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetTechAnalysisRequest(const GetTechAnalysisRequest& from) : GetTechAnalysisRequest(nullptr, from) {}
  inline GetTechAnalysisRequest(GetTechAnalysisRequest&& from) noexcept
      : GetTechAnalysisRequest(nullptr, std::move(from)) {}
  inline GetTechAnalysisRequest& operator=(const GetTechAnalysisRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetTechAnalysisRequest& operator=(GetTechAnalysisRequest&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetTechAnalysisRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetTechAnalysisRequest* internal_default_instance() {
    return reinterpret_cast<const GetTechAnalysisRequest*>(
        &_GetTechAnalysisRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 49;
  friend void swap(GetTechAnalysisRequest& a, GetTechAnalysisRequest& b) { a.Swap(&b); }
  inline void Swap(GetTechAnalysisRequest* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetTechAnalysisRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetTechAnalysisRequest* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetTechAnalysisRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetTechAnalysisRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetTechAnalysisRequest& from) { GetTechAnalysisRequest::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetTechAnalysisRequest* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tinkoff.pub.invest.api.contract.v1.GetTechAnalysisRequest"; }

 protected:
  explicit GetTechAnalysisRequest(::google::protobuf::Arena* arena);
  GetTechAnalysisRequest(::google::protobuf::Arena* arena, const GetTechAnalysisRequest& from);
  GetTechAnalysisRequest(::google::protobuf::Arena* arena, GetTechAnalysisRequest&& from) noexcept
      : GetTechAnalysisRequest(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------
  using Smoothing = GetTechAnalysisRequest_Smoothing;
  using Deviation = GetTechAnalysisRequest_Deviation;
  using IndicatorInterval = GetTechAnalysisRequest_IndicatorInterval;
  static constexpr IndicatorInterval INDICATOR_INTERVAL_UNSPECIFIED = GetTechAnalysisRequest_IndicatorInterval_INDICATOR_INTERVAL_UNSPECIFIED;
  static constexpr IndicatorInterval INDICATOR_INTERVAL_ONE_MINUTE = GetTechAnalysisRequest_IndicatorInterval_INDICATOR_INTERVAL_ONE_MINUTE;
  static constexpr IndicatorInterval INDICATOR_INTERVAL_FIVE_MINUTES = GetTechAnalysisRequest_IndicatorInterval_INDICATOR_INTERVAL_FIVE_MINUTES;
  static constexpr IndicatorInterval INDICATOR_INTERVAL_FIFTEEN_MINUTES = GetTechAnalysisRequest_IndicatorInterval_INDICATOR_INTERVAL_FIFTEEN_MINUTES;
  static constexpr IndicatorInterval INDICATOR_INTERVAL_ONE_HOUR = GetTechAnalysisRequest_IndicatorInterval_INDICATOR_INTERVAL_ONE_HOUR;
  static constexpr IndicatorInterval INDICATOR_INTERVAL_ONE_DAY = GetTechAnalysisRequest_IndicatorInterval_INDICATOR_INTERVAL_ONE_DAY;
  static constexpr IndicatorInterval INDICATOR_INTERVAL_2_MIN = GetTechAnalysisRequest_IndicatorInterval_INDICATOR_INTERVAL_2_MIN;
  static constexpr IndicatorInterval INDICATOR_INTERVAL_3_MIN = GetTechAnalysisRequest_IndicatorInterval_INDICATOR_INTERVAL_3_MIN;
  static constexpr IndicatorInterval INDICATOR_INTERVAL_10_MIN = GetTechAnalysisRequest_IndicatorInterval_INDICATOR_INTERVAL_10_MIN;
  static constexpr IndicatorInterval INDICATOR_INTERVAL_30_MIN = GetTechAnalysisRequest_IndicatorInterval_INDICATOR_INTERVAL_30_MIN;
  static constexpr IndicatorInterval INDICATOR_INTERVAL_2_HOUR = GetTechAnalysisRequest_IndicatorInterval_INDICATOR_INTERVAL_2_HOUR;
  static constexpr IndicatorInterval INDICATOR_INTERVAL_4_HOUR = GetTechAnalysisRequest_IndicatorInterval_INDICATOR_INTERVAL_4_HOUR;
  static constexpr IndicatorInterval INDICATOR_INTERVAL_WEEK = GetTechAnalysisRequest_IndicatorInterval_INDICATOR_INTERVAL_WEEK;
  static constexpr IndicatorInterval INDICATOR_INTERVAL_MONTH = GetTechAnalysisRequest_IndicatorInterval_INDICATOR_INTERVAL_MONTH;
  static inline bool IndicatorInterval_IsValid(int value) {
    return GetTechAnalysisRequest_IndicatorInterval_IsValid(value);
  }
  static constexpr IndicatorInterval IndicatorInterval_MIN = GetTechAnalysisRequest_IndicatorInterval_IndicatorInterval_MIN;
  static constexpr IndicatorInterval IndicatorInterval_MAX = GetTechAnalysisRequest_IndicatorInterval_IndicatorInterval_MAX;
  static constexpr int IndicatorInterval_ARRAYSIZE = GetTechAnalysisRequest_IndicatorInterval_IndicatorInterval_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* IndicatorInterval_descriptor() {
    return GetTechAnalysisRequest_IndicatorInterval_descriptor();
  }
  template <typename T>
  static inline const std::string& IndicatorInterval_Name(T value) {
    return GetTechAnalysisRequest_IndicatorInterval_Name(value);
  }
  static inline bool IndicatorInterval_Parse(absl::string_view name, IndicatorInterval* value) {
    return GetTechAnalysisRequest_IndicatorInterval_Parse(name, value);
  }
  using TypeOfPrice = GetTechAnalysisRequest_TypeOfPrice;
  static constexpr TypeOfPrice TYPE_OF_PRICE_UNSPECIFIED = GetTechAnalysisRequest_TypeOfPrice_TYPE_OF_PRICE_UNSPECIFIED;
  static constexpr TypeOfPrice TYPE_OF_PRICE_CLOSE = GetTechAnalysisRequest_TypeOfPrice_TYPE_OF_PRICE_CLOSE;
  static constexpr TypeOfPrice TYPE_OF_PRICE_OPEN = GetTechAnalysisRequest_TypeOfPrice_TYPE_OF_PRICE_OPEN;
  static constexpr TypeOfPrice TYPE_OF_PRICE_HIGH = GetTechAnalysisRequest_TypeOfPrice_TYPE_OF_PRICE_HIGH;
  static constexpr TypeOfPrice TYPE_OF_PRICE_LOW = GetTechAnalysisRequest_TypeOfPrice_TYPE_OF_PRICE_LOW;
  static constexpr TypeOfPrice TYPE_OF_PRICE_AVG = GetTechAnalysisRequest_TypeOfPrice_TYPE_OF_PRICE_AVG;
  static inline bool TypeOfPrice_IsValid(int value) {
    return GetTechAnalysisRequest_TypeOfPrice_IsValid(value);
  }
  static constexpr TypeOfPrice TypeOfPrice_MIN = GetTechAnalysisRequest_TypeOfPrice_TypeOfPrice_MIN;
  static constexpr TypeOfPrice TypeOfPrice_MAX = GetTechAnalysisRequest_TypeOfPrice_TypeOfPrice_MAX;
  static constexpr int TypeOfPrice_ARRAYSIZE = GetTechAnalysisRequest_TypeOfPrice_TypeOfPrice_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* TypeOfPrice_descriptor() {
    return GetTechAnalysisRequest_TypeOfPrice_descriptor();
  }
  template <typename T>
  static inline const std::string& TypeOfPrice_Name(T value) {
    return GetTechAnalysisRequest_TypeOfPrice_Name(value);
  }
  static inline bool TypeOfPrice_Parse(absl::string_view name, TypeOfPrice* value) {
    return GetTechAnalysisRequest_TypeOfPrice_Parse(name, value);
  }
  using IndicatorType = GetTechAnalysisRequest_IndicatorType;
  static constexpr IndicatorType INDICATOR_TYPE_UNSPECIFIED = GetTechAnalysisRequest_IndicatorType_INDICATOR_TYPE_UNSPECIFIED;
  static constexpr IndicatorType INDICATOR_TYPE_BB = GetTechAnalysisRequest_IndicatorType_INDICATOR_TYPE_BB;
  static constexpr IndicatorType INDICATOR_TYPE_EMA = GetTechAnalysisRequest_IndicatorType_INDICATOR_TYPE_EMA;
  static constexpr IndicatorType INDICATOR_TYPE_RSI = GetTechAnalysisRequest_IndicatorType_INDICATOR_TYPE_RSI;
  static constexpr IndicatorType INDICATOR_TYPE_MACD = GetTechAnalysisRequest_IndicatorType_INDICATOR_TYPE_MACD;
  static constexpr IndicatorType INDICATOR_TYPE_SMA = GetTechAnalysisRequest_IndicatorType_INDICATOR_TYPE_SMA;
  static inline bool IndicatorType_IsValid(int value) {
    return GetTechAnalysisRequest_IndicatorType_IsValid(value);
  }
  static constexpr IndicatorType IndicatorType_MIN = GetTechAnalysisRequest_IndicatorType_IndicatorType_MIN;
  static constexpr IndicatorType IndicatorType_MAX = GetTechAnalysisRequest_IndicatorType_IndicatorType_MAX;
  static constexpr int IndicatorType_ARRAYSIZE = GetTechAnalysisRequest_IndicatorType_IndicatorType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* IndicatorType_descriptor() {
    return GetTechAnalysisRequest_IndicatorType_descriptor();
  }
  template <typename T>
  static inline const std::string& IndicatorType_Name(T value) {
    return GetTechAnalysisRequest_IndicatorType_Name(value);
  }
  static inline bool IndicatorType_Parse(absl::string_view name, IndicatorType* value) {
    return GetTechAnalysisRequest_IndicatorType_Parse(name, value);
  }

  // accessors -------------------------------------------------------
  enum : int {
    kInstrumentUidFieldNumber = 2,
    kFromFieldNumber = 3,
    kToFieldNumber = 4,
    kDeviationFieldNumber = 8,
    kSmoothingFieldNumber = 9,
    kIndicatorTypeFieldNumber = 1,
    kIntervalFieldNumber = 5,
    kTypeOfPriceFieldNumber = 6,
    kLengthFieldNumber = 7,
  };
  // string instrument_uid = 2 [(.google.api.field_behavior) = REQUIRED];
  void clear_instrument_uid() ;
  const std::string& instrument_uid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_instrument_uid(Arg_&& arg, Args_... args);
  std::string* mutable_instrument_uid();
  PROTOBUF_NODISCARD std::string* release_instrument_uid();
  void set_allocated_instrument_uid(std::string* value);

  private:
  const std::string& _internal_instrument_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_uid(
      const std::string& value);
  std::string* _internal_mutable_instrument_uid();

  public:
  // .google.protobuf.Timestamp from = 3 [(.google.api.field_behavior) = REQUIRED];
  bool has_from() const;
  void clear_from() ;
  const ::google::protobuf::Timestamp& from() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_from();
  ::google::protobuf::Timestamp* mutable_from();
  void set_allocated_from(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_from(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_from();

  private:
  const ::google::protobuf::Timestamp& _internal_from() const;
  ::google::protobuf::Timestamp* _internal_mutable_from();

  public:
  // .google.protobuf.Timestamp to = 4 [(.google.api.field_behavior) = REQUIRED];
  bool has_to() const;
  void clear_to() ;
  const ::google::protobuf::Timestamp& to() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_to();
  ::google::protobuf::Timestamp* mutable_to();
  void set_allocated_to(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_to(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_to();

  private:
  const ::google::protobuf::Timestamp& _internal_to() const;
  ::google::protobuf::Timestamp* _internal_mutable_to();

  public:
  // .tinkoff.pub.invest.api.contract.v1.GetTechAnalysisRequest.Deviation deviation = 8;
  bool has_deviation() const;
  void clear_deviation() ;
  const ::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_Deviation& deviation() const;
  PROTOBUF_NODISCARD ::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_Deviation* release_deviation();
  ::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_Deviation* mutable_deviation();
  void set_allocated_deviation(::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_Deviation* value);
  void unsafe_arena_set_allocated_deviation(::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_Deviation* value);
  ::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_Deviation* unsafe_arena_release_deviation();

  private:
  const ::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_Deviation& _internal_deviation() const;
  ::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_Deviation* _internal_mutable_deviation();

  public:
  // .tinkoff.pub.invest.api.contract.v1.GetTechAnalysisRequest.Smoothing smoothing = 9;
  bool has_smoothing() const;
  void clear_smoothing() ;
  const ::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_Smoothing& smoothing() const;
  PROTOBUF_NODISCARD ::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_Smoothing* release_smoothing();
  ::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_Smoothing* mutable_smoothing();
  void set_allocated_smoothing(::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_Smoothing* value);
  void unsafe_arena_set_allocated_smoothing(::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_Smoothing* value);
  ::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_Smoothing* unsafe_arena_release_smoothing();

  private:
  const ::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_Smoothing& _internal_smoothing() const;
  ::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_Smoothing* _internal_mutable_smoothing();

  public:
  // .tinkoff.pub.invest.api.contract.v1.GetTechAnalysisRequest.IndicatorType indicator_type = 1 [(.google.api.field_behavior) = REQUIRED];
  void clear_indicator_type() ;
  ::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_IndicatorType indicator_type() const;
  void set_indicator_type(::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_IndicatorType value);

  private:
  ::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_IndicatorType _internal_indicator_type() const;
  void _internal_set_indicator_type(::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_IndicatorType value);

  public:
  // .tinkoff.pub.invest.api.contract.v1.GetTechAnalysisRequest.IndicatorInterval interval = 5 [(.google.api.field_behavior) = REQUIRED];
  void clear_interval() ;
  ::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_IndicatorInterval interval() const;
  void set_interval(::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_IndicatorInterval value);

  private:
  ::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_IndicatorInterval _internal_interval() const;
  void _internal_set_interval(::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_IndicatorInterval value);

  public:
  // .tinkoff.pub.invest.api.contract.v1.GetTechAnalysisRequest.TypeOfPrice type_of_price = 6 [(.google.api.field_behavior) = REQUIRED];
  void clear_type_of_price() ;
  ::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_TypeOfPrice type_of_price() const;
  void set_type_of_price(::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_TypeOfPrice value);

  private:
  ::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_TypeOfPrice _internal_type_of_price() const;
  void _internal_set_type_of_price(::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_TypeOfPrice value);

  public:
  // int32 length = 7;
  void clear_length() ;
  ::int32_t length() const;
  void set_length(::int32_t value);

  private:
  ::int32_t _internal_length() const;
  void _internal_set_length(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisRequest)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 9, 4,
      88, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetTechAnalysisRequest& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::internal::ArenaStringPtr instrument_uid_;
    ::google::protobuf::Timestamp* from_;
    ::google::protobuf::Timestamp* to_;
    ::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_Deviation* deviation_;
    ::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_Smoothing* smoothing_;
    int indicator_type_;
    int interval_;
    int type_of_price_;
    ::int32_t length_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_marketdata_2eproto;
};
// -------------------------------------------------------------------

class GetOrderBookResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.pub.invest.api.contract.v1.GetOrderBookResponse) */ {
 public:
  inline GetOrderBookResponse() : GetOrderBookResponse(nullptr) {}
  ~GetOrderBookResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetOrderBookResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetOrderBookResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetOrderBookResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetOrderBookResponse(const GetOrderBookResponse& from) : GetOrderBookResponse(nullptr, from) {}
  inline GetOrderBookResponse(GetOrderBookResponse&& from) noexcept
      : GetOrderBookResponse(nullptr, std::move(from)) {}
  inline GetOrderBookResponse& operator=(const GetOrderBookResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetOrderBookResponse& operator=(GetOrderBookResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetOrderBookResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetOrderBookResponse* internal_default_instance() {
    return reinterpret_cast<const GetOrderBookResponse*>(
        &_GetOrderBookResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 35;
  friend void swap(GetOrderBookResponse& a, GetOrderBookResponse& b) { a.Swap(&b); }
  inline void Swap(GetOrderBookResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetOrderBookResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetOrderBookResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetOrderBookResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetOrderBookResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetOrderBookResponse& from) { GetOrderBookResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetOrderBookResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tinkoff.pub.invest.api.contract.v1.GetOrderBookResponse"; }

 protected:
  explicit GetOrderBookResponse(::google::protobuf::Arena* arena);
  GetOrderBookResponse(::google::protobuf::Arena* arena, const GetOrderBookResponse& from);
  GetOrderBookResponse(::google::protobuf::Arena* arena, GetOrderBookResponse&& from) noexcept
      : GetOrderBookResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kBidsFieldNumber = 3,
    kAsksFieldNumber = 4,
    kFigiFieldNumber = 1,
    kInstrumentUidFieldNumber = 9,
    kLastPriceFieldNumber = 5,
    kClosePriceFieldNumber = 6,
    kLimitUpFieldNumber = 7,
    kLimitDownFieldNumber = 8,
    kLastPriceTsFieldNumber = 21,
    kClosePriceTsFieldNumber = 22,
    kOrderbookTsFieldNumber = 23,
    kDepthFieldNumber = 2,
  };
  // repeated .tinkoff.pub.invest.api.contract.v1.Order bids = 3;
  int bids_size() const;
  private:
  int _internal_bids_size() const;

  public:
  void clear_bids() ;
  ::tinkoff::pub::invest::api::contract::v1::Order* mutable_bids(int index);
  ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::Order>* mutable_bids();

  private:
  const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::Order>& _internal_bids() const;
  ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::Order>* _internal_mutable_bids();
  public:
  const ::tinkoff::pub::invest::api::contract::v1::Order& bids(int index) const;
  ::tinkoff::pub::invest::api::contract::v1::Order* add_bids();
  const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::Order>& bids() const;
  // repeated .tinkoff.pub.invest.api.contract.v1.Order asks = 4;
  int asks_size() const;
  private:
  int _internal_asks_size() const;

  public:
  void clear_asks() ;
  ::tinkoff::pub::invest::api::contract::v1::Order* mutable_asks(int index);
  ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::Order>* mutable_asks();

  private:
  const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::Order>& _internal_asks() const;
  ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::Order>* _internal_mutable_asks();
  public:
  const ::tinkoff::pub::invest::api::contract::v1::Order& asks(int index) const;
  ::tinkoff::pub::invest::api::contract::v1::Order* add_asks();
  const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::Order>& asks() const;
  // string figi = 1;
  void clear_figi() ;
  const std::string& figi() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_figi(Arg_&& arg, Args_... args);
  std::string* mutable_figi();
  PROTOBUF_NODISCARD std::string* release_figi();
  void set_allocated_figi(std::string* value);

  private:
  const std::string& _internal_figi() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_figi(
      const std::string& value);
  std::string* _internal_mutable_figi();

  public:
  // string instrument_uid = 9;
  void clear_instrument_uid() ;
  const std::string& instrument_uid() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_instrument_uid(Arg_&& arg, Args_... args);
  std::string* mutable_instrument_uid();
  PROTOBUF_NODISCARD std::string* release_instrument_uid();
  void set_allocated_instrument_uid(std::string* value);

  private:
  const std::string& _internal_instrument_uid() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_instrument_uid(
      const std::string& value);
  std::string* _internal_mutable_instrument_uid();

  public:
  // .tinkoff.pub.invest.api.contract.v1.Quotation last_price = 5;
  bool has_last_price() const;
  void clear_last_price() ;
  const ::tinkoff::pub::invest::api::contract::v1::Quotation& last_price() const;
  PROTOBUF_NODISCARD ::tinkoff::pub::invest::api::contract::v1::Quotation* release_last_price();
  ::tinkoff::pub::invest::api::contract::v1::Quotation* mutable_last_price();
  void set_allocated_last_price(::tinkoff::pub::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_last_price(::tinkoff::pub::invest::api::contract::v1::Quotation* value);
  ::tinkoff::pub::invest::api::contract::v1::Quotation* unsafe_arena_release_last_price();

  private:
  const ::tinkoff::pub::invest::api::contract::v1::Quotation& _internal_last_price() const;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* _internal_mutable_last_price();

  public:
  // .tinkoff.pub.invest.api.contract.v1.Quotation close_price = 6;
  bool has_close_price() const;
  void clear_close_price() ;
  const ::tinkoff::pub::invest::api::contract::v1::Quotation& close_price() const;
  PROTOBUF_NODISCARD ::tinkoff::pub::invest::api::contract::v1::Quotation* release_close_price();
  ::tinkoff::pub::invest::api::contract::v1::Quotation* mutable_close_price();
  void set_allocated_close_price(::tinkoff::pub::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_close_price(::tinkoff::pub::invest::api::contract::v1::Quotation* value);
  ::tinkoff::pub::invest::api::contract::v1::Quotation* unsafe_arena_release_close_price();

  private:
  const ::tinkoff::pub::invest::api::contract::v1::Quotation& _internal_close_price() const;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* _internal_mutable_close_price();

  public:
  // .tinkoff.pub.invest.api.contract.v1.Quotation limit_up = 7;
  bool has_limit_up() const;
  void clear_limit_up() ;
  const ::tinkoff::pub::invest::api::contract::v1::Quotation& limit_up() const;
  PROTOBUF_NODISCARD ::tinkoff::pub::invest::api::contract::v1::Quotation* release_limit_up();
  ::tinkoff::pub::invest::api::contract::v1::Quotation* mutable_limit_up();
  void set_allocated_limit_up(::tinkoff::pub::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_limit_up(::tinkoff::pub::invest::api::contract::v1::Quotation* value);
  ::tinkoff::pub::invest::api::contract::v1::Quotation* unsafe_arena_release_limit_up();

  private:
  const ::tinkoff::pub::invest::api::contract::v1::Quotation& _internal_limit_up() const;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* _internal_mutable_limit_up();

  public:
  // .tinkoff.pub.invest.api.contract.v1.Quotation limit_down = 8;
  bool has_limit_down() const;
  void clear_limit_down() ;
  const ::tinkoff::pub::invest::api::contract::v1::Quotation& limit_down() const;
  PROTOBUF_NODISCARD ::tinkoff::pub::invest::api::contract::v1::Quotation* release_limit_down();
  ::tinkoff::pub::invest::api::contract::v1::Quotation* mutable_limit_down();
  void set_allocated_limit_down(::tinkoff::pub::invest::api::contract::v1::Quotation* value);
  void unsafe_arena_set_allocated_limit_down(::tinkoff::pub::invest::api::contract::v1::Quotation* value);
  ::tinkoff::pub::invest::api::contract::v1::Quotation* unsafe_arena_release_limit_down();

  private:
  const ::tinkoff::pub::invest::api::contract::v1::Quotation& _internal_limit_down() const;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* _internal_mutable_limit_down();

  public:
  // .google.protobuf.Timestamp last_price_ts = 21;
  bool has_last_price_ts() const;
  void clear_last_price_ts() ;
  const ::google::protobuf::Timestamp& last_price_ts() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_last_price_ts();
  ::google::protobuf::Timestamp* mutable_last_price_ts();
  void set_allocated_last_price_ts(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_last_price_ts(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_last_price_ts();

  private:
  const ::google::protobuf::Timestamp& _internal_last_price_ts() const;
  ::google::protobuf::Timestamp* _internal_mutable_last_price_ts();

  public:
  // .google.protobuf.Timestamp close_price_ts = 22;
  bool has_close_price_ts() const;
  void clear_close_price_ts() ;
  const ::google::protobuf::Timestamp& close_price_ts() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_close_price_ts();
  ::google::protobuf::Timestamp* mutable_close_price_ts();
  void set_allocated_close_price_ts(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_close_price_ts(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_close_price_ts();

  private:
  const ::google::protobuf::Timestamp& _internal_close_price_ts() const;
  ::google::protobuf::Timestamp* _internal_mutable_close_price_ts();

  public:
  // .google.protobuf.Timestamp orderbook_ts = 23;
  bool has_orderbook_ts() const;
  void clear_orderbook_ts() ;
  const ::google::protobuf::Timestamp& orderbook_ts() const;
  PROTOBUF_NODISCARD ::google::protobuf::Timestamp* release_orderbook_ts();
  ::google::protobuf::Timestamp* mutable_orderbook_ts();
  void set_allocated_orderbook_ts(::google::protobuf::Timestamp* value);
  void unsafe_arena_set_allocated_orderbook_ts(::google::protobuf::Timestamp* value);
  ::google::protobuf::Timestamp* unsafe_arena_release_orderbook_ts();

  private:
  const ::google::protobuf::Timestamp& _internal_orderbook_ts() const;
  ::google::protobuf::Timestamp* _internal_mutable_orderbook_ts();

  public:
  // int32 depth = 2;
  void clear_depth() ;
  ::int32_t depth() const;
  void set_depth(::int32_t value);

  private:
  ::int32_t _internal_depth() const;
  void _internal_set_depth(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:tinkoff.pub.invest.api.contract.v1.GetOrderBookResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      4, 12, 9,
      90, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetOrderBookResponse& from_msg);
    ::google::protobuf::internal::HasBits<1> _has_bits_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::google::protobuf::RepeatedPtrField< ::tinkoff::pub::invest::api::contract::v1::Order > bids_;
    ::google::protobuf::RepeatedPtrField< ::tinkoff::pub::invest::api::contract::v1::Order > asks_;
    ::google::protobuf::internal::ArenaStringPtr figi_;
    ::google::protobuf::internal::ArenaStringPtr instrument_uid_;
    ::tinkoff::pub::invest::api::contract::v1::Quotation* last_price_;
    ::tinkoff::pub::invest::api::contract::v1::Quotation* close_price_;
    ::tinkoff::pub::invest::api::contract::v1::Quotation* limit_up_;
    ::tinkoff::pub::invest::api::contract::v1::Quotation* limit_down_;
    ::google::protobuf::Timestamp* last_price_ts_;
    ::google::protobuf::Timestamp* close_price_ts_;
    ::google::protobuf::Timestamp* orderbook_ts_;
    ::int32_t depth_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_marketdata_2eproto;
};
// -------------------------------------------------------------------

class GetLastTradesResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.pub.invest.api.contract.v1.GetLastTradesResponse) */ {
 public:
  inline GetLastTradesResponse() : GetLastTradesResponse(nullptr) {}
  ~GetLastTradesResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetLastTradesResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetLastTradesResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetLastTradesResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetLastTradesResponse(const GetLastTradesResponse& from) : GetLastTradesResponse(nullptr, from) {}
  inline GetLastTradesResponse(GetLastTradesResponse&& from) noexcept
      : GetLastTradesResponse(nullptr, std::move(from)) {}
  inline GetLastTradesResponse& operator=(const GetLastTradesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLastTradesResponse& operator=(GetLastTradesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetLastTradesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetLastTradesResponse* internal_default_instance() {
    return reinterpret_cast<const GetLastTradesResponse*>(
        &_GetLastTradesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 41;
  friend void swap(GetLastTradesResponse& a, GetLastTradesResponse& b) { a.Swap(&b); }
  inline void Swap(GetLastTradesResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLastTradesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetLastTradesResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetLastTradesResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetLastTradesResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetLastTradesResponse& from) { GetLastTradesResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetLastTradesResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tinkoff.pub.invest.api.contract.v1.GetLastTradesResponse"; }

 protected:
  explicit GetLastTradesResponse(::google::protobuf::Arena* arena);
  GetLastTradesResponse(::google::protobuf::Arena* arena, const GetLastTradesResponse& from);
  GetLastTradesResponse(::google::protobuf::Arena* arena, GetLastTradesResponse&& from) noexcept
      : GetLastTradesResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kTradesFieldNumber = 1,
  };
  // repeated .tinkoff.pub.invest.api.contract.v1.Trade trades = 1;
  int trades_size() const;
  private:
  int _internal_trades_size() const;

  public:
  void clear_trades() ;
  ::tinkoff::pub::invest::api::contract::v1::Trade* mutable_trades(int index);
  ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::Trade>* mutable_trades();

  private:
  const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::Trade>& _internal_trades() const;
  ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::Trade>* _internal_mutable_trades();
  public:
  const ::tinkoff::pub::invest::api::contract::v1::Trade& trades(int index) const;
  ::tinkoff::pub::invest::api::contract::v1::Trade* add_trades();
  const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::Trade>& trades() const;
  // @@protoc_insertion_point(class_scope:tinkoff.pub.invest.api.contract.v1.GetLastTradesResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetLastTradesResponse& from_msg);
    ::google::protobuf::RepeatedPtrField< ::tinkoff::pub::invest::api::contract::v1::Trade > trades_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_marketdata_2eproto;
};
// -------------------------------------------------------------------

class GetLastPricesResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.pub.invest.api.contract.v1.GetLastPricesResponse) */ {
 public:
  inline GetLastPricesResponse() : GetLastPricesResponse(nullptr) {}
  ~GetLastPricesResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetLastPricesResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetLastPricesResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetLastPricesResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetLastPricesResponse(const GetLastPricesResponse& from) : GetLastPricesResponse(nullptr, from) {}
  inline GetLastPricesResponse(GetLastPricesResponse&& from) noexcept
      : GetLastPricesResponse(nullptr, std::move(from)) {}
  inline GetLastPricesResponse& operator=(const GetLastPricesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetLastPricesResponse& operator=(GetLastPricesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetLastPricesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetLastPricesResponse* internal_default_instance() {
    return reinterpret_cast<const GetLastPricesResponse*>(
        &_GetLastPricesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 32;
  friend void swap(GetLastPricesResponse& a, GetLastPricesResponse& b) { a.Swap(&b); }
  inline void Swap(GetLastPricesResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetLastPricesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetLastPricesResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetLastPricesResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetLastPricesResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetLastPricesResponse& from) { GetLastPricesResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetLastPricesResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tinkoff.pub.invest.api.contract.v1.GetLastPricesResponse"; }

 protected:
  explicit GetLastPricesResponse(::google::protobuf::Arena* arena);
  GetLastPricesResponse(::google::protobuf::Arena* arena, const GetLastPricesResponse& from);
  GetLastPricesResponse(::google::protobuf::Arena* arena, GetLastPricesResponse&& from) noexcept
      : GetLastPricesResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kLastPricesFieldNumber = 1,
  };
  // repeated .tinkoff.pub.invest.api.contract.v1.LastPrice last_prices = 1;
  int last_prices_size() const;
  private:
  int _internal_last_prices_size() const;

  public:
  void clear_last_prices() ;
  ::tinkoff::pub::invest::api::contract::v1::LastPrice* mutable_last_prices(int index);
  ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::LastPrice>* mutable_last_prices();

  private:
  const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::LastPrice>& _internal_last_prices() const;
  ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::LastPrice>* _internal_mutable_last_prices();
  public:
  const ::tinkoff::pub::invest::api::contract::v1::LastPrice& last_prices(int index) const;
  ::tinkoff::pub::invest::api::contract::v1::LastPrice* add_last_prices();
  const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::LastPrice>& last_prices() const;
  // @@protoc_insertion_point(class_scope:tinkoff.pub.invest.api.contract.v1.GetLastPricesResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetLastPricesResponse& from_msg);
    ::google::protobuf::RepeatedPtrField< ::tinkoff::pub::invest::api::contract::v1::LastPrice > last_prices_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_marketdata_2eproto;
};
// -------------------------------------------------------------------

class GetClosePricesResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.pub.invest.api.contract.v1.GetClosePricesResponse) */ {
 public:
  inline GetClosePricesResponse() : GetClosePricesResponse(nullptr) {}
  ~GetClosePricesResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetClosePricesResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetClosePricesResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetClosePricesResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetClosePricesResponse(const GetClosePricesResponse& from) : GetClosePricesResponse(nullptr, from) {}
  inline GetClosePricesResponse(GetClosePricesResponse&& from) noexcept
      : GetClosePricesResponse(nullptr, std::move(from)) {}
  inline GetClosePricesResponse& operator=(const GetClosePricesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetClosePricesResponse& operator=(GetClosePricesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetClosePricesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetClosePricesResponse* internal_default_instance() {
    return reinterpret_cast<const GetClosePricesResponse*>(
        &_GetClosePricesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 45;
  friend void swap(GetClosePricesResponse& a, GetClosePricesResponse& b) { a.Swap(&b); }
  inline void Swap(GetClosePricesResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetClosePricesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetClosePricesResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetClosePricesResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetClosePricesResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetClosePricesResponse& from) { GetClosePricesResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetClosePricesResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tinkoff.pub.invest.api.contract.v1.GetClosePricesResponse"; }

 protected:
  explicit GetClosePricesResponse(::google::protobuf::Arena* arena);
  GetClosePricesResponse(::google::protobuf::Arena* arena, const GetClosePricesResponse& from);
  GetClosePricesResponse(::google::protobuf::Arena* arena, GetClosePricesResponse&& from) noexcept
      : GetClosePricesResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kClosePricesFieldNumber = 1,
  };
  // repeated .tinkoff.pub.invest.api.contract.v1.InstrumentClosePriceResponse close_prices = 1;
  int close_prices_size() const;
  private:
  int _internal_close_prices_size() const;

  public:
  void clear_close_prices() ;
  ::tinkoff::pub::invest::api::contract::v1::InstrumentClosePriceResponse* mutable_close_prices(int index);
  ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::InstrumentClosePriceResponse>* mutable_close_prices();

  private:
  const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::InstrumentClosePriceResponse>& _internal_close_prices() const;
  ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::InstrumentClosePriceResponse>* _internal_mutable_close_prices();
  public:
  const ::tinkoff::pub::invest::api::contract::v1::InstrumentClosePriceResponse& close_prices(int index) const;
  ::tinkoff::pub::invest::api::contract::v1::InstrumentClosePriceResponse* add_close_prices();
  const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::InstrumentClosePriceResponse>& close_prices() const;
  // @@protoc_insertion_point(class_scope:tinkoff.pub.invest.api.contract.v1.GetClosePricesResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetClosePricesResponse& from_msg);
    ::google::protobuf::RepeatedPtrField< ::tinkoff::pub::invest::api::contract::v1::InstrumentClosePriceResponse > close_prices_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_marketdata_2eproto;
};
// -------------------------------------------------------------------

class GetCandlesResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.pub.invest.api.contract.v1.GetCandlesResponse) */ {
 public:
  inline GetCandlesResponse() : GetCandlesResponse(nullptr) {}
  ~GetCandlesResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(GetCandlesResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(GetCandlesResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR GetCandlesResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline GetCandlesResponse(const GetCandlesResponse& from) : GetCandlesResponse(nullptr, from) {}
  inline GetCandlesResponse(GetCandlesResponse&& from) noexcept
      : GetCandlesResponse(nullptr, std::move(from)) {}
  inline GetCandlesResponse& operator=(const GetCandlesResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline GetCandlesResponse& operator=(GetCandlesResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const GetCandlesResponse& default_instance() {
    return *internal_default_instance();
  }
  static inline const GetCandlesResponse* internal_default_instance() {
    return reinterpret_cast<const GetCandlesResponse*>(
        &_GetCandlesResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 29;
  friend void swap(GetCandlesResponse& a, GetCandlesResponse& b) { a.Swap(&b); }
  inline void Swap(GetCandlesResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GetCandlesResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  GetCandlesResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<GetCandlesResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const GetCandlesResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const GetCandlesResponse& from) { GetCandlesResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(GetCandlesResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tinkoff.pub.invest.api.contract.v1.GetCandlesResponse"; }

 protected:
  explicit GetCandlesResponse(::google::protobuf::Arena* arena);
  GetCandlesResponse(::google::protobuf::Arena* arena, const GetCandlesResponse& from);
  GetCandlesResponse(::google::protobuf::Arena* arena, GetCandlesResponse&& from) noexcept
      : GetCandlesResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kCandlesFieldNumber = 1,
  };
  // repeated .tinkoff.pub.invest.api.contract.v1.HistoricCandle candles = 1;
  int candles_size() const;
  private:
  int _internal_candles_size() const;

  public:
  void clear_candles() ;
  ::tinkoff::pub::invest::api::contract::v1::HistoricCandle* mutable_candles(int index);
  ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::HistoricCandle>* mutable_candles();

  private:
  const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::HistoricCandle>& _internal_candles() const;
  ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::HistoricCandle>* _internal_mutable_candles();
  public:
  const ::tinkoff::pub::invest::api::contract::v1::HistoricCandle& candles(int index) const;
  ::tinkoff::pub::invest::api::contract::v1::HistoricCandle* add_candles();
  const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::HistoricCandle>& candles() const;
  // @@protoc_insertion_point(class_scope:tinkoff.pub.invest.api.contract.v1.GetCandlesResponse)
 private:
  class _Internal;
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 1,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const GetCandlesResponse& from_msg);
    ::google::protobuf::RepeatedPtrField< ::tinkoff::pub::invest::api::contract::v1::HistoricCandle > candles_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_marketdata_2eproto;
};
// -------------------------------------------------------------------

class MarketDataResponse final : public ::google::protobuf::Message
/* @@protoc_insertion_point(class_definition:tinkoff.pub.invest.api.contract.v1.MarketDataResponse) */ {
 public:
  inline MarketDataResponse() : MarketDataResponse(nullptr) {}
  ~MarketDataResponse() PROTOBUF_FINAL;

#if defined(PROTOBUF_CUSTOM_VTABLE)
  void operator delete(MarketDataResponse* msg, std::destroying_delete_t) {
    SharedDtor(*msg);
    ::google::protobuf::internal::SizedDelete(msg, sizeof(MarketDataResponse));
  }
#endif

  template <typename = void>
  explicit PROTOBUF_CONSTEXPR MarketDataResponse(
      ::google::protobuf::internal::ConstantInitialized);

  inline MarketDataResponse(const MarketDataResponse& from) : MarketDataResponse(nullptr, from) {}
  inline MarketDataResponse(MarketDataResponse&& from) noexcept
      : MarketDataResponse(nullptr, std::move(from)) {}
  inline MarketDataResponse& operator=(const MarketDataResponse& from) {
    CopyFrom(from);
    return *this;
  }
  inline MarketDataResponse& operator=(MarketDataResponse&& from) noexcept {
    if (this == &from) return *this;
    if (::google::protobuf::internal::CanMoveWithInternalSwap(GetArena(), from.GetArena())) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MarketDataResponse& default_instance() {
    return *internal_default_instance();
  }
  enum PayloadCase {
    kSubscribeCandlesResponse = 1,
    kSubscribeOrderBookResponse = 2,
    kSubscribeTradesResponse = 3,
    kSubscribeInfoResponse = 4,
    kCandle = 5,
    kTrade = 6,
    kOrderbook = 7,
    kTradingStatus = 8,
    kPing = 9,
    kSubscribeLastPriceResponse = 10,
    kLastPrice = 11,
    PAYLOAD_NOT_SET = 0,
  };
  static inline const MarketDataResponse* internal_default_instance() {
    return reinterpret_cast<const MarketDataResponse*>(
        &_MarketDataResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages = 2;
  friend void swap(MarketDataResponse& a, MarketDataResponse& b) { a.Swap(&b); }
  inline void Swap(MarketDataResponse* other) {
    if (other == this) return;
    if (::google::protobuf::internal::CanUseInternalSwap(GetArena(), other->GetArena())) {
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MarketDataResponse* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MarketDataResponse* New(::google::protobuf::Arena* arena = nullptr) const {
    return ::google::protobuf::Message::DefaultConstruct<MarketDataResponse>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MarketDataResponse& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom(const MarketDataResponse& from) { MarketDataResponse::MergeImpl(*this, from); }

  private:
  static void MergeImpl(
      ::google::protobuf::MessageLite& to_msg,
      const ::google::protobuf::MessageLite& from_msg);

  public:
  bool IsInitialized() const {
    return true;
  }
  ABSL_ATTRIBUTE_REINITIALIZES void Clear() PROTOBUF_FINAL;
  #if defined(PROTOBUF_CUSTOM_VTABLE)
  private:
  static ::size_t ByteSizeLong(const ::google::protobuf::MessageLite& msg);
  static ::uint8_t* _InternalSerialize(
      const MessageLite& msg, ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream);

  public:
  ::size_t ByteSizeLong() const { return ByteSizeLong(*this); }
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const {
    return _InternalSerialize(*this, target, stream);
  }
  #else   // PROTOBUF_CUSTOM_VTABLE
  ::size_t ByteSizeLong() const final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target,
      ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  #endif  // PROTOBUF_CUSTOM_VTABLE
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  void SharedCtor(::google::protobuf::Arena* arena);
  static void SharedDtor(MessageLite& self);
  void InternalSwap(MarketDataResponse* other);
 private:
  template <typename T>
  friend ::absl::string_view(
      ::google::protobuf::internal::GetAnyMessageName)();
  static ::absl::string_view FullMessageName() { return "tinkoff.pub.invest.api.contract.v1.MarketDataResponse"; }

 protected:
  explicit MarketDataResponse(::google::protobuf::Arena* arena);
  MarketDataResponse(::google::protobuf::Arena* arena, const MarketDataResponse& from);
  MarketDataResponse(::google::protobuf::Arena* arena, MarketDataResponse&& from) noexcept
      : MarketDataResponse(arena) {
    *this = ::std::move(from);
  }
  const ::google::protobuf::internal::ClassData* GetClassData() const PROTOBUF_FINAL;
  static void* PlacementNew_(const void*, void* mem,
                             ::google::protobuf::Arena* arena);
  static constexpr auto InternalNewImpl_();
  static const ::google::protobuf::internal::ClassDataFull _class_data_;

 public:
  ::google::protobuf::Metadata GetMetadata() const;
  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------
  enum : int {
    kSubscribeCandlesResponseFieldNumber = 1,
    kSubscribeOrderBookResponseFieldNumber = 2,
    kSubscribeTradesResponseFieldNumber = 3,
    kSubscribeInfoResponseFieldNumber = 4,
    kCandleFieldNumber = 5,
    kTradeFieldNumber = 6,
    kOrderbookFieldNumber = 7,
    kTradingStatusFieldNumber = 8,
    kPingFieldNumber = 9,
    kSubscribeLastPriceResponseFieldNumber = 10,
    kLastPriceFieldNumber = 11,
  };
  // .tinkoff.pub.invest.api.contract.v1.SubscribeCandlesResponse subscribe_candles_response = 1;
  bool has_subscribe_candles_response() const;
  private:
  bool _internal_has_subscribe_candles_response() const;

  public:
  void clear_subscribe_candles_response() ;
  const ::tinkoff::pub::invest::api::contract::v1::SubscribeCandlesResponse& subscribe_candles_response() const;
  PROTOBUF_NODISCARD ::tinkoff::pub::invest::api::contract::v1::SubscribeCandlesResponse* release_subscribe_candles_response();
  ::tinkoff::pub::invest::api::contract::v1::SubscribeCandlesResponse* mutable_subscribe_candles_response();
  void set_allocated_subscribe_candles_response(::tinkoff::pub::invest::api::contract::v1::SubscribeCandlesResponse* value);
  void unsafe_arena_set_allocated_subscribe_candles_response(::tinkoff::pub::invest::api::contract::v1::SubscribeCandlesResponse* value);
  ::tinkoff::pub::invest::api::contract::v1::SubscribeCandlesResponse* unsafe_arena_release_subscribe_candles_response();

  private:
  const ::tinkoff::pub::invest::api::contract::v1::SubscribeCandlesResponse& _internal_subscribe_candles_response() const;
  ::tinkoff::pub::invest::api::contract::v1::SubscribeCandlesResponse* _internal_mutable_subscribe_candles_response();

  public:
  // .tinkoff.pub.invest.api.contract.v1.SubscribeOrderBookResponse subscribe_order_book_response = 2;
  bool has_subscribe_order_book_response() const;
  private:
  bool _internal_has_subscribe_order_book_response() const;

  public:
  void clear_subscribe_order_book_response() ;
  const ::tinkoff::pub::invest::api::contract::v1::SubscribeOrderBookResponse& subscribe_order_book_response() const;
  PROTOBUF_NODISCARD ::tinkoff::pub::invest::api::contract::v1::SubscribeOrderBookResponse* release_subscribe_order_book_response();
  ::tinkoff::pub::invest::api::contract::v1::SubscribeOrderBookResponse* mutable_subscribe_order_book_response();
  void set_allocated_subscribe_order_book_response(::tinkoff::pub::invest::api::contract::v1::SubscribeOrderBookResponse* value);
  void unsafe_arena_set_allocated_subscribe_order_book_response(::tinkoff::pub::invest::api::contract::v1::SubscribeOrderBookResponse* value);
  ::tinkoff::pub::invest::api::contract::v1::SubscribeOrderBookResponse* unsafe_arena_release_subscribe_order_book_response();

  private:
  const ::tinkoff::pub::invest::api::contract::v1::SubscribeOrderBookResponse& _internal_subscribe_order_book_response() const;
  ::tinkoff::pub::invest::api::contract::v1::SubscribeOrderBookResponse* _internal_mutable_subscribe_order_book_response();

  public:
  // .tinkoff.pub.invest.api.contract.v1.SubscribeTradesResponse subscribe_trades_response = 3;
  bool has_subscribe_trades_response() const;
  private:
  bool _internal_has_subscribe_trades_response() const;

  public:
  void clear_subscribe_trades_response() ;
  const ::tinkoff::pub::invest::api::contract::v1::SubscribeTradesResponse& subscribe_trades_response() const;
  PROTOBUF_NODISCARD ::tinkoff::pub::invest::api::contract::v1::SubscribeTradesResponse* release_subscribe_trades_response();
  ::tinkoff::pub::invest::api::contract::v1::SubscribeTradesResponse* mutable_subscribe_trades_response();
  void set_allocated_subscribe_trades_response(::tinkoff::pub::invest::api::contract::v1::SubscribeTradesResponse* value);
  void unsafe_arena_set_allocated_subscribe_trades_response(::tinkoff::pub::invest::api::contract::v1::SubscribeTradesResponse* value);
  ::tinkoff::pub::invest::api::contract::v1::SubscribeTradesResponse* unsafe_arena_release_subscribe_trades_response();

  private:
  const ::tinkoff::pub::invest::api::contract::v1::SubscribeTradesResponse& _internal_subscribe_trades_response() const;
  ::tinkoff::pub::invest::api::contract::v1::SubscribeTradesResponse* _internal_mutable_subscribe_trades_response();

  public:
  // .tinkoff.pub.invest.api.contract.v1.SubscribeInfoResponse subscribe_info_response = 4;
  bool has_subscribe_info_response() const;
  private:
  bool _internal_has_subscribe_info_response() const;

  public:
  void clear_subscribe_info_response() ;
  const ::tinkoff::pub::invest::api::contract::v1::SubscribeInfoResponse& subscribe_info_response() const;
  PROTOBUF_NODISCARD ::tinkoff::pub::invest::api::contract::v1::SubscribeInfoResponse* release_subscribe_info_response();
  ::tinkoff::pub::invest::api::contract::v1::SubscribeInfoResponse* mutable_subscribe_info_response();
  void set_allocated_subscribe_info_response(::tinkoff::pub::invest::api::contract::v1::SubscribeInfoResponse* value);
  void unsafe_arena_set_allocated_subscribe_info_response(::tinkoff::pub::invest::api::contract::v1::SubscribeInfoResponse* value);
  ::tinkoff::pub::invest::api::contract::v1::SubscribeInfoResponse* unsafe_arena_release_subscribe_info_response();

  private:
  const ::tinkoff::pub::invest::api::contract::v1::SubscribeInfoResponse& _internal_subscribe_info_response() const;
  ::tinkoff::pub::invest::api::contract::v1::SubscribeInfoResponse* _internal_mutable_subscribe_info_response();

  public:
  // .tinkoff.pub.invest.api.contract.v1.Candle candle = 5;
  bool has_candle() const;
  private:
  bool _internal_has_candle() const;

  public:
  void clear_candle() ;
  const ::tinkoff::pub::invest::api::contract::v1::Candle& candle() const;
  PROTOBUF_NODISCARD ::tinkoff::pub::invest::api::contract::v1::Candle* release_candle();
  ::tinkoff::pub::invest::api::contract::v1::Candle* mutable_candle();
  void set_allocated_candle(::tinkoff::pub::invest::api::contract::v1::Candle* value);
  void unsafe_arena_set_allocated_candle(::tinkoff::pub::invest::api::contract::v1::Candle* value);
  ::tinkoff::pub::invest::api::contract::v1::Candle* unsafe_arena_release_candle();

  private:
  const ::tinkoff::pub::invest::api::contract::v1::Candle& _internal_candle() const;
  ::tinkoff::pub::invest::api::contract::v1::Candle* _internal_mutable_candle();

  public:
  // .tinkoff.pub.invest.api.contract.v1.Trade trade = 6;
  bool has_trade() const;
  private:
  bool _internal_has_trade() const;

  public:
  void clear_trade() ;
  const ::tinkoff::pub::invest::api::contract::v1::Trade& trade() const;
  PROTOBUF_NODISCARD ::tinkoff::pub::invest::api::contract::v1::Trade* release_trade();
  ::tinkoff::pub::invest::api::contract::v1::Trade* mutable_trade();
  void set_allocated_trade(::tinkoff::pub::invest::api::contract::v1::Trade* value);
  void unsafe_arena_set_allocated_trade(::tinkoff::pub::invest::api::contract::v1::Trade* value);
  ::tinkoff::pub::invest::api::contract::v1::Trade* unsafe_arena_release_trade();

  private:
  const ::tinkoff::pub::invest::api::contract::v1::Trade& _internal_trade() const;
  ::tinkoff::pub::invest::api::contract::v1::Trade* _internal_mutable_trade();

  public:
  // .tinkoff.pub.invest.api.contract.v1.OrderBook orderbook = 7;
  bool has_orderbook() const;
  private:
  bool _internal_has_orderbook() const;

  public:
  void clear_orderbook() ;
  const ::tinkoff::pub::invest::api::contract::v1::OrderBook& orderbook() const;
  PROTOBUF_NODISCARD ::tinkoff::pub::invest::api::contract::v1::OrderBook* release_orderbook();
  ::tinkoff::pub::invest::api::contract::v1::OrderBook* mutable_orderbook();
  void set_allocated_orderbook(::tinkoff::pub::invest::api::contract::v1::OrderBook* value);
  void unsafe_arena_set_allocated_orderbook(::tinkoff::pub::invest::api::contract::v1::OrderBook* value);
  ::tinkoff::pub::invest::api::contract::v1::OrderBook* unsafe_arena_release_orderbook();

  private:
  const ::tinkoff::pub::invest::api::contract::v1::OrderBook& _internal_orderbook() const;
  ::tinkoff::pub::invest::api::contract::v1::OrderBook* _internal_mutable_orderbook();

  public:
  // .tinkoff.pub.invest.api.contract.v1.TradingStatus trading_status = 8;
  bool has_trading_status() const;
  private:
  bool _internal_has_trading_status() const;

  public:
  void clear_trading_status() ;
  const ::tinkoff::pub::invest::api::contract::v1::TradingStatus& trading_status() const;
  PROTOBUF_NODISCARD ::tinkoff::pub::invest::api::contract::v1::TradingStatus* release_trading_status();
  ::tinkoff::pub::invest::api::contract::v1::TradingStatus* mutable_trading_status();
  void set_allocated_trading_status(::tinkoff::pub::invest::api::contract::v1::TradingStatus* value);
  void unsafe_arena_set_allocated_trading_status(::tinkoff::pub::invest::api::contract::v1::TradingStatus* value);
  ::tinkoff::pub::invest::api::contract::v1::TradingStatus* unsafe_arena_release_trading_status();

  private:
  const ::tinkoff::pub::invest::api::contract::v1::TradingStatus& _internal_trading_status() const;
  ::tinkoff::pub::invest::api::contract::v1::TradingStatus* _internal_mutable_trading_status();

  public:
  // .tinkoff.pub.invest.api.contract.v1.Ping ping = 9;
  bool has_ping() const;
  private:
  bool _internal_has_ping() const;

  public:
  void clear_ping() ;
  const ::tinkoff::pub::invest::api::contract::v1::Ping& ping() const;
  PROTOBUF_NODISCARD ::tinkoff::pub::invest::api::contract::v1::Ping* release_ping();
  ::tinkoff::pub::invest::api::contract::v1::Ping* mutable_ping();
  void set_allocated_ping(::tinkoff::pub::invest::api::contract::v1::Ping* value);
  void unsafe_arena_set_allocated_ping(::tinkoff::pub::invest::api::contract::v1::Ping* value);
  ::tinkoff::pub::invest::api::contract::v1::Ping* unsafe_arena_release_ping();

  private:
  const ::tinkoff::pub::invest::api::contract::v1::Ping& _internal_ping() const;
  ::tinkoff::pub::invest::api::contract::v1::Ping* _internal_mutable_ping();

  public:
  // .tinkoff.pub.invest.api.contract.v1.SubscribeLastPriceResponse subscribe_last_price_response = 10;
  bool has_subscribe_last_price_response() const;
  private:
  bool _internal_has_subscribe_last_price_response() const;

  public:
  void clear_subscribe_last_price_response() ;
  const ::tinkoff::pub::invest::api::contract::v1::SubscribeLastPriceResponse& subscribe_last_price_response() const;
  PROTOBUF_NODISCARD ::tinkoff::pub::invest::api::contract::v1::SubscribeLastPriceResponse* release_subscribe_last_price_response();
  ::tinkoff::pub::invest::api::contract::v1::SubscribeLastPriceResponse* mutable_subscribe_last_price_response();
  void set_allocated_subscribe_last_price_response(::tinkoff::pub::invest::api::contract::v1::SubscribeLastPriceResponse* value);
  void unsafe_arena_set_allocated_subscribe_last_price_response(::tinkoff::pub::invest::api::contract::v1::SubscribeLastPriceResponse* value);
  ::tinkoff::pub::invest::api::contract::v1::SubscribeLastPriceResponse* unsafe_arena_release_subscribe_last_price_response();

  private:
  const ::tinkoff::pub::invest::api::contract::v1::SubscribeLastPriceResponse& _internal_subscribe_last_price_response() const;
  ::tinkoff::pub::invest::api::contract::v1::SubscribeLastPriceResponse* _internal_mutable_subscribe_last_price_response();

  public:
  // .tinkoff.pub.invest.api.contract.v1.LastPrice last_price = 11;
  bool has_last_price() const;
  private:
  bool _internal_has_last_price() const;

  public:
  void clear_last_price() ;
  const ::tinkoff::pub::invest::api::contract::v1::LastPrice& last_price() const;
  PROTOBUF_NODISCARD ::tinkoff::pub::invest::api::contract::v1::LastPrice* release_last_price();
  ::tinkoff::pub::invest::api::contract::v1::LastPrice* mutable_last_price();
  void set_allocated_last_price(::tinkoff::pub::invest::api::contract::v1::LastPrice* value);
  void unsafe_arena_set_allocated_last_price(::tinkoff::pub::invest::api::contract::v1::LastPrice* value);
  ::tinkoff::pub::invest::api::contract::v1::LastPrice* unsafe_arena_release_last_price();

  private:
  const ::tinkoff::pub::invest::api::contract::v1::LastPrice& _internal_last_price() const;
  ::tinkoff::pub::invest::api::contract::v1::LastPrice* _internal_mutable_last_price();

  public:
  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:tinkoff.pub.invest.api.contract.v1.MarketDataResponse)
 private:
  class _Internal;
  void set_has_subscribe_candles_response();
  void set_has_subscribe_order_book_response();
  void set_has_subscribe_trades_response();
  void set_has_subscribe_info_response();
  void set_has_candle();
  void set_has_trade();
  void set_has_orderbook();
  void set_has_trading_status();
  void set_has_ping();
  void set_has_subscribe_last_price_response();
  void set_has_last_price();
  inline bool has_payload() const;
  inline void clear_has_payload();
  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 11, 11,
      0, 2>
      _table_;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {
    inline explicit constexpr Impl_(
        ::google::protobuf::internal::ConstantInitialized) noexcept;
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena);
    inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                          ::google::protobuf::Arena* arena, const Impl_& from,
                          const MarketDataResponse& from_msg);
    union PayloadUnion {
      constexpr PayloadUnion() : _constinit_{} {}
      ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::tinkoff::pub::invest::api::contract::v1::SubscribeCandlesResponse* subscribe_candles_response_;
      ::tinkoff::pub::invest::api::contract::v1::SubscribeOrderBookResponse* subscribe_order_book_response_;
      ::tinkoff::pub::invest::api::contract::v1::SubscribeTradesResponse* subscribe_trades_response_;
      ::tinkoff::pub::invest::api::contract::v1::SubscribeInfoResponse* subscribe_info_response_;
      ::tinkoff::pub::invest::api::contract::v1::Candle* candle_;
      ::tinkoff::pub::invest::api::contract::v1::Trade* trade_;
      ::tinkoff::pub::invest::api::contract::v1::OrderBook* orderbook_;
      ::tinkoff::pub::invest::api::contract::v1::TradingStatus* trading_status_;
      ::tinkoff::pub::invest::api::contract::v1::Ping* ping_;
      ::tinkoff::pub::invest::api::contract::v1::SubscribeLastPriceResponse* subscribe_last_price_response_;
      ::tinkoff::pub::invest::api::contract::v1::LastPrice* last_price_;
    } payload_;
    ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_marketdata_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// MarketDataRequest

// .tinkoff.pub.invest.api.contract.v1.SubscribeCandlesRequest subscribe_candles_request = 1;
inline bool MarketDataRequest::has_subscribe_candles_request() const {
  return payload_case() == kSubscribeCandlesRequest;
}
inline bool MarketDataRequest::_internal_has_subscribe_candles_request() const {
  return payload_case() == kSubscribeCandlesRequest;
}
inline void MarketDataRequest::set_has_subscribe_candles_request() {
  _impl_._oneof_case_[0] = kSubscribeCandlesRequest;
}
inline void MarketDataRequest::clear_subscribe_candles_request() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() == kSubscribeCandlesRequest) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.subscribe_candles_request_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.subscribe_candles_request_);
    }
    clear_has_payload();
  }
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscribeCandlesRequest* MarketDataRequest::release_subscribe_candles_request() {
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.MarketDataRequest.subscribe_candles_request)
  if (payload_case() == kSubscribeCandlesRequest) {
    clear_has_payload();
    auto* temp = _impl_.payload_.subscribe_candles_request_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.subscribe_candles_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tinkoff::pub::invest::api::contract::v1::SubscribeCandlesRequest& MarketDataRequest::_internal_subscribe_candles_request() const {
  return payload_case() == kSubscribeCandlesRequest ? *_impl_.payload_.subscribe_candles_request_ : reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::SubscribeCandlesRequest&>(::tinkoff::pub::invest::api::contract::v1::_SubscribeCandlesRequest_default_instance_);
}
inline const ::tinkoff::pub::invest::api::contract::v1::SubscribeCandlesRequest& MarketDataRequest::subscribe_candles_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.MarketDataRequest.subscribe_candles_request)
  return _internal_subscribe_candles_request();
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscribeCandlesRequest* MarketDataRequest::unsafe_arena_release_subscribe_candles_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tinkoff.pub.invest.api.contract.v1.MarketDataRequest.subscribe_candles_request)
  if (payload_case() == kSubscribeCandlesRequest) {
    clear_has_payload();
    auto* temp = _impl_.payload_.subscribe_candles_request_;
    _impl_.payload_.subscribe_candles_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MarketDataRequest::unsafe_arena_set_allocated_subscribe_candles_request(::tinkoff::pub::invest::api::contract::v1::SubscribeCandlesRequest* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_subscribe_candles_request();
    _impl_.payload_.subscribe_candles_request_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.MarketDataRequest.subscribe_candles_request)
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscribeCandlesRequest* MarketDataRequest::_internal_mutable_subscribe_candles_request() {
  if (payload_case() != kSubscribeCandlesRequest) {
    clear_payload();
    set_has_subscribe_candles_request();
    _impl_.payload_.subscribe_candles_request_ =
        ::google::protobuf::Message::DefaultConstruct<::tinkoff::pub::invest::api::contract::v1::SubscribeCandlesRequest>(GetArena());
  }
  return _impl_.payload_.subscribe_candles_request_;
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscribeCandlesRequest* MarketDataRequest::mutable_subscribe_candles_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::pub::invest::api::contract::v1::SubscribeCandlesRequest* _msg = _internal_mutable_subscribe_candles_request();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.MarketDataRequest.subscribe_candles_request)
  return _msg;
}

// .tinkoff.pub.invest.api.contract.v1.SubscribeOrderBookRequest subscribe_order_book_request = 2;
inline bool MarketDataRequest::has_subscribe_order_book_request() const {
  return payload_case() == kSubscribeOrderBookRequest;
}
inline bool MarketDataRequest::_internal_has_subscribe_order_book_request() const {
  return payload_case() == kSubscribeOrderBookRequest;
}
inline void MarketDataRequest::set_has_subscribe_order_book_request() {
  _impl_._oneof_case_[0] = kSubscribeOrderBookRequest;
}
inline void MarketDataRequest::clear_subscribe_order_book_request() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() == kSubscribeOrderBookRequest) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.subscribe_order_book_request_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.subscribe_order_book_request_);
    }
    clear_has_payload();
  }
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscribeOrderBookRequest* MarketDataRequest::release_subscribe_order_book_request() {
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.MarketDataRequest.subscribe_order_book_request)
  if (payload_case() == kSubscribeOrderBookRequest) {
    clear_has_payload();
    auto* temp = _impl_.payload_.subscribe_order_book_request_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.subscribe_order_book_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tinkoff::pub::invest::api::contract::v1::SubscribeOrderBookRequest& MarketDataRequest::_internal_subscribe_order_book_request() const {
  return payload_case() == kSubscribeOrderBookRequest ? *_impl_.payload_.subscribe_order_book_request_ : reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::SubscribeOrderBookRequest&>(::tinkoff::pub::invest::api::contract::v1::_SubscribeOrderBookRequest_default_instance_);
}
inline const ::tinkoff::pub::invest::api::contract::v1::SubscribeOrderBookRequest& MarketDataRequest::subscribe_order_book_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.MarketDataRequest.subscribe_order_book_request)
  return _internal_subscribe_order_book_request();
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscribeOrderBookRequest* MarketDataRequest::unsafe_arena_release_subscribe_order_book_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tinkoff.pub.invest.api.contract.v1.MarketDataRequest.subscribe_order_book_request)
  if (payload_case() == kSubscribeOrderBookRequest) {
    clear_has_payload();
    auto* temp = _impl_.payload_.subscribe_order_book_request_;
    _impl_.payload_.subscribe_order_book_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MarketDataRequest::unsafe_arena_set_allocated_subscribe_order_book_request(::tinkoff::pub::invest::api::contract::v1::SubscribeOrderBookRequest* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_subscribe_order_book_request();
    _impl_.payload_.subscribe_order_book_request_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.MarketDataRequest.subscribe_order_book_request)
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscribeOrderBookRequest* MarketDataRequest::_internal_mutable_subscribe_order_book_request() {
  if (payload_case() != kSubscribeOrderBookRequest) {
    clear_payload();
    set_has_subscribe_order_book_request();
    _impl_.payload_.subscribe_order_book_request_ =
        ::google::protobuf::Message::DefaultConstruct<::tinkoff::pub::invest::api::contract::v1::SubscribeOrderBookRequest>(GetArena());
  }
  return _impl_.payload_.subscribe_order_book_request_;
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscribeOrderBookRequest* MarketDataRequest::mutable_subscribe_order_book_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::pub::invest::api::contract::v1::SubscribeOrderBookRequest* _msg = _internal_mutable_subscribe_order_book_request();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.MarketDataRequest.subscribe_order_book_request)
  return _msg;
}

// .tinkoff.pub.invest.api.contract.v1.SubscribeTradesRequest subscribe_trades_request = 3;
inline bool MarketDataRequest::has_subscribe_trades_request() const {
  return payload_case() == kSubscribeTradesRequest;
}
inline bool MarketDataRequest::_internal_has_subscribe_trades_request() const {
  return payload_case() == kSubscribeTradesRequest;
}
inline void MarketDataRequest::set_has_subscribe_trades_request() {
  _impl_._oneof_case_[0] = kSubscribeTradesRequest;
}
inline void MarketDataRequest::clear_subscribe_trades_request() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() == kSubscribeTradesRequest) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.subscribe_trades_request_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.subscribe_trades_request_);
    }
    clear_has_payload();
  }
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscribeTradesRequest* MarketDataRequest::release_subscribe_trades_request() {
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.MarketDataRequest.subscribe_trades_request)
  if (payload_case() == kSubscribeTradesRequest) {
    clear_has_payload();
    auto* temp = _impl_.payload_.subscribe_trades_request_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.subscribe_trades_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tinkoff::pub::invest::api::contract::v1::SubscribeTradesRequest& MarketDataRequest::_internal_subscribe_trades_request() const {
  return payload_case() == kSubscribeTradesRequest ? *_impl_.payload_.subscribe_trades_request_ : reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::SubscribeTradesRequest&>(::tinkoff::pub::invest::api::contract::v1::_SubscribeTradesRequest_default_instance_);
}
inline const ::tinkoff::pub::invest::api::contract::v1::SubscribeTradesRequest& MarketDataRequest::subscribe_trades_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.MarketDataRequest.subscribe_trades_request)
  return _internal_subscribe_trades_request();
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscribeTradesRequest* MarketDataRequest::unsafe_arena_release_subscribe_trades_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tinkoff.pub.invest.api.contract.v1.MarketDataRequest.subscribe_trades_request)
  if (payload_case() == kSubscribeTradesRequest) {
    clear_has_payload();
    auto* temp = _impl_.payload_.subscribe_trades_request_;
    _impl_.payload_.subscribe_trades_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MarketDataRequest::unsafe_arena_set_allocated_subscribe_trades_request(::tinkoff::pub::invest::api::contract::v1::SubscribeTradesRequest* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_subscribe_trades_request();
    _impl_.payload_.subscribe_trades_request_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.MarketDataRequest.subscribe_trades_request)
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscribeTradesRequest* MarketDataRequest::_internal_mutable_subscribe_trades_request() {
  if (payload_case() != kSubscribeTradesRequest) {
    clear_payload();
    set_has_subscribe_trades_request();
    _impl_.payload_.subscribe_trades_request_ =
        ::google::protobuf::Message::DefaultConstruct<::tinkoff::pub::invest::api::contract::v1::SubscribeTradesRequest>(GetArena());
  }
  return _impl_.payload_.subscribe_trades_request_;
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscribeTradesRequest* MarketDataRequest::mutable_subscribe_trades_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::pub::invest::api::contract::v1::SubscribeTradesRequest* _msg = _internal_mutable_subscribe_trades_request();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.MarketDataRequest.subscribe_trades_request)
  return _msg;
}

// .tinkoff.pub.invest.api.contract.v1.SubscribeInfoRequest subscribe_info_request = 4;
inline bool MarketDataRequest::has_subscribe_info_request() const {
  return payload_case() == kSubscribeInfoRequest;
}
inline bool MarketDataRequest::_internal_has_subscribe_info_request() const {
  return payload_case() == kSubscribeInfoRequest;
}
inline void MarketDataRequest::set_has_subscribe_info_request() {
  _impl_._oneof_case_[0] = kSubscribeInfoRequest;
}
inline void MarketDataRequest::clear_subscribe_info_request() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() == kSubscribeInfoRequest) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.subscribe_info_request_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.subscribe_info_request_);
    }
    clear_has_payload();
  }
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscribeInfoRequest* MarketDataRequest::release_subscribe_info_request() {
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.MarketDataRequest.subscribe_info_request)
  if (payload_case() == kSubscribeInfoRequest) {
    clear_has_payload();
    auto* temp = _impl_.payload_.subscribe_info_request_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.subscribe_info_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tinkoff::pub::invest::api::contract::v1::SubscribeInfoRequest& MarketDataRequest::_internal_subscribe_info_request() const {
  return payload_case() == kSubscribeInfoRequest ? *_impl_.payload_.subscribe_info_request_ : reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::SubscribeInfoRequest&>(::tinkoff::pub::invest::api::contract::v1::_SubscribeInfoRequest_default_instance_);
}
inline const ::tinkoff::pub::invest::api::contract::v1::SubscribeInfoRequest& MarketDataRequest::subscribe_info_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.MarketDataRequest.subscribe_info_request)
  return _internal_subscribe_info_request();
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscribeInfoRequest* MarketDataRequest::unsafe_arena_release_subscribe_info_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tinkoff.pub.invest.api.contract.v1.MarketDataRequest.subscribe_info_request)
  if (payload_case() == kSubscribeInfoRequest) {
    clear_has_payload();
    auto* temp = _impl_.payload_.subscribe_info_request_;
    _impl_.payload_.subscribe_info_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MarketDataRequest::unsafe_arena_set_allocated_subscribe_info_request(::tinkoff::pub::invest::api::contract::v1::SubscribeInfoRequest* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_subscribe_info_request();
    _impl_.payload_.subscribe_info_request_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.MarketDataRequest.subscribe_info_request)
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscribeInfoRequest* MarketDataRequest::_internal_mutable_subscribe_info_request() {
  if (payload_case() != kSubscribeInfoRequest) {
    clear_payload();
    set_has_subscribe_info_request();
    _impl_.payload_.subscribe_info_request_ =
        ::google::protobuf::Message::DefaultConstruct<::tinkoff::pub::invest::api::contract::v1::SubscribeInfoRequest>(GetArena());
  }
  return _impl_.payload_.subscribe_info_request_;
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscribeInfoRequest* MarketDataRequest::mutable_subscribe_info_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::pub::invest::api::contract::v1::SubscribeInfoRequest* _msg = _internal_mutable_subscribe_info_request();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.MarketDataRequest.subscribe_info_request)
  return _msg;
}

// .tinkoff.pub.invest.api.contract.v1.SubscribeLastPriceRequest subscribe_last_price_request = 5;
inline bool MarketDataRequest::has_subscribe_last_price_request() const {
  return payload_case() == kSubscribeLastPriceRequest;
}
inline bool MarketDataRequest::_internal_has_subscribe_last_price_request() const {
  return payload_case() == kSubscribeLastPriceRequest;
}
inline void MarketDataRequest::set_has_subscribe_last_price_request() {
  _impl_._oneof_case_[0] = kSubscribeLastPriceRequest;
}
inline void MarketDataRequest::clear_subscribe_last_price_request() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() == kSubscribeLastPriceRequest) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.subscribe_last_price_request_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.subscribe_last_price_request_);
    }
    clear_has_payload();
  }
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscribeLastPriceRequest* MarketDataRequest::release_subscribe_last_price_request() {
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.MarketDataRequest.subscribe_last_price_request)
  if (payload_case() == kSubscribeLastPriceRequest) {
    clear_has_payload();
    auto* temp = _impl_.payload_.subscribe_last_price_request_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.subscribe_last_price_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tinkoff::pub::invest::api::contract::v1::SubscribeLastPriceRequest& MarketDataRequest::_internal_subscribe_last_price_request() const {
  return payload_case() == kSubscribeLastPriceRequest ? *_impl_.payload_.subscribe_last_price_request_ : reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::SubscribeLastPriceRequest&>(::tinkoff::pub::invest::api::contract::v1::_SubscribeLastPriceRequest_default_instance_);
}
inline const ::tinkoff::pub::invest::api::contract::v1::SubscribeLastPriceRequest& MarketDataRequest::subscribe_last_price_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.MarketDataRequest.subscribe_last_price_request)
  return _internal_subscribe_last_price_request();
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscribeLastPriceRequest* MarketDataRequest::unsafe_arena_release_subscribe_last_price_request() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tinkoff.pub.invest.api.contract.v1.MarketDataRequest.subscribe_last_price_request)
  if (payload_case() == kSubscribeLastPriceRequest) {
    clear_has_payload();
    auto* temp = _impl_.payload_.subscribe_last_price_request_;
    _impl_.payload_.subscribe_last_price_request_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MarketDataRequest::unsafe_arena_set_allocated_subscribe_last_price_request(::tinkoff::pub::invest::api::contract::v1::SubscribeLastPriceRequest* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_subscribe_last_price_request();
    _impl_.payload_.subscribe_last_price_request_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.MarketDataRequest.subscribe_last_price_request)
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscribeLastPriceRequest* MarketDataRequest::_internal_mutable_subscribe_last_price_request() {
  if (payload_case() != kSubscribeLastPriceRequest) {
    clear_payload();
    set_has_subscribe_last_price_request();
    _impl_.payload_.subscribe_last_price_request_ =
        ::google::protobuf::Message::DefaultConstruct<::tinkoff::pub::invest::api::contract::v1::SubscribeLastPriceRequest>(GetArena());
  }
  return _impl_.payload_.subscribe_last_price_request_;
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscribeLastPriceRequest* MarketDataRequest::mutable_subscribe_last_price_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::pub::invest::api::contract::v1::SubscribeLastPriceRequest* _msg = _internal_mutable_subscribe_last_price_request();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.MarketDataRequest.subscribe_last_price_request)
  return _msg;
}

// .tinkoff.pub.invest.api.contract.v1.GetMySubscriptions get_my_subscriptions = 6;
inline bool MarketDataRequest::has_get_my_subscriptions() const {
  return payload_case() == kGetMySubscriptions;
}
inline bool MarketDataRequest::_internal_has_get_my_subscriptions() const {
  return payload_case() == kGetMySubscriptions;
}
inline void MarketDataRequest::set_has_get_my_subscriptions() {
  _impl_._oneof_case_[0] = kGetMySubscriptions;
}
inline void MarketDataRequest::clear_get_my_subscriptions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() == kGetMySubscriptions) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.get_my_subscriptions_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.get_my_subscriptions_);
    }
    clear_has_payload();
  }
}
inline ::tinkoff::pub::invest::api::contract::v1::GetMySubscriptions* MarketDataRequest::release_get_my_subscriptions() {
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.MarketDataRequest.get_my_subscriptions)
  if (payload_case() == kGetMySubscriptions) {
    clear_has_payload();
    auto* temp = _impl_.payload_.get_my_subscriptions_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.get_my_subscriptions_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tinkoff::pub::invest::api::contract::v1::GetMySubscriptions& MarketDataRequest::_internal_get_my_subscriptions() const {
  return payload_case() == kGetMySubscriptions ? *_impl_.payload_.get_my_subscriptions_ : reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::GetMySubscriptions&>(::tinkoff::pub::invest::api::contract::v1::_GetMySubscriptions_default_instance_);
}
inline const ::tinkoff::pub::invest::api::contract::v1::GetMySubscriptions& MarketDataRequest::get_my_subscriptions() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.MarketDataRequest.get_my_subscriptions)
  return _internal_get_my_subscriptions();
}
inline ::tinkoff::pub::invest::api::contract::v1::GetMySubscriptions* MarketDataRequest::unsafe_arena_release_get_my_subscriptions() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tinkoff.pub.invest.api.contract.v1.MarketDataRequest.get_my_subscriptions)
  if (payload_case() == kGetMySubscriptions) {
    clear_has_payload();
    auto* temp = _impl_.payload_.get_my_subscriptions_;
    _impl_.payload_.get_my_subscriptions_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MarketDataRequest::unsafe_arena_set_allocated_get_my_subscriptions(::tinkoff::pub::invest::api::contract::v1::GetMySubscriptions* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_get_my_subscriptions();
    _impl_.payload_.get_my_subscriptions_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.MarketDataRequest.get_my_subscriptions)
}
inline ::tinkoff::pub::invest::api::contract::v1::GetMySubscriptions* MarketDataRequest::_internal_mutable_get_my_subscriptions() {
  if (payload_case() != kGetMySubscriptions) {
    clear_payload();
    set_has_get_my_subscriptions();
    _impl_.payload_.get_my_subscriptions_ =
        ::google::protobuf::Message::DefaultConstruct<::tinkoff::pub::invest::api::contract::v1::GetMySubscriptions>(GetArena());
  }
  return _impl_.payload_.get_my_subscriptions_;
}
inline ::tinkoff::pub::invest::api::contract::v1::GetMySubscriptions* MarketDataRequest::mutable_get_my_subscriptions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::pub::invest::api::contract::v1::GetMySubscriptions* _msg = _internal_mutable_get_my_subscriptions();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.MarketDataRequest.get_my_subscriptions)
  return _msg;
}

// .tinkoff.pub.invest.api.contract.v1.PingRequest ping = 7;
inline bool MarketDataRequest::has_ping() const {
  return payload_case() == kPing;
}
inline bool MarketDataRequest::_internal_has_ping() const {
  return payload_case() == kPing;
}
inline void MarketDataRequest::set_has_ping() {
  _impl_._oneof_case_[0] = kPing;
}
inline ::tinkoff::pub::invest::api::contract::v1::PingRequest* MarketDataRequest::release_ping() {
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.MarketDataRequest.ping)
  if (payload_case() == kPing) {
    clear_has_payload();
    auto* temp = _impl_.payload_.ping_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.ping_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tinkoff::pub::invest::api::contract::v1::PingRequest& MarketDataRequest::_internal_ping() const {
  return payload_case() == kPing ? *_impl_.payload_.ping_ : reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::PingRequest&>(::tinkoff::pub::invest::api::contract::v1::_PingRequest_default_instance_);
}
inline const ::tinkoff::pub::invest::api::contract::v1::PingRequest& MarketDataRequest::ping() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.MarketDataRequest.ping)
  return _internal_ping();
}
inline ::tinkoff::pub::invest::api::contract::v1::PingRequest* MarketDataRequest::unsafe_arena_release_ping() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tinkoff.pub.invest.api.contract.v1.MarketDataRequest.ping)
  if (payload_case() == kPing) {
    clear_has_payload();
    auto* temp = _impl_.payload_.ping_;
    _impl_.payload_.ping_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MarketDataRequest::unsafe_arena_set_allocated_ping(::tinkoff::pub::invest::api::contract::v1::PingRequest* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_ping();
    _impl_.payload_.ping_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.MarketDataRequest.ping)
}
inline ::tinkoff::pub::invest::api::contract::v1::PingRequest* MarketDataRequest::_internal_mutable_ping() {
  if (payload_case() != kPing) {
    clear_payload();
    set_has_ping();
    _impl_.payload_.ping_ =
        ::google::protobuf::Message::DefaultConstruct<::tinkoff::pub::invest::api::contract::v1::PingRequest>(GetArena());
  }
  return _impl_.payload_.ping_;
}
inline ::tinkoff::pub::invest::api::contract::v1::PingRequest* MarketDataRequest::mutable_ping() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::pub::invest::api::contract::v1::PingRequest* _msg = _internal_mutable_ping();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.MarketDataRequest.ping)
  return _msg;
}

// .tinkoff.pub.invest.api.contract.v1.PingDelaySettings ping_settings = 15;
inline bool MarketDataRequest::has_ping_settings() const {
  return payload_case() == kPingSettings;
}
inline bool MarketDataRequest::_internal_has_ping_settings() const {
  return payload_case() == kPingSettings;
}
inline void MarketDataRequest::set_has_ping_settings() {
  _impl_._oneof_case_[0] = kPingSettings;
}
inline ::tinkoff::pub::invest::api::contract::v1::PingDelaySettings* MarketDataRequest::release_ping_settings() {
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.MarketDataRequest.ping_settings)
  if (payload_case() == kPingSettings) {
    clear_has_payload();
    auto* temp = _impl_.payload_.ping_settings_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.ping_settings_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tinkoff::pub::invest::api::contract::v1::PingDelaySettings& MarketDataRequest::_internal_ping_settings() const {
  return payload_case() == kPingSettings ? *_impl_.payload_.ping_settings_ : reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::PingDelaySettings&>(::tinkoff::pub::invest::api::contract::v1::_PingDelaySettings_default_instance_);
}
inline const ::tinkoff::pub::invest::api::contract::v1::PingDelaySettings& MarketDataRequest::ping_settings() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.MarketDataRequest.ping_settings)
  return _internal_ping_settings();
}
inline ::tinkoff::pub::invest::api::contract::v1::PingDelaySettings* MarketDataRequest::unsafe_arena_release_ping_settings() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tinkoff.pub.invest.api.contract.v1.MarketDataRequest.ping_settings)
  if (payload_case() == kPingSettings) {
    clear_has_payload();
    auto* temp = _impl_.payload_.ping_settings_;
    _impl_.payload_.ping_settings_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MarketDataRequest::unsafe_arena_set_allocated_ping_settings(::tinkoff::pub::invest::api::contract::v1::PingDelaySettings* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_ping_settings();
    _impl_.payload_.ping_settings_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.MarketDataRequest.ping_settings)
}
inline ::tinkoff::pub::invest::api::contract::v1::PingDelaySettings* MarketDataRequest::_internal_mutable_ping_settings() {
  if (payload_case() != kPingSettings) {
    clear_payload();
    set_has_ping_settings();
    _impl_.payload_.ping_settings_ =
        ::google::protobuf::Message::DefaultConstruct<::tinkoff::pub::invest::api::contract::v1::PingDelaySettings>(GetArena());
  }
  return _impl_.payload_.ping_settings_;
}
inline ::tinkoff::pub::invest::api::contract::v1::PingDelaySettings* MarketDataRequest::mutable_ping_settings() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::pub::invest::api::contract::v1::PingDelaySettings* _msg = _internal_mutable_ping_settings();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.MarketDataRequest.ping_settings)
  return _msg;
}

inline bool MarketDataRequest::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void MarketDataRequest::clear_has_payload() {
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline MarketDataRequest::PayloadCase MarketDataRequest::payload_case() const {
  return MarketDataRequest::PayloadCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// MarketDataServerSideStreamRequest

// .tinkoff.pub.invest.api.contract.v1.SubscribeCandlesRequest subscribe_candles_request = 1;
inline bool MarketDataServerSideStreamRequest::has_subscribe_candles_request() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.subscribe_candles_request_ != nullptr);
  return value;
}
inline void MarketDataServerSideStreamRequest::clear_subscribe_candles_request() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.subscribe_candles_request_ != nullptr) _impl_.subscribe_candles_request_->Clear();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const ::tinkoff::pub::invest::api::contract::v1::SubscribeCandlesRequest& MarketDataServerSideStreamRequest::_internal_subscribe_candles_request() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tinkoff::pub::invest::api::contract::v1::SubscribeCandlesRequest* p = _impl_.subscribe_candles_request_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::pub::invest::api::contract::v1::SubscribeCandlesRequest&>(::tinkoff::pub::invest::api::contract::v1::_SubscribeCandlesRequest_default_instance_);
}
inline const ::tinkoff::pub::invest::api::contract::v1::SubscribeCandlesRequest& MarketDataServerSideStreamRequest::subscribe_candles_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.MarketDataServerSideStreamRequest.subscribe_candles_request)
  return _internal_subscribe_candles_request();
}
inline void MarketDataServerSideStreamRequest::unsafe_arena_set_allocated_subscribe_candles_request(::tinkoff::pub::invest::api::contract::v1::SubscribeCandlesRequest* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.subscribe_candles_request_);
  }
  _impl_.subscribe_candles_request_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::SubscribeCandlesRequest*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.MarketDataServerSideStreamRequest.subscribe_candles_request)
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscribeCandlesRequest* MarketDataServerSideStreamRequest::release_subscribe_candles_request() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::pub::invest::api::contract::v1::SubscribeCandlesRequest* released = _impl_.subscribe_candles_request_;
  _impl_.subscribe_candles_request_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscribeCandlesRequest* MarketDataServerSideStreamRequest::unsafe_arena_release_subscribe_candles_request() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.MarketDataServerSideStreamRequest.subscribe_candles_request)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::pub::invest::api::contract::v1::SubscribeCandlesRequest* temp = _impl_.subscribe_candles_request_;
  _impl_.subscribe_candles_request_ = nullptr;
  return temp;
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscribeCandlesRequest* MarketDataServerSideStreamRequest::_internal_mutable_subscribe_candles_request() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.subscribe_candles_request_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::pub::invest::api::contract::v1::SubscribeCandlesRequest>(GetArena());
    _impl_.subscribe_candles_request_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::SubscribeCandlesRequest*>(p);
  }
  return _impl_.subscribe_candles_request_;
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscribeCandlesRequest* MarketDataServerSideStreamRequest::mutable_subscribe_candles_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::tinkoff::pub::invest::api::contract::v1::SubscribeCandlesRequest* _msg = _internal_mutable_subscribe_candles_request();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.MarketDataServerSideStreamRequest.subscribe_candles_request)
  return _msg;
}
inline void MarketDataServerSideStreamRequest::set_allocated_subscribe_candles_request(::tinkoff::pub::invest::api::contract::v1::SubscribeCandlesRequest* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.subscribe_candles_request_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.subscribe_candles_request_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::SubscribeCandlesRequest*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.MarketDataServerSideStreamRequest.subscribe_candles_request)
}

// .tinkoff.pub.invest.api.contract.v1.SubscribeOrderBookRequest subscribe_order_book_request = 2;
inline bool MarketDataServerSideStreamRequest::has_subscribe_order_book_request() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.subscribe_order_book_request_ != nullptr);
  return value;
}
inline void MarketDataServerSideStreamRequest::clear_subscribe_order_book_request() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.subscribe_order_book_request_ != nullptr) _impl_.subscribe_order_book_request_->Clear();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const ::tinkoff::pub::invest::api::contract::v1::SubscribeOrderBookRequest& MarketDataServerSideStreamRequest::_internal_subscribe_order_book_request() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tinkoff::pub::invest::api::contract::v1::SubscribeOrderBookRequest* p = _impl_.subscribe_order_book_request_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::pub::invest::api::contract::v1::SubscribeOrderBookRequest&>(::tinkoff::pub::invest::api::contract::v1::_SubscribeOrderBookRequest_default_instance_);
}
inline const ::tinkoff::pub::invest::api::contract::v1::SubscribeOrderBookRequest& MarketDataServerSideStreamRequest::subscribe_order_book_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.MarketDataServerSideStreamRequest.subscribe_order_book_request)
  return _internal_subscribe_order_book_request();
}
inline void MarketDataServerSideStreamRequest::unsafe_arena_set_allocated_subscribe_order_book_request(::tinkoff::pub::invest::api::contract::v1::SubscribeOrderBookRequest* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.subscribe_order_book_request_);
  }
  _impl_.subscribe_order_book_request_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::SubscribeOrderBookRequest*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.MarketDataServerSideStreamRequest.subscribe_order_book_request)
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscribeOrderBookRequest* MarketDataServerSideStreamRequest::release_subscribe_order_book_request() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tinkoff::pub::invest::api::contract::v1::SubscribeOrderBookRequest* released = _impl_.subscribe_order_book_request_;
  _impl_.subscribe_order_book_request_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscribeOrderBookRequest* MarketDataServerSideStreamRequest::unsafe_arena_release_subscribe_order_book_request() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.MarketDataServerSideStreamRequest.subscribe_order_book_request)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tinkoff::pub::invest::api::contract::v1::SubscribeOrderBookRequest* temp = _impl_.subscribe_order_book_request_;
  _impl_.subscribe_order_book_request_ = nullptr;
  return temp;
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscribeOrderBookRequest* MarketDataServerSideStreamRequest::_internal_mutable_subscribe_order_book_request() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.subscribe_order_book_request_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::pub::invest::api::contract::v1::SubscribeOrderBookRequest>(GetArena());
    _impl_.subscribe_order_book_request_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::SubscribeOrderBookRequest*>(p);
  }
  return _impl_.subscribe_order_book_request_;
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscribeOrderBookRequest* MarketDataServerSideStreamRequest::mutable_subscribe_order_book_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::tinkoff::pub::invest::api::contract::v1::SubscribeOrderBookRequest* _msg = _internal_mutable_subscribe_order_book_request();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.MarketDataServerSideStreamRequest.subscribe_order_book_request)
  return _msg;
}
inline void MarketDataServerSideStreamRequest::set_allocated_subscribe_order_book_request(::tinkoff::pub::invest::api::contract::v1::SubscribeOrderBookRequest* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.subscribe_order_book_request_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.subscribe_order_book_request_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::SubscribeOrderBookRequest*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.MarketDataServerSideStreamRequest.subscribe_order_book_request)
}

// .tinkoff.pub.invest.api.contract.v1.SubscribeTradesRequest subscribe_trades_request = 3;
inline bool MarketDataServerSideStreamRequest::has_subscribe_trades_request() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.subscribe_trades_request_ != nullptr);
  return value;
}
inline void MarketDataServerSideStreamRequest::clear_subscribe_trades_request() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.subscribe_trades_request_ != nullptr) _impl_.subscribe_trades_request_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::tinkoff::pub::invest::api::contract::v1::SubscribeTradesRequest& MarketDataServerSideStreamRequest::_internal_subscribe_trades_request() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tinkoff::pub::invest::api::contract::v1::SubscribeTradesRequest* p = _impl_.subscribe_trades_request_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::pub::invest::api::contract::v1::SubscribeTradesRequest&>(::tinkoff::pub::invest::api::contract::v1::_SubscribeTradesRequest_default_instance_);
}
inline const ::tinkoff::pub::invest::api::contract::v1::SubscribeTradesRequest& MarketDataServerSideStreamRequest::subscribe_trades_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.MarketDataServerSideStreamRequest.subscribe_trades_request)
  return _internal_subscribe_trades_request();
}
inline void MarketDataServerSideStreamRequest::unsafe_arena_set_allocated_subscribe_trades_request(::tinkoff::pub::invest::api::contract::v1::SubscribeTradesRequest* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.subscribe_trades_request_);
  }
  _impl_.subscribe_trades_request_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::SubscribeTradesRequest*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.MarketDataServerSideStreamRequest.subscribe_trades_request)
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscribeTradesRequest* MarketDataServerSideStreamRequest::release_subscribe_trades_request() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tinkoff::pub::invest::api::contract::v1::SubscribeTradesRequest* released = _impl_.subscribe_trades_request_;
  _impl_.subscribe_trades_request_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscribeTradesRequest* MarketDataServerSideStreamRequest::unsafe_arena_release_subscribe_trades_request() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.MarketDataServerSideStreamRequest.subscribe_trades_request)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tinkoff::pub::invest::api::contract::v1::SubscribeTradesRequest* temp = _impl_.subscribe_trades_request_;
  _impl_.subscribe_trades_request_ = nullptr;
  return temp;
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscribeTradesRequest* MarketDataServerSideStreamRequest::_internal_mutable_subscribe_trades_request() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.subscribe_trades_request_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::pub::invest::api::contract::v1::SubscribeTradesRequest>(GetArena());
    _impl_.subscribe_trades_request_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::SubscribeTradesRequest*>(p);
  }
  return _impl_.subscribe_trades_request_;
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscribeTradesRequest* MarketDataServerSideStreamRequest::mutable_subscribe_trades_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::tinkoff::pub::invest::api::contract::v1::SubscribeTradesRequest* _msg = _internal_mutable_subscribe_trades_request();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.MarketDataServerSideStreamRequest.subscribe_trades_request)
  return _msg;
}
inline void MarketDataServerSideStreamRequest::set_allocated_subscribe_trades_request(::tinkoff::pub::invest::api::contract::v1::SubscribeTradesRequest* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.subscribe_trades_request_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.subscribe_trades_request_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::SubscribeTradesRequest*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.MarketDataServerSideStreamRequest.subscribe_trades_request)
}

// .tinkoff.pub.invest.api.contract.v1.SubscribeInfoRequest subscribe_info_request = 4;
inline bool MarketDataServerSideStreamRequest::has_subscribe_info_request() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.subscribe_info_request_ != nullptr);
  return value;
}
inline void MarketDataServerSideStreamRequest::clear_subscribe_info_request() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.subscribe_info_request_ != nullptr) _impl_.subscribe_info_request_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::tinkoff::pub::invest::api::contract::v1::SubscribeInfoRequest& MarketDataServerSideStreamRequest::_internal_subscribe_info_request() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tinkoff::pub::invest::api::contract::v1::SubscribeInfoRequest* p = _impl_.subscribe_info_request_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::pub::invest::api::contract::v1::SubscribeInfoRequest&>(::tinkoff::pub::invest::api::contract::v1::_SubscribeInfoRequest_default_instance_);
}
inline const ::tinkoff::pub::invest::api::contract::v1::SubscribeInfoRequest& MarketDataServerSideStreamRequest::subscribe_info_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.MarketDataServerSideStreamRequest.subscribe_info_request)
  return _internal_subscribe_info_request();
}
inline void MarketDataServerSideStreamRequest::unsafe_arena_set_allocated_subscribe_info_request(::tinkoff::pub::invest::api::contract::v1::SubscribeInfoRequest* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.subscribe_info_request_);
  }
  _impl_.subscribe_info_request_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::SubscribeInfoRequest*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.MarketDataServerSideStreamRequest.subscribe_info_request)
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscribeInfoRequest* MarketDataServerSideStreamRequest::release_subscribe_info_request() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::tinkoff::pub::invest::api::contract::v1::SubscribeInfoRequest* released = _impl_.subscribe_info_request_;
  _impl_.subscribe_info_request_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscribeInfoRequest* MarketDataServerSideStreamRequest::unsafe_arena_release_subscribe_info_request() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.MarketDataServerSideStreamRequest.subscribe_info_request)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::tinkoff::pub::invest::api::contract::v1::SubscribeInfoRequest* temp = _impl_.subscribe_info_request_;
  _impl_.subscribe_info_request_ = nullptr;
  return temp;
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscribeInfoRequest* MarketDataServerSideStreamRequest::_internal_mutable_subscribe_info_request() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.subscribe_info_request_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::pub::invest::api::contract::v1::SubscribeInfoRequest>(GetArena());
    _impl_.subscribe_info_request_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::SubscribeInfoRequest*>(p);
  }
  return _impl_.subscribe_info_request_;
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscribeInfoRequest* MarketDataServerSideStreamRequest::mutable_subscribe_info_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::tinkoff::pub::invest::api::contract::v1::SubscribeInfoRequest* _msg = _internal_mutable_subscribe_info_request();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.MarketDataServerSideStreamRequest.subscribe_info_request)
  return _msg;
}
inline void MarketDataServerSideStreamRequest::set_allocated_subscribe_info_request(::tinkoff::pub::invest::api::contract::v1::SubscribeInfoRequest* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.subscribe_info_request_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.subscribe_info_request_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::SubscribeInfoRequest*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.MarketDataServerSideStreamRequest.subscribe_info_request)
}

// .tinkoff.pub.invest.api.contract.v1.SubscribeLastPriceRequest subscribe_last_price_request = 5;
inline bool MarketDataServerSideStreamRequest::has_subscribe_last_price_request() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.subscribe_last_price_request_ != nullptr);
  return value;
}
inline void MarketDataServerSideStreamRequest::clear_subscribe_last_price_request() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.subscribe_last_price_request_ != nullptr) _impl_.subscribe_last_price_request_->Clear();
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline const ::tinkoff::pub::invest::api::contract::v1::SubscribeLastPriceRequest& MarketDataServerSideStreamRequest::_internal_subscribe_last_price_request() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tinkoff::pub::invest::api::contract::v1::SubscribeLastPriceRequest* p = _impl_.subscribe_last_price_request_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::pub::invest::api::contract::v1::SubscribeLastPriceRequest&>(::tinkoff::pub::invest::api::contract::v1::_SubscribeLastPriceRequest_default_instance_);
}
inline const ::tinkoff::pub::invest::api::contract::v1::SubscribeLastPriceRequest& MarketDataServerSideStreamRequest::subscribe_last_price_request() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.MarketDataServerSideStreamRequest.subscribe_last_price_request)
  return _internal_subscribe_last_price_request();
}
inline void MarketDataServerSideStreamRequest::unsafe_arena_set_allocated_subscribe_last_price_request(::tinkoff::pub::invest::api::contract::v1::SubscribeLastPriceRequest* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.subscribe_last_price_request_);
  }
  _impl_.subscribe_last_price_request_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::SubscribeLastPriceRequest*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.MarketDataServerSideStreamRequest.subscribe_last_price_request)
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscribeLastPriceRequest* MarketDataServerSideStreamRequest::release_subscribe_last_price_request() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::tinkoff::pub::invest::api::contract::v1::SubscribeLastPriceRequest* released = _impl_.subscribe_last_price_request_;
  _impl_.subscribe_last_price_request_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscribeLastPriceRequest* MarketDataServerSideStreamRequest::unsafe_arena_release_subscribe_last_price_request() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.MarketDataServerSideStreamRequest.subscribe_last_price_request)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::tinkoff::pub::invest::api::contract::v1::SubscribeLastPriceRequest* temp = _impl_.subscribe_last_price_request_;
  _impl_.subscribe_last_price_request_ = nullptr;
  return temp;
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscribeLastPriceRequest* MarketDataServerSideStreamRequest::_internal_mutable_subscribe_last_price_request() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.subscribe_last_price_request_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::pub::invest::api::contract::v1::SubscribeLastPriceRequest>(GetArena());
    _impl_.subscribe_last_price_request_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::SubscribeLastPriceRequest*>(p);
  }
  return _impl_.subscribe_last_price_request_;
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscribeLastPriceRequest* MarketDataServerSideStreamRequest::mutable_subscribe_last_price_request() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000010u;
  ::tinkoff::pub::invest::api::contract::v1::SubscribeLastPriceRequest* _msg = _internal_mutable_subscribe_last_price_request();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.MarketDataServerSideStreamRequest.subscribe_last_price_request)
  return _msg;
}
inline void MarketDataServerSideStreamRequest::set_allocated_subscribe_last_price_request(::tinkoff::pub::invest::api::contract::v1::SubscribeLastPriceRequest* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.subscribe_last_price_request_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.subscribe_last_price_request_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::SubscribeLastPriceRequest*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.MarketDataServerSideStreamRequest.subscribe_last_price_request)
}

// .tinkoff.pub.invest.api.contract.v1.PingDelaySettings ping_settings = 15;
inline bool MarketDataServerSideStreamRequest::has_ping_settings() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.ping_settings_ != nullptr);
  return value;
}
inline const ::tinkoff::pub::invest::api::contract::v1::PingDelaySettings& MarketDataServerSideStreamRequest::_internal_ping_settings() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tinkoff::pub::invest::api::contract::v1::PingDelaySettings* p = _impl_.ping_settings_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::pub::invest::api::contract::v1::PingDelaySettings&>(::tinkoff::pub::invest::api::contract::v1::_PingDelaySettings_default_instance_);
}
inline const ::tinkoff::pub::invest::api::contract::v1::PingDelaySettings& MarketDataServerSideStreamRequest::ping_settings() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.MarketDataServerSideStreamRequest.ping_settings)
  return _internal_ping_settings();
}
inline void MarketDataServerSideStreamRequest::unsafe_arena_set_allocated_ping_settings(::tinkoff::pub::invest::api::contract::v1::PingDelaySettings* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ping_settings_);
  }
  _impl_.ping_settings_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::PingDelaySettings*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.MarketDataServerSideStreamRequest.ping_settings)
}
inline ::tinkoff::pub::invest::api::contract::v1::PingDelaySettings* MarketDataServerSideStreamRequest::release_ping_settings() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::tinkoff::pub::invest::api::contract::v1::PingDelaySettings* released = _impl_.ping_settings_;
  _impl_.ping_settings_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tinkoff::pub::invest::api::contract::v1::PingDelaySettings* MarketDataServerSideStreamRequest::unsafe_arena_release_ping_settings() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.MarketDataServerSideStreamRequest.ping_settings)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::tinkoff::pub::invest::api::contract::v1::PingDelaySettings* temp = _impl_.ping_settings_;
  _impl_.ping_settings_ = nullptr;
  return temp;
}
inline ::tinkoff::pub::invest::api::contract::v1::PingDelaySettings* MarketDataServerSideStreamRequest::_internal_mutable_ping_settings() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.ping_settings_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::pub::invest::api::contract::v1::PingDelaySettings>(GetArena());
    _impl_.ping_settings_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::PingDelaySettings*>(p);
  }
  return _impl_.ping_settings_;
}
inline ::tinkoff::pub::invest::api::contract::v1::PingDelaySettings* MarketDataServerSideStreamRequest::mutable_ping_settings() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000020u;
  ::tinkoff::pub::invest::api::contract::v1::PingDelaySettings* _msg = _internal_mutable_ping_settings();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.MarketDataServerSideStreamRequest.ping_settings)
  return _msg;
}
inline void MarketDataServerSideStreamRequest::set_allocated_ping_settings(::tinkoff::pub::invest::api::contract::v1::PingDelaySettings* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.ping_settings_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.ping_settings_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::PingDelaySettings*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.MarketDataServerSideStreamRequest.ping_settings)
}

// -------------------------------------------------------------------

// MarketDataResponse

// .tinkoff.pub.invest.api.contract.v1.SubscribeCandlesResponse subscribe_candles_response = 1;
inline bool MarketDataResponse::has_subscribe_candles_response() const {
  return payload_case() == kSubscribeCandlesResponse;
}
inline bool MarketDataResponse::_internal_has_subscribe_candles_response() const {
  return payload_case() == kSubscribeCandlesResponse;
}
inline void MarketDataResponse::set_has_subscribe_candles_response() {
  _impl_._oneof_case_[0] = kSubscribeCandlesResponse;
}
inline void MarketDataResponse::clear_subscribe_candles_response() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() == kSubscribeCandlesResponse) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.subscribe_candles_response_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.subscribe_candles_response_);
    }
    clear_has_payload();
  }
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscribeCandlesResponse* MarketDataResponse::release_subscribe_candles_response() {
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.MarketDataResponse.subscribe_candles_response)
  if (payload_case() == kSubscribeCandlesResponse) {
    clear_has_payload();
    auto* temp = _impl_.payload_.subscribe_candles_response_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.subscribe_candles_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tinkoff::pub::invest::api::contract::v1::SubscribeCandlesResponse& MarketDataResponse::_internal_subscribe_candles_response() const {
  return payload_case() == kSubscribeCandlesResponse ? *_impl_.payload_.subscribe_candles_response_ : reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::SubscribeCandlesResponse&>(::tinkoff::pub::invest::api::contract::v1::_SubscribeCandlesResponse_default_instance_);
}
inline const ::tinkoff::pub::invest::api::contract::v1::SubscribeCandlesResponse& MarketDataResponse::subscribe_candles_response() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.MarketDataResponse.subscribe_candles_response)
  return _internal_subscribe_candles_response();
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscribeCandlesResponse* MarketDataResponse::unsafe_arena_release_subscribe_candles_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tinkoff.pub.invest.api.contract.v1.MarketDataResponse.subscribe_candles_response)
  if (payload_case() == kSubscribeCandlesResponse) {
    clear_has_payload();
    auto* temp = _impl_.payload_.subscribe_candles_response_;
    _impl_.payload_.subscribe_candles_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MarketDataResponse::unsafe_arena_set_allocated_subscribe_candles_response(::tinkoff::pub::invest::api::contract::v1::SubscribeCandlesResponse* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_subscribe_candles_response();
    _impl_.payload_.subscribe_candles_response_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.MarketDataResponse.subscribe_candles_response)
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscribeCandlesResponse* MarketDataResponse::_internal_mutable_subscribe_candles_response() {
  if (payload_case() != kSubscribeCandlesResponse) {
    clear_payload();
    set_has_subscribe_candles_response();
    _impl_.payload_.subscribe_candles_response_ =
        ::google::protobuf::Message::DefaultConstruct<::tinkoff::pub::invest::api::contract::v1::SubscribeCandlesResponse>(GetArena());
  }
  return _impl_.payload_.subscribe_candles_response_;
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscribeCandlesResponse* MarketDataResponse::mutable_subscribe_candles_response() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::pub::invest::api::contract::v1::SubscribeCandlesResponse* _msg = _internal_mutable_subscribe_candles_response();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.MarketDataResponse.subscribe_candles_response)
  return _msg;
}

// .tinkoff.pub.invest.api.contract.v1.SubscribeOrderBookResponse subscribe_order_book_response = 2;
inline bool MarketDataResponse::has_subscribe_order_book_response() const {
  return payload_case() == kSubscribeOrderBookResponse;
}
inline bool MarketDataResponse::_internal_has_subscribe_order_book_response() const {
  return payload_case() == kSubscribeOrderBookResponse;
}
inline void MarketDataResponse::set_has_subscribe_order_book_response() {
  _impl_._oneof_case_[0] = kSubscribeOrderBookResponse;
}
inline void MarketDataResponse::clear_subscribe_order_book_response() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() == kSubscribeOrderBookResponse) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.subscribe_order_book_response_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.subscribe_order_book_response_);
    }
    clear_has_payload();
  }
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscribeOrderBookResponse* MarketDataResponse::release_subscribe_order_book_response() {
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.MarketDataResponse.subscribe_order_book_response)
  if (payload_case() == kSubscribeOrderBookResponse) {
    clear_has_payload();
    auto* temp = _impl_.payload_.subscribe_order_book_response_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.subscribe_order_book_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tinkoff::pub::invest::api::contract::v1::SubscribeOrderBookResponse& MarketDataResponse::_internal_subscribe_order_book_response() const {
  return payload_case() == kSubscribeOrderBookResponse ? *_impl_.payload_.subscribe_order_book_response_ : reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::SubscribeOrderBookResponse&>(::tinkoff::pub::invest::api::contract::v1::_SubscribeOrderBookResponse_default_instance_);
}
inline const ::tinkoff::pub::invest::api::contract::v1::SubscribeOrderBookResponse& MarketDataResponse::subscribe_order_book_response() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.MarketDataResponse.subscribe_order_book_response)
  return _internal_subscribe_order_book_response();
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscribeOrderBookResponse* MarketDataResponse::unsafe_arena_release_subscribe_order_book_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tinkoff.pub.invest.api.contract.v1.MarketDataResponse.subscribe_order_book_response)
  if (payload_case() == kSubscribeOrderBookResponse) {
    clear_has_payload();
    auto* temp = _impl_.payload_.subscribe_order_book_response_;
    _impl_.payload_.subscribe_order_book_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MarketDataResponse::unsafe_arena_set_allocated_subscribe_order_book_response(::tinkoff::pub::invest::api::contract::v1::SubscribeOrderBookResponse* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_subscribe_order_book_response();
    _impl_.payload_.subscribe_order_book_response_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.MarketDataResponse.subscribe_order_book_response)
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscribeOrderBookResponse* MarketDataResponse::_internal_mutable_subscribe_order_book_response() {
  if (payload_case() != kSubscribeOrderBookResponse) {
    clear_payload();
    set_has_subscribe_order_book_response();
    _impl_.payload_.subscribe_order_book_response_ =
        ::google::protobuf::Message::DefaultConstruct<::tinkoff::pub::invest::api::contract::v1::SubscribeOrderBookResponse>(GetArena());
  }
  return _impl_.payload_.subscribe_order_book_response_;
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscribeOrderBookResponse* MarketDataResponse::mutable_subscribe_order_book_response() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::pub::invest::api::contract::v1::SubscribeOrderBookResponse* _msg = _internal_mutable_subscribe_order_book_response();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.MarketDataResponse.subscribe_order_book_response)
  return _msg;
}

// .tinkoff.pub.invest.api.contract.v1.SubscribeTradesResponse subscribe_trades_response = 3;
inline bool MarketDataResponse::has_subscribe_trades_response() const {
  return payload_case() == kSubscribeTradesResponse;
}
inline bool MarketDataResponse::_internal_has_subscribe_trades_response() const {
  return payload_case() == kSubscribeTradesResponse;
}
inline void MarketDataResponse::set_has_subscribe_trades_response() {
  _impl_._oneof_case_[0] = kSubscribeTradesResponse;
}
inline void MarketDataResponse::clear_subscribe_trades_response() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() == kSubscribeTradesResponse) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.subscribe_trades_response_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.subscribe_trades_response_);
    }
    clear_has_payload();
  }
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscribeTradesResponse* MarketDataResponse::release_subscribe_trades_response() {
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.MarketDataResponse.subscribe_trades_response)
  if (payload_case() == kSubscribeTradesResponse) {
    clear_has_payload();
    auto* temp = _impl_.payload_.subscribe_trades_response_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.subscribe_trades_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tinkoff::pub::invest::api::contract::v1::SubscribeTradesResponse& MarketDataResponse::_internal_subscribe_trades_response() const {
  return payload_case() == kSubscribeTradesResponse ? *_impl_.payload_.subscribe_trades_response_ : reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::SubscribeTradesResponse&>(::tinkoff::pub::invest::api::contract::v1::_SubscribeTradesResponse_default_instance_);
}
inline const ::tinkoff::pub::invest::api::contract::v1::SubscribeTradesResponse& MarketDataResponse::subscribe_trades_response() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.MarketDataResponse.subscribe_trades_response)
  return _internal_subscribe_trades_response();
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscribeTradesResponse* MarketDataResponse::unsafe_arena_release_subscribe_trades_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tinkoff.pub.invest.api.contract.v1.MarketDataResponse.subscribe_trades_response)
  if (payload_case() == kSubscribeTradesResponse) {
    clear_has_payload();
    auto* temp = _impl_.payload_.subscribe_trades_response_;
    _impl_.payload_.subscribe_trades_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MarketDataResponse::unsafe_arena_set_allocated_subscribe_trades_response(::tinkoff::pub::invest::api::contract::v1::SubscribeTradesResponse* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_subscribe_trades_response();
    _impl_.payload_.subscribe_trades_response_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.MarketDataResponse.subscribe_trades_response)
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscribeTradesResponse* MarketDataResponse::_internal_mutable_subscribe_trades_response() {
  if (payload_case() != kSubscribeTradesResponse) {
    clear_payload();
    set_has_subscribe_trades_response();
    _impl_.payload_.subscribe_trades_response_ =
        ::google::protobuf::Message::DefaultConstruct<::tinkoff::pub::invest::api::contract::v1::SubscribeTradesResponse>(GetArena());
  }
  return _impl_.payload_.subscribe_trades_response_;
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscribeTradesResponse* MarketDataResponse::mutable_subscribe_trades_response() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::pub::invest::api::contract::v1::SubscribeTradesResponse* _msg = _internal_mutable_subscribe_trades_response();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.MarketDataResponse.subscribe_trades_response)
  return _msg;
}

// .tinkoff.pub.invest.api.contract.v1.SubscribeInfoResponse subscribe_info_response = 4;
inline bool MarketDataResponse::has_subscribe_info_response() const {
  return payload_case() == kSubscribeInfoResponse;
}
inline bool MarketDataResponse::_internal_has_subscribe_info_response() const {
  return payload_case() == kSubscribeInfoResponse;
}
inline void MarketDataResponse::set_has_subscribe_info_response() {
  _impl_._oneof_case_[0] = kSubscribeInfoResponse;
}
inline void MarketDataResponse::clear_subscribe_info_response() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() == kSubscribeInfoResponse) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.subscribe_info_response_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.subscribe_info_response_);
    }
    clear_has_payload();
  }
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscribeInfoResponse* MarketDataResponse::release_subscribe_info_response() {
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.MarketDataResponse.subscribe_info_response)
  if (payload_case() == kSubscribeInfoResponse) {
    clear_has_payload();
    auto* temp = _impl_.payload_.subscribe_info_response_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.subscribe_info_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tinkoff::pub::invest::api::contract::v1::SubscribeInfoResponse& MarketDataResponse::_internal_subscribe_info_response() const {
  return payload_case() == kSubscribeInfoResponse ? *_impl_.payload_.subscribe_info_response_ : reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::SubscribeInfoResponse&>(::tinkoff::pub::invest::api::contract::v1::_SubscribeInfoResponse_default_instance_);
}
inline const ::tinkoff::pub::invest::api::contract::v1::SubscribeInfoResponse& MarketDataResponse::subscribe_info_response() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.MarketDataResponse.subscribe_info_response)
  return _internal_subscribe_info_response();
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscribeInfoResponse* MarketDataResponse::unsafe_arena_release_subscribe_info_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tinkoff.pub.invest.api.contract.v1.MarketDataResponse.subscribe_info_response)
  if (payload_case() == kSubscribeInfoResponse) {
    clear_has_payload();
    auto* temp = _impl_.payload_.subscribe_info_response_;
    _impl_.payload_.subscribe_info_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MarketDataResponse::unsafe_arena_set_allocated_subscribe_info_response(::tinkoff::pub::invest::api::contract::v1::SubscribeInfoResponse* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_subscribe_info_response();
    _impl_.payload_.subscribe_info_response_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.MarketDataResponse.subscribe_info_response)
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscribeInfoResponse* MarketDataResponse::_internal_mutable_subscribe_info_response() {
  if (payload_case() != kSubscribeInfoResponse) {
    clear_payload();
    set_has_subscribe_info_response();
    _impl_.payload_.subscribe_info_response_ =
        ::google::protobuf::Message::DefaultConstruct<::tinkoff::pub::invest::api::contract::v1::SubscribeInfoResponse>(GetArena());
  }
  return _impl_.payload_.subscribe_info_response_;
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscribeInfoResponse* MarketDataResponse::mutable_subscribe_info_response() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::pub::invest::api::contract::v1::SubscribeInfoResponse* _msg = _internal_mutable_subscribe_info_response();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.MarketDataResponse.subscribe_info_response)
  return _msg;
}

// .tinkoff.pub.invest.api.contract.v1.Candle candle = 5;
inline bool MarketDataResponse::has_candle() const {
  return payload_case() == kCandle;
}
inline bool MarketDataResponse::_internal_has_candle() const {
  return payload_case() == kCandle;
}
inline void MarketDataResponse::set_has_candle() {
  _impl_._oneof_case_[0] = kCandle;
}
inline void MarketDataResponse::clear_candle() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() == kCandle) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.candle_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.candle_);
    }
    clear_has_payload();
  }
}
inline ::tinkoff::pub::invest::api::contract::v1::Candle* MarketDataResponse::release_candle() {
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.MarketDataResponse.candle)
  if (payload_case() == kCandle) {
    clear_has_payload();
    auto* temp = _impl_.payload_.candle_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.candle_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tinkoff::pub::invest::api::contract::v1::Candle& MarketDataResponse::_internal_candle() const {
  return payload_case() == kCandle ? *_impl_.payload_.candle_ : reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Candle&>(::tinkoff::pub::invest::api::contract::v1::_Candle_default_instance_);
}
inline const ::tinkoff::pub::invest::api::contract::v1::Candle& MarketDataResponse::candle() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.MarketDataResponse.candle)
  return _internal_candle();
}
inline ::tinkoff::pub::invest::api::contract::v1::Candle* MarketDataResponse::unsafe_arena_release_candle() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tinkoff.pub.invest.api.contract.v1.MarketDataResponse.candle)
  if (payload_case() == kCandle) {
    clear_has_payload();
    auto* temp = _impl_.payload_.candle_;
    _impl_.payload_.candle_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MarketDataResponse::unsafe_arena_set_allocated_candle(::tinkoff::pub::invest::api::contract::v1::Candle* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_candle();
    _impl_.payload_.candle_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.MarketDataResponse.candle)
}
inline ::tinkoff::pub::invest::api::contract::v1::Candle* MarketDataResponse::_internal_mutable_candle() {
  if (payload_case() != kCandle) {
    clear_payload();
    set_has_candle();
    _impl_.payload_.candle_ =
        ::google::protobuf::Message::DefaultConstruct<::tinkoff::pub::invest::api::contract::v1::Candle>(GetArena());
  }
  return _impl_.payload_.candle_;
}
inline ::tinkoff::pub::invest::api::contract::v1::Candle* MarketDataResponse::mutable_candle() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::pub::invest::api::contract::v1::Candle* _msg = _internal_mutable_candle();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.MarketDataResponse.candle)
  return _msg;
}

// .tinkoff.pub.invest.api.contract.v1.Trade trade = 6;
inline bool MarketDataResponse::has_trade() const {
  return payload_case() == kTrade;
}
inline bool MarketDataResponse::_internal_has_trade() const {
  return payload_case() == kTrade;
}
inline void MarketDataResponse::set_has_trade() {
  _impl_._oneof_case_[0] = kTrade;
}
inline void MarketDataResponse::clear_trade() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() == kTrade) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.trade_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.trade_);
    }
    clear_has_payload();
  }
}
inline ::tinkoff::pub::invest::api::contract::v1::Trade* MarketDataResponse::release_trade() {
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.MarketDataResponse.trade)
  if (payload_case() == kTrade) {
    clear_has_payload();
    auto* temp = _impl_.payload_.trade_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.trade_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tinkoff::pub::invest::api::contract::v1::Trade& MarketDataResponse::_internal_trade() const {
  return payload_case() == kTrade ? *_impl_.payload_.trade_ : reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Trade&>(::tinkoff::pub::invest::api::contract::v1::_Trade_default_instance_);
}
inline const ::tinkoff::pub::invest::api::contract::v1::Trade& MarketDataResponse::trade() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.MarketDataResponse.trade)
  return _internal_trade();
}
inline ::tinkoff::pub::invest::api::contract::v1::Trade* MarketDataResponse::unsafe_arena_release_trade() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tinkoff.pub.invest.api.contract.v1.MarketDataResponse.trade)
  if (payload_case() == kTrade) {
    clear_has_payload();
    auto* temp = _impl_.payload_.trade_;
    _impl_.payload_.trade_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MarketDataResponse::unsafe_arena_set_allocated_trade(::tinkoff::pub::invest::api::contract::v1::Trade* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_trade();
    _impl_.payload_.trade_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.MarketDataResponse.trade)
}
inline ::tinkoff::pub::invest::api::contract::v1::Trade* MarketDataResponse::_internal_mutable_trade() {
  if (payload_case() != kTrade) {
    clear_payload();
    set_has_trade();
    _impl_.payload_.trade_ =
        ::google::protobuf::Message::DefaultConstruct<::tinkoff::pub::invest::api::contract::v1::Trade>(GetArena());
  }
  return _impl_.payload_.trade_;
}
inline ::tinkoff::pub::invest::api::contract::v1::Trade* MarketDataResponse::mutable_trade() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::pub::invest::api::contract::v1::Trade* _msg = _internal_mutable_trade();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.MarketDataResponse.trade)
  return _msg;
}

// .tinkoff.pub.invest.api.contract.v1.OrderBook orderbook = 7;
inline bool MarketDataResponse::has_orderbook() const {
  return payload_case() == kOrderbook;
}
inline bool MarketDataResponse::_internal_has_orderbook() const {
  return payload_case() == kOrderbook;
}
inline void MarketDataResponse::set_has_orderbook() {
  _impl_._oneof_case_[0] = kOrderbook;
}
inline void MarketDataResponse::clear_orderbook() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() == kOrderbook) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.orderbook_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.orderbook_);
    }
    clear_has_payload();
  }
}
inline ::tinkoff::pub::invest::api::contract::v1::OrderBook* MarketDataResponse::release_orderbook() {
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.MarketDataResponse.orderbook)
  if (payload_case() == kOrderbook) {
    clear_has_payload();
    auto* temp = _impl_.payload_.orderbook_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.orderbook_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tinkoff::pub::invest::api::contract::v1::OrderBook& MarketDataResponse::_internal_orderbook() const {
  return payload_case() == kOrderbook ? *_impl_.payload_.orderbook_ : reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::OrderBook&>(::tinkoff::pub::invest::api::contract::v1::_OrderBook_default_instance_);
}
inline const ::tinkoff::pub::invest::api::contract::v1::OrderBook& MarketDataResponse::orderbook() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.MarketDataResponse.orderbook)
  return _internal_orderbook();
}
inline ::tinkoff::pub::invest::api::contract::v1::OrderBook* MarketDataResponse::unsafe_arena_release_orderbook() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tinkoff.pub.invest.api.contract.v1.MarketDataResponse.orderbook)
  if (payload_case() == kOrderbook) {
    clear_has_payload();
    auto* temp = _impl_.payload_.orderbook_;
    _impl_.payload_.orderbook_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MarketDataResponse::unsafe_arena_set_allocated_orderbook(::tinkoff::pub::invest::api::contract::v1::OrderBook* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_orderbook();
    _impl_.payload_.orderbook_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.MarketDataResponse.orderbook)
}
inline ::tinkoff::pub::invest::api::contract::v1::OrderBook* MarketDataResponse::_internal_mutable_orderbook() {
  if (payload_case() != kOrderbook) {
    clear_payload();
    set_has_orderbook();
    _impl_.payload_.orderbook_ =
        ::google::protobuf::Message::DefaultConstruct<::tinkoff::pub::invest::api::contract::v1::OrderBook>(GetArena());
  }
  return _impl_.payload_.orderbook_;
}
inline ::tinkoff::pub::invest::api::contract::v1::OrderBook* MarketDataResponse::mutable_orderbook() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::pub::invest::api::contract::v1::OrderBook* _msg = _internal_mutable_orderbook();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.MarketDataResponse.orderbook)
  return _msg;
}

// .tinkoff.pub.invest.api.contract.v1.TradingStatus trading_status = 8;
inline bool MarketDataResponse::has_trading_status() const {
  return payload_case() == kTradingStatus;
}
inline bool MarketDataResponse::_internal_has_trading_status() const {
  return payload_case() == kTradingStatus;
}
inline void MarketDataResponse::set_has_trading_status() {
  _impl_._oneof_case_[0] = kTradingStatus;
}
inline void MarketDataResponse::clear_trading_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() == kTradingStatus) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.trading_status_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.trading_status_);
    }
    clear_has_payload();
  }
}
inline ::tinkoff::pub::invest::api::contract::v1::TradingStatus* MarketDataResponse::release_trading_status() {
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.MarketDataResponse.trading_status)
  if (payload_case() == kTradingStatus) {
    clear_has_payload();
    auto* temp = _impl_.payload_.trading_status_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.trading_status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tinkoff::pub::invest::api::contract::v1::TradingStatus& MarketDataResponse::_internal_trading_status() const {
  return payload_case() == kTradingStatus ? *_impl_.payload_.trading_status_ : reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::TradingStatus&>(::tinkoff::pub::invest::api::contract::v1::_TradingStatus_default_instance_);
}
inline const ::tinkoff::pub::invest::api::contract::v1::TradingStatus& MarketDataResponse::trading_status() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.MarketDataResponse.trading_status)
  return _internal_trading_status();
}
inline ::tinkoff::pub::invest::api::contract::v1::TradingStatus* MarketDataResponse::unsafe_arena_release_trading_status() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tinkoff.pub.invest.api.contract.v1.MarketDataResponse.trading_status)
  if (payload_case() == kTradingStatus) {
    clear_has_payload();
    auto* temp = _impl_.payload_.trading_status_;
    _impl_.payload_.trading_status_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MarketDataResponse::unsafe_arena_set_allocated_trading_status(::tinkoff::pub::invest::api::contract::v1::TradingStatus* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_trading_status();
    _impl_.payload_.trading_status_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.MarketDataResponse.trading_status)
}
inline ::tinkoff::pub::invest::api::contract::v1::TradingStatus* MarketDataResponse::_internal_mutable_trading_status() {
  if (payload_case() != kTradingStatus) {
    clear_payload();
    set_has_trading_status();
    _impl_.payload_.trading_status_ =
        ::google::protobuf::Message::DefaultConstruct<::tinkoff::pub::invest::api::contract::v1::TradingStatus>(GetArena());
  }
  return _impl_.payload_.trading_status_;
}
inline ::tinkoff::pub::invest::api::contract::v1::TradingStatus* MarketDataResponse::mutable_trading_status() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::pub::invest::api::contract::v1::TradingStatus* _msg = _internal_mutable_trading_status();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.MarketDataResponse.trading_status)
  return _msg;
}

// .tinkoff.pub.invest.api.contract.v1.Ping ping = 9;
inline bool MarketDataResponse::has_ping() const {
  return payload_case() == kPing;
}
inline bool MarketDataResponse::_internal_has_ping() const {
  return payload_case() == kPing;
}
inline void MarketDataResponse::set_has_ping() {
  _impl_._oneof_case_[0] = kPing;
}
inline ::tinkoff::pub::invest::api::contract::v1::Ping* MarketDataResponse::release_ping() {
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.MarketDataResponse.ping)
  if (payload_case() == kPing) {
    clear_has_payload();
    auto* temp = _impl_.payload_.ping_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.ping_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tinkoff::pub::invest::api::contract::v1::Ping& MarketDataResponse::_internal_ping() const {
  return payload_case() == kPing ? *_impl_.payload_.ping_ : reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Ping&>(::tinkoff::pub::invest::api::contract::v1::_Ping_default_instance_);
}
inline const ::tinkoff::pub::invest::api::contract::v1::Ping& MarketDataResponse::ping() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.MarketDataResponse.ping)
  return _internal_ping();
}
inline ::tinkoff::pub::invest::api::contract::v1::Ping* MarketDataResponse::unsafe_arena_release_ping() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tinkoff.pub.invest.api.contract.v1.MarketDataResponse.ping)
  if (payload_case() == kPing) {
    clear_has_payload();
    auto* temp = _impl_.payload_.ping_;
    _impl_.payload_.ping_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MarketDataResponse::unsafe_arena_set_allocated_ping(::tinkoff::pub::invest::api::contract::v1::Ping* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_ping();
    _impl_.payload_.ping_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.MarketDataResponse.ping)
}
inline ::tinkoff::pub::invest::api::contract::v1::Ping* MarketDataResponse::_internal_mutable_ping() {
  if (payload_case() != kPing) {
    clear_payload();
    set_has_ping();
    _impl_.payload_.ping_ =
        ::google::protobuf::Message::DefaultConstruct<::tinkoff::pub::invest::api::contract::v1::Ping>(GetArena());
  }
  return _impl_.payload_.ping_;
}
inline ::tinkoff::pub::invest::api::contract::v1::Ping* MarketDataResponse::mutable_ping() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::pub::invest::api::contract::v1::Ping* _msg = _internal_mutable_ping();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.MarketDataResponse.ping)
  return _msg;
}

// .tinkoff.pub.invest.api.contract.v1.SubscribeLastPriceResponse subscribe_last_price_response = 10;
inline bool MarketDataResponse::has_subscribe_last_price_response() const {
  return payload_case() == kSubscribeLastPriceResponse;
}
inline bool MarketDataResponse::_internal_has_subscribe_last_price_response() const {
  return payload_case() == kSubscribeLastPriceResponse;
}
inline void MarketDataResponse::set_has_subscribe_last_price_response() {
  _impl_._oneof_case_[0] = kSubscribeLastPriceResponse;
}
inline void MarketDataResponse::clear_subscribe_last_price_response() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() == kSubscribeLastPriceResponse) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.subscribe_last_price_response_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.subscribe_last_price_response_);
    }
    clear_has_payload();
  }
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscribeLastPriceResponse* MarketDataResponse::release_subscribe_last_price_response() {
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.MarketDataResponse.subscribe_last_price_response)
  if (payload_case() == kSubscribeLastPriceResponse) {
    clear_has_payload();
    auto* temp = _impl_.payload_.subscribe_last_price_response_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.subscribe_last_price_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tinkoff::pub::invest::api::contract::v1::SubscribeLastPriceResponse& MarketDataResponse::_internal_subscribe_last_price_response() const {
  return payload_case() == kSubscribeLastPriceResponse ? *_impl_.payload_.subscribe_last_price_response_ : reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::SubscribeLastPriceResponse&>(::tinkoff::pub::invest::api::contract::v1::_SubscribeLastPriceResponse_default_instance_);
}
inline const ::tinkoff::pub::invest::api::contract::v1::SubscribeLastPriceResponse& MarketDataResponse::subscribe_last_price_response() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.MarketDataResponse.subscribe_last_price_response)
  return _internal_subscribe_last_price_response();
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscribeLastPriceResponse* MarketDataResponse::unsafe_arena_release_subscribe_last_price_response() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tinkoff.pub.invest.api.contract.v1.MarketDataResponse.subscribe_last_price_response)
  if (payload_case() == kSubscribeLastPriceResponse) {
    clear_has_payload();
    auto* temp = _impl_.payload_.subscribe_last_price_response_;
    _impl_.payload_.subscribe_last_price_response_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MarketDataResponse::unsafe_arena_set_allocated_subscribe_last_price_response(::tinkoff::pub::invest::api::contract::v1::SubscribeLastPriceResponse* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_subscribe_last_price_response();
    _impl_.payload_.subscribe_last_price_response_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.MarketDataResponse.subscribe_last_price_response)
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscribeLastPriceResponse* MarketDataResponse::_internal_mutable_subscribe_last_price_response() {
  if (payload_case() != kSubscribeLastPriceResponse) {
    clear_payload();
    set_has_subscribe_last_price_response();
    _impl_.payload_.subscribe_last_price_response_ =
        ::google::protobuf::Message::DefaultConstruct<::tinkoff::pub::invest::api::contract::v1::SubscribeLastPriceResponse>(GetArena());
  }
  return _impl_.payload_.subscribe_last_price_response_;
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscribeLastPriceResponse* MarketDataResponse::mutable_subscribe_last_price_response() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::pub::invest::api::contract::v1::SubscribeLastPriceResponse* _msg = _internal_mutable_subscribe_last_price_response();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.MarketDataResponse.subscribe_last_price_response)
  return _msg;
}

// .tinkoff.pub.invest.api.contract.v1.LastPrice last_price = 11;
inline bool MarketDataResponse::has_last_price() const {
  return payload_case() == kLastPrice;
}
inline bool MarketDataResponse::_internal_has_last_price() const {
  return payload_case() == kLastPrice;
}
inline void MarketDataResponse::set_has_last_price() {
  _impl_._oneof_case_[0] = kLastPrice;
}
inline void MarketDataResponse::clear_last_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (payload_case() == kLastPrice) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.last_price_;
    } else if (::google::protobuf::internal::DebugHardenClearOneofMessageOnArena()) {
      ::google::protobuf::internal::MaybePoisonAfterClear(_impl_.payload_.last_price_);
    }
    clear_has_payload();
  }
}
inline ::tinkoff::pub::invest::api::contract::v1::LastPrice* MarketDataResponse::release_last_price() {
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.MarketDataResponse.last_price)
  if (payload_case() == kLastPrice) {
    clear_has_payload();
    auto* temp = _impl_.payload_.last_price_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.last_price_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::tinkoff::pub::invest::api::contract::v1::LastPrice& MarketDataResponse::_internal_last_price() const {
  return payload_case() == kLastPrice ? *_impl_.payload_.last_price_ : reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::LastPrice&>(::tinkoff::pub::invest::api::contract::v1::_LastPrice_default_instance_);
}
inline const ::tinkoff::pub::invest::api::contract::v1::LastPrice& MarketDataResponse::last_price() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.MarketDataResponse.last_price)
  return _internal_last_price();
}
inline ::tinkoff::pub::invest::api::contract::v1::LastPrice* MarketDataResponse::unsafe_arena_release_last_price() {
  // @@protoc_insertion_point(field_unsafe_arena_release:tinkoff.pub.invest.api.contract.v1.MarketDataResponse.last_price)
  if (payload_case() == kLastPrice) {
    clear_has_payload();
    auto* temp = _impl_.payload_.last_price_;
    _impl_.payload_.last_price_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MarketDataResponse::unsafe_arena_set_allocated_last_price(::tinkoff::pub::invest::api::contract::v1::LastPrice* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_last_price();
    _impl_.payload_.last_price_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.MarketDataResponse.last_price)
}
inline ::tinkoff::pub::invest::api::contract::v1::LastPrice* MarketDataResponse::_internal_mutable_last_price() {
  if (payload_case() != kLastPrice) {
    clear_payload();
    set_has_last_price();
    _impl_.payload_.last_price_ =
        ::google::protobuf::Message::DefaultConstruct<::tinkoff::pub::invest::api::contract::v1::LastPrice>(GetArena());
  }
  return _impl_.payload_.last_price_;
}
inline ::tinkoff::pub::invest::api::contract::v1::LastPrice* MarketDataResponse::mutable_last_price() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::tinkoff::pub::invest::api::contract::v1::LastPrice* _msg = _internal_mutable_last_price();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.MarketDataResponse.last_price)
  return _msg;
}

inline bool MarketDataResponse::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void MarketDataResponse::clear_has_payload() {
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline MarketDataResponse::PayloadCase MarketDataResponse::payload_case() const {
  return MarketDataResponse::PayloadCase(_impl_._oneof_case_[0]);
}
// -------------------------------------------------------------------

// SubscribeCandlesRequest

// .tinkoff.pub.invest.api.contract.v1.SubscriptionAction subscription_action = 1;
inline void SubscribeCandlesRequest::clear_subscription_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscription_action_ = 0;
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscriptionAction SubscribeCandlesRequest::subscription_action() const {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.SubscribeCandlesRequest.subscription_action)
  return _internal_subscription_action();
}
inline void SubscribeCandlesRequest::set_subscription_action(::tinkoff::pub::invest::api::contract::v1::SubscriptionAction value) {
  _internal_set_subscription_action(value);
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.SubscribeCandlesRequest.subscription_action)
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscriptionAction SubscribeCandlesRequest::_internal_subscription_action() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tinkoff::pub::invest::api::contract::v1::SubscriptionAction>(_impl_.subscription_action_);
}
inline void SubscribeCandlesRequest::_internal_set_subscription_action(::tinkoff::pub::invest::api::contract::v1::SubscriptionAction value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscription_action_ = value;
}

// repeated .tinkoff.pub.invest.api.contract.v1.CandleInstrument instruments = 2;
inline int SubscribeCandlesRequest::_internal_instruments_size() const {
  return _internal_instruments().size();
}
inline int SubscribeCandlesRequest::instruments_size() const {
  return _internal_instruments_size();
}
inline void SubscribeCandlesRequest::clear_instruments() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instruments_.Clear();
}
inline ::tinkoff::pub::invest::api::contract::v1::CandleInstrument* SubscribeCandlesRequest::mutable_instruments(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.SubscribeCandlesRequest.instruments)
  return _internal_mutable_instruments()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::CandleInstrument>* SubscribeCandlesRequest::mutable_instruments()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.pub.invest.api.contract.v1.SubscribeCandlesRequest.instruments)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_instruments();
}
inline const ::tinkoff::pub::invest::api::contract::v1::CandleInstrument& SubscribeCandlesRequest::instruments(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.SubscribeCandlesRequest.instruments)
  return _internal_instruments().Get(index);
}
inline ::tinkoff::pub::invest::api::contract::v1::CandleInstrument* SubscribeCandlesRequest::add_instruments() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tinkoff::pub::invest::api::contract::v1::CandleInstrument* _add = _internal_mutable_instruments()->Add();
  // @@protoc_insertion_point(field_add:tinkoff.pub.invest.api.contract.v1.SubscribeCandlesRequest.instruments)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::CandleInstrument>& SubscribeCandlesRequest::instruments() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tinkoff.pub.invest.api.contract.v1.SubscribeCandlesRequest.instruments)
  return _internal_instruments();
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::CandleInstrument>&
SubscribeCandlesRequest::_internal_instruments() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.instruments_;
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::CandleInstrument>*
SubscribeCandlesRequest::_internal_mutable_instruments() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.instruments_;
}

// bool waiting_close = 3;
inline void SubscribeCandlesRequest::clear_waiting_close() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.waiting_close_ = false;
}
inline bool SubscribeCandlesRequest::waiting_close() const {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.SubscribeCandlesRequest.waiting_close)
  return _internal_waiting_close();
}
inline void SubscribeCandlesRequest::set_waiting_close(bool value) {
  _internal_set_waiting_close(value);
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.SubscribeCandlesRequest.waiting_close)
}
inline bool SubscribeCandlesRequest::_internal_waiting_close() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.waiting_close_;
}
inline void SubscribeCandlesRequest::_internal_set_waiting_close(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.waiting_close_ = value;
}

// optional .tinkoff.pub.invest.api.contract.v1.GetCandlesRequest.CandleSource candle_source_type = 9;
inline bool SubscribeCandlesRequest::has_candle_source_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void SubscribeCandlesRequest::clear_candle_source_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.candle_source_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::tinkoff::pub::invest::api::contract::v1::GetCandlesRequest_CandleSource SubscribeCandlesRequest::candle_source_type() const {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.SubscribeCandlesRequest.candle_source_type)
  return _internal_candle_source_type();
}
inline void SubscribeCandlesRequest::set_candle_source_type(::tinkoff::pub::invest::api::contract::v1::GetCandlesRequest_CandleSource value) {
  _internal_set_candle_source_type(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.SubscribeCandlesRequest.candle_source_type)
}
inline ::tinkoff::pub::invest::api::contract::v1::GetCandlesRequest_CandleSource SubscribeCandlesRequest::_internal_candle_source_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tinkoff::pub::invest::api::contract::v1::GetCandlesRequest_CandleSource>(_impl_.candle_source_type_);
}
inline void SubscribeCandlesRequest::_internal_set_candle_source_type(::tinkoff::pub::invest::api::contract::v1::GetCandlesRequest_CandleSource value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.candle_source_type_ = value;
}

// -------------------------------------------------------------------

// CandleInstrument

// string figi = 1 [deprecated = true];
inline void CandleInstrument::clear_figi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.ClearToEmpty();
}
inline const std::string& CandleInstrument::figi() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.CandleInstrument.figi)
  return _internal_figi();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CandleInstrument::set_figi(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.CandleInstrument.figi)
}
inline std::string* CandleInstrument::mutable_figi() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_figi();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.CandleInstrument.figi)
  return _s;
}
inline const std::string& CandleInstrument::_internal_figi() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.figi_.Get();
}
inline void CandleInstrument::_internal_set_figi(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.Set(value, GetArena());
}
inline std::string* CandleInstrument::_internal_mutable_figi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.figi_.Mutable( GetArena());
}
inline std::string* CandleInstrument::release_figi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.CandleInstrument.figi)
  return _impl_.figi_.Release();
}
inline void CandleInstrument::set_allocated_figi(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.figi_.IsDefault()) {
    _impl_.figi_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.CandleInstrument.figi)
}

// .tinkoff.pub.invest.api.contract.v1.SubscriptionInterval interval = 2;
inline void CandleInstrument::clear_interval() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.interval_ = 0;
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscriptionInterval CandleInstrument::interval() const {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.CandleInstrument.interval)
  return _internal_interval();
}
inline void CandleInstrument::set_interval(::tinkoff::pub::invest::api::contract::v1::SubscriptionInterval value) {
  _internal_set_interval(value);
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.CandleInstrument.interval)
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscriptionInterval CandleInstrument::_internal_interval() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tinkoff::pub::invest::api::contract::v1::SubscriptionInterval>(_impl_.interval_);
}
inline void CandleInstrument::_internal_set_interval(::tinkoff::pub::invest::api::contract::v1::SubscriptionInterval value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.interval_ = value;
}

// string instrument_id = 3;
inline void CandleInstrument::clear_instrument_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_id_.ClearToEmpty();
}
inline const std::string& CandleInstrument::instrument_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.CandleInstrument.instrument_id)
  return _internal_instrument_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CandleInstrument::set_instrument_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.CandleInstrument.instrument_id)
}
inline std::string* CandleInstrument::mutable_instrument_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_instrument_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.CandleInstrument.instrument_id)
  return _s;
}
inline const std::string& CandleInstrument::_internal_instrument_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.instrument_id_.Get();
}
inline void CandleInstrument::_internal_set_instrument_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_id_.Set(value, GetArena());
}
inline std::string* CandleInstrument::_internal_mutable_instrument_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.instrument_id_.Mutable( GetArena());
}
inline std::string* CandleInstrument::release_instrument_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.CandleInstrument.instrument_id)
  return _impl_.instrument_id_.Release();
}
inline void CandleInstrument::set_allocated_instrument_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.instrument_id_.IsDefault()) {
    _impl_.instrument_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.CandleInstrument.instrument_id)
}

// -------------------------------------------------------------------

// SubscribeCandlesResponse

// string tracking_id = 1;
inline void SubscribeCandlesResponse::clear_tracking_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tracking_id_.ClearToEmpty();
}
inline const std::string& SubscribeCandlesResponse::tracking_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.SubscribeCandlesResponse.tracking_id)
  return _internal_tracking_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SubscribeCandlesResponse::set_tracking_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tracking_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.SubscribeCandlesResponse.tracking_id)
}
inline std::string* SubscribeCandlesResponse::mutable_tracking_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_tracking_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.SubscribeCandlesResponse.tracking_id)
  return _s;
}
inline const std::string& SubscribeCandlesResponse::_internal_tracking_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.tracking_id_.Get();
}
inline void SubscribeCandlesResponse::_internal_set_tracking_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tracking_id_.Set(value, GetArena());
}
inline std::string* SubscribeCandlesResponse::_internal_mutable_tracking_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.tracking_id_.Mutable( GetArena());
}
inline std::string* SubscribeCandlesResponse::release_tracking_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.SubscribeCandlesResponse.tracking_id)
  return _impl_.tracking_id_.Release();
}
inline void SubscribeCandlesResponse::set_allocated_tracking_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tracking_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.tracking_id_.IsDefault()) {
    _impl_.tracking_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.SubscribeCandlesResponse.tracking_id)
}

// repeated .tinkoff.pub.invest.api.contract.v1.CandleSubscription candles_subscriptions = 2;
inline int SubscribeCandlesResponse::_internal_candles_subscriptions_size() const {
  return _internal_candles_subscriptions().size();
}
inline int SubscribeCandlesResponse::candles_subscriptions_size() const {
  return _internal_candles_subscriptions_size();
}
inline void SubscribeCandlesResponse::clear_candles_subscriptions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.candles_subscriptions_.Clear();
}
inline ::tinkoff::pub::invest::api::contract::v1::CandleSubscription* SubscribeCandlesResponse::mutable_candles_subscriptions(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.SubscribeCandlesResponse.candles_subscriptions)
  return _internal_mutable_candles_subscriptions()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::CandleSubscription>* SubscribeCandlesResponse::mutable_candles_subscriptions()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.pub.invest.api.contract.v1.SubscribeCandlesResponse.candles_subscriptions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_candles_subscriptions();
}
inline const ::tinkoff::pub::invest::api::contract::v1::CandleSubscription& SubscribeCandlesResponse::candles_subscriptions(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.SubscribeCandlesResponse.candles_subscriptions)
  return _internal_candles_subscriptions().Get(index);
}
inline ::tinkoff::pub::invest::api::contract::v1::CandleSubscription* SubscribeCandlesResponse::add_candles_subscriptions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tinkoff::pub::invest::api::contract::v1::CandleSubscription* _add = _internal_mutable_candles_subscriptions()->Add();
  // @@protoc_insertion_point(field_add:tinkoff.pub.invest.api.contract.v1.SubscribeCandlesResponse.candles_subscriptions)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::CandleSubscription>& SubscribeCandlesResponse::candles_subscriptions() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tinkoff.pub.invest.api.contract.v1.SubscribeCandlesResponse.candles_subscriptions)
  return _internal_candles_subscriptions();
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::CandleSubscription>&
SubscribeCandlesResponse::_internal_candles_subscriptions() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.candles_subscriptions_;
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::CandleSubscription>*
SubscribeCandlesResponse::_internal_mutable_candles_subscriptions() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.candles_subscriptions_;
}

// -------------------------------------------------------------------

// CandleSubscription

// string figi = 1;
inline void CandleSubscription::clear_figi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.ClearToEmpty();
}
inline const std::string& CandleSubscription::figi() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.CandleSubscription.figi)
  return _internal_figi();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CandleSubscription::set_figi(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.CandleSubscription.figi)
}
inline std::string* CandleSubscription::mutable_figi() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_figi();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.CandleSubscription.figi)
  return _s;
}
inline const std::string& CandleSubscription::_internal_figi() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.figi_.Get();
}
inline void CandleSubscription::_internal_set_figi(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.Set(value, GetArena());
}
inline std::string* CandleSubscription::_internal_mutable_figi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.figi_.Mutable( GetArena());
}
inline std::string* CandleSubscription::release_figi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.CandleSubscription.figi)
  return _impl_.figi_.Release();
}
inline void CandleSubscription::set_allocated_figi(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.figi_.IsDefault()) {
    _impl_.figi_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.CandleSubscription.figi)
}

// .tinkoff.pub.invest.api.contract.v1.SubscriptionInterval interval = 2;
inline void CandleSubscription::clear_interval() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.interval_ = 0;
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscriptionInterval CandleSubscription::interval() const {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.CandleSubscription.interval)
  return _internal_interval();
}
inline void CandleSubscription::set_interval(::tinkoff::pub::invest::api::contract::v1::SubscriptionInterval value) {
  _internal_set_interval(value);
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.CandleSubscription.interval)
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscriptionInterval CandleSubscription::_internal_interval() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tinkoff::pub::invest::api::contract::v1::SubscriptionInterval>(_impl_.interval_);
}
inline void CandleSubscription::_internal_set_interval(::tinkoff::pub::invest::api::contract::v1::SubscriptionInterval value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.interval_ = value;
}

// .tinkoff.pub.invest.api.contract.v1.SubscriptionStatus subscription_status = 3;
inline void CandleSubscription::clear_subscription_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscription_status_ = 0;
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscriptionStatus CandleSubscription::subscription_status() const {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.CandleSubscription.subscription_status)
  return _internal_subscription_status();
}
inline void CandleSubscription::set_subscription_status(::tinkoff::pub::invest::api::contract::v1::SubscriptionStatus value) {
  _internal_set_subscription_status(value);
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.CandleSubscription.subscription_status)
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscriptionStatus CandleSubscription::_internal_subscription_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tinkoff::pub::invest::api::contract::v1::SubscriptionStatus>(_impl_.subscription_status_);
}
inline void CandleSubscription::_internal_set_subscription_status(::tinkoff::pub::invest::api::contract::v1::SubscriptionStatus value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscription_status_ = value;
}

// string instrument_uid = 4;
inline void CandleSubscription::clear_instrument_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_uid_.ClearToEmpty();
}
inline const std::string& CandleSubscription::instrument_uid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.CandleSubscription.instrument_uid)
  return _internal_instrument_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CandleSubscription::set_instrument_uid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.CandleSubscription.instrument_uid)
}
inline std::string* CandleSubscription::mutable_instrument_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_instrument_uid();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.CandleSubscription.instrument_uid)
  return _s;
}
inline const std::string& CandleSubscription::_internal_instrument_uid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.instrument_uid_.Get();
}
inline void CandleSubscription::_internal_set_instrument_uid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_uid_.Set(value, GetArena());
}
inline std::string* CandleSubscription::_internal_mutable_instrument_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.instrument_uid_.Mutable( GetArena());
}
inline std::string* CandleSubscription::release_instrument_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.CandleSubscription.instrument_uid)
  return _impl_.instrument_uid_.Release();
}
inline void CandleSubscription::set_allocated_instrument_uid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_uid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.instrument_uid_.IsDefault()) {
    _impl_.instrument_uid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.CandleSubscription.instrument_uid)
}

// bool waiting_close = 5;
inline void CandleSubscription::clear_waiting_close() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.waiting_close_ = false;
}
inline bool CandleSubscription::waiting_close() const {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.CandleSubscription.waiting_close)
  return _internal_waiting_close();
}
inline void CandleSubscription::set_waiting_close(bool value) {
  _internal_set_waiting_close(value);
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.CandleSubscription.waiting_close)
}
inline bool CandleSubscription::_internal_waiting_close() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.waiting_close_;
}
inline void CandleSubscription::_internal_set_waiting_close(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.waiting_close_ = value;
}

// string stream_id = 6;
inline void CandleSubscription::clear_stream_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stream_id_.ClearToEmpty();
}
inline const std::string& CandleSubscription::stream_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.CandleSubscription.stream_id)
  return _internal_stream_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CandleSubscription::set_stream_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stream_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.CandleSubscription.stream_id)
}
inline std::string* CandleSubscription::mutable_stream_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_stream_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.CandleSubscription.stream_id)
  return _s;
}
inline const std::string& CandleSubscription::_internal_stream_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.stream_id_.Get();
}
inline void CandleSubscription::_internal_set_stream_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stream_id_.Set(value, GetArena());
}
inline std::string* CandleSubscription::_internal_mutable_stream_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.stream_id_.Mutable( GetArena());
}
inline std::string* CandleSubscription::release_stream_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.CandleSubscription.stream_id)
  return _impl_.stream_id_.Release();
}
inline void CandleSubscription::set_allocated_stream_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stream_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.stream_id_.IsDefault()) {
    _impl_.stream_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.CandleSubscription.stream_id)
}

// string subscription_id = 7;
inline void CandleSubscription::clear_subscription_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscription_id_.ClearToEmpty();
}
inline const std::string& CandleSubscription::subscription_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.CandleSubscription.subscription_id)
  return _internal_subscription_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void CandleSubscription::set_subscription_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscription_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.CandleSubscription.subscription_id)
}
inline std::string* CandleSubscription::mutable_subscription_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_subscription_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.CandleSubscription.subscription_id)
  return _s;
}
inline const std::string& CandleSubscription::_internal_subscription_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.subscription_id_.Get();
}
inline void CandleSubscription::_internal_set_subscription_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscription_id_.Set(value, GetArena());
}
inline std::string* CandleSubscription::_internal_mutable_subscription_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.subscription_id_.Mutable( GetArena());
}
inline std::string* CandleSubscription::release_subscription_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.CandleSubscription.subscription_id)
  return _impl_.subscription_id_.Release();
}
inline void CandleSubscription::set_allocated_subscription_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscription_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.subscription_id_.IsDefault()) {
    _impl_.subscription_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.CandleSubscription.subscription_id)
}

// optional .tinkoff.pub.invest.api.contract.v1.GetCandlesRequest.CandleSource candle_source_type = 9;
inline bool CandleSubscription::has_candle_source_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void CandleSubscription::clear_candle_source_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.candle_source_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::tinkoff::pub::invest::api::contract::v1::GetCandlesRequest_CandleSource CandleSubscription::candle_source_type() const {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.CandleSubscription.candle_source_type)
  return _internal_candle_source_type();
}
inline void CandleSubscription::set_candle_source_type(::tinkoff::pub::invest::api::contract::v1::GetCandlesRequest_CandleSource value) {
  _internal_set_candle_source_type(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.CandleSubscription.candle_source_type)
}
inline ::tinkoff::pub::invest::api::contract::v1::GetCandlesRequest_CandleSource CandleSubscription::_internal_candle_source_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tinkoff::pub::invest::api::contract::v1::GetCandlesRequest_CandleSource>(_impl_.candle_source_type_);
}
inline void CandleSubscription::_internal_set_candle_source_type(::tinkoff::pub::invest::api::contract::v1::GetCandlesRequest_CandleSource value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.candle_source_type_ = value;
}

// -------------------------------------------------------------------

// SubscribeOrderBookRequest

// .tinkoff.pub.invest.api.contract.v1.SubscriptionAction subscription_action = 1;
inline void SubscribeOrderBookRequest::clear_subscription_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscription_action_ = 0;
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscriptionAction SubscribeOrderBookRequest::subscription_action() const {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.SubscribeOrderBookRequest.subscription_action)
  return _internal_subscription_action();
}
inline void SubscribeOrderBookRequest::set_subscription_action(::tinkoff::pub::invest::api::contract::v1::SubscriptionAction value) {
  _internal_set_subscription_action(value);
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.SubscribeOrderBookRequest.subscription_action)
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscriptionAction SubscribeOrderBookRequest::_internal_subscription_action() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tinkoff::pub::invest::api::contract::v1::SubscriptionAction>(_impl_.subscription_action_);
}
inline void SubscribeOrderBookRequest::_internal_set_subscription_action(::tinkoff::pub::invest::api::contract::v1::SubscriptionAction value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscription_action_ = value;
}

// repeated .tinkoff.pub.invest.api.contract.v1.OrderBookInstrument instruments = 2;
inline int SubscribeOrderBookRequest::_internal_instruments_size() const {
  return _internal_instruments().size();
}
inline int SubscribeOrderBookRequest::instruments_size() const {
  return _internal_instruments_size();
}
inline void SubscribeOrderBookRequest::clear_instruments() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instruments_.Clear();
}
inline ::tinkoff::pub::invest::api::contract::v1::OrderBookInstrument* SubscribeOrderBookRequest::mutable_instruments(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.SubscribeOrderBookRequest.instruments)
  return _internal_mutable_instruments()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::OrderBookInstrument>* SubscribeOrderBookRequest::mutable_instruments()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.pub.invest.api.contract.v1.SubscribeOrderBookRequest.instruments)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_instruments();
}
inline const ::tinkoff::pub::invest::api::contract::v1::OrderBookInstrument& SubscribeOrderBookRequest::instruments(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.SubscribeOrderBookRequest.instruments)
  return _internal_instruments().Get(index);
}
inline ::tinkoff::pub::invest::api::contract::v1::OrderBookInstrument* SubscribeOrderBookRequest::add_instruments() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tinkoff::pub::invest::api::contract::v1::OrderBookInstrument* _add = _internal_mutable_instruments()->Add();
  // @@protoc_insertion_point(field_add:tinkoff.pub.invest.api.contract.v1.SubscribeOrderBookRequest.instruments)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::OrderBookInstrument>& SubscribeOrderBookRequest::instruments() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tinkoff.pub.invest.api.contract.v1.SubscribeOrderBookRequest.instruments)
  return _internal_instruments();
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::OrderBookInstrument>&
SubscribeOrderBookRequest::_internal_instruments() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.instruments_;
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::OrderBookInstrument>*
SubscribeOrderBookRequest::_internal_mutable_instruments() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.instruments_;
}

// -------------------------------------------------------------------

// OrderBookInstrument

// string figi = 1 [deprecated = true];
inline void OrderBookInstrument::clear_figi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.ClearToEmpty();
}
inline const std::string& OrderBookInstrument::figi() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.OrderBookInstrument.figi)
  return _internal_figi();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderBookInstrument::set_figi(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.OrderBookInstrument.figi)
}
inline std::string* OrderBookInstrument::mutable_figi() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_figi();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.OrderBookInstrument.figi)
  return _s;
}
inline const std::string& OrderBookInstrument::_internal_figi() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.figi_.Get();
}
inline void OrderBookInstrument::_internal_set_figi(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.Set(value, GetArena());
}
inline std::string* OrderBookInstrument::_internal_mutable_figi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.figi_.Mutable( GetArena());
}
inline std::string* OrderBookInstrument::release_figi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.OrderBookInstrument.figi)
  return _impl_.figi_.Release();
}
inline void OrderBookInstrument::set_allocated_figi(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.figi_.IsDefault()) {
    _impl_.figi_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.OrderBookInstrument.figi)
}

// int32 depth = 2;
inline void OrderBookInstrument::clear_depth() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.depth_ = 0;
}
inline ::int32_t OrderBookInstrument::depth() const {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.OrderBookInstrument.depth)
  return _internal_depth();
}
inline void OrderBookInstrument::set_depth(::int32_t value) {
  _internal_set_depth(value);
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.OrderBookInstrument.depth)
}
inline ::int32_t OrderBookInstrument::_internal_depth() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.depth_;
}
inline void OrderBookInstrument::_internal_set_depth(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.depth_ = value;
}

// string instrument_id = 3;
inline void OrderBookInstrument::clear_instrument_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_id_.ClearToEmpty();
}
inline const std::string& OrderBookInstrument::instrument_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.OrderBookInstrument.instrument_id)
  return _internal_instrument_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderBookInstrument::set_instrument_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.OrderBookInstrument.instrument_id)
}
inline std::string* OrderBookInstrument::mutable_instrument_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_instrument_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.OrderBookInstrument.instrument_id)
  return _s;
}
inline const std::string& OrderBookInstrument::_internal_instrument_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.instrument_id_.Get();
}
inline void OrderBookInstrument::_internal_set_instrument_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_id_.Set(value, GetArena());
}
inline std::string* OrderBookInstrument::_internal_mutable_instrument_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.instrument_id_.Mutable( GetArena());
}
inline std::string* OrderBookInstrument::release_instrument_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.OrderBookInstrument.instrument_id)
  return _impl_.instrument_id_.Release();
}
inline void OrderBookInstrument::set_allocated_instrument_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.instrument_id_.IsDefault()) {
    _impl_.instrument_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.OrderBookInstrument.instrument_id)
}

// .tinkoff.pub.invest.api.contract.v1.OrderBookType order_book_type = 4;
inline void OrderBookInstrument::clear_order_book_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.order_book_type_ = 0;
}
inline ::tinkoff::pub::invest::api::contract::v1::OrderBookType OrderBookInstrument::order_book_type() const {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.OrderBookInstrument.order_book_type)
  return _internal_order_book_type();
}
inline void OrderBookInstrument::set_order_book_type(::tinkoff::pub::invest::api::contract::v1::OrderBookType value) {
  _internal_set_order_book_type(value);
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.OrderBookInstrument.order_book_type)
}
inline ::tinkoff::pub::invest::api::contract::v1::OrderBookType OrderBookInstrument::_internal_order_book_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tinkoff::pub::invest::api::contract::v1::OrderBookType>(_impl_.order_book_type_);
}
inline void OrderBookInstrument::_internal_set_order_book_type(::tinkoff::pub::invest::api::contract::v1::OrderBookType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.order_book_type_ = value;
}

// -------------------------------------------------------------------

// SubscribeOrderBookResponse

// string tracking_id = 1;
inline void SubscribeOrderBookResponse::clear_tracking_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tracking_id_.ClearToEmpty();
}
inline const std::string& SubscribeOrderBookResponse::tracking_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.SubscribeOrderBookResponse.tracking_id)
  return _internal_tracking_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SubscribeOrderBookResponse::set_tracking_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tracking_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.SubscribeOrderBookResponse.tracking_id)
}
inline std::string* SubscribeOrderBookResponse::mutable_tracking_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_tracking_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.SubscribeOrderBookResponse.tracking_id)
  return _s;
}
inline const std::string& SubscribeOrderBookResponse::_internal_tracking_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.tracking_id_.Get();
}
inline void SubscribeOrderBookResponse::_internal_set_tracking_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tracking_id_.Set(value, GetArena());
}
inline std::string* SubscribeOrderBookResponse::_internal_mutable_tracking_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.tracking_id_.Mutable( GetArena());
}
inline std::string* SubscribeOrderBookResponse::release_tracking_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.SubscribeOrderBookResponse.tracking_id)
  return _impl_.tracking_id_.Release();
}
inline void SubscribeOrderBookResponse::set_allocated_tracking_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tracking_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.tracking_id_.IsDefault()) {
    _impl_.tracking_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.SubscribeOrderBookResponse.tracking_id)
}

// repeated .tinkoff.pub.invest.api.contract.v1.OrderBookSubscription order_book_subscriptions = 2;
inline int SubscribeOrderBookResponse::_internal_order_book_subscriptions_size() const {
  return _internal_order_book_subscriptions().size();
}
inline int SubscribeOrderBookResponse::order_book_subscriptions_size() const {
  return _internal_order_book_subscriptions_size();
}
inline void SubscribeOrderBookResponse::clear_order_book_subscriptions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.order_book_subscriptions_.Clear();
}
inline ::tinkoff::pub::invest::api::contract::v1::OrderBookSubscription* SubscribeOrderBookResponse::mutable_order_book_subscriptions(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.SubscribeOrderBookResponse.order_book_subscriptions)
  return _internal_mutable_order_book_subscriptions()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::OrderBookSubscription>* SubscribeOrderBookResponse::mutable_order_book_subscriptions()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.pub.invest.api.contract.v1.SubscribeOrderBookResponse.order_book_subscriptions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_order_book_subscriptions();
}
inline const ::tinkoff::pub::invest::api::contract::v1::OrderBookSubscription& SubscribeOrderBookResponse::order_book_subscriptions(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.SubscribeOrderBookResponse.order_book_subscriptions)
  return _internal_order_book_subscriptions().Get(index);
}
inline ::tinkoff::pub::invest::api::contract::v1::OrderBookSubscription* SubscribeOrderBookResponse::add_order_book_subscriptions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tinkoff::pub::invest::api::contract::v1::OrderBookSubscription* _add = _internal_mutable_order_book_subscriptions()->Add();
  // @@protoc_insertion_point(field_add:tinkoff.pub.invest.api.contract.v1.SubscribeOrderBookResponse.order_book_subscriptions)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::OrderBookSubscription>& SubscribeOrderBookResponse::order_book_subscriptions() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tinkoff.pub.invest.api.contract.v1.SubscribeOrderBookResponse.order_book_subscriptions)
  return _internal_order_book_subscriptions();
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::OrderBookSubscription>&
SubscribeOrderBookResponse::_internal_order_book_subscriptions() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.order_book_subscriptions_;
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::OrderBookSubscription>*
SubscribeOrderBookResponse::_internal_mutable_order_book_subscriptions() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.order_book_subscriptions_;
}

// -------------------------------------------------------------------

// OrderBookSubscription

// string figi = 1;
inline void OrderBookSubscription::clear_figi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.ClearToEmpty();
}
inline const std::string& OrderBookSubscription::figi() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.OrderBookSubscription.figi)
  return _internal_figi();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderBookSubscription::set_figi(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.OrderBookSubscription.figi)
}
inline std::string* OrderBookSubscription::mutable_figi() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_figi();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.OrderBookSubscription.figi)
  return _s;
}
inline const std::string& OrderBookSubscription::_internal_figi() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.figi_.Get();
}
inline void OrderBookSubscription::_internal_set_figi(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.Set(value, GetArena());
}
inline std::string* OrderBookSubscription::_internal_mutable_figi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.figi_.Mutable( GetArena());
}
inline std::string* OrderBookSubscription::release_figi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.OrderBookSubscription.figi)
  return _impl_.figi_.Release();
}
inline void OrderBookSubscription::set_allocated_figi(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.figi_.IsDefault()) {
    _impl_.figi_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.OrderBookSubscription.figi)
}

// int32 depth = 2;
inline void OrderBookSubscription::clear_depth() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.depth_ = 0;
}
inline ::int32_t OrderBookSubscription::depth() const {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.OrderBookSubscription.depth)
  return _internal_depth();
}
inline void OrderBookSubscription::set_depth(::int32_t value) {
  _internal_set_depth(value);
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.OrderBookSubscription.depth)
}
inline ::int32_t OrderBookSubscription::_internal_depth() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.depth_;
}
inline void OrderBookSubscription::_internal_set_depth(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.depth_ = value;
}

// .tinkoff.pub.invest.api.contract.v1.SubscriptionStatus subscription_status = 3;
inline void OrderBookSubscription::clear_subscription_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscription_status_ = 0;
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscriptionStatus OrderBookSubscription::subscription_status() const {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.OrderBookSubscription.subscription_status)
  return _internal_subscription_status();
}
inline void OrderBookSubscription::set_subscription_status(::tinkoff::pub::invest::api::contract::v1::SubscriptionStatus value) {
  _internal_set_subscription_status(value);
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.OrderBookSubscription.subscription_status)
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscriptionStatus OrderBookSubscription::_internal_subscription_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tinkoff::pub::invest::api::contract::v1::SubscriptionStatus>(_impl_.subscription_status_);
}
inline void OrderBookSubscription::_internal_set_subscription_status(::tinkoff::pub::invest::api::contract::v1::SubscriptionStatus value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscription_status_ = value;
}

// string instrument_uid = 4;
inline void OrderBookSubscription::clear_instrument_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_uid_.ClearToEmpty();
}
inline const std::string& OrderBookSubscription::instrument_uid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.OrderBookSubscription.instrument_uid)
  return _internal_instrument_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderBookSubscription::set_instrument_uid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.OrderBookSubscription.instrument_uid)
}
inline std::string* OrderBookSubscription::mutable_instrument_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_instrument_uid();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.OrderBookSubscription.instrument_uid)
  return _s;
}
inline const std::string& OrderBookSubscription::_internal_instrument_uid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.instrument_uid_.Get();
}
inline void OrderBookSubscription::_internal_set_instrument_uid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_uid_.Set(value, GetArena());
}
inline std::string* OrderBookSubscription::_internal_mutable_instrument_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.instrument_uid_.Mutable( GetArena());
}
inline std::string* OrderBookSubscription::release_instrument_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.OrderBookSubscription.instrument_uid)
  return _impl_.instrument_uid_.Release();
}
inline void OrderBookSubscription::set_allocated_instrument_uid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_uid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.instrument_uid_.IsDefault()) {
    _impl_.instrument_uid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.OrderBookSubscription.instrument_uid)
}

// string stream_id = 5;
inline void OrderBookSubscription::clear_stream_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stream_id_.ClearToEmpty();
}
inline const std::string& OrderBookSubscription::stream_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.OrderBookSubscription.stream_id)
  return _internal_stream_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderBookSubscription::set_stream_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stream_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.OrderBookSubscription.stream_id)
}
inline std::string* OrderBookSubscription::mutable_stream_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_stream_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.OrderBookSubscription.stream_id)
  return _s;
}
inline const std::string& OrderBookSubscription::_internal_stream_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.stream_id_.Get();
}
inline void OrderBookSubscription::_internal_set_stream_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stream_id_.Set(value, GetArena());
}
inline std::string* OrderBookSubscription::_internal_mutable_stream_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.stream_id_.Mutable( GetArena());
}
inline std::string* OrderBookSubscription::release_stream_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.OrderBookSubscription.stream_id)
  return _impl_.stream_id_.Release();
}
inline void OrderBookSubscription::set_allocated_stream_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stream_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.stream_id_.IsDefault()) {
    _impl_.stream_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.OrderBookSubscription.stream_id)
}

// string subscription_id = 6;
inline void OrderBookSubscription::clear_subscription_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscription_id_.ClearToEmpty();
}
inline const std::string& OrderBookSubscription::subscription_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.OrderBookSubscription.subscription_id)
  return _internal_subscription_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderBookSubscription::set_subscription_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscription_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.OrderBookSubscription.subscription_id)
}
inline std::string* OrderBookSubscription::mutable_subscription_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_subscription_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.OrderBookSubscription.subscription_id)
  return _s;
}
inline const std::string& OrderBookSubscription::_internal_subscription_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.subscription_id_.Get();
}
inline void OrderBookSubscription::_internal_set_subscription_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscription_id_.Set(value, GetArena());
}
inline std::string* OrderBookSubscription::_internal_mutable_subscription_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.subscription_id_.Mutable( GetArena());
}
inline std::string* OrderBookSubscription::release_subscription_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.OrderBookSubscription.subscription_id)
  return _impl_.subscription_id_.Release();
}
inline void OrderBookSubscription::set_allocated_subscription_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscription_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.subscription_id_.IsDefault()) {
    _impl_.subscription_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.OrderBookSubscription.subscription_id)
}

// .tinkoff.pub.invest.api.contract.v1.OrderBookType order_book_type = 7;
inline void OrderBookSubscription::clear_order_book_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.order_book_type_ = 0;
}
inline ::tinkoff::pub::invest::api::contract::v1::OrderBookType OrderBookSubscription::order_book_type() const {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.OrderBookSubscription.order_book_type)
  return _internal_order_book_type();
}
inline void OrderBookSubscription::set_order_book_type(::tinkoff::pub::invest::api::contract::v1::OrderBookType value) {
  _internal_set_order_book_type(value);
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.OrderBookSubscription.order_book_type)
}
inline ::tinkoff::pub::invest::api::contract::v1::OrderBookType OrderBookSubscription::_internal_order_book_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tinkoff::pub::invest::api::contract::v1::OrderBookType>(_impl_.order_book_type_);
}
inline void OrderBookSubscription::_internal_set_order_book_type(::tinkoff::pub::invest::api::contract::v1::OrderBookType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.order_book_type_ = value;
}

// -------------------------------------------------------------------

// SubscribeTradesRequest

// .tinkoff.pub.invest.api.contract.v1.SubscriptionAction subscription_action = 1;
inline void SubscribeTradesRequest::clear_subscription_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscription_action_ = 0;
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscriptionAction SubscribeTradesRequest::subscription_action() const {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.SubscribeTradesRequest.subscription_action)
  return _internal_subscription_action();
}
inline void SubscribeTradesRequest::set_subscription_action(::tinkoff::pub::invest::api::contract::v1::SubscriptionAction value) {
  _internal_set_subscription_action(value);
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.SubscribeTradesRequest.subscription_action)
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscriptionAction SubscribeTradesRequest::_internal_subscription_action() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tinkoff::pub::invest::api::contract::v1::SubscriptionAction>(_impl_.subscription_action_);
}
inline void SubscribeTradesRequest::_internal_set_subscription_action(::tinkoff::pub::invest::api::contract::v1::SubscriptionAction value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscription_action_ = value;
}

// repeated .tinkoff.pub.invest.api.contract.v1.TradeInstrument instruments = 2;
inline int SubscribeTradesRequest::_internal_instruments_size() const {
  return _internal_instruments().size();
}
inline int SubscribeTradesRequest::instruments_size() const {
  return _internal_instruments_size();
}
inline void SubscribeTradesRequest::clear_instruments() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instruments_.Clear();
}
inline ::tinkoff::pub::invest::api::contract::v1::TradeInstrument* SubscribeTradesRequest::mutable_instruments(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.SubscribeTradesRequest.instruments)
  return _internal_mutable_instruments()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::TradeInstrument>* SubscribeTradesRequest::mutable_instruments()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.pub.invest.api.contract.v1.SubscribeTradesRequest.instruments)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_instruments();
}
inline const ::tinkoff::pub::invest::api::contract::v1::TradeInstrument& SubscribeTradesRequest::instruments(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.SubscribeTradesRequest.instruments)
  return _internal_instruments().Get(index);
}
inline ::tinkoff::pub::invest::api::contract::v1::TradeInstrument* SubscribeTradesRequest::add_instruments() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tinkoff::pub::invest::api::contract::v1::TradeInstrument* _add = _internal_mutable_instruments()->Add();
  // @@protoc_insertion_point(field_add:tinkoff.pub.invest.api.contract.v1.SubscribeTradesRequest.instruments)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::TradeInstrument>& SubscribeTradesRequest::instruments() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tinkoff.pub.invest.api.contract.v1.SubscribeTradesRequest.instruments)
  return _internal_instruments();
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::TradeInstrument>&
SubscribeTradesRequest::_internal_instruments() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.instruments_;
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::TradeInstrument>*
SubscribeTradesRequest::_internal_mutable_instruments() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.instruments_;
}

// .tinkoff.pub.invest.api.contract.v1.TradeSourceType trade_source = 3;
inline void SubscribeTradesRequest::clear_trade_source() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.trade_source_ = 0;
}
inline ::tinkoff::pub::invest::api::contract::v1::TradeSourceType SubscribeTradesRequest::trade_source() const {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.SubscribeTradesRequest.trade_source)
  return _internal_trade_source();
}
inline void SubscribeTradesRequest::set_trade_source(::tinkoff::pub::invest::api::contract::v1::TradeSourceType value) {
  _internal_set_trade_source(value);
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.SubscribeTradesRequest.trade_source)
}
inline ::tinkoff::pub::invest::api::contract::v1::TradeSourceType SubscribeTradesRequest::_internal_trade_source() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tinkoff::pub::invest::api::contract::v1::TradeSourceType>(_impl_.trade_source_);
}
inline void SubscribeTradesRequest::_internal_set_trade_source(::tinkoff::pub::invest::api::contract::v1::TradeSourceType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.trade_source_ = value;
}

// -------------------------------------------------------------------

// TradeInstrument

// string figi = 1 [deprecated = true];
inline void TradeInstrument::clear_figi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.ClearToEmpty();
}
inline const std::string& TradeInstrument::figi() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.TradeInstrument.figi)
  return _internal_figi();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TradeInstrument::set_figi(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.TradeInstrument.figi)
}
inline std::string* TradeInstrument::mutable_figi() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_figi();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.TradeInstrument.figi)
  return _s;
}
inline const std::string& TradeInstrument::_internal_figi() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.figi_.Get();
}
inline void TradeInstrument::_internal_set_figi(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.Set(value, GetArena());
}
inline std::string* TradeInstrument::_internal_mutable_figi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.figi_.Mutable( GetArena());
}
inline std::string* TradeInstrument::release_figi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.TradeInstrument.figi)
  return _impl_.figi_.Release();
}
inline void TradeInstrument::set_allocated_figi(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.figi_.IsDefault()) {
    _impl_.figi_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.TradeInstrument.figi)
}

// string instrument_id = 2;
inline void TradeInstrument::clear_instrument_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_id_.ClearToEmpty();
}
inline const std::string& TradeInstrument::instrument_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.TradeInstrument.instrument_id)
  return _internal_instrument_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TradeInstrument::set_instrument_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.TradeInstrument.instrument_id)
}
inline std::string* TradeInstrument::mutable_instrument_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_instrument_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.TradeInstrument.instrument_id)
  return _s;
}
inline const std::string& TradeInstrument::_internal_instrument_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.instrument_id_.Get();
}
inline void TradeInstrument::_internal_set_instrument_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_id_.Set(value, GetArena());
}
inline std::string* TradeInstrument::_internal_mutable_instrument_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.instrument_id_.Mutable( GetArena());
}
inline std::string* TradeInstrument::release_instrument_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.TradeInstrument.instrument_id)
  return _impl_.instrument_id_.Release();
}
inline void TradeInstrument::set_allocated_instrument_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.instrument_id_.IsDefault()) {
    _impl_.instrument_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.TradeInstrument.instrument_id)
}

// -------------------------------------------------------------------

// SubscribeTradesResponse

// string tracking_id = 1;
inline void SubscribeTradesResponse::clear_tracking_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tracking_id_.ClearToEmpty();
}
inline const std::string& SubscribeTradesResponse::tracking_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.SubscribeTradesResponse.tracking_id)
  return _internal_tracking_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SubscribeTradesResponse::set_tracking_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tracking_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.SubscribeTradesResponse.tracking_id)
}
inline std::string* SubscribeTradesResponse::mutable_tracking_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_tracking_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.SubscribeTradesResponse.tracking_id)
  return _s;
}
inline const std::string& SubscribeTradesResponse::_internal_tracking_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.tracking_id_.Get();
}
inline void SubscribeTradesResponse::_internal_set_tracking_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tracking_id_.Set(value, GetArena());
}
inline std::string* SubscribeTradesResponse::_internal_mutable_tracking_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.tracking_id_.Mutable( GetArena());
}
inline std::string* SubscribeTradesResponse::release_tracking_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.SubscribeTradesResponse.tracking_id)
  return _impl_.tracking_id_.Release();
}
inline void SubscribeTradesResponse::set_allocated_tracking_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tracking_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.tracking_id_.IsDefault()) {
    _impl_.tracking_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.SubscribeTradesResponse.tracking_id)
}

// repeated .tinkoff.pub.invest.api.contract.v1.TradeSubscription trade_subscriptions = 2;
inline int SubscribeTradesResponse::_internal_trade_subscriptions_size() const {
  return _internal_trade_subscriptions().size();
}
inline int SubscribeTradesResponse::trade_subscriptions_size() const {
  return _internal_trade_subscriptions_size();
}
inline void SubscribeTradesResponse::clear_trade_subscriptions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.trade_subscriptions_.Clear();
}
inline ::tinkoff::pub::invest::api::contract::v1::TradeSubscription* SubscribeTradesResponse::mutable_trade_subscriptions(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.SubscribeTradesResponse.trade_subscriptions)
  return _internal_mutable_trade_subscriptions()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::TradeSubscription>* SubscribeTradesResponse::mutable_trade_subscriptions()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.pub.invest.api.contract.v1.SubscribeTradesResponse.trade_subscriptions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_trade_subscriptions();
}
inline const ::tinkoff::pub::invest::api::contract::v1::TradeSubscription& SubscribeTradesResponse::trade_subscriptions(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.SubscribeTradesResponse.trade_subscriptions)
  return _internal_trade_subscriptions().Get(index);
}
inline ::tinkoff::pub::invest::api::contract::v1::TradeSubscription* SubscribeTradesResponse::add_trade_subscriptions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tinkoff::pub::invest::api::contract::v1::TradeSubscription* _add = _internal_mutable_trade_subscriptions()->Add();
  // @@protoc_insertion_point(field_add:tinkoff.pub.invest.api.contract.v1.SubscribeTradesResponse.trade_subscriptions)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::TradeSubscription>& SubscribeTradesResponse::trade_subscriptions() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tinkoff.pub.invest.api.contract.v1.SubscribeTradesResponse.trade_subscriptions)
  return _internal_trade_subscriptions();
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::TradeSubscription>&
SubscribeTradesResponse::_internal_trade_subscriptions() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.trade_subscriptions_;
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::TradeSubscription>*
SubscribeTradesResponse::_internal_mutable_trade_subscriptions() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.trade_subscriptions_;
}

// .tinkoff.pub.invest.api.contract.v1.TradeSourceType trade_source = 3;
inline void SubscribeTradesResponse::clear_trade_source() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.trade_source_ = 0;
}
inline ::tinkoff::pub::invest::api::contract::v1::TradeSourceType SubscribeTradesResponse::trade_source() const {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.SubscribeTradesResponse.trade_source)
  return _internal_trade_source();
}
inline void SubscribeTradesResponse::set_trade_source(::tinkoff::pub::invest::api::contract::v1::TradeSourceType value) {
  _internal_set_trade_source(value);
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.SubscribeTradesResponse.trade_source)
}
inline ::tinkoff::pub::invest::api::contract::v1::TradeSourceType SubscribeTradesResponse::_internal_trade_source() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tinkoff::pub::invest::api::contract::v1::TradeSourceType>(_impl_.trade_source_);
}
inline void SubscribeTradesResponse::_internal_set_trade_source(::tinkoff::pub::invest::api::contract::v1::TradeSourceType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.trade_source_ = value;
}

// -------------------------------------------------------------------

// TradeSubscription

// string figi = 1;
inline void TradeSubscription::clear_figi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.ClearToEmpty();
}
inline const std::string& TradeSubscription::figi() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.TradeSubscription.figi)
  return _internal_figi();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TradeSubscription::set_figi(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.TradeSubscription.figi)
}
inline std::string* TradeSubscription::mutable_figi() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_figi();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.TradeSubscription.figi)
  return _s;
}
inline const std::string& TradeSubscription::_internal_figi() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.figi_.Get();
}
inline void TradeSubscription::_internal_set_figi(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.Set(value, GetArena());
}
inline std::string* TradeSubscription::_internal_mutable_figi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.figi_.Mutable( GetArena());
}
inline std::string* TradeSubscription::release_figi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.TradeSubscription.figi)
  return _impl_.figi_.Release();
}
inline void TradeSubscription::set_allocated_figi(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.figi_.IsDefault()) {
    _impl_.figi_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.TradeSubscription.figi)
}

// .tinkoff.pub.invest.api.contract.v1.SubscriptionStatus subscription_status = 2;
inline void TradeSubscription::clear_subscription_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscription_status_ = 0;
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscriptionStatus TradeSubscription::subscription_status() const {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.TradeSubscription.subscription_status)
  return _internal_subscription_status();
}
inline void TradeSubscription::set_subscription_status(::tinkoff::pub::invest::api::contract::v1::SubscriptionStatus value) {
  _internal_set_subscription_status(value);
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.TradeSubscription.subscription_status)
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscriptionStatus TradeSubscription::_internal_subscription_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tinkoff::pub::invest::api::contract::v1::SubscriptionStatus>(_impl_.subscription_status_);
}
inline void TradeSubscription::_internal_set_subscription_status(::tinkoff::pub::invest::api::contract::v1::SubscriptionStatus value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscription_status_ = value;
}

// string instrument_uid = 3;
inline void TradeSubscription::clear_instrument_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_uid_.ClearToEmpty();
}
inline const std::string& TradeSubscription::instrument_uid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.TradeSubscription.instrument_uid)
  return _internal_instrument_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TradeSubscription::set_instrument_uid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.TradeSubscription.instrument_uid)
}
inline std::string* TradeSubscription::mutable_instrument_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_instrument_uid();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.TradeSubscription.instrument_uid)
  return _s;
}
inline const std::string& TradeSubscription::_internal_instrument_uid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.instrument_uid_.Get();
}
inline void TradeSubscription::_internal_set_instrument_uid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_uid_.Set(value, GetArena());
}
inline std::string* TradeSubscription::_internal_mutable_instrument_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.instrument_uid_.Mutable( GetArena());
}
inline std::string* TradeSubscription::release_instrument_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.TradeSubscription.instrument_uid)
  return _impl_.instrument_uid_.Release();
}
inline void TradeSubscription::set_allocated_instrument_uid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_uid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.instrument_uid_.IsDefault()) {
    _impl_.instrument_uid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.TradeSubscription.instrument_uid)
}

// string stream_id = 4;
inline void TradeSubscription::clear_stream_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stream_id_.ClearToEmpty();
}
inline const std::string& TradeSubscription::stream_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.TradeSubscription.stream_id)
  return _internal_stream_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TradeSubscription::set_stream_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stream_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.TradeSubscription.stream_id)
}
inline std::string* TradeSubscription::mutable_stream_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_stream_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.TradeSubscription.stream_id)
  return _s;
}
inline const std::string& TradeSubscription::_internal_stream_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.stream_id_.Get();
}
inline void TradeSubscription::_internal_set_stream_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stream_id_.Set(value, GetArena());
}
inline std::string* TradeSubscription::_internal_mutable_stream_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.stream_id_.Mutable( GetArena());
}
inline std::string* TradeSubscription::release_stream_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.TradeSubscription.stream_id)
  return _impl_.stream_id_.Release();
}
inline void TradeSubscription::set_allocated_stream_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stream_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.stream_id_.IsDefault()) {
    _impl_.stream_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.TradeSubscription.stream_id)
}

// string subscription_id = 5;
inline void TradeSubscription::clear_subscription_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscription_id_.ClearToEmpty();
}
inline const std::string& TradeSubscription::subscription_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.TradeSubscription.subscription_id)
  return _internal_subscription_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TradeSubscription::set_subscription_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscription_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.TradeSubscription.subscription_id)
}
inline std::string* TradeSubscription::mutable_subscription_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_subscription_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.TradeSubscription.subscription_id)
  return _s;
}
inline const std::string& TradeSubscription::_internal_subscription_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.subscription_id_.Get();
}
inline void TradeSubscription::_internal_set_subscription_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscription_id_.Set(value, GetArena());
}
inline std::string* TradeSubscription::_internal_mutable_subscription_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.subscription_id_.Mutable( GetArena());
}
inline std::string* TradeSubscription::release_subscription_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.TradeSubscription.subscription_id)
  return _impl_.subscription_id_.Release();
}
inline void TradeSubscription::set_allocated_subscription_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscription_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.subscription_id_.IsDefault()) {
    _impl_.subscription_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.TradeSubscription.subscription_id)
}

// -------------------------------------------------------------------

// SubscribeInfoRequest

// .tinkoff.pub.invest.api.contract.v1.SubscriptionAction subscription_action = 1;
inline void SubscribeInfoRequest::clear_subscription_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscription_action_ = 0;
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscriptionAction SubscribeInfoRequest::subscription_action() const {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.SubscribeInfoRequest.subscription_action)
  return _internal_subscription_action();
}
inline void SubscribeInfoRequest::set_subscription_action(::tinkoff::pub::invest::api::contract::v1::SubscriptionAction value) {
  _internal_set_subscription_action(value);
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.SubscribeInfoRequest.subscription_action)
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscriptionAction SubscribeInfoRequest::_internal_subscription_action() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tinkoff::pub::invest::api::contract::v1::SubscriptionAction>(_impl_.subscription_action_);
}
inline void SubscribeInfoRequest::_internal_set_subscription_action(::tinkoff::pub::invest::api::contract::v1::SubscriptionAction value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscription_action_ = value;
}

// repeated .tinkoff.pub.invest.api.contract.v1.InfoInstrument instruments = 2;
inline int SubscribeInfoRequest::_internal_instruments_size() const {
  return _internal_instruments().size();
}
inline int SubscribeInfoRequest::instruments_size() const {
  return _internal_instruments_size();
}
inline void SubscribeInfoRequest::clear_instruments() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instruments_.Clear();
}
inline ::tinkoff::pub::invest::api::contract::v1::InfoInstrument* SubscribeInfoRequest::mutable_instruments(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.SubscribeInfoRequest.instruments)
  return _internal_mutable_instruments()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::InfoInstrument>* SubscribeInfoRequest::mutable_instruments()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.pub.invest.api.contract.v1.SubscribeInfoRequest.instruments)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_instruments();
}
inline const ::tinkoff::pub::invest::api::contract::v1::InfoInstrument& SubscribeInfoRequest::instruments(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.SubscribeInfoRequest.instruments)
  return _internal_instruments().Get(index);
}
inline ::tinkoff::pub::invest::api::contract::v1::InfoInstrument* SubscribeInfoRequest::add_instruments() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tinkoff::pub::invest::api::contract::v1::InfoInstrument* _add = _internal_mutable_instruments()->Add();
  // @@protoc_insertion_point(field_add:tinkoff.pub.invest.api.contract.v1.SubscribeInfoRequest.instruments)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::InfoInstrument>& SubscribeInfoRequest::instruments() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tinkoff.pub.invest.api.contract.v1.SubscribeInfoRequest.instruments)
  return _internal_instruments();
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::InfoInstrument>&
SubscribeInfoRequest::_internal_instruments() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.instruments_;
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::InfoInstrument>*
SubscribeInfoRequest::_internal_mutable_instruments() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.instruments_;
}

// -------------------------------------------------------------------

// InfoInstrument

// string figi = 1 [deprecated = true];
inline void InfoInstrument::clear_figi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.ClearToEmpty();
}
inline const std::string& InfoInstrument::figi() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.InfoInstrument.figi)
  return _internal_figi();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InfoInstrument::set_figi(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.InfoInstrument.figi)
}
inline std::string* InfoInstrument::mutable_figi() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_figi();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.InfoInstrument.figi)
  return _s;
}
inline const std::string& InfoInstrument::_internal_figi() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.figi_.Get();
}
inline void InfoInstrument::_internal_set_figi(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.Set(value, GetArena());
}
inline std::string* InfoInstrument::_internal_mutable_figi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.figi_.Mutable( GetArena());
}
inline std::string* InfoInstrument::release_figi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.InfoInstrument.figi)
  return _impl_.figi_.Release();
}
inline void InfoInstrument::set_allocated_figi(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.figi_.IsDefault()) {
    _impl_.figi_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.InfoInstrument.figi)
}

// string instrument_id = 2;
inline void InfoInstrument::clear_instrument_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_id_.ClearToEmpty();
}
inline const std::string& InfoInstrument::instrument_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.InfoInstrument.instrument_id)
  return _internal_instrument_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InfoInstrument::set_instrument_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.InfoInstrument.instrument_id)
}
inline std::string* InfoInstrument::mutable_instrument_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_instrument_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.InfoInstrument.instrument_id)
  return _s;
}
inline const std::string& InfoInstrument::_internal_instrument_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.instrument_id_.Get();
}
inline void InfoInstrument::_internal_set_instrument_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_id_.Set(value, GetArena());
}
inline std::string* InfoInstrument::_internal_mutable_instrument_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.instrument_id_.Mutable( GetArena());
}
inline std::string* InfoInstrument::release_instrument_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.InfoInstrument.instrument_id)
  return _impl_.instrument_id_.Release();
}
inline void InfoInstrument::set_allocated_instrument_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.instrument_id_.IsDefault()) {
    _impl_.instrument_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.InfoInstrument.instrument_id)
}

// -------------------------------------------------------------------

// SubscribeInfoResponse

// string tracking_id = 1;
inline void SubscribeInfoResponse::clear_tracking_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tracking_id_.ClearToEmpty();
}
inline const std::string& SubscribeInfoResponse::tracking_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.SubscribeInfoResponse.tracking_id)
  return _internal_tracking_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SubscribeInfoResponse::set_tracking_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tracking_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.SubscribeInfoResponse.tracking_id)
}
inline std::string* SubscribeInfoResponse::mutable_tracking_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_tracking_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.SubscribeInfoResponse.tracking_id)
  return _s;
}
inline const std::string& SubscribeInfoResponse::_internal_tracking_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.tracking_id_.Get();
}
inline void SubscribeInfoResponse::_internal_set_tracking_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tracking_id_.Set(value, GetArena());
}
inline std::string* SubscribeInfoResponse::_internal_mutable_tracking_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.tracking_id_.Mutable( GetArena());
}
inline std::string* SubscribeInfoResponse::release_tracking_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.SubscribeInfoResponse.tracking_id)
  return _impl_.tracking_id_.Release();
}
inline void SubscribeInfoResponse::set_allocated_tracking_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tracking_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.tracking_id_.IsDefault()) {
    _impl_.tracking_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.SubscribeInfoResponse.tracking_id)
}

// repeated .tinkoff.pub.invest.api.contract.v1.InfoSubscription info_subscriptions = 2;
inline int SubscribeInfoResponse::_internal_info_subscriptions_size() const {
  return _internal_info_subscriptions().size();
}
inline int SubscribeInfoResponse::info_subscriptions_size() const {
  return _internal_info_subscriptions_size();
}
inline void SubscribeInfoResponse::clear_info_subscriptions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.info_subscriptions_.Clear();
}
inline ::tinkoff::pub::invest::api::contract::v1::InfoSubscription* SubscribeInfoResponse::mutable_info_subscriptions(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.SubscribeInfoResponse.info_subscriptions)
  return _internal_mutable_info_subscriptions()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::InfoSubscription>* SubscribeInfoResponse::mutable_info_subscriptions()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.pub.invest.api.contract.v1.SubscribeInfoResponse.info_subscriptions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_info_subscriptions();
}
inline const ::tinkoff::pub::invest::api::contract::v1::InfoSubscription& SubscribeInfoResponse::info_subscriptions(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.SubscribeInfoResponse.info_subscriptions)
  return _internal_info_subscriptions().Get(index);
}
inline ::tinkoff::pub::invest::api::contract::v1::InfoSubscription* SubscribeInfoResponse::add_info_subscriptions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tinkoff::pub::invest::api::contract::v1::InfoSubscription* _add = _internal_mutable_info_subscriptions()->Add();
  // @@protoc_insertion_point(field_add:tinkoff.pub.invest.api.contract.v1.SubscribeInfoResponse.info_subscriptions)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::InfoSubscription>& SubscribeInfoResponse::info_subscriptions() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tinkoff.pub.invest.api.contract.v1.SubscribeInfoResponse.info_subscriptions)
  return _internal_info_subscriptions();
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::InfoSubscription>&
SubscribeInfoResponse::_internal_info_subscriptions() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.info_subscriptions_;
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::InfoSubscription>*
SubscribeInfoResponse::_internal_mutable_info_subscriptions() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.info_subscriptions_;
}

// -------------------------------------------------------------------

// InfoSubscription

// string figi = 1;
inline void InfoSubscription::clear_figi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.ClearToEmpty();
}
inline const std::string& InfoSubscription::figi() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.InfoSubscription.figi)
  return _internal_figi();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InfoSubscription::set_figi(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.InfoSubscription.figi)
}
inline std::string* InfoSubscription::mutable_figi() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_figi();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.InfoSubscription.figi)
  return _s;
}
inline const std::string& InfoSubscription::_internal_figi() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.figi_.Get();
}
inline void InfoSubscription::_internal_set_figi(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.Set(value, GetArena());
}
inline std::string* InfoSubscription::_internal_mutable_figi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.figi_.Mutable( GetArena());
}
inline std::string* InfoSubscription::release_figi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.InfoSubscription.figi)
  return _impl_.figi_.Release();
}
inline void InfoSubscription::set_allocated_figi(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.figi_.IsDefault()) {
    _impl_.figi_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.InfoSubscription.figi)
}

// .tinkoff.pub.invest.api.contract.v1.SubscriptionStatus subscription_status = 2;
inline void InfoSubscription::clear_subscription_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscription_status_ = 0;
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscriptionStatus InfoSubscription::subscription_status() const {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.InfoSubscription.subscription_status)
  return _internal_subscription_status();
}
inline void InfoSubscription::set_subscription_status(::tinkoff::pub::invest::api::contract::v1::SubscriptionStatus value) {
  _internal_set_subscription_status(value);
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.InfoSubscription.subscription_status)
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscriptionStatus InfoSubscription::_internal_subscription_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tinkoff::pub::invest::api::contract::v1::SubscriptionStatus>(_impl_.subscription_status_);
}
inline void InfoSubscription::_internal_set_subscription_status(::tinkoff::pub::invest::api::contract::v1::SubscriptionStatus value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscription_status_ = value;
}

// string instrument_uid = 3;
inline void InfoSubscription::clear_instrument_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_uid_.ClearToEmpty();
}
inline const std::string& InfoSubscription::instrument_uid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.InfoSubscription.instrument_uid)
  return _internal_instrument_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InfoSubscription::set_instrument_uid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.InfoSubscription.instrument_uid)
}
inline std::string* InfoSubscription::mutable_instrument_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_instrument_uid();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.InfoSubscription.instrument_uid)
  return _s;
}
inline const std::string& InfoSubscription::_internal_instrument_uid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.instrument_uid_.Get();
}
inline void InfoSubscription::_internal_set_instrument_uid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_uid_.Set(value, GetArena());
}
inline std::string* InfoSubscription::_internal_mutable_instrument_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.instrument_uid_.Mutable( GetArena());
}
inline std::string* InfoSubscription::release_instrument_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.InfoSubscription.instrument_uid)
  return _impl_.instrument_uid_.Release();
}
inline void InfoSubscription::set_allocated_instrument_uid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_uid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.instrument_uid_.IsDefault()) {
    _impl_.instrument_uid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.InfoSubscription.instrument_uid)
}

// string stream_id = 4;
inline void InfoSubscription::clear_stream_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stream_id_.ClearToEmpty();
}
inline const std::string& InfoSubscription::stream_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.InfoSubscription.stream_id)
  return _internal_stream_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InfoSubscription::set_stream_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stream_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.InfoSubscription.stream_id)
}
inline std::string* InfoSubscription::mutable_stream_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_stream_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.InfoSubscription.stream_id)
  return _s;
}
inline const std::string& InfoSubscription::_internal_stream_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.stream_id_.Get();
}
inline void InfoSubscription::_internal_set_stream_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stream_id_.Set(value, GetArena());
}
inline std::string* InfoSubscription::_internal_mutable_stream_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.stream_id_.Mutable( GetArena());
}
inline std::string* InfoSubscription::release_stream_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.InfoSubscription.stream_id)
  return _impl_.stream_id_.Release();
}
inline void InfoSubscription::set_allocated_stream_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stream_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.stream_id_.IsDefault()) {
    _impl_.stream_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.InfoSubscription.stream_id)
}

// string subscription_id = 5;
inline void InfoSubscription::clear_subscription_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscription_id_.ClearToEmpty();
}
inline const std::string& InfoSubscription::subscription_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.InfoSubscription.subscription_id)
  return _internal_subscription_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InfoSubscription::set_subscription_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscription_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.InfoSubscription.subscription_id)
}
inline std::string* InfoSubscription::mutable_subscription_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_subscription_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.InfoSubscription.subscription_id)
  return _s;
}
inline const std::string& InfoSubscription::_internal_subscription_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.subscription_id_.Get();
}
inline void InfoSubscription::_internal_set_subscription_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscription_id_.Set(value, GetArena());
}
inline std::string* InfoSubscription::_internal_mutable_subscription_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.subscription_id_.Mutable( GetArena());
}
inline std::string* InfoSubscription::release_subscription_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.InfoSubscription.subscription_id)
  return _impl_.subscription_id_.Release();
}
inline void InfoSubscription::set_allocated_subscription_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscription_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.subscription_id_.IsDefault()) {
    _impl_.subscription_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.InfoSubscription.subscription_id)
}

// -------------------------------------------------------------------

// SubscribeLastPriceRequest

// .tinkoff.pub.invest.api.contract.v1.SubscriptionAction subscription_action = 1;
inline void SubscribeLastPriceRequest::clear_subscription_action() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscription_action_ = 0;
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscriptionAction SubscribeLastPriceRequest::subscription_action() const {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.SubscribeLastPriceRequest.subscription_action)
  return _internal_subscription_action();
}
inline void SubscribeLastPriceRequest::set_subscription_action(::tinkoff::pub::invest::api::contract::v1::SubscriptionAction value) {
  _internal_set_subscription_action(value);
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.SubscribeLastPriceRequest.subscription_action)
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscriptionAction SubscribeLastPriceRequest::_internal_subscription_action() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tinkoff::pub::invest::api::contract::v1::SubscriptionAction>(_impl_.subscription_action_);
}
inline void SubscribeLastPriceRequest::_internal_set_subscription_action(::tinkoff::pub::invest::api::contract::v1::SubscriptionAction value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscription_action_ = value;
}

// repeated .tinkoff.pub.invest.api.contract.v1.LastPriceInstrument instruments = 2;
inline int SubscribeLastPriceRequest::_internal_instruments_size() const {
  return _internal_instruments().size();
}
inline int SubscribeLastPriceRequest::instruments_size() const {
  return _internal_instruments_size();
}
inline void SubscribeLastPriceRequest::clear_instruments() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instruments_.Clear();
}
inline ::tinkoff::pub::invest::api::contract::v1::LastPriceInstrument* SubscribeLastPriceRequest::mutable_instruments(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.SubscribeLastPriceRequest.instruments)
  return _internal_mutable_instruments()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::LastPriceInstrument>* SubscribeLastPriceRequest::mutable_instruments()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.pub.invest.api.contract.v1.SubscribeLastPriceRequest.instruments)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_instruments();
}
inline const ::tinkoff::pub::invest::api::contract::v1::LastPriceInstrument& SubscribeLastPriceRequest::instruments(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.SubscribeLastPriceRequest.instruments)
  return _internal_instruments().Get(index);
}
inline ::tinkoff::pub::invest::api::contract::v1::LastPriceInstrument* SubscribeLastPriceRequest::add_instruments() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tinkoff::pub::invest::api::contract::v1::LastPriceInstrument* _add = _internal_mutable_instruments()->Add();
  // @@protoc_insertion_point(field_add:tinkoff.pub.invest.api.contract.v1.SubscribeLastPriceRequest.instruments)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::LastPriceInstrument>& SubscribeLastPriceRequest::instruments() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tinkoff.pub.invest.api.contract.v1.SubscribeLastPriceRequest.instruments)
  return _internal_instruments();
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::LastPriceInstrument>&
SubscribeLastPriceRequest::_internal_instruments() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.instruments_;
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::LastPriceInstrument>*
SubscribeLastPriceRequest::_internal_mutable_instruments() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.instruments_;
}

// -------------------------------------------------------------------

// LastPriceInstrument

// string figi = 1 [deprecated = true];
inline void LastPriceInstrument::clear_figi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.ClearToEmpty();
}
inline const std::string& LastPriceInstrument::figi() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.LastPriceInstrument.figi)
  return _internal_figi();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LastPriceInstrument::set_figi(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.LastPriceInstrument.figi)
}
inline std::string* LastPriceInstrument::mutable_figi() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_figi();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.LastPriceInstrument.figi)
  return _s;
}
inline const std::string& LastPriceInstrument::_internal_figi() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.figi_.Get();
}
inline void LastPriceInstrument::_internal_set_figi(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.Set(value, GetArena());
}
inline std::string* LastPriceInstrument::_internal_mutable_figi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.figi_.Mutable( GetArena());
}
inline std::string* LastPriceInstrument::release_figi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.LastPriceInstrument.figi)
  return _impl_.figi_.Release();
}
inline void LastPriceInstrument::set_allocated_figi(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.figi_.IsDefault()) {
    _impl_.figi_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.LastPriceInstrument.figi)
}

// string instrument_id = 2;
inline void LastPriceInstrument::clear_instrument_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_id_.ClearToEmpty();
}
inline const std::string& LastPriceInstrument::instrument_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.LastPriceInstrument.instrument_id)
  return _internal_instrument_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LastPriceInstrument::set_instrument_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.LastPriceInstrument.instrument_id)
}
inline std::string* LastPriceInstrument::mutable_instrument_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_instrument_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.LastPriceInstrument.instrument_id)
  return _s;
}
inline const std::string& LastPriceInstrument::_internal_instrument_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.instrument_id_.Get();
}
inline void LastPriceInstrument::_internal_set_instrument_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_id_.Set(value, GetArena());
}
inline std::string* LastPriceInstrument::_internal_mutable_instrument_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.instrument_id_.Mutable( GetArena());
}
inline std::string* LastPriceInstrument::release_instrument_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.LastPriceInstrument.instrument_id)
  return _impl_.instrument_id_.Release();
}
inline void LastPriceInstrument::set_allocated_instrument_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.instrument_id_.IsDefault()) {
    _impl_.instrument_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.LastPriceInstrument.instrument_id)
}

// -------------------------------------------------------------------

// SubscribeLastPriceResponse

// string tracking_id = 1;
inline void SubscribeLastPriceResponse::clear_tracking_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tracking_id_.ClearToEmpty();
}
inline const std::string& SubscribeLastPriceResponse::tracking_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.SubscribeLastPriceResponse.tracking_id)
  return _internal_tracking_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void SubscribeLastPriceResponse::set_tracking_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tracking_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.SubscribeLastPriceResponse.tracking_id)
}
inline std::string* SubscribeLastPriceResponse::mutable_tracking_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_tracking_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.SubscribeLastPriceResponse.tracking_id)
  return _s;
}
inline const std::string& SubscribeLastPriceResponse::_internal_tracking_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.tracking_id_.Get();
}
inline void SubscribeLastPriceResponse::_internal_set_tracking_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tracking_id_.Set(value, GetArena());
}
inline std::string* SubscribeLastPriceResponse::_internal_mutable_tracking_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.tracking_id_.Mutable( GetArena());
}
inline std::string* SubscribeLastPriceResponse::release_tracking_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.SubscribeLastPriceResponse.tracking_id)
  return _impl_.tracking_id_.Release();
}
inline void SubscribeLastPriceResponse::set_allocated_tracking_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.tracking_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.tracking_id_.IsDefault()) {
    _impl_.tracking_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.SubscribeLastPriceResponse.tracking_id)
}

// repeated .tinkoff.pub.invest.api.contract.v1.LastPriceSubscription last_price_subscriptions = 2;
inline int SubscribeLastPriceResponse::_internal_last_price_subscriptions_size() const {
  return _internal_last_price_subscriptions().size();
}
inline int SubscribeLastPriceResponse::last_price_subscriptions_size() const {
  return _internal_last_price_subscriptions_size();
}
inline void SubscribeLastPriceResponse::clear_last_price_subscriptions() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_price_subscriptions_.Clear();
}
inline ::tinkoff::pub::invest::api::contract::v1::LastPriceSubscription* SubscribeLastPriceResponse::mutable_last_price_subscriptions(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.SubscribeLastPriceResponse.last_price_subscriptions)
  return _internal_mutable_last_price_subscriptions()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::LastPriceSubscription>* SubscribeLastPriceResponse::mutable_last_price_subscriptions()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.pub.invest.api.contract.v1.SubscribeLastPriceResponse.last_price_subscriptions)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_last_price_subscriptions();
}
inline const ::tinkoff::pub::invest::api::contract::v1::LastPriceSubscription& SubscribeLastPriceResponse::last_price_subscriptions(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.SubscribeLastPriceResponse.last_price_subscriptions)
  return _internal_last_price_subscriptions().Get(index);
}
inline ::tinkoff::pub::invest::api::contract::v1::LastPriceSubscription* SubscribeLastPriceResponse::add_last_price_subscriptions() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tinkoff::pub::invest::api::contract::v1::LastPriceSubscription* _add = _internal_mutable_last_price_subscriptions()->Add();
  // @@protoc_insertion_point(field_add:tinkoff.pub.invest.api.contract.v1.SubscribeLastPriceResponse.last_price_subscriptions)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::LastPriceSubscription>& SubscribeLastPriceResponse::last_price_subscriptions() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tinkoff.pub.invest.api.contract.v1.SubscribeLastPriceResponse.last_price_subscriptions)
  return _internal_last_price_subscriptions();
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::LastPriceSubscription>&
SubscribeLastPriceResponse::_internal_last_price_subscriptions() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.last_price_subscriptions_;
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::LastPriceSubscription>*
SubscribeLastPriceResponse::_internal_mutable_last_price_subscriptions() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.last_price_subscriptions_;
}

// -------------------------------------------------------------------

// LastPriceSubscription

// string figi = 1;
inline void LastPriceSubscription::clear_figi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.ClearToEmpty();
}
inline const std::string& LastPriceSubscription::figi() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.LastPriceSubscription.figi)
  return _internal_figi();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LastPriceSubscription::set_figi(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.LastPriceSubscription.figi)
}
inline std::string* LastPriceSubscription::mutable_figi() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_figi();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.LastPriceSubscription.figi)
  return _s;
}
inline const std::string& LastPriceSubscription::_internal_figi() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.figi_.Get();
}
inline void LastPriceSubscription::_internal_set_figi(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.Set(value, GetArena());
}
inline std::string* LastPriceSubscription::_internal_mutable_figi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.figi_.Mutable( GetArena());
}
inline std::string* LastPriceSubscription::release_figi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.LastPriceSubscription.figi)
  return _impl_.figi_.Release();
}
inline void LastPriceSubscription::set_allocated_figi(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.figi_.IsDefault()) {
    _impl_.figi_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.LastPriceSubscription.figi)
}

// .tinkoff.pub.invest.api.contract.v1.SubscriptionStatus subscription_status = 2;
inline void LastPriceSubscription::clear_subscription_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscription_status_ = 0;
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscriptionStatus LastPriceSubscription::subscription_status() const {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.LastPriceSubscription.subscription_status)
  return _internal_subscription_status();
}
inline void LastPriceSubscription::set_subscription_status(::tinkoff::pub::invest::api::contract::v1::SubscriptionStatus value) {
  _internal_set_subscription_status(value);
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.LastPriceSubscription.subscription_status)
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscriptionStatus LastPriceSubscription::_internal_subscription_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tinkoff::pub::invest::api::contract::v1::SubscriptionStatus>(_impl_.subscription_status_);
}
inline void LastPriceSubscription::_internal_set_subscription_status(::tinkoff::pub::invest::api::contract::v1::SubscriptionStatus value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscription_status_ = value;
}

// string instrument_uid = 3;
inline void LastPriceSubscription::clear_instrument_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_uid_.ClearToEmpty();
}
inline const std::string& LastPriceSubscription::instrument_uid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.LastPriceSubscription.instrument_uid)
  return _internal_instrument_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LastPriceSubscription::set_instrument_uid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.LastPriceSubscription.instrument_uid)
}
inline std::string* LastPriceSubscription::mutable_instrument_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_instrument_uid();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.LastPriceSubscription.instrument_uid)
  return _s;
}
inline const std::string& LastPriceSubscription::_internal_instrument_uid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.instrument_uid_.Get();
}
inline void LastPriceSubscription::_internal_set_instrument_uid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_uid_.Set(value, GetArena());
}
inline std::string* LastPriceSubscription::_internal_mutable_instrument_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.instrument_uid_.Mutable( GetArena());
}
inline std::string* LastPriceSubscription::release_instrument_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.LastPriceSubscription.instrument_uid)
  return _impl_.instrument_uid_.Release();
}
inline void LastPriceSubscription::set_allocated_instrument_uid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_uid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.instrument_uid_.IsDefault()) {
    _impl_.instrument_uid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.LastPriceSubscription.instrument_uid)
}

// string stream_id = 4;
inline void LastPriceSubscription::clear_stream_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stream_id_.ClearToEmpty();
}
inline const std::string& LastPriceSubscription::stream_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.LastPriceSubscription.stream_id)
  return _internal_stream_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LastPriceSubscription::set_stream_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stream_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.LastPriceSubscription.stream_id)
}
inline std::string* LastPriceSubscription::mutable_stream_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_stream_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.LastPriceSubscription.stream_id)
  return _s;
}
inline const std::string& LastPriceSubscription::_internal_stream_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.stream_id_.Get();
}
inline void LastPriceSubscription::_internal_set_stream_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stream_id_.Set(value, GetArena());
}
inline std::string* LastPriceSubscription::_internal_mutable_stream_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.stream_id_.Mutable( GetArena());
}
inline std::string* LastPriceSubscription::release_stream_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.LastPriceSubscription.stream_id)
  return _impl_.stream_id_.Release();
}
inline void LastPriceSubscription::set_allocated_stream_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.stream_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.stream_id_.IsDefault()) {
    _impl_.stream_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.LastPriceSubscription.stream_id)
}

// string subscription_id = 5;
inline void LastPriceSubscription::clear_subscription_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscription_id_.ClearToEmpty();
}
inline const std::string& LastPriceSubscription::subscription_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.LastPriceSubscription.subscription_id)
  return _internal_subscription_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LastPriceSubscription::set_subscription_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscription_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.LastPriceSubscription.subscription_id)
}
inline std::string* LastPriceSubscription::mutable_subscription_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_subscription_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.LastPriceSubscription.subscription_id)
  return _s;
}
inline const std::string& LastPriceSubscription::_internal_subscription_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.subscription_id_.Get();
}
inline void LastPriceSubscription::_internal_set_subscription_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscription_id_.Set(value, GetArena());
}
inline std::string* LastPriceSubscription::_internal_mutable_subscription_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.subscription_id_.Mutable( GetArena());
}
inline std::string* LastPriceSubscription::release_subscription_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.LastPriceSubscription.subscription_id)
  return _impl_.subscription_id_.Release();
}
inline void LastPriceSubscription::set_allocated_subscription_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.subscription_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.subscription_id_.IsDefault()) {
    _impl_.subscription_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.LastPriceSubscription.subscription_id)
}

// -------------------------------------------------------------------

// Candle

// string figi = 1;
inline void Candle::clear_figi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.ClearToEmpty();
}
inline const std::string& Candle::figi() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.Candle.figi)
  return _internal_figi();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Candle::set_figi(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.Candle.figi)
}
inline std::string* Candle::mutable_figi() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_figi();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.Candle.figi)
  return _s;
}
inline const std::string& Candle::_internal_figi() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.figi_.Get();
}
inline void Candle::_internal_set_figi(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.Set(value, GetArena());
}
inline std::string* Candle::_internal_mutable_figi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.figi_.Mutable( GetArena());
}
inline std::string* Candle::release_figi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.Candle.figi)
  return _impl_.figi_.Release();
}
inline void Candle::set_allocated_figi(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.figi_.IsDefault()) {
    _impl_.figi_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.Candle.figi)
}

// .tinkoff.pub.invest.api.contract.v1.SubscriptionInterval interval = 2;
inline void Candle::clear_interval() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.interval_ = 0;
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscriptionInterval Candle::interval() const {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.Candle.interval)
  return _internal_interval();
}
inline void Candle::set_interval(::tinkoff::pub::invest::api::contract::v1::SubscriptionInterval value) {
  _internal_set_interval(value);
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.Candle.interval)
}
inline ::tinkoff::pub::invest::api::contract::v1::SubscriptionInterval Candle::_internal_interval() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tinkoff::pub::invest::api::contract::v1::SubscriptionInterval>(_impl_.interval_);
}
inline void Candle::_internal_set_interval(::tinkoff::pub::invest::api::contract::v1::SubscriptionInterval value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.interval_ = value;
}

// .tinkoff.pub.invest.api.contract.v1.Quotation open = 3;
inline bool Candle::has_open() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.open_ != nullptr);
  return value;
}
inline const ::tinkoff::pub::invest::api::contract::v1::Quotation& Candle::_internal_open() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tinkoff::pub::invest::api::contract::v1::Quotation* p = _impl_.open_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::pub::invest::api::contract::v1::Quotation&>(::tinkoff::pub::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::pub::invest::api::contract::v1::Quotation& Candle::open() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.Candle.open)
  return _internal_open();
}
inline void Candle::unsafe_arena_set_allocated_open(::tinkoff::pub::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.open_);
  }
  _impl_.open_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.Candle.open)
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* Candle::release_open() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* released = _impl_.open_;
  _impl_.open_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* Candle::unsafe_arena_release_open() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.Candle.open)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* temp = _impl_.open_;
  _impl_.open_ = nullptr;
  return temp;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* Candle::_internal_mutable_open() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.open_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::pub::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.open_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.open_;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* Candle::mutable_open() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* _msg = _internal_mutable_open();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.Candle.open)
  return _msg;
}
inline void Candle::set_allocated_open(::tinkoff::pub::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.open_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.open_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.Candle.open)
}

// .tinkoff.pub.invest.api.contract.v1.Quotation high = 4;
inline bool Candle::has_high() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.high_ != nullptr);
  return value;
}
inline const ::tinkoff::pub::invest::api::contract::v1::Quotation& Candle::_internal_high() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tinkoff::pub::invest::api::contract::v1::Quotation* p = _impl_.high_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::pub::invest::api::contract::v1::Quotation&>(::tinkoff::pub::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::pub::invest::api::contract::v1::Quotation& Candle::high() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.Candle.high)
  return _internal_high();
}
inline void Candle::unsafe_arena_set_allocated_high(::tinkoff::pub::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.high_);
  }
  _impl_.high_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.Candle.high)
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* Candle::release_high() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* released = _impl_.high_;
  _impl_.high_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* Candle::unsafe_arena_release_high() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.Candle.high)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* temp = _impl_.high_;
  _impl_.high_ = nullptr;
  return temp;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* Candle::_internal_mutable_high() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.high_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::pub::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.high_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.high_;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* Candle::mutable_high() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* _msg = _internal_mutable_high();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.Candle.high)
  return _msg;
}
inline void Candle::set_allocated_high(::tinkoff::pub::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.high_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.high_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.Candle.high)
}

// .tinkoff.pub.invest.api.contract.v1.Quotation low = 5;
inline bool Candle::has_low() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.low_ != nullptr);
  return value;
}
inline const ::tinkoff::pub::invest::api::contract::v1::Quotation& Candle::_internal_low() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tinkoff::pub::invest::api::contract::v1::Quotation* p = _impl_.low_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::pub::invest::api::contract::v1::Quotation&>(::tinkoff::pub::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::pub::invest::api::contract::v1::Quotation& Candle::low() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.Candle.low)
  return _internal_low();
}
inline void Candle::unsafe_arena_set_allocated_low(::tinkoff::pub::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.low_);
  }
  _impl_.low_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.Candle.low)
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* Candle::release_low() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* released = _impl_.low_;
  _impl_.low_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* Candle::unsafe_arena_release_low() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.Candle.low)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* temp = _impl_.low_;
  _impl_.low_ = nullptr;
  return temp;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* Candle::_internal_mutable_low() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.low_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::pub::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.low_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.low_;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* Candle::mutable_low() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* _msg = _internal_mutable_low();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.Candle.low)
  return _msg;
}
inline void Candle::set_allocated_low(::tinkoff::pub::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.low_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.low_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.Candle.low)
}

// .tinkoff.pub.invest.api.contract.v1.Quotation close = 6;
inline bool Candle::has_close() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.close_ != nullptr);
  return value;
}
inline const ::tinkoff::pub::invest::api::contract::v1::Quotation& Candle::_internal_close() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tinkoff::pub::invest::api::contract::v1::Quotation* p = _impl_.close_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::pub::invest::api::contract::v1::Quotation&>(::tinkoff::pub::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::pub::invest::api::contract::v1::Quotation& Candle::close() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.Candle.close)
  return _internal_close();
}
inline void Candle::unsafe_arena_set_allocated_close(::tinkoff::pub::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.close_);
  }
  _impl_.close_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.Candle.close)
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* Candle::release_close() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* released = _impl_.close_;
  _impl_.close_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* Candle::unsafe_arena_release_close() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.Candle.close)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* temp = _impl_.close_;
  _impl_.close_ = nullptr;
  return temp;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* Candle::_internal_mutable_close() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.close_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::pub::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.close_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.close_;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* Candle::mutable_close() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* _msg = _internal_mutable_close();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.Candle.close)
  return _msg;
}
inline void Candle::set_allocated_close(::tinkoff::pub::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.close_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.close_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.Candle.close)
}

// int64 volume = 7;
inline void Candle::clear_volume() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.volume_ = ::int64_t{0};
}
inline ::int64_t Candle::volume() const {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.Candle.volume)
  return _internal_volume();
}
inline void Candle::set_volume(::int64_t value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.Candle.volume)
}
inline ::int64_t Candle::_internal_volume() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.volume_;
}
inline void Candle::_internal_set_volume(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.volume_ = value;
}

// .google.protobuf.Timestamp time = 8;
inline bool Candle::has_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& Candle::_internal_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& Candle::time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.Candle.time)
  return _internal_time();
}
inline void Candle::unsafe_arena_set_allocated_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.time_);
  }
  _impl_.time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.Candle.time)
}
inline ::google::protobuf::Timestamp* Candle::release_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::google::protobuf::Timestamp* released = _impl_.time_;
  _impl_.time_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* Candle::unsafe_arena_release_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.Candle.time)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::google::protobuf::Timestamp* temp = _impl_.time_;
  _impl_.time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Candle::_internal_mutable_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.time_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.time_;
}
inline ::google::protobuf::Timestamp* Candle::mutable_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000010u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.Candle.time)
  return _msg;
}
inline void Candle::set_allocated_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.Candle.time)
}

// .google.protobuf.Timestamp last_trade_ts = 9;
inline bool Candle::has_last_trade_ts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.last_trade_ts_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& Candle::_internal_last_trade_ts() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.last_trade_ts_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& Candle::last_trade_ts() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.Candle.last_trade_ts)
  return _internal_last_trade_ts();
}
inline void Candle::unsafe_arena_set_allocated_last_trade_ts(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.last_trade_ts_);
  }
  _impl_.last_trade_ts_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.Candle.last_trade_ts)
}
inline ::google::protobuf::Timestamp* Candle::release_last_trade_ts() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::google::protobuf::Timestamp* released = _impl_.last_trade_ts_;
  _impl_.last_trade_ts_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* Candle::unsafe_arena_release_last_trade_ts() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.Candle.last_trade_ts)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::google::protobuf::Timestamp* temp = _impl_.last_trade_ts_;
  _impl_.last_trade_ts_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Candle::_internal_mutable_last_trade_ts() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.last_trade_ts_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.last_trade_ts_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.last_trade_ts_;
}
inline ::google::protobuf::Timestamp* Candle::mutable_last_trade_ts() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000020u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_last_trade_ts();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.Candle.last_trade_ts)
  return _msg;
}
inline void Candle::set_allocated_last_trade_ts(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.last_trade_ts_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.last_trade_ts_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.Candle.last_trade_ts)
}

// string instrument_uid = 10;
inline void Candle::clear_instrument_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_uid_.ClearToEmpty();
}
inline const std::string& Candle::instrument_uid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.Candle.instrument_uid)
  return _internal_instrument_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Candle::set_instrument_uid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.Candle.instrument_uid)
}
inline std::string* Candle::mutable_instrument_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_instrument_uid();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.Candle.instrument_uid)
  return _s;
}
inline const std::string& Candle::_internal_instrument_uid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.instrument_uid_.Get();
}
inline void Candle::_internal_set_instrument_uid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_uid_.Set(value, GetArena());
}
inline std::string* Candle::_internal_mutable_instrument_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.instrument_uid_.Mutable( GetArena());
}
inline std::string* Candle::release_instrument_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.Candle.instrument_uid)
  return _impl_.instrument_uid_.Release();
}
inline void Candle::set_allocated_instrument_uid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_uid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.instrument_uid_.IsDefault()) {
    _impl_.instrument_uid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.Candle.instrument_uid)
}

// .tinkoff.pub.invest.api.contract.v1.CandleSource candle_source_type = 19;
inline void Candle::clear_candle_source_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.candle_source_type_ = 0;
}
inline ::tinkoff::pub::invest::api::contract::v1::CandleSource Candle::candle_source_type() const {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.Candle.candle_source_type)
  return _internal_candle_source_type();
}
inline void Candle::set_candle_source_type(::tinkoff::pub::invest::api::contract::v1::CandleSource value) {
  _internal_set_candle_source_type(value);
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.Candle.candle_source_type)
}
inline ::tinkoff::pub::invest::api::contract::v1::CandleSource Candle::_internal_candle_source_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tinkoff::pub::invest::api::contract::v1::CandleSource>(_impl_.candle_source_type_);
}
inline void Candle::_internal_set_candle_source_type(::tinkoff::pub::invest::api::contract::v1::CandleSource value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.candle_source_type_ = value;
}

// -------------------------------------------------------------------

// OrderBook

// string figi = 1;
inline void OrderBook::clear_figi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.ClearToEmpty();
}
inline const std::string& OrderBook::figi() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.OrderBook.figi)
  return _internal_figi();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderBook::set_figi(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.OrderBook.figi)
}
inline std::string* OrderBook::mutable_figi() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_figi();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.OrderBook.figi)
  return _s;
}
inline const std::string& OrderBook::_internal_figi() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.figi_.Get();
}
inline void OrderBook::_internal_set_figi(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.Set(value, GetArena());
}
inline std::string* OrderBook::_internal_mutable_figi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.figi_.Mutable( GetArena());
}
inline std::string* OrderBook::release_figi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.OrderBook.figi)
  return _impl_.figi_.Release();
}
inline void OrderBook::set_allocated_figi(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.figi_.IsDefault()) {
    _impl_.figi_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.OrderBook.figi)
}

// int32 depth = 2;
inline void OrderBook::clear_depth() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.depth_ = 0;
}
inline ::int32_t OrderBook::depth() const {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.OrderBook.depth)
  return _internal_depth();
}
inline void OrderBook::set_depth(::int32_t value) {
  _internal_set_depth(value);
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.OrderBook.depth)
}
inline ::int32_t OrderBook::_internal_depth() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.depth_;
}
inline void OrderBook::_internal_set_depth(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.depth_ = value;
}

// bool is_consistent = 3;
inline void OrderBook::clear_is_consistent() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_consistent_ = false;
}
inline bool OrderBook::is_consistent() const {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.OrderBook.is_consistent)
  return _internal_is_consistent();
}
inline void OrderBook::set_is_consistent(bool value) {
  _internal_set_is_consistent(value);
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.OrderBook.is_consistent)
}
inline bool OrderBook::_internal_is_consistent() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_consistent_;
}
inline void OrderBook::_internal_set_is_consistent(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_consistent_ = value;
}

// repeated .tinkoff.pub.invest.api.contract.v1.Order bids = 4;
inline int OrderBook::_internal_bids_size() const {
  return _internal_bids().size();
}
inline int OrderBook::bids_size() const {
  return _internal_bids_size();
}
inline void OrderBook::clear_bids() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bids_.Clear();
}
inline ::tinkoff::pub::invest::api::contract::v1::Order* OrderBook::mutable_bids(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.OrderBook.bids)
  return _internal_mutable_bids()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::Order>* OrderBook::mutable_bids()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.pub.invest.api.contract.v1.OrderBook.bids)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_bids();
}
inline const ::tinkoff::pub::invest::api::contract::v1::Order& OrderBook::bids(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.OrderBook.bids)
  return _internal_bids().Get(index);
}
inline ::tinkoff::pub::invest::api::contract::v1::Order* OrderBook::add_bids() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tinkoff::pub::invest::api::contract::v1::Order* _add = _internal_mutable_bids()->Add();
  // @@protoc_insertion_point(field_add:tinkoff.pub.invest.api.contract.v1.OrderBook.bids)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::Order>& OrderBook::bids() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tinkoff.pub.invest.api.contract.v1.OrderBook.bids)
  return _internal_bids();
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::Order>&
OrderBook::_internal_bids() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bids_;
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::Order>*
OrderBook::_internal_mutable_bids() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.bids_;
}

// repeated .tinkoff.pub.invest.api.contract.v1.Order asks = 5;
inline int OrderBook::_internal_asks_size() const {
  return _internal_asks().size();
}
inline int OrderBook::asks_size() const {
  return _internal_asks_size();
}
inline void OrderBook::clear_asks() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.asks_.Clear();
}
inline ::tinkoff::pub::invest::api::contract::v1::Order* OrderBook::mutable_asks(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.OrderBook.asks)
  return _internal_mutable_asks()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::Order>* OrderBook::mutable_asks()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.pub.invest.api.contract.v1.OrderBook.asks)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_asks();
}
inline const ::tinkoff::pub::invest::api::contract::v1::Order& OrderBook::asks(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.OrderBook.asks)
  return _internal_asks().Get(index);
}
inline ::tinkoff::pub::invest::api::contract::v1::Order* OrderBook::add_asks() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tinkoff::pub::invest::api::contract::v1::Order* _add = _internal_mutable_asks()->Add();
  // @@protoc_insertion_point(field_add:tinkoff.pub.invest.api.contract.v1.OrderBook.asks)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::Order>& OrderBook::asks() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tinkoff.pub.invest.api.contract.v1.OrderBook.asks)
  return _internal_asks();
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::Order>&
OrderBook::_internal_asks() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.asks_;
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::Order>*
OrderBook::_internal_mutable_asks() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.asks_;
}

// .google.protobuf.Timestamp time = 6;
inline bool OrderBook::has_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& OrderBook::_internal_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& OrderBook::time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.OrderBook.time)
  return _internal_time();
}
inline void OrderBook::unsafe_arena_set_allocated_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.time_);
  }
  _impl_.time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.OrderBook.time)
}
inline ::google::protobuf::Timestamp* OrderBook::release_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.time_;
  _impl_.time_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* OrderBook::unsafe_arena_release_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.OrderBook.time)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.time_;
  _impl_.time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* OrderBook::_internal_mutable_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.time_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.time_;
}
inline ::google::protobuf::Timestamp* OrderBook::mutable_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.OrderBook.time)
  return _msg;
}
inline void OrderBook::set_allocated_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.OrderBook.time)
}

// .tinkoff.pub.invest.api.contract.v1.Quotation limit_up = 7;
inline bool OrderBook::has_limit_up() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.limit_up_ != nullptr);
  return value;
}
inline const ::tinkoff::pub::invest::api::contract::v1::Quotation& OrderBook::_internal_limit_up() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tinkoff::pub::invest::api::contract::v1::Quotation* p = _impl_.limit_up_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::pub::invest::api::contract::v1::Quotation&>(::tinkoff::pub::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::pub::invest::api::contract::v1::Quotation& OrderBook::limit_up() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.OrderBook.limit_up)
  return _internal_limit_up();
}
inline void OrderBook::unsafe_arena_set_allocated_limit_up(::tinkoff::pub::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.limit_up_);
  }
  _impl_.limit_up_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.OrderBook.limit_up)
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* OrderBook::release_limit_up() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* released = _impl_.limit_up_;
  _impl_.limit_up_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* OrderBook::unsafe_arena_release_limit_up() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.OrderBook.limit_up)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* temp = _impl_.limit_up_;
  _impl_.limit_up_ = nullptr;
  return temp;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* OrderBook::_internal_mutable_limit_up() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.limit_up_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::pub::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.limit_up_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.limit_up_;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* OrderBook::mutable_limit_up() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* _msg = _internal_mutable_limit_up();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.OrderBook.limit_up)
  return _msg;
}
inline void OrderBook::set_allocated_limit_up(::tinkoff::pub::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.limit_up_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.limit_up_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.OrderBook.limit_up)
}

// .tinkoff.pub.invest.api.contract.v1.Quotation limit_down = 8;
inline bool OrderBook::has_limit_down() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.limit_down_ != nullptr);
  return value;
}
inline const ::tinkoff::pub::invest::api::contract::v1::Quotation& OrderBook::_internal_limit_down() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tinkoff::pub::invest::api::contract::v1::Quotation* p = _impl_.limit_down_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::pub::invest::api::contract::v1::Quotation&>(::tinkoff::pub::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::pub::invest::api::contract::v1::Quotation& OrderBook::limit_down() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.OrderBook.limit_down)
  return _internal_limit_down();
}
inline void OrderBook::unsafe_arena_set_allocated_limit_down(::tinkoff::pub::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.limit_down_);
  }
  _impl_.limit_down_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.OrderBook.limit_down)
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* OrderBook::release_limit_down() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* released = _impl_.limit_down_;
  _impl_.limit_down_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* OrderBook::unsafe_arena_release_limit_down() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.OrderBook.limit_down)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* temp = _impl_.limit_down_;
  _impl_.limit_down_ = nullptr;
  return temp;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* OrderBook::_internal_mutable_limit_down() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.limit_down_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::pub::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.limit_down_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.limit_down_;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* OrderBook::mutable_limit_down() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* _msg = _internal_mutable_limit_down();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.OrderBook.limit_down)
  return _msg;
}
inline void OrderBook::set_allocated_limit_down(::tinkoff::pub::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.limit_down_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.limit_down_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.OrderBook.limit_down)
}

// string instrument_uid = 9;
inline void OrderBook::clear_instrument_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_uid_.ClearToEmpty();
}
inline const std::string& OrderBook::instrument_uid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.OrderBook.instrument_uid)
  return _internal_instrument_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void OrderBook::set_instrument_uid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.OrderBook.instrument_uid)
}
inline std::string* OrderBook::mutable_instrument_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_instrument_uid();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.OrderBook.instrument_uid)
  return _s;
}
inline const std::string& OrderBook::_internal_instrument_uid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.instrument_uid_.Get();
}
inline void OrderBook::_internal_set_instrument_uid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_uid_.Set(value, GetArena());
}
inline std::string* OrderBook::_internal_mutable_instrument_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.instrument_uid_.Mutable( GetArena());
}
inline std::string* OrderBook::release_instrument_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.OrderBook.instrument_uid)
  return _impl_.instrument_uid_.Release();
}
inline void OrderBook::set_allocated_instrument_uid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_uid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.instrument_uid_.IsDefault()) {
    _impl_.instrument_uid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.OrderBook.instrument_uid)
}

// .tinkoff.pub.invest.api.contract.v1.OrderBookType order_book_type = 10;
inline void OrderBook::clear_order_book_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.order_book_type_ = 0;
}
inline ::tinkoff::pub::invest::api::contract::v1::OrderBookType OrderBook::order_book_type() const {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.OrderBook.order_book_type)
  return _internal_order_book_type();
}
inline void OrderBook::set_order_book_type(::tinkoff::pub::invest::api::contract::v1::OrderBookType value) {
  _internal_set_order_book_type(value);
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.OrderBook.order_book_type)
}
inline ::tinkoff::pub::invest::api::contract::v1::OrderBookType OrderBook::_internal_order_book_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tinkoff::pub::invest::api::contract::v1::OrderBookType>(_impl_.order_book_type_);
}
inline void OrderBook::_internal_set_order_book_type(::tinkoff::pub::invest::api::contract::v1::OrderBookType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.order_book_type_ = value;
}

// -------------------------------------------------------------------

// Order

// .tinkoff.pub.invest.api.contract.v1.Quotation price = 1;
inline bool Order::has_price() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.price_ != nullptr);
  return value;
}
inline const ::tinkoff::pub::invest::api::contract::v1::Quotation& Order::_internal_price() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tinkoff::pub::invest::api::contract::v1::Quotation* p = _impl_.price_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::pub::invest::api::contract::v1::Quotation&>(::tinkoff::pub::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::pub::invest::api::contract::v1::Quotation& Order::price() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.Order.price)
  return _internal_price();
}
inline void Order::unsafe_arena_set_allocated_price(::tinkoff::pub::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.price_);
  }
  _impl_.price_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.Order.price)
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* Order::release_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* released = _impl_.price_;
  _impl_.price_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* Order::unsafe_arena_release_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.Order.price)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* temp = _impl_.price_;
  _impl_.price_ = nullptr;
  return temp;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* Order::_internal_mutable_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.price_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::pub::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.price_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.price_;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* Order::mutable_price() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* _msg = _internal_mutable_price();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.Order.price)
  return _msg;
}
inline void Order::set_allocated_price(::tinkoff::pub::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.price_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.price_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.Order.price)
}

// int64 quantity = 2;
inline void Order::clear_quantity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.quantity_ = ::int64_t{0};
}
inline ::int64_t Order::quantity() const {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.Order.quantity)
  return _internal_quantity();
}
inline void Order::set_quantity(::int64_t value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.Order.quantity)
}
inline ::int64_t Order::_internal_quantity() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.quantity_;
}
inline void Order::_internal_set_quantity(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.quantity_ = value;
}

// -------------------------------------------------------------------

// Trade

// string figi = 1;
inline void Trade::clear_figi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.ClearToEmpty();
}
inline const std::string& Trade::figi() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.Trade.figi)
  return _internal_figi();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Trade::set_figi(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.Trade.figi)
}
inline std::string* Trade::mutable_figi() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_figi();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.Trade.figi)
  return _s;
}
inline const std::string& Trade::_internal_figi() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.figi_.Get();
}
inline void Trade::_internal_set_figi(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.Set(value, GetArena());
}
inline std::string* Trade::_internal_mutable_figi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.figi_.Mutable( GetArena());
}
inline std::string* Trade::release_figi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.Trade.figi)
  return _impl_.figi_.Release();
}
inline void Trade::set_allocated_figi(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.figi_.IsDefault()) {
    _impl_.figi_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.Trade.figi)
}

// .tinkoff.pub.invest.api.contract.v1.TradeDirection direction = 2;
inline void Trade::clear_direction() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.direction_ = 0;
}
inline ::tinkoff::pub::invest::api::contract::v1::TradeDirection Trade::direction() const {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.Trade.direction)
  return _internal_direction();
}
inline void Trade::set_direction(::tinkoff::pub::invest::api::contract::v1::TradeDirection value) {
  _internal_set_direction(value);
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.Trade.direction)
}
inline ::tinkoff::pub::invest::api::contract::v1::TradeDirection Trade::_internal_direction() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tinkoff::pub::invest::api::contract::v1::TradeDirection>(_impl_.direction_);
}
inline void Trade::_internal_set_direction(::tinkoff::pub::invest::api::contract::v1::TradeDirection value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.direction_ = value;
}

// .tinkoff.pub.invest.api.contract.v1.Quotation price = 3;
inline bool Trade::has_price() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.price_ != nullptr);
  return value;
}
inline const ::tinkoff::pub::invest::api::contract::v1::Quotation& Trade::_internal_price() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tinkoff::pub::invest::api::contract::v1::Quotation* p = _impl_.price_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::pub::invest::api::contract::v1::Quotation&>(::tinkoff::pub::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::pub::invest::api::contract::v1::Quotation& Trade::price() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.Trade.price)
  return _internal_price();
}
inline void Trade::unsafe_arena_set_allocated_price(::tinkoff::pub::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.price_);
  }
  _impl_.price_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.Trade.price)
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* Trade::release_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* released = _impl_.price_;
  _impl_.price_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* Trade::unsafe_arena_release_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.Trade.price)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* temp = _impl_.price_;
  _impl_.price_ = nullptr;
  return temp;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* Trade::_internal_mutable_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.price_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::pub::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.price_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.price_;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* Trade::mutable_price() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* _msg = _internal_mutable_price();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.Trade.price)
  return _msg;
}
inline void Trade::set_allocated_price(::tinkoff::pub::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.price_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.price_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.Trade.price)
}

// int64 quantity = 4;
inline void Trade::clear_quantity() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.quantity_ = ::int64_t{0};
}
inline ::int64_t Trade::quantity() const {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.Trade.quantity)
  return _internal_quantity();
}
inline void Trade::set_quantity(::int64_t value) {
  _internal_set_quantity(value);
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.Trade.quantity)
}
inline ::int64_t Trade::_internal_quantity() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.quantity_;
}
inline void Trade::_internal_set_quantity(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.quantity_ = value;
}

// .google.protobuf.Timestamp time = 5;
inline bool Trade::has_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& Trade::_internal_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& Trade::time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.Trade.time)
  return _internal_time();
}
inline void Trade::unsafe_arena_set_allocated_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.time_);
  }
  _impl_.time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.Trade.time)
}
inline ::google::protobuf::Timestamp* Trade::release_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* released = _impl_.time_;
  _impl_.time_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* Trade::unsafe_arena_release_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.Trade.time)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* temp = _impl_.time_;
  _impl_.time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* Trade::_internal_mutable_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.time_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.time_;
}
inline ::google::protobuf::Timestamp* Trade::mutable_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.Trade.time)
  return _msg;
}
inline void Trade::set_allocated_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.Trade.time)
}

// string instrument_uid = 6;
inline void Trade::clear_instrument_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_uid_.ClearToEmpty();
}
inline const std::string& Trade::instrument_uid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.Trade.instrument_uid)
  return _internal_instrument_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void Trade::set_instrument_uid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.Trade.instrument_uid)
}
inline std::string* Trade::mutable_instrument_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_instrument_uid();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.Trade.instrument_uid)
  return _s;
}
inline const std::string& Trade::_internal_instrument_uid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.instrument_uid_.Get();
}
inline void Trade::_internal_set_instrument_uid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_uid_.Set(value, GetArena());
}
inline std::string* Trade::_internal_mutable_instrument_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.instrument_uid_.Mutable( GetArena());
}
inline std::string* Trade::release_instrument_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.Trade.instrument_uid)
  return _impl_.instrument_uid_.Release();
}
inline void Trade::set_allocated_instrument_uid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_uid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.instrument_uid_.IsDefault()) {
    _impl_.instrument_uid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.Trade.instrument_uid)
}

// .tinkoff.pub.invest.api.contract.v1.TradeSourceType trade_source = 7;
inline void Trade::clear_trade_source() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.trade_source_ = 0;
}
inline ::tinkoff::pub::invest::api::contract::v1::TradeSourceType Trade::trade_source() const {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.Trade.trade_source)
  return _internal_trade_source();
}
inline void Trade::set_trade_source(::tinkoff::pub::invest::api::contract::v1::TradeSourceType value) {
  _internal_set_trade_source(value);
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.Trade.trade_source)
}
inline ::tinkoff::pub::invest::api::contract::v1::TradeSourceType Trade::_internal_trade_source() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tinkoff::pub::invest::api::contract::v1::TradeSourceType>(_impl_.trade_source_);
}
inline void Trade::_internal_set_trade_source(::tinkoff::pub::invest::api::contract::v1::TradeSourceType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.trade_source_ = value;
}

// -------------------------------------------------------------------

// TradingStatus

// string figi = 1;
inline void TradingStatus::clear_figi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.ClearToEmpty();
}
inline const std::string& TradingStatus::figi() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.TradingStatus.figi)
  return _internal_figi();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TradingStatus::set_figi(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.TradingStatus.figi)
}
inline std::string* TradingStatus::mutable_figi() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_figi();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.TradingStatus.figi)
  return _s;
}
inline const std::string& TradingStatus::_internal_figi() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.figi_.Get();
}
inline void TradingStatus::_internal_set_figi(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.Set(value, GetArena());
}
inline std::string* TradingStatus::_internal_mutable_figi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.figi_.Mutable( GetArena());
}
inline std::string* TradingStatus::release_figi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.TradingStatus.figi)
  return _impl_.figi_.Release();
}
inline void TradingStatus::set_allocated_figi(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.figi_.IsDefault()) {
    _impl_.figi_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.TradingStatus.figi)
}

// .tinkoff.pub.invest.api.contract.v1.SecurityTradingStatus trading_status = 2;
inline void TradingStatus::clear_trading_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.trading_status_ = 0;
}
inline ::tinkoff::pub::invest::api::contract::v1::SecurityTradingStatus TradingStatus::trading_status() const {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.TradingStatus.trading_status)
  return _internal_trading_status();
}
inline void TradingStatus::set_trading_status(::tinkoff::pub::invest::api::contract::v1::SecurityTradingStatus value) {
  _internal_set_trading_status(value);
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.TradingStatus.trading_status)
}
inline ::tinkoff::pub::invest::api::contract::v1::SecurityTradingStatus TradingStatus::_internal_trading_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tinkoff::pub::invest::api::contract::v1::SecurityTradingStatus>(_impl_.trading_status_);
}
inline void TradingStatus::_internal_set_trading_status(::tinkoff::pub::invest::api::contract::v1::SecurityTradingStatus value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.trading_status_ = value;
}

// .google.protobuf.Timestamp time = 3;
inline bool TradingStatus::has_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& TradingStatus::_internal_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& TradingStatus::time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.TradingStatus.time)
  return _internal_time();
}
inline void TradingStatus::unsafe_arena_set_allocated_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.time_);
  }
  _impl_.time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.TradingStatus.time)
}
inline ::google::protobuf::Timestamp* TradingStatus::release_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.time_;
  _impl_.time_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* TradingStatus::unsafe_arena_release_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.TradingStatus.time)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.time_;
  _impl_.time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* TradingStatus::_internal_mutable_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.time_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.time_;
}
inline ::google::protobuf::Timestamp* TradingStatus::mutable_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.TradingStatus.time)
  return _msg;
}
inline void TradingStatus::set_allocated_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.TradingStatus.time)
}

// bool limit_order_available_flag = 4;
inline void TradingStatus::clear_limit_order_available_flag() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.limit_order_available_flag_ = false;
}
inline bool TradingStatus::limit_order_available_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.TradingStatus.limit_order_available_flag)
  return _internal_limit_order_available_flag();
}
inline void TradingStatus::set_limit_order_available_flag(bool value) {
  _internal_set_limit_order_available_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.TradingStatus.limit_order_available_flag)
}
inline bool TradingStatus::_internal_limit_order_available_flag() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.limit_order_available_flag_;
}
inline void TradingStatus::_internal_set_limit_order_available_flag(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.limit_order_available_flag_ = value;
}

// bool market_order_available_flag = 5;
inline void TradingStatus::clear_market_order_available_flag() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.market_order_available_flag_ = false;
}
inline bool TradingStatus::market_order_available_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.TradingStatus.market_order_available_flag)
  return _internal_market_order_available_flag();
}
inline void TradingStatus::set_market_order_available_flag(bool value) {
  _internal_set_market_order_available_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.TradingStatus.market_order_available_flag)
}
inline bool TradingStatus::_internal_market_order_available_flag() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.market_order_available_flag_;
}
inline void TradingStatus::_internal_set_market_order_available_flag(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.market_order_available_flag_ = value;
}

// string instrument_uid = 6;
inline void TradingStatus::clear_instrument_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_uid_.ClearToEmpty();
}
inline const std::string& TradingStatus::instrument_uid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.TradingStatus.instrument_uid)
  return _internal_instrument_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void TradingStatus::set_instrument_uid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.TradingStatus.instrument_uid)
}
inline std::string* TradingStatus::mutable_instrument_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_instrument_uid();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.TradingStatus.instrument_uid)
  return _s;
}
inline const std::string& TradingStatus::_internal_instrument_uid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.instrument_uid_.Get();
}
inline void TradingStatus::_internal_set_instrument_uid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_uid_.Set(value, GetArena());
}
inline std::string* TradingStatus::_internal_mutable_instrument_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.instrument_uid_.Mutable( GetArena());
}
inline std::string* TradingStatus::release_instrument_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.TradingStatus.instrument_uid)
  return _impl_.instrument_uid_.Release();
}
inline void TradingStatus::set_allocated_instrument_uid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_uid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.instrument_uid_.IsDefault()) {
    _impl_.instrument_uid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.TradingStatus.instrument_uid)
}

// -------------------------------------------------------------------

// GetCandlesRequest

// optional string figi = 1 [deprecated = true];
inline bool GetCandlesRequest::has_figi() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void GetCandlesRequest::clear_figi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetCandlesRequest::figi() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetCandlesRequest.figi)
  return _internal_figi();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetCandlesRequest::set_figi(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.figi_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.GetCandlesRequest.figi)
}
inline std::string* GetCandlesRequest::mutable_figi() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_figi();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.GetCandlesRequest.figi)
  return _s;
}
inline const std::string& GetCandlesRequest::_internal_figi() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.figi_.Get();
}
inline void GetCandlesRequest::_internal_set_figi(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.figi_.Set(value, GetArena());
}
inline std::string* GetCandlesRequest::_internal_mutable_figi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.figi_.Mutable( GetArena());
}
inline std::string* GetCandlesRequest::release_figi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.GetCandlesRequest.figi)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.figi_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.figi_.Set("", GetArena());
  }
  return released;
}
inline void GetCandlesRequest::set_allocated_figi(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.figi_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.figi_.IsDefault()) {
    _impl_.figi_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.GetCandlesRequest.figi)
}

// .google.protobuf.Timestamp from = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool GetCandlesRequest::has_from() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.from_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& GetCandlesRequest::_internal_from() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.from_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& GetCandlesRequest::from() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetCandlesRequest.from)
  return _internal_from();
}
inline void GetCandlesRequest::unsafe_arena_set_allocated_from(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.from_);
  }
  _impl_.from_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.GetCandlesRequest.from)
}
inline ::google::protobuf::Timestamp* GetCandlesRequest::release_from() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::protobuf::Timestamp* released = _impl_.from_;
  _impl_.from_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* GetCandlesRequest::unsafe_arena_release_from() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.GetCandlesRequest.from)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::protobuf::Timestamp* temp = _impl_.from_;
  _impl_.from_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* GetCandlesRequest::_internal_mutable_from() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.from_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.from_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.from_;
}
inline ::google::protobuf::Timestamp* GetCandlesRequest::mutable_from() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_from();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.GetCandlesRequest.from)
  return _msg;
}
inline void GetCandlesRequest::set_allocated_from(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.from_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.from_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.GetCandlesRequest.from)
}

// .google.protobuf.Timestamp to = 3 [(.google.api.field_behavior) = REQUIRED];
inline bool GetCandlesRequest::has_to() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.to_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& GetCandlesRequest::_internal_to() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.to_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& GetCandlesRequest::to() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetCandlesRequest.to)
  return _internal_to();
}
inline void GetCandlesRequest::unsafe_arena_set_allocated_to(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.to_);
  }
  _impl_.to_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.GetCandlesRequest.to)
}
inline ::google::protobuf::Timestamp* GetCandlesRequest::release_to() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::google::protobuf::Timestamp* released = _impl_.to_;
  _impl_.to_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* GetCandlesRequest::unsafe_arena_release_to() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.GetCandlesRequest.to)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::google::protobuf::Timestamp* temp = _impl_.to_;
  _impl_.to_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* GetCandlesRequest::_internal_mutable_to() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.to_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.to_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.to_;
}
inline ::google::protobuf::Timestamp* GetCandlesRequest::mutable_to() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.GetCandlesRequest.to)
  return _msg;
}
inline void GetCandlesRequest::set_allocated_to(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.to_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.to_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.GetCandlesRequest.to)
}

// .tinkoff.pub.invest.api.contract.v1.CandleInterval interval = 4 [(.google.api.field_behavior) = REQUIRED];
inline void GetCandlesRequest::clear_interval() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.interval_ = 0;
}
inline ::tinkoff::pub::invest::api::contract::v1::CandleInterval GetCandlesRequest::interval() const {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetCandlesRequest.interval)
  return _internal_interval();
}
inline void GetCandlesRequest::set_interval(::tinkoff::pub::invest::api::contract::v1::CandleInterval value) {
  _internal_set_interval(value);
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.GetCandlesRequest.interval)
}
inline ::tinkoff::pub::invest::api::contract::v1::CandleInterval GetCandlesRequest::_internal_interval() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tinkoff::pub::invest::api::contract::v1::CandleInterval>(_impl_.interval_);
}
inline void GetCandlesRequest::_internal_set_interval(::tinkoff::pub::invest::api::contract::v1::CandleInterval value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.interval_ = value;
}

// optional string instrument_id = 5;
inline bool GetCandlesRequest::has_instrument_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void GetCandlesRequest::clear_instrument_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GetCandlesRequest::instrument_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetCandlesRequest.instrument_id)
  return _internal_instrument_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetCandlesRequest::set_instrument_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.instrument_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.GetCandlesRequest.instrument_id)
}
inline std::string* GetCandlesRequest::mutable_instrument_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_instrument_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.GetCandlesRequest.instrument_id)
  return _s;
}
inline const std::string& GetCandlesRequest::_internal_instrument_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.instrument_id_.Get();
}
inline void GetCandlesRequest::_internal_set_instrument_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.instrument_id_.Set(value, GetArena());
}
inline std::string* GetCandlesRequest::_internal_mutable_instrument_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.instrument_id_.Mutable( GetArena());
}
inline std::string* GetCandlesRequest::release_instrument_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.GetCandlesRequest.instrument_id)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.instrument_id_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.instrument_id_.Set("", GetArena());
  }
  return released;
}
inline void GetCandlesRequest::set_allocated_instrument_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.instrument_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.instrument_id_.IsDefault()) {
    _impl_.instrument_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.GetCandlesRequest.instrument_id)
}

// optional .tinkoff.pub.invest.api.contract.v1.GetCandlesRequest.CandleSource candle_source_type = 7;
inline bool GetCandlesRequest::has_candle_source_type() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  return value;
}
inline void GetCandlesRequest::clear_candle_source_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.candle_source_type_ = 0;
  _impl_._has_bits_[0] &= ~0x00000010u;
}
inline ::tinkoff::pub::invest::api::contract::v1::GetCandlesRequest_CandleSource GetCandlesRequest::candle_source_type() const {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetCandlesRequest.candle_source_type)
  return _internal_candle_source_type();
}
inline void GetCandlesRequest::set_candle_source_type(::tinkoff::pub::invest::api::contract::v1::GetCandlesRequest_CandleSource value) {
  _internal_set_candle_source_type(value);
  _impl_._has_bits_[0] |= 0x00000010u;
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.GetCandlesRequest.candle_source_type)
}
inline ::tinkoff::pub::invest::api::contract::v1::GetCandlesRequest_CandleSource GetCandlesRequest::_internal_candle_source_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tinkoff::pub::invest::api::contract::v1::GetCandlesRequest_CandleSource>(_impl_.candle_source_type_);
}
inline void GetCandlesRequest::_internal_set_candle_source_type(::tinkoff::pub::invest::api::contract::v1::GetCandlesRequest_CandleSource value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.candle_source_type_ = value;
}

// optional int32 limit = 10;
inline bool GetCandlesRequest::has_limit() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  return value;
}
inline void GetCandlesRequest::clear_limit() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.limit_ = 0;
  _impl_._has_bits_[0] &= ~0x00000020u;
}
inline ::int32_t GetCandlesRequest::limit() const {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetCandlesRequest.limit)
  return _internal_limit();
}
inline void GetCandlesRequest::set_limit(::int32_t value) {
  _internal_set_limit(value);
  _impl_._has_bits_[0] |= 0x00000020u;
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.GetCandlesRequest.limit)
}
inline ::int32_t GetCandlesRequest::_internal_limit() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.limit_;
}
inline void GetCandlesRequest::_internal_set_limit(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.limit_ = value;
}

// -------------------------------------------------------------------

// GetCandlesResponse

// repeated .tinkoff.pub.invest.api.contract.v1.HistoricCandle candles = 1;
inline int GetCandlesResponse::_internal_candles_size() const {
  return _internal_candles().size();
}
inline int GetCandlesResponse::candles_size() const {
  return _internal_candles_size();
}
inline void GetCandlesResponse::clear_candles() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.candles_.Clear();
}
inline ::tinkoff::pub::invest::api::contract::v1::HistoricCandle* GetCandlesResponse::mutable_candles(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.GetCandlesResponse.candles)
  return _internal_mutable_candles()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::HistoricCandle>* GetCandlesResponse::mutable_candles()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.pub.invest.api.contract.v1.GetCandlesResponse.candles)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_candles();
}
inline const ::tinkoff::pub::invest::api::contract::v1::HistoricCandle& GetCandlesResponse::candles(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetCandlesResponse.candles)
  return _internal_candles().Get(index);
}
inline ::tinkoff::pub::invest::api::contract::v1::HistoricCandle* GetCandlesResponse::add_candles() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tinkoff::pub::invest::api::contract::v1::HistoricCandle* _add = _internal_mutable_candles()->Add();
  // @@protoc_insertion_point(field_add:tinkoff.pub.invest.api.contract.v1.GetCandlesResponse.candles)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::HistoricCandle>& GetCandlesResponse::candles() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tinkoff.pub.invest.api.contract.v1.GetCandlesResponse.candles)
  return _internal_candles();
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::HistoricCandle>&
GetCandlesResponse::_internal_candles() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.candles_;
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::HistoricCandle>*
GetCandlesResponse::_internal_mutable_candles() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.candles_;
}

// -------------------------------------------------------------------

// HistoricCandle

// .tinkoff.pub.invest.api.contract.v1.Quotation open = 1;
inline bool HistoricCandle::has_open() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.open_ != nullptr);
  return value;
}
inline const ::tinkoff::pub::invest::api::contract::v1::Quotation& HistoricCandle::_internal_open() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tinkoff::pub::invest::api::contract::v1::Quotation* p = _impl_.open_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::pub::invest::api::contract::v1::Quotation&>(::tinkoff::pub::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::pub::invest::api::contract::v1::Quotation& HistoricCandle::open() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.HistoricCandle.open)
  return _internal_open();
}
inline void HistoricCandle::unsafe_arena_set_allocated_open(::tinkoff::pub::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.open_);
  }
  _impl_.open_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.HistoricCandle.open)
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* HistoricCandle::release_open() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* released = _impl_.open_;
  _impl_.open_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* HistoricCandle::unsafe_arena_release_open() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.HistoricCandle.open)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* temp = _impl_.open_;
  _impl_.open_ = nullptr;
  return temp;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* HistoricCandle::_internal_mutable_open() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.open_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::pub::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.open_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.open_;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* HistoricCandle::mutable_open() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* _msg = _internal_mutable_open();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.HistoricCandle.open)
  return _msg;
}
inline void HistoricCandle::set_allocated_open(::tinkoff::pub::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.open_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.open_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.HistoricCandle.open)
}

// .tinkoff.pub.invest.api.contract.v1.Quotation high = 2;
inline bool HistoricCandle::has_high() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.high_ != nullptr);
  return value;
}
inline const ::tinkoff::pub::invest::api::contract::v1::Quotation& HistoricCandle::_internal_high() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tinkoff::pub::invest::api::contract::v1::Quotation* p = _impl_.high_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::pub::invest::api::contract::v1::Quotation&>(::tinkoff::pub::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::pub::invest::api::contract::v1::Quotation& HistoricCandle::high() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.HistoricCandle.high)
  return _internal_high();
}
inline void HistoricCandle::unsafe_arena_set_allocated_high(::tinkoff::pub::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.high_);
  }
  _impl_.high_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.HistoricCandle.high)
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* HistoricCandle::release_high() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* released = _impl_.high_;
  _impl_.high_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* HistoricCandle::unsafe_arena_release_high() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.HistoricCandle.high)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* temp = _impl_.high_;
  _impl_.high_ = nullptr;
  return temp;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* HistoricCandle::_internal_mutable_high() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.high_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::pub::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.high_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.high_;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* HistoricCandle::mutable_high() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* _msg = _internal_mutable_high();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.HistoricCandle.high)
  return _msg;
}
inline void HistoricCandle::set_allocated_high(::tinkoff::pub::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.high_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.high_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.HistoricCandle.high)
}

// .tinkoff.pub.invest.api.contract.v1.Quotation low = 3;
inline bool HistoricCandle::has_low() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.low_ != nullptr);
  return value;
}
inline const ::tinkoff::pub::invest::api::contract::v1::Quotation& HistoricCandle::_internal_low() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tinkoff::pub::invest::api::contract::v1::Quotation* p = _impl_.low_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::pub::invest::api::contract::v1::Quotation&>(::tinkoff::pub::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::pub::invest::api::contract::v1::Quotation& HistoricCandle::low() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.HistoricCandle.low)
  return _internal_low();
}
inline void HistoricCandle::unsafe_arena_set_allocated_low(::tinkoff::pub::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.low_);
  }
  _impl_.low_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.HistoricCandle.low)
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* HistoricCandle::release_low() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* released = _impl_.low_;
  _impl_.low_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* HistoricCandle::unsafe_arena_release_low() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.HistoricCandle.low)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* temp = _impl_.low_;
  _impl_.low_ = nullptr;
  return temp;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* HistoricCandle::_internal_mutable_low() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.low_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::pub::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.low_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.low_;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* HistoricCandle::mutable_low() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* _msg = _internal_mutable_low();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.HistoricCandle.low)
  return _msg;
}
inline void HistoricCandle::set_allocated_low(::tinkoff::pub::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.low_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.low_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.HistoricCandle.low)
}

// .tinkoff.pub.invest.api.contract.v1.Quotation close = 4;
inline bool HistoricCandle::has_close() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.close_ != nullptr);
  return value;
}
inline const ::tinkoff::pub::invest::api::contract::v1::Quotation& HistoricCandle::_internal_close() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tinkoff::pub::invest::api::contract::v1::Quotation* p = _impl_.close_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::pub::invest::api::contract::v1::Quotation&>(::tinkoff::pub::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::pub::invest::api::contract::v1::Quotation& HistoricCandle::close() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.HistoricCandle.close)
  return _internal_close();
}
inline void HistoricCandle::unsafe_arena_set_allocated_close(::tinkoff::pub::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.close_);
  }
  _impl_.close_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.HistoricCandle.close)
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* HistoricCandle::release_close() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* released = _impl_.close_;
  _impl_.close_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* HistoricCandle::unsafe_arena_release_close() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.HistoricCandle.close)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* temp = _impl_.close_;
  _impl_.close_ = nullptr;
  return temp;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* HistoricCandle::_internal_mutable_close() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.close_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::pub::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.close_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.close_;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* HistoricCandle::mutable_close() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* _msg = _internal_mutable_close();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.HistoricCandle.close)
  return _msg;
}
inline void HistoricCandle::set_allocated_close(::tinkoff::pub::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.close_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.close_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.HistoricCandle.close)
}

// int64 volume = 5;
inline void HistoricCandle::clear_volume() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.volume_ = ::int64_t{0};
}
inline ::int64_t HistoricCandle::volume() const {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.HistoricCandle.volume)
  return _internal_volume();
}
inline void HistoricCandle::set_volume(::int64_t value) {
  _internal_set_volume(value);
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.HistoricCandle.volume)
}
inline ::int64_t HistoricCandle::_internal_volume() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.volume_;
}
inline void HistoricCandle::_internal_set_volume(::int64_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.volume_ = value;
}

// .google.protobuf.Timestamp time = 6;
inline bool HistoricCandle::has_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& HistoricCandle::_internal_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& HistoricCandle::time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.HistoricCandle.time)
  return _internal_time();
}
inline void HistoricCandle::unsafe_arena_set_allocated_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.time_);
  }
  _impl_.time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.HistoricCandle.time)
}
inline ::google::protobuf::Timestamp* HistoricCandle::release_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::google::protobuf::Timestamp* released = _impl_.time_;
  _impl_.time_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* HistoricCandle::unsafe_arena_release_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.HistoricCandle.time)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::google::protobuf::Timestamp* temp = _impl_.time_;
  _impl_.time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* HistoricCandle::_internal_mutable_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.time_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.time_;
}
inline ::google::protobuf::Timestamp* HistoricCandle::mutable_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000010u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.HistoricCandle.time)
  return _msg;
}
inline void HistoricCandle::set_allocated_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.HistoricCandle.time)
}

// bool is_complete = 7;
inline void HistoricCandle::clear_is_complete() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_complete_ = false;
}
inline bool HistoricCandle::is_complete() const {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.HistoricCandle.is_complete)
  return _internal_is_complete();
}
inline void HistoricCandle::set_is_complete(bool value) {
  _internal_set_is_complete(value);
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.HistoricCandle.is_complete)
}
inline bool HistoricCandle::_internal_is_complete() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.is_complete_;
}
inline void HistoricCandle::_internal_set_is_complete(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.is_complete_ = value;
}

// .tinkoff.pub.invest.api.contract.v1.CandleSource candle_source = 9;
inline void HistoricCandle::clear_candle_source() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.candle_source_ = 0;
}
inline ::tinkoff::pub::invest::api::contract::v1::CandleSource HistoricCandle::candle_source() const {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.HistoricCandle.candle_source)
  return _internal_candle_source();
}
inline void HistoricCandle::set_candle_source(::tinkoff::pub::invest::api::contract::v1::CandleSource value) {
  _internal_set_candle_source(value);
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.HistoricCandle.candle_source)
}
inline ::tinkoff::pub::invest::api::contract::v1::CandleSource HistoricCandle::_internal_candle_source() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tinkoff::pub::invest::api::contract::v1::CandleSource>(_impl_.candle_source_);
}
inline void HistoricCandle::_internal_set_candle_source(::tinkoff::pub::invest::api::contract::v1::CandleSource value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.candle_source_ = value;
}

// -------------------------------------------------------------------

// GetLastPricesRequest

// repeated string figi = 1 [deprecated = true];
inline int GetLastPricesRequest::_internal_figi_size() const {
  return _internal_figi().size();
}
inline int GetLastPricesRequest::figi_size() const {
  return _internal_figi_size();
}
inline void GetLastPricesRequest::clear_figi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.Clear();
}
inline std::string* GetLastPricesRequest::add_figi() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_figi()->Add();
  // @@protoc_insertion_point(field_add_mutable:tinkoff.pub.invest.api.contract.v1.GetLastPricesRequest.figi)
  return _s;
}
inline const std::string& GetLastPricesRequest::figi(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetLastPricesRequest.figi)
  return _internal_figi().Get(index);
}
inline std::string* GetLastPricesRequest::mutable_figi(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.GetLastPricesRequest.figi)
  return _internal_mutable_figi()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void GetLastPricesRequest::set_figi(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_figi()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.GetLastPricesRequest.figi)
}
template <typename Arg_, typename... Args_>
inline void GetLastPricesRequest::add_figi(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_figi(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:tinkoff.pub.invest.api.contract.v1.GetLastPricesRequest.figi)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
GetLastPricesRequest::figi() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tinkoff.pub.invest.api.contract.v1.GetLastPricesRequest.figi)
  return _internal_figi();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
GetLastPricesRequest::mutable_figi() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.pub.invest.api.contract.v1.GetLastPricesRequest.figi)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_figi();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
GetLastPricesRequest::_internal_figi() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.figi_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
GetLastPricesRequest::_internal_mutable_figi() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.figi_;
}

// repeated string instrument_id = 2;
inline int GetLastPricesRequest::_internal_instrument_id_size() const {
  return _internal_instrument_id().size();
}
inline int GetLastPricesRequest::instrument_id_size() const {
  return _internal_instrument_id_size();
}
inline void GetLastPricesRequest::clear_instrument_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_id_.Clear();
}
inline std::string* GetLastPricesRequest::add_instrument_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_instrument_id()->Add();
  // @@protoc_insertion_point(field_add_mutable:tinkoff.pub.invest.api.contract.v1.GetLastPricesRequest.instrument_id)
  return _s;
}
inline const std::string& GetLastPricesRequest::instrument_id(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetLastPricesRequest.instrument_id)
  return _internal_instrument_id().Get(index);
}
inline std::string* GetLastPricesRequest::mutable_instrument_id(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.GetLastPricesRequest.instrument_id)
  return _internal_mutable_instrument_id()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void GetLastPricesRequest::set_instrument_id(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_instrument_id()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.GetLastPricesRequest.instrument_id)
}
template <typename Arg_, typename... Args_>
inline void GetLastPricesRequest::add_instrument_id(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_instrument_id(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:tinkoff.pub.invest.api.contract.v1.GetLastPricesRequest.instrument_id)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
GetLastPricesRequest::instrument_id() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tinkoff.pub.invest.api.contract.v1.GetLastPricesRequest.instrument_id)
  return _internal_instrument_id();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
GetLastPricesRequest::mutable_instrument_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.pub.invest.api.contract.v1.GetLastPricesRequest.instrument_id)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_instrument_id();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
GetLastPricesRequest::_internal_instrument_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.instrument_id_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
GetLastPricesRequest::_internal_mutable_instrument_id() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.instrument_id_;
}

// .tinkoff.pub.invest.api.contract.v1.LastPriceType last_price_type = 3;
inline void GetLastPricesRequest::clear_last_price_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_price_type_ = 0;
}
inline ::tinkoff::pub::invest::api::contract::v1::LastPriceType GetLastPricesRequest::last_price_type() const {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetLastPricesRequest.last_price_type)
  return _internal_last_price_type();
}
inline void GetLastPricesRequest::set_last_price_type(::tinkoff::pub::invest::api::contract::v1::LastPriceType value) {
  _internal_set_last_price_type(value);
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.GetLastPricesRequest.last_price_type)
}
inline ::tinkoff::pub::invest::api::contract::v1::LastPriceType GetLastPricesRequest::_internal_last_price_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tinkoff::pub::invest::api::contract::v1::LastPriceType>(_impl_.last_price_type_);
}
inline void GetLastPricesRequest::_internal_set_last_price_type(::tinkoff::pub::invest::api::contract::v1::LastPriceType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_price_type_ = value;
}

// optional .tinkoff.pub.invest.api.contract.v1.InstrumentStatus instrument_status = 9;
inline bool GetLastPricesRequest::has_instrument_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void GetLastPricesRequest::clear_instrument_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_status_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::tinkoff::pub::invest::api::contract::v1::InstrumentStatus GetLastPricesRequest::instrument_status() const {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetLastPricesRequest.instrument_status)
  return _internal_instrument_status();
}
inline void GetLastPricesRequest::set_instrument_status(::tinkoff::pub::invest::api::contract::v1::InstrumentStatus value) {
  _internal_set_instrument_status(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.GetLastPricesRequest.instrument_status)
}
inline ::tinkoff::pub::invest::api::contract::v1::InstrumentStatus GetLastPricesRequest::_internal_instrument_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tinkoff::pub::invest::api::contract::v1::InstrumentStatus>(_impl_.instrument_status_);
}
inline void GetLastPricesRequest::_internal_set_instrument_status(::tinkoff::pub::invest::api::contract::v1::InstrumentStatus value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_status_ = value;
}

// -------------------------------------------------------------------

// GetLastPricesResponse

// repeated .tinkoff.pub.invest.api.contract.v1.LastPrice last_prices = 1;
inline int GetLastPricesResponse::_internal_last_prices_size() const {
  return _internal_last_prices().size();
}
inline int GetLastPricesResponse::last_prices_size() const {
  return _internal_last_prices_size();
}
inline void GetLastPricesResponse::clear_last_prices() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_prices_.Clear();
}
inline ::tinkoff::pub::invest::api::contract::v1::LastPrice* GetLastPricesResponse::mutable_last_prices(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.GetLastPricesResponse.last_prices)
  return _internal_mutable_last_prices()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::LastPrice>* GetLastPricesResponse::mutable_last_prices()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.pub.invest.api.contract.v1.GetLastPricesResponse.last_prices)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_last_prices();
}
inline const ::tinkoff::pub::invest::api::contract::v1::LastPrice& GetLastPricesResponse::last_prices(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetLastPricesResponse.last_prices)
  return _internal_last_prices().Get(index);
}
inline ::tinkoff::pub::invest::api::contract::v1::LastPrice* GetLastPricesResponse::add_last_prices() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tinkoff::pub::invest::api::contract::v1::LastPrice* _add = _internal_mutable_last_prices()->Add();
  // @@protoc_insertion_point(field_add:tinkoff.pub.invest.api.contract.v1.GetLastPricesResponse.last_prices)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::LastPrice>& GetLastPricesResponse::last_prices() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tinkoff.pub.invest.api.contract.v1.GetLastPricesResponse.last_prices)
  return _internal_last_prices();
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::LastPrice>&
GetLastPricesResponse::_internal_last_prices() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.last_prices_;
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::LastPrice>*
GetLastPricesResponse::_internal_mutable_last_prices() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.last_prices_;
}

// -------------------------------------------------------------------

// LastPrice

// string figi = 1;
inline void LastPrice::clear_figi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.ClearToEmpty();
}
inline const std::string& LastPrice::figi() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.LastPrice.figi)
  return _internal_figi();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LastPrice::set_figi(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.LastPrice.figi)
}
inline std::string* LastPrice::mutable_figi() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_figi();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.LastPrice.figi)
  return _s;
}
inline const std::string& LastPrice::_internal_figi() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.figi_.Get();
}
inline void LastPrice::_internal_set_figi(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.Set(value, GetArena());
}
inline std::string* LastPrice::_internal_mutable_figi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.figi_.Mutable( GetArena());
}
inline std::string* LastPrice::release_figi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.LastPrice.figi)
  return _impl_.figi_.Release();
}
inline void LastPrice::set_allocated_figi(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.figi_.IsDefault()) {
    _impl_.figi_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.LastPrice.figi)
}

// .tinkoff.pub.invest.api.contract.v1.Quotation price = 2;
inline bool LastPrice::has_price() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.price_ != nullptr);
  return value;
}
inline const ::tinkoff::pub::invest::api::contract::v1::Quotation& LastPrice::_internal_price() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tinkoff::pub::invest::api::contract::v1::Quotation* p = _impl_.price_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::pub::invest::api::contract::v1::Quotation&>(::tinkoff::pub::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::pub::invest::api::contract::v1::Quotation& LastPrice::price() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.LastPrice.price)
  return _internal_price();
}
inline void LastPrice::unsafe_arena_set_allocated_price(::tinkoff::pub::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.price_);
  }
  _impl_.price_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.LastPrice.price)
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* LastPrice::release_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* released = _impl_.price_;
  _impl_.price_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* LastPrice::unsafe_arena_release_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.LastPrice.price)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* temp = _impl_.price_;
  _impl_.price_ = nullptr;
  return temp;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* LastPrice::_internal_mutable_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.price_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::pub::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.price_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.price_;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* LastPrice::mutable_price() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* _msg = _internal_mutable_price();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.LastPrice.price)
  return _msg;
}
inline void LastPrice::set_allocated_price(::tinkoff::pub::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.price_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.price_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.LastPrice.price)
}

// .google.protobuf.Timestamp time = 3;
inline bool LastPrice::has_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& LastPrice::_internal_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& LastPrice::time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.LastPrice.time)
  return _internal_time();
}
inline void LastPrice::unsafe_arena_set_allocated_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.time_);
  }
  _impl_.time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.LastPrice.time)
}
inline ::google::protobuf::Timestamp* LastPrice::release_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* released = _impl_.time_;
  _impl_.time_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* LastPrice::unsafe_arena_release_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.LastPrice.time)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* temp = _impl_.time_;
  _impl_.time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* LastPrice::_internal_mutable_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.time_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.time_;
}
inline ::google::protobuf::Timestamp* LastPrice::mutable_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.LastPrice.time)
  return _msg;
}
inline void LastPrice::set_allocated_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.LastPrice.time)
}

// string instrument_uid = 11;
inline void LastPrice::clear_instrument_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_uid_.ClearToEmpty();
}
inline const std::string& LastPrice::instrument_uid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.LastPrice.instrument_uid)
  return _internal_instrument_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void LastPrice::set_instrument_uid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.LastPrice.instrument_uid)
}
inline std::string* LastPrice::mutable_instrument_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_instrument_uid();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.LastPrice.instrument_uid)
  return _s;
}
inline const std::string& LastPrice::_internal_instrument_uid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.instrument_uid_.Get();
}
inline void LastPrice::_internal_set_instrument_uid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_uid_.Set(value, GetArena());
}
inline std::string* LastPrice::_internal_mutable_instrument_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.instrument_uid_.Mutable( GetArena());
}
inline std::string* LastPrice::release_instrument_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.LastPrice.instrument_uid)
  return _impl_.instrument_uid_.Release();
}
inline void LastPrice::set_allocated_instrument_uid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_uid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.instrument_uid_.IsDefault()) {
    _impl_.instrument_uid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.LastPrice.instrument_uid)
}

// .tinkoff.pub.invest.api.contract.v1.LastPriceType last_price_type = 12;
inline void LastPrice::clear_last_price_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_price_type_ = 0;
}
inline ::tinkoff::pub::invest::api::contract::v1::LastPriceType LastPrice::last_price_type() const {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.LastPrice.last_price_type)
  return _internal_last_price_type();
}
inline void LastPrice::set_last_price_type(::tinkoff::pub::invest::api::contract::v1::LastPriceType value) {
  _internal_set_last_price_type(value);
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.LastPrice.last_price_type)
}
inline ::tinkoff::pub::invest::api::contract::v1::LastPriceType LastPrice::_internal_last_price_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tinkoff::pub::invest::api::contract::v1::LastPriceType>(_impl_.last_price_type_);
}
inline void LastPrice::_internal_set_last_price_type(::tinkoff::pub::invest::api::contract::v1::LastPriceType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.last_price_type_ = value;
}

// -------------------------------------------------------------------

// GetOrderBookRequest

// optional string figi = 1 [deprecated = true];
inline bool GetOrderBookRequest::has_figi() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void GetOrderBookRequest::clear_figi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetOrderBookRequest::figi() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetOrderBookRequest.figi)
  return _internal_figi();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetOrderBookRequest::set_figi(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.figi_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.GetOrderBookRequest.figi)
}
inline std::string* GetOrderBookRequest::mutable_figi() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_figi();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.GetOrderBookRequest.figi)
  return _s;
}
inline const std::string& GetOrderBookRequest::_internal_figi() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.figi_.Get();
}
inline void GetOrderBookRequest::_internal_set_figi(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.figi_.Set(value, GetArena());
}
inline std::string* GetOrderBookRequest::_internal_mutable_figi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.figi_.Mutable( GetArena());
}
inline std::string* GetOrderBookRequest::release_figi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.GetOrderBookRequest.figi)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.figi_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.figi_.Set("", GetArena());
  }
  return released;
}
inline void GetOrderBookRequest::set_allocated_figi(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.figi_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.figi_.IsDefault()) {
    _impl_.figi_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.GetOrderBookRequest.figi)
}

// int32 depth = 2 [(.google.api.field_behavior) = REQUIRED];
inline void GetOrderBookRequest::clear_depth() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.depth_ = 0;
}
inline ::int32_t GetOrderBookRequest::depth() const {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetOrderBookRequest.depth)
  return _internal_depth();
}
inline void GetOrderBookRequest::set_depth(::int32_t value) {
  _internal_set_depth(value);
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.GetOrderBookRequest.depth)
}
inline ::int32_t GetOrderBookRequest::_internal_depth() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.depth_;
}
inline void GetOrderBookRequest::_internal_set_depth(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.depth_ = value;
}

// optional string instrument_id = 3;
inline bool GetOrderBookRequest::has_instrument_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void GetOrderBookRequest::clear_instrument_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GetOrderBookRequest::instrument_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetOrderBookRequest.instrument_id)
  return _internal_instrument_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetOrderBookRequest::set_instrument_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.instrument_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.GetOrderBookRequest.instrument_id)
}
inline std::string* GetOrderBookRequest::mutable_instrument_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_instrument_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.GetOrderBookRequest.instrument_id)
  return _s;
}
inline const std::string& GetOrderBookRequest::_internal_instrument_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.instrument_id_.Get();
}
inline void GetOrderBookRequest::_internal_set_instrument_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.instrument_id_.Set(value, GetArena());
}
inline std::string* GetOrderBookRequest::_internal_mutable_instrument_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.instrument_id_.Mutable( GetArena());
}
inline std::string* GetOrderBookRequest::release_instrument_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.GetOrderBookRequest.instrument_id)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.instrument_id_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.instrument_id_.Set("", GetArena());
  }
  return released;
}
inline void GetOrderBookRequest::set_allocated_instrument_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.instrument_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.instrument_id_.IsDefault()) {
    _impl_.instrument_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.GetOrderBookRequest.instrument_id)
}

// -------------------------------------------------------------------

// GetOrderBookResponse

// string figi = 1;
inline void GetOrderBookResponse::clear_figi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.ClearToEmpty();
}
inline const std::string& GetOrderBookResponse::figi() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetOrderBookResponse.figi)
  return _internal_figi();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetOrderBookResponse::set_figi(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.GetOrderBookResponse.figi)
}
inline std::string* GetOrderBookResponse::mutable_figi() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_figi();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.GetOrderBookResponse.figi)
  return _s;
}
inline const std::string& GetOrderBookResponse::_internal_figi() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.figi_.Get();
}
inline void GetOrderBookResponse::_internal_set_figi(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.Set(value, GetArena());
}
inline std::string* GetOrderBookResponse::_internal_mutable_figi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.figi_.Mutable( GetArena());
}
inline std::string* GetOrderBookResponse::release_figi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.GetOrderBookResponse.figi)
  return _impl_.figi_.Release();
}
inline void GetOrderBookResponse::set_allocated_figi(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.figi_.IsDefault()) {
    _impl_.figi_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.GetOrderBookResponse.figi)
}

// int32 depth = 2;
inline void GetOrderBookResponse::clear_depth() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.depth_ = 0;
}
inline ::int32_t GetOrderBookResponse::depth() const {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetOrderBookResponse.depth)
  return _internal_depth();
}
inline void GetOrderBookResponse::set_depth(::int32_t value) {
  _internal_set_depth(value);
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.GetOrderBookResponse.depth)
}
inline ::int32_t GetOrderBookResponse::_internal_depth() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.depth_;
}
inline void GetOrderBookResponse::_internal_set_depth(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.depth_ = value;
}

// repeated .tinkoff.pub.invest.api.contract.v1.Order bids = 3;
inline int GetOrderBookResponse::_internal_bids_size() const {
  return _internal_bids().size();
}
inline int GetOrderBookResponse::bids_size() const {
  return _internal_bids_size();
}
inline void GetOrderBookResponse::clear_bids() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bids_.Clear();
}
inline ::tinkoff::pub::invest::api::contract::v1::Order* GetOrderBookResponse::mutable_bids(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.GetOrderBookResponse.bids)
  return _internal_mutable_bids()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::Order>* GetOrderBookResponse::mutable_bids()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.pub.invest.api.contract.v1.GetOrderBookResponse.bids)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_bids();
}
inline const ::tinkoff::pub::invest::api::contract::v1::Order& GetOrderBookResponse::bids(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetOrderBookResponse.bids)
  return _internal_bids().Get(index);
}
inline ::tinkoff::pub::invest::api::contract::v1::Order* GetOrderBookResponse::add_bids() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tinkoff::pub::invest::api::contract::v1::Order* _add = _internal_mutable_bids()->Add();
  // @@protoc_insertion_point(field_add:tinkoff.pub.invest.api.contract.v1.GetOrderBookResponse.bids)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::Order>& GetOrderBookResponse::bids() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tinkoff.pub.invest.api.contract.v1.GetOrderBookResponse.bids)
  return _internal_bids();
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::Order>&
GetOrderBookResponse::_internal_bids() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bids_;
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::Order>*
GetOrderBookResponse::_internal_mutable_bids() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.bids_;
}

// repeated .tinkoff.pub.invest.api.contract.v1.Order asks = 4;
inline int GetOrderBookResponse::_internal_asks_size() const {
  return _internal_asks().size();
}
inline int GetOrderBookResponse::asks_size() const {
  return _internal_asks_size();
}
inline void GetOrderBookResponse::clear_asks() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.asks_.Clear();
}
inline ::tinkoff::pub::invest::api::contract::v1::Order* GetOrderBookResponse::mutable_asks(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.GetOrderBookResponse.asks)
  return _internal_mutable_asks()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::Order>* GetOrderBookResponse::mutable_asks()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.pub.invest.api.contract.v1.GetOrderBookResponse.asks)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_asks();
}
inline const ::tinkoff::pub::invest::api::contract::v1::Order& GetOrderBookResponse::asks(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetOrderBookResponse.asks)
  return _internal_asks().Get(index);
}
inline ::tinkoff::pub::invest::api::contract::v1::Order* GetOrderBookResponse::add_asks() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tinkoff::pub::invest::api::contract::v1::Order* _add = _internal_mutable_asks()->Add();
  // @@protoc_insertion_point(field_add:tinkoff.pub.invest.api.contract.v1.GetOrderBookResponse.asks)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::Order>& GetOrderBookResponse::asks() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tinkoff.pub.invest.api.contract.v1.GetOrderBookResponse.asks)
  return _internal_asks();
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::Order>&
GetOrderBookResponse::_internal_asks() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.asks_;
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::Order>*
GetOrderBookResponse::_internal_mutable_asks() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.asks_;
}

// .tinkoff.pub.invest.api.contract.v1.Quotation last_price = 5;
inline bool GetOrderBookResponse::has_last_price() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.last_price_ != nullptr);
  return value;
}
inline const ::tinkoff::pub::invest::api::contract::v1::Quotation& GetOrderBookResponse::_internal_last_price() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tinkoff::pub::invest::api::contract::v1::Quotation* p = _impl_.last_price_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::pub::invest::api::contract::v1::Quotation&>(::tinkoff::pub::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::pub::invest::api::contract::v1::Quotation& GetOrderBookResponse::last_price() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetOrderBookResponse.last_price)
  return _internal_last_price();
}
inline void GetOrderBookResponse::unsafe_arena_set_allocated_last_price(::tinkoff::pub::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.last_price_);
  }
  _impl_.last_price_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.GetOrderBookResponse.last_price)
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* GetOrderBookResponse::release_last_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* released = _impl_.last_price_;
  _impl_.last_price_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* GetOrderBookResponse::unsafe_arena_release_last_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.GetOrderBookResponse.last_price)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* temp = _impl_.last_price_;
  _impl_.last_price_ = nullptr;
  return temp;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* GetOrderBookResponse::_internal_mutable_last_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.last_price_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::pub::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.last_price_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.last_price_;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* GetOrderBookResponse::mutable_last_price() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* _msg = _internal_mutable_last_price();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.GetOrderBookResponse.last_price)
  return _msg;
}
inline void GetOrderBookResponse::set_allocated_last_price(::tinkoff::pub::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.last_price_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.last_price_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.GetOrderBookResponse.last_price)
}

// .tinkoff.pub.invest.api.contract.v1.Quotation close_price = 6;
inline bool GetOrderBookResponse::has_close_price() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.close_price_ != nullptr);
  return value;
}
inline const ::tinkoff::pub::invest::api::contract::v1::Quotation& GetOrderBookResponse::_internal_close_price() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tinkoff::pub::invest::api::contract::v1::Quotation* p = _impl_.close_price_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::pub::invest::api::contract::v1::Quotation&>(::tinkoff::pub::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::pub::invest::api::contract::v1::Quotation& GetOrderBookResponse::close_price() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetOrderBookResponse.close_price)
  return _internal_close_price();
}
inline void GetOrderBookResponse::unsafe_arena_set_allocated_close_price(::tinkoff::pub::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.close_price_);
  }
  _impl_.close_price_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.GetOrderBookResponse.close_price)
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* GetOrderBookResponse::release_close_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* released = _impl_.close_price_;
  _impl_.close_price_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* GetOrderBookResponse::unsafe_arena_release_close_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.GetOrderBookResponse.close_price)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* temp = _impl_.close_price_;
  _impl_.close_price_ = nullptr;
  return temp;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* GetOrderBookResponse::_internal_mutable_close_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.close_price_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::pub::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.close_price_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.close_price_;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* GetOrderBookResponse::mutable_close_price() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* _msg = _internal_mutable_close_price();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.GetOrderBookResponse.close_price)
  return _msg;
}
inline void GetOrderBookResponse::set_allocated_close_price(::tinkoff::pub::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.close_price_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.close_price_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.GetOrderBookResponse.close_price)
}

// .tinkoff.pub.invest.api.contract.v1.Quotation limit_up = 7;
inline bool GetOrderBookResponse::has_limit_up() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.limit_up_ != nullptr);
  return value;
}
inline const ::tinkoff::pub::invest::api::contract::v1::Quotation& GetOrderBookResponse::_internal_limit_up() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tinkoff::pub::invest::api::contract::v1::Quotation* p = _impl_.limit_up_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::pub::invest::api::contract::v1::Quotation&>(::tinkoff::pub::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::pub::invest::api::contract::v1::Quotation& GetOrderBookResponse::limit_up() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetOrderBookResponse.limit_up)
  return _internal_limit_up();
}
inline void GetOrderBookResponse::unsafe_arena_set_allocated_limit_up(::tinkoff::pub::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.limit_up_);
  }
  _impl_.limit_up_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.GetOrderBookResponse.limit_up)
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* GetOrderBookResponse::release_limit_up() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* released = _impl_.limit_up_;
  _impl_.limit_up_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* GetOrderBookResponse::unsafe_arena_release_limit_up() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.GetOrderBookResponse.limit_up)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* temp = _impl_.limit_up_;
  _impl_.limit_up_ = nullptr;
  return temp;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* GetOrderBookResponse::_internal_mutable_limit_up() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.limit_up_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::pub::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.limit_up_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.limit_up_;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* GetOrderBookResponse::mutable_limit_up() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* _msg = _internal_mutable_limit_up();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.GetOrderBookResponse.limit_up)
  return _msg;
}
inline void GetOrderBookResponse::set_allocated_limit_up(::tinkoff::pub::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.limit_up_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.limit_up_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.GetOrderBookResponse.limit_up)
}

// .tinkoff.pub.invest.api.contract.v1.Quotation limit_down = 8;
inline bool GetOrderBookResponse::has_limit_down() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.limit_down_ != nullptr);
  return value;
}
inline const ::tinkoff::pub::invest::api::contract::v1::Quotation& GetOrderBookResponse::_internal_limit_down() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tinkoff::pub::invest::api::contract::v1::Quotation* p = _impl_.limit_down_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::pub::invest::api::contract::v1::Quotation&>(::tinkoff::pub::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::pub::invest::api::contract::v1::Quotation& GetOrderBookResponse::limit_down() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetOrderBookResponse.limit_down)
  return _internal_limit_down();
}
inline void GetOrderBookResponse::unsafe_arena_set_allocated_limit_down(::tinkoff::pub::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.limit_down_);
  }
  _impl_.limit_down_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.GetOrderBookResponse.limit_down)
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* GetOrderBookResponse::release_limit_down() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* released = _impl_.limit_down_;
  _impl_.limit_down_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* GetOrderBookResponse::unsafe_arena_release_limit_down() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.GetOrderBookResponse.limit_down)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* temp = _impl_.limit_down_;
  _impl_.limit_down_ = nullptr;
  return temp;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* GetOrderBookResponse::_internal_mutable_limit_down() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.limit_down_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::pub::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.limit_down_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.limit_down_;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* GetOrderBookResponse::mutable_limit_down() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* _msg = _internal_mutable_limit_down();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.GetOrderBookResponse.limit_down)
  return _msg;
}
inline void GetOrderBookResponse::set_allocated_limit_down(::tinkoff::pub::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.limit_down_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.limit_down_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.GetOrderBookResponse.limit_down)
}

// .google.protobuf.Timestamp last_price_ts = 21;
inline bool GetOrderBookResponse::has_last_price_ts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.last_price_ts_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& GetOrderBookResponse::_internal_last_price_ts() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.last_price_ts_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& GetOrderBookResponse::last_price_ts() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetOrderBookResponse.last_price_ts)
  return _internal_last_price_ts();
}
inline void GetOrderBookResponse::unsafe_arena_set_allocated_last_price_ts(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.last_price_ts_);
  }
  _impl_.last_price_ts_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.GetOrderBookResponse.last_price_ts)
}
inline ::google::protobuf::Timestamp* GetOrderBookResponse::release_last_price_ts() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::google::protobuf::Timestamp* released = _impl_.last_price_ts_;
  _impl_.last_price_ts_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* GetOrderBookResponse::unsafe_arena_release_last_price_ts() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.GetOrderBookResponse.last_price_ts)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::google::protobuf::Timestamp* temp = _impl_.last_price_ts_;
  _impl_.last_price_ts_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* GetOrderBookResponse::_internal_mutable_last_price_ts() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.last_price_ts_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.last_price_ts_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.last_price_ts_;
}
inline ::google::protobuf::Timestamp* GetOrderBookResponse::mutable_last_price_ts() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000010u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_last_price_ts();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.GetOrderBookResponse.last_price_ts)
  return _msg;
}
inline void GetOrderBookResponse::set_allocated_last_price_ts(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.last_price_ts_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.last_price_ts_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.GetOrderBookResponse.last_price_ts)
}

// .google.protobuf.Timestamp close_price_ts = 22;
inline bool GetOrderBookResponse::has_close_price_ts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.close_price_ts_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& GetOrderBookResponse::_internal_close_price_ts() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.close_price_ts_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& GetOrderBookResponse::close_price_ts() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetOrderBookResponse.close_price_ts)
  return _internal_close_price_ts();
}
inline void GetOrderBookResponse::unsafe_arena_set_allocated_close_price_ts(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.close_price_ts_);
  }
  _impl_.close_price_ts_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.GetOrderBookResponse.close_price_ts)
}
inline ::google::protobuf::Timestamp* GetOrderBookResponse::release_close_price_ts() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::google::protobuf::Timestamp* released = _impl_.close_price_ts_;
  _impl_.close_price_ts_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* GetOrderBookResponse::unsafe_arena_release_close_price_ts() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.GetOrderBookResponse.close_price_ts)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::google::protobuf::Timestamp* temp = _impl_.close_price_ts_;
  _impl_.close_price_ts_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* GetOrderBookResponse::_internal_mutable_close_price_ts() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.close_price_ts_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.close_price_ts_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.close_price_ts_;
}
inline ::google::protobuf::Timestamp* GetOrderBookResponse::mutable_close_price_ts() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000020u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_close_price_ts();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.GetOrderBookResponse.close_price_ts)
  return _msg;
}
inline void GetOrderBookResponse::set_allocated_close_price_ts(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.close_price_ts_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.close_price_ts_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.GetOrderBookResponse.close_price_ts)
}

// .google.protobuf.Timestamp orderbook_ts = 23;
inline bool GetOrderBookResponse::has_orderbook_ts() const {
  bool value = (_impl_._has_bits_[0] & 0x00000040u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.orderbook_ts_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& GetOrderBookResponse::_internal_orderbook_ts() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.orderbook_ts_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& GetOrderBookResponse::orderbook_ts() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetOrderBookResponse.orderbook_ts)
  return _internal_orderbook_ts();
}
inline void GetOrderBookResponse::unsafe_arena_set_allocated_orderbook_ts(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.orderbook_ts_);
  }
  _impl_.orderbook_ts_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.GetOrderBookResponse.orderbook_ts)
}
inline ::google::protobuf::Timestamp* GetOrderBookResponse::release_orderbook_ts() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::google::protobuf::Timestamp* released = _impl_.orderbook_ts_;
  _impl_.orderbook_ts_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* GetOrderBookResponse::unsafe_arena_release_orderbook_ts() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.GetOrderBookResponse.orderbook_ts)

  _impl_._has_bits_[0] &= ~0x00000040u;
  ::google::protobuf::Timestamp* temp = _impl_.orderbook_ts_;
  _impl_.orderbook_ts_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* GetOrderBookResponse::_internal_mutable_orderbook_ts() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.orderbook_ts_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.orderbook_ts_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.orderbook_ts_;
}
inline ::google::protobuf::Timestamp* GetOrderBookResponse::mutable_orderbook_ts() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000040u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_orderbook_ts();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.GetOrderBookResponse.orderbook_ts)
  return _msg;
}
inline void GetOrderBookResponse::set_allocated_orderbook_ts(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.orderbook_ts_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000040u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000040u;
  }

  _impl_.orderbook_ts_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.GetOrderBookResponse.orderbook_ts)
}

// string instrument_uid = 9;
inline void GetOrderBookResponse::clear_instrument_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_uid_.ClearToEmpty();
}
inline const std::string& GetOrderBookResponse::instrument_uid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetOrderBookResponse.instrument_uid)
  return _internal_instrument_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetOrderBookResponse::set_instrument_uid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.GetOrderBookResponse.instrument_uid)
}
inline std::string* GetOrderBookResponse::mutable_instrument_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_instrument_uid();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.GetOrderBookResponse.instrument_uid)
  return _s;
}
inline const std::string& GetOrderBookResponse::_internal_instrument_uid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.instrument_uid_.Get();
}
inline void GetOrderBookResponse::_internal_set_instrument_uid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_uid_.Set(value, GetArena());
}
inline std::string* GetOrderBookResponse::_internal_mutable_instrument_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.instrument_uid_.Mutable( GetArena());
}
inline std::string* GetOrderBookResponse::release_instrument_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.GetOrderBookResponse.instrument_uid)
  return _impl_.instrument_uid_.Release();
}
inline void GetOrderBookResponse::set_allocated_instrument_uid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_uid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.instrument_uid_.IsDefault()) {
    _impl_.instrument_uid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.GetOrderBookResponse.instrument_uid)
}

// -------------------------------------------------------------------

// GetTradingStatusRequest

// optional string figi = 1 [deprecated = true];
inline bool GetTradingStatusRequest::has_figi() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void GetTradingStatusRequest::clear_figi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetTradingStatusRequest::figi() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetTradingStatusRequest.figi)
  return _internal_figi();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetTradingStatusRequest::set_figi(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.figi_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.GetTradingStatusRequest.figi)
}
inline std::string* GetTradingStatusRequest::mutable_figi() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_figi();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.GetTradingStatusRequest.figi)
  return _s;
}
inline const std::string& GetTradingStatusRequest::_internal_figi() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.figi_.Get();
}
inline void GetTradingStatusRequest::_internal_set_figi(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.figi_.Set(value, GetArena());
}
inline std::string* GetTradingStatusRequest::_internal_mutable_figi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.figi_.Mutable( GetArena());
}
inline std::string* GetTradingStatusRequest::release_figi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.GetTradingStatusRequest.figi)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.figi_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.figi_.Set("", GetArena());
  }
  return released;
}
inline void GetTradingStatusRequest::set_allocated_figi(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.figi_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.figi_.IsDefault()) {
    _impl_.figi_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.GetTradingStatusRequest.figi)
}

// optional string instrument_id = 2;
inline bool GetTradingStatusRequest::has_instrument_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void GetTradingStatusRequest::clear_instrument_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GetTradingStatusRequest::instrument_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetTradingStatusRequest.instrument_id)
  return _internal_instrument_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetTradingStatusRequest::set_instrument_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.instrument_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.GetTradingStatusRequest.instrument_id)
}
inline std::string* GetTradingStatusRequest::mutable_instrument_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_instrument_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.GetTradingStatusRequest.instrument_id)
  return _s;
}
inline const std::string& GetTradingStatusRequest::_internal_instrument_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.instrument_id_.Get();
}
inline void GetTradingStatusRequest::_internal_set_instrument_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.instrument_id_.Set(value, GetArena());
}
inline std::string* GetTradingStatusRequest::_internal_mutable_instrument_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.instrument_id_.Mutable( GetArena());
}
inline std::string* GetTradingStatusRequest::release_instrument_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.GetTradingStatusRequest.instrument_id)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.instrument_id_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.instrument_id_.Set("", GetArena());
  }
  return released;
}
inline void GetTradingStatusRequest::set_allocated_instrument_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.instrument_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.instrument_id_.IsDefault()) {
    _impl_.instrument_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.GetTradingStatusRequest.instrument_id)
}

// -------------------------------------------------------------------

// GetTradingStatusesRequest

// repeated string instrument_id = 1;
inline int GetTradingStatusesRequest::_internal_instrument_id_size() const {
  return _internal_instrument_id().size();
}
inline int GetTradingStatusesRequest::instrument_id_size() const {
  return _internal_instrument_id_size();
}
inline void GetTradingStatusesRequest::clear_instrument_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_id_.Clear();
}
inline std::string* GetTradingStatusesRequest::add_instrument_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  std::string* _s = _internal_mutable_instrument_id()->Add();
  // @@protoc_insertion_point(field_add_mutable:tinkoff.pub.invest.api.contract.v1.GetTradingStatusesRequest.instrument_id)
  return _s;
}
inline const std::string& GetTradingStatusesRequest::instrument_id(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetTradingStatusesRequest.instrument_id)
  return _internal_instrument_id().Get(index);
}
inline std::string* GetTradingStatusesRequest::mutable_instrument_id(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.GetTradingStatusesRequest.instrument_id)
  return _internal_mutable_instrument_id()->Mutable(index);
}
template <typename Arg_, typename... Args_>
inline void GetTradingStatusesRequest::set_instrument_id(int index, Arg_&& value, Args_... args) {
  ::google::protobuf::internal::AssignToString(
      *_internal_mutable_instrument_id()->Mutable(index),
      std::forward<Arg_>(value), args... );
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.GetTradingStatusesRequest.instrument_id)
}
template <typename Arg_, typename... Args_>
inline void GetTradingStatusesRequest::add_instrument_id(Arg_&& value, Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::google::protobuf::internal::AddToRepeatedPtrField(*_internal_mutable_instrument_id(),
                               std::forward<Arg_>(value),
                               args... );
  // @@protoc_insertion_point(field_add:tinkoff.pub.invest.api.contract.v1.GetTradingStatusesRequest.instrument_id)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
GetTradingStatusesRequest::instrument_id() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tinkoff.pub.invest.api.contract.v1.GetTradingStatusesRequest.instrument_id)
  return _internal_instrument_id();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
GetTradingStatusesRequest::mutable_instrument_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.pub.invest.api.contract.v1.GetTradingStatusesRequest.instrument_id)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_instrument_id();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
GetTradingStatusesRequest::_internal_instrument_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.instrument_id_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
GetTradingStatusesRequest::_internal_mutable_instrument_id() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.instrument_id_;
}

// -------------------------------------------------------------------

// GetTradingStatusesResponse

// repeated .tinkoff.pub.invest.api.contract.v1.GetTradingStatusResponse trading_statuses = 1;
inline int GetTradingStatusesResponse::_internal_trading_statuses_size() const {
  return _internal_trading_statuses().size();
}
inline int GetTradingStatusesResponse::trading_statuses_size() const {
  return _internal_trading_statuses_size();
}
inline void GetTradingStatusesResponse::clear_trading_statuses() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.trading_statuses_.Clear();
}
inline ::tinkoff::pub::invest::api::contract::v1::GetTradingStatusResponse* GetTradingStatusesResponse::mutable_trading_statuses(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.GetTradingStatusesResponse.trading_statuses)
  return _internal_mutable_trading_statuses()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::GetTradingStatusResponse>* GetTradingStatusesResponse::mutable_trading_statuses()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.pub.invest.api.contract.v1.GetTradingStatusesResponse.trading_statuses)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_trading_statuses();
}
inline const ::tinkoff::pub::invest::api::contract::v1::GetTradingStatusResponse& GetTradingStatusesResponse::trading_statuses(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetTradingStatusesResponse.trading_statuses)
  return _internal_trading_statuses().Get(index);
}
inline ::tinkoff::pub::invest::api::contract::v1::GetTradingStatusResponse* GetTradingStatusesResponse::add_trading_statuses() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tinkoff::pub::invest::api::contract::v1::GetTradingStatusResponse* _add = _internal_mutable_trading_statuses()->Add();
  // @@protoc_insertion_point(field_add:tinkoff.pub.invest.api.contract.v1.GetTradingStatusesResponse.trading_statuses)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::GetTradingStatusResponse>& GetTradingStatusesResponse::trading_statuses() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tinkoff.pub.invest.api.contract.v1.GetTradingStatusesResponse.trading_statuses)
  return _internal_trading_statuses();
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::GetTradingStatusResponse>&
GetTradingStatusesResponse::_internal_trading_statuses() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.trading_statuses_;
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::GetTradingStatusResponse>*
GetTradingStatusesResponse::_internal_mutable_trading_statuses() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.trading_statuses_;
}

// -------------------------------------------------------------------

// GetTradingStatusResponse

// string figi = 1;
inline void GetTradingStatusResponse::clear_figi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.ClearToEmpty();
}
inline const std::string& GetTradingStatusResponse::figi() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetTradingStatusResponse.figi)
  return _internal_figi();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetTradingStatusResponse::set_figi(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.GetTradingStatusResponse.figi)
}
inline std::string* GetTradingStatusResponse::mutable_figi() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_figi();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.GetTradingStatusResponse.figi)
  return _s;
}
inline const std::string& GetTradingStatusResponse::_internal_figi() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.figi_.Get();
}
inline void GetTradingStatusResponse::_internal_set_figi(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.Set(value, GetArena());
}
inline std::string* GetTradingStatusResponse::_internal_mutable_figi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.figi_.Mutable( GetArena());
}
inline std::string* GetTradingStatusResponse::release_figi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.GetTradingStatusResponse.figi)
  return _impl_.figi_.Release();
}
inline void GetTradingStatusResponse::set_allocated_figi(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.figi_.IsDefault()) {
    _impl_.figi_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.GetTradingStatusResponse.figi)
}

// .tinkoff.pub.invest.api.contract.v1.SecurityTradingStatus trading_status = 2;
inline void GetTradingStatusResponse::clear_trading_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.trading_status_ = 0;
}
inline ::tinkoff::pub::invest::api::contract::v1::SecurityTradingStatus GetTradingStatusResponse::trading_status() const {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetTradingStatusResponse.trading_status)
  return _internal_trading_status();
}
inline void GetTradingStatusResponse::set_trading_status(::tinkoff::pub::invest::api::contract::v1::SecurityTradingStatus value) {
  _internal_set_trading_status(value);
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.GetTradingStatusResponse.trading_status)
}
inline ::tinkoff::pub::invest::api::contract::v1::SecurityTradingStatus GetTradingStatusResponse::_internal_trading_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tinkoff::pub::invest::api::contract::v1::SecurityTradingStatus>(_impl_.trading_status_);
}
inline void GetTradingStatusResponse::_internal_set_trading_status(::tinkoff::pub::invest::api::contract::v1::SecurityTradingStatus value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.trading_status_ = value;
}

// bool limit_order_available_flag = 3;
inline void GetTradingStatusResponse::clear_limit_order_available_flag() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.limit_order_available_flag_ = false;
}
inline bool GetTradingStatusResponse::limit_order_available_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetTradingStatusResponse.limit_order_available_flag)
  return _internal_limit_order_available_flag();
}
inline void GetTradingStatusResponse::set_limit_order_available_flag(bool value) {
  _internal_set_limit_order_available_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.GetTradingStatusResponse.limit_order_available_flag)
}
inline bool GetTradingStatusResponse::_internal_limit_order_available_flag() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.limit_order_available_flag_;
}
inline void GetTradingStatusResponse::_internal_set_limit_order_available_flag(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.limit_order_available_flag_ = value;
}

// bool market_order_available_flag = 4;
inline void GetTradingStatusResponse::clear_market_order_available_flag() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.market_order_available_flag_ = false;
}
inline bool GetTradingStatusResponse::market_order_available_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetTradingStatusResponse.market_order_available_flag)
  return _internal_market_order_available_flag();
}
inline void GetTradingStatusResponse::set_market_order_available_flag(bool value) {
  _internal_set_market_order_available_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.GetTradingStatusResponse.market_order_available_flag)
}
inline bool GetTradingStatusResponse::_internal_market_order_available_flag() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.market_order_available_flag_;
}
inline void GetTradingStatusResponse::_internal_set_market_order_available_flag(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.market_order_available_flag_ = value;
}

// bool api_trade_available_flag = 5;
inline void GetTradingStatusResponse::clear_api_trade_available_flag() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.api_trade_available_flag_ = false;
}
inline bool GetTradingStatusResponse::api_trade_available_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetTradingStatusResponse.api_trade_available_flag)
  return _internal_api_trade_available_flag();
}
inline void GetTradingStatusResponse::set_api_trade_available_flag(bool value) {
  _internal_set_api_trade_available_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.GetTradingStatusResponse.api_trade_available_flag)
}
inline bool GetTradingStatusResponse::_internal_api_trade_available_flag() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.api_trade_available_flag_;
}
inline void GetTradingStatusResponse::_internal_set_api_trade_available_flag(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.api_trade_available_flag_ = value;
}

// string instrument_uid = 6;
inline void GetTradingStatusResponse::clear_instrument_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_uid_.ClearToEmpty();
}
inline const std::string& GetTradingStatusResponse::instrument_uid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetTradingStatusResponse.instrument_uid)
  return _internal_instrument_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetTradingStatusResponse::set_instrument_uid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.GetTradingStatusResponse.instrument_uid)
}
inline std::string* GetTradingStatusResponse::mutable_instrument_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_instrument_uid();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.GetTradingStatusResponse.instrument_uid)
  return _s;
}
inline const std::string& GetTradingStatusResponse::_internal_instrument_uid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.instrument_uid_.Get();
}
inline void GetTradingStatusResponse::_internal_set_instrument_uid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_uid_.Set(value, GetArena());
}
inline std::string* GetTradingStatusResponse::_internal_mutable_instrument_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.instrument_uid_.Mutable( GetArena());
}
inline std::string* GetTradingStatusResponse::release_instrument_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.GetTradingStatusResponse.instrument_uid)
  return _impl_.instrument_uid_.Release();
}
inline void GetTradingStatusResponse::set_allocated_instrument_uid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_uid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.instrument_uid_.IsDefault()) {
    _impl_.instrument_uid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.GetTradingStatusResponse.instrument_uid)
}

// bool bestprice_order_available_flag = 8;
inline void GetTradingStatusResponse::clear_bestprice_order_available_flag() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bestprice_order_available_flag_ = false;
}
inline bool GetTradingStatusResponse::bestprice_order_available_flag() const {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetTradingStatusResponse.bestprice_order_available_flag)
  return _internal_bestprice_order_available_flag();
}
inline void GetTradingStatusResponse::set_bestprice_order_available_flag(bool value) {
  _internal_set_bestprice_order_available_flag(value);
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.GetTradingStatusResponse.bestprice_order_available_flag)
}
inline bool GetTradingStatusResponse::_internal_bestprice_order_available_flag() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.bestprice_order_available_flag_;
}
inline void GetTradingStatusResponse::_internal_set_bestprice_order_available_flag(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.bestprice_order_available_flag_ = value;
}

// bool only_best_price = 9;
inline void GetTradingStatusResponse::clear_only_best_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.only_best_price_ = false;
}
inline bool GetTradingStatusResponse::only_best_price() const {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetTradingStatusResponse.only_best_price)
  return _internal_only_best_price();
}
inline void GetTradingStatusResponse::set_only_best_price(bool value) {
  _internal_set_only_best_price(value);
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.GetTradingStatusResponse.only_best_price)
}
inline bool GetTradingStatusResponse::_internal_only_best_price() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.only_best_price_;
}
inline void GetTradingStatusResponse::_internal_set_only_best_price(bool value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.only_best_price_ = value;
}

// -------------------------------------------------------------------

// GetLastTradesRequest

// optional string figi = 1 [deprecated = true];
inline bool GetLastTradesRequest::has_figi() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void GetLastTradesRequest::clear_figi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline const std::string& GetLastTradesRequest::figi() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetLastTradesRequest.figi)
  return _internal_figi();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetLastTradesRequest::set_figi(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.figi_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.GetLastTradesRequest.figi)
}
inline std::string* GetLastTradesRequest::mutable_figi() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_figi();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.GetLastTradesRequest.figi)
  return _s;
}
inline const std::string& GetLastTradesRequest::_internal_figi() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.figi_.Get();
}
inline void GetLastTradesRequest::_internal_set_figi(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  _impl_.figi_.Set(value, GetArena());
}
inline std::string* GetLastTradesRequest::_internal_mutable_figi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000001u;
  return _impl_.figi_.Mutable( GetArena());
}
inline std::string* GetLastTradesRequest::release_figi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.GetLastTradesRequest.figi)
  if ((_impl_._has_bits_[0] & 0x00000001u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000001u;
  auto* released = _impl_.figi_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.figi_.Set("", GetArena());
  }
  return released;
}
inline void GetLastTradesRequest::set_allocated_figi(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  _impl_.figi_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.figi_.IsDefault()) {
    _impl_.figi_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.GetLastTradesRequest.figi)
}

// .google.protobuf.Timestamp from = 2 [(.google.api.field_behavior) = REQUIRED];
inline bool GetLastTradesRequest::has_from() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.from_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& GetLastTradesRequest::_internal_from() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.from_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& GetLastTradesRequest::from() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetLastTradesRequest.from)
  return _internal_from();
}
inline void GetLastTradesRequest::unsafe_arena_set_allocated_from(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.from_);
  }
  _impl_.from_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.GetLastTradesRequest.from)
}
inline ::google::protobuf::Timestamp* GetLastTradesRequest::release_from() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::protobuf::Timestamp* released = _impl_.from_;
  _impl_.from_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* GetLastTradesRequest::unsafe_arena_release_from() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.GetLastTradesRequest.from)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::protobuf::Timestamp* temp = _impl_.from_;
  _impl_.from_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* GetLastTradesRequest::_internal_mutable_from() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.from_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.from_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.from_;
}
inline ::google::protobuf::Timestamp* GetLastTradesRequest::mutable_from() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_from();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.GetLastTradesRequest.from)
  return _msg;
}
inline void GetLastTradesRequest::set_allocated_from(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.from_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.from_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.GetLastTradesRequest.from)
}

// .google.protobuf.Timestamp to = 3 [(.google.api.field_behavior) = REQUIRED];
inline bool GetLastTradesRequest::has_to() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.to_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& GetLastTradesRequest::_internal_to() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.to_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& GetLastTradesRequest::to() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetLastTradesRequest.to)
  return _internal_to();
}
inline void GetLastTradesRequest::unsafe_arena_set_allocated_to(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.to_);
  }
  _impl_.to_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.GetLastTradesRequest.to)
}
inline ::google::protobuf::Timestamp* GetLastTradesRequest::release_to() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::google::protobuf::Timestamp* released = _impl_.to_;
  _impl_.to_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* GetLastTradesRequest::unsafe_arena_release_to() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.GetLastTradesRequest.to)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::google::protobuf::Timestamp* temp = _impl_.to_;
  _impl_.to_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* GetLastTradesRequest::_internal_mutable_to() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.to_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.to_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.to_;
}
inline ::google::protobuf::Timestamp* GetLastTradesRequest::mutable_to() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.GetLastTradesRequest.to)
  return _msg;
}
inline void GetLastTradesRequest::set_allocated_to(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.to_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.to_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.GetLastTradesRequest.to)
}

// optional string instrument_id = 4;
inline bool GetLastTradesRequest::has_instrument_id() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  return value;
}
inline void GetLastTradesRequest::clear_instrument_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_id_.ClearToEmpty();
  _impl_._has_bits_[0] &= ~0x00000002u;
}
inline const std::string& GetLastTradesRequest::instrument_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetLastTradesRequest.instrument_id)
  return _internal_instrument_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetLastTradesRequest::set_instrument_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.instrument_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.GetLastTradesRequest.instrument_id)
}
inline std::string* GetLastTradesRequest::mutable_instrument_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_instrument_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.GetLastTradesRequest.instrument_id)
  return _s;
}
inline const std::string& GetLastTradesRequest::_internal_instrument_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.instrument_id_.Get();
}
inline void GetLastTradesRequest::_internal_set_instrument_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  _impl_.instrument_id_.Set(value, GetArena());
}
inline std::string* GetLastTradesRequest::_internal_mutable_instrument_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_._has_bits_[0] |= 0x00000002u;
  return _impl_.instrument_id_.Mutable( GetArena());
}
inline std::string* GetLastTradesRequest::release_instrument_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.GetLastTradesRequest.instrument_id)
  if ((_impl_._has_bits_[0] & 0x00000002u) == 0) {
    return nullptr;
  }
  _impl_._has_bits_[0] &= ~0x00000002u;
  auto* released = _impl_.instrument_id_.Release();
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString()) {
    _impl_.instrument_id_.Set("", GetArena());
  }
  return released;
}
inline void GetLastTradesRequest::set_allocated_instrument_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  _impl_.instrument_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.instrument_id_.IsDefault()) {
    _impl_.instrument_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.GetLastTradesRequest.instrument_id)
}

// .tinkoff.pub.invest.api.contract.v1.TradeSourceType trade_source = 5;
inline void GetLastTradesRequest::clear_trade_source() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.trade_source_ = 0;
}
inline ::tinkoff::pub::invest::api::contract::v1::TradeSourceType GetLastTradesRequest::trade_source() const {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetLastTradesRequest.trade_source)
  return _internal_trade_source();
}
inline void GetLastTradesRequest::set_trade_source(::tinkoff::pub::invest::api::contract::v1::TradeSourceType value) {
  _internal_set_trade_source(value);
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.GetLastTradesRequest.trade_source)
}
inline ::tinkoff::pub::invest::api::contract::v1::TradeSourceType GetLastTradesRequest::_internal_trade_source() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tinkoff::pub::invest::api::contract::v1::TradeSourceType>(_impl_.trade_source_);
}
inline void GetLastTradesRequest::_internal_set_trade_source(::tinkoff::pub::invest::api::contract::v1::TradeSourceType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.trade_source_ = value;
}

// -------------------------------------------------------------------

// GetLastTradesResponse

// repeated .tinkoff.pub.invest.api.contract.v1.Trade trades = 1;
inline int GetLastTradesResponse::_internal_trades_size() const {
  return _internal_trades().size();
}
inline int GetLastTradesResponse::trades_size() const {
  return _internal_trades_size();
}
inline void GetLastTradesResponse::clear_trades() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.trades_.Clear();
}
inline ::tinkoff::pub::invest::api::contract::v1::Trade* GetLastTradesResponse::mutable_trades(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.GetLastTradesResponse.trades)
  return _internal_mutable_trades()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::Trade>* GetLastTradesResponse::mutable_trades()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.pub.invest.api.contract.v1.GetLastTradesResponse.trades)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_trades();
}
inline const ::tinkoff::pub::invest::api::contract::v1::Trade& GetLastTradesResponse::trades(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetLastTradesResponse.trades)
  return _internal_trades().Get(index);
}
inline ::tinkoff::pub::invest::api::contract::v1::Trade* GetLastTradesResponse::add_trades() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tinkoff::pub::invest::api::contract::v1::Trade* _add = _internal_mutable_trades()->Add();
  // @@protoc_insertion_point(field_add:tinkoff.pub.invest.api.contract.v1.GetLastTradesResponse.trades)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::Trade>& GetLastTradesResponse::trades() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tinkoff.pub.invest.api.contract.v1.GetLastTradesResponse.trades)
  return _internal_trades();
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::Trade>&
GetLastTradesResponse::_internal_trades() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.trades_;
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::Trade>*
GetLastTradesResponse::_internal_mutable_trades() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.trades_;
}

// -------------------------------------------------------------------

// GetMySubscriptions

// -------------------------------------------------------------------

// GetClosePricesRequest

// repeated .tinkoff.pub.invest.api.contract.v1.InstrumentClosePriceRequest instruments = 1 [(.google.api.field_behavior) = REQUIRED];
inline int GetClosePricesRequest::_internal_instruments_size() const {
  return _internal_instruments().size();
}
inline int GetClosePricesRequest::instruments_size() const {
  return _internal_instruments_size();
}
inline void GetClosePricesRequest::clear_instruments() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instruments_.Clear();
}
inline ::tinkoff::pub::invest::api::contract::v1::InstrumentClosePriceRequest* GetClosePricesRequest::mutable_instruments(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.GetClosePricesRequest.instruments)
  return _internal_mutable_instruments()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::InstrumentClosePriceRequest>* GetClosePricesRequest::mutable_instruments()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.pub.invest.api.contract.v1.GetClosePricesRequest.instruments)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_instruments();
}
inline const ::tinkoff::pub::invest::api::contract::v1::InstrumentClosePriceRequest& GetClosePricesRequest::instruments(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetClosePricesRequest.instruments)
  return _internal_instruments().Get(index);
}
inline ::tinkoff::pub::invest::api::contract::v1::InstrumentClosePriceRequest* GetClosePricesRequest::add_instruments() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tinkoff::pub::invest::api::contract::v1::InstrumentClosePriceRequest* _add = _internal_mutable_instruments()->Add();
  // @@protoc_insertion_point(field_add:tinkoff.pub.invest.api.contract.v1.GetClosePricesRequest.instruments)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::InstrumentClosePriceRequest>& GetClosePricesRequest::instruments() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tinkoff.pub.invest.api.contract.v1.GetClosePricesRequest.instruments)
  return _internal_instruments();
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::InstrumentClosePriceRequest>&
GetClosePricesRequest::_internal_instruments() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.instruments_;
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::InstrumentClosePriceRequest>*
GetClosePricesRequest::_internal_mutable_instruments() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.instruments_;
}

// optional .tinkoff.pub.invest.api.contract.v1.InstrumentStatus instrument_status = 9;
inline bool GetClosePricesRequest::has_instrument_status() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline void GetClosePricesRequest::clear_instrument_status() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_status_ = 0;
  _impl_._has_bits_[0] &= ~0x00000001u;
}
inline ::tinkoff::pub::invest::api::contract::v1::InstrumentStatus GetClosePricesRequest::instrument_status() const {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetClosePricesRequest.instrument_status)
  return _internal_instrument_status();
}
inline void GetClosePricesRequest::set_instrument_status(::tinkoff::pub::invest::api::contract::v1::InstrumentStatus value) {
  _internal_set_instrument_status(value);
  _impl_._has_bits_[0] |= 0x00000001u;
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.GetClosePricesRequest.instrument_status)
}
inline ::tinkoff::pub::invest::api::contract::v1::InstrumentStatus GetClosePricesRequest::_internal_instrument_status() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tinkoff::pub::invest::api::contract::v1::InstrumentStatus>(_impl_.instrument_status_);
}
inline void GetClosePricesRequest::_internal_set_instrument_status(::tinkoff::pub::invest::api::contract::v1::InstrumentStatus value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_status_ = value;
}

// -------------------------------------------------------------------

// InstrumentClosePriceRequest

// string instrument_id = 1;
inline void InstrumentClosePriceRequest::clear_instrument_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_id_.ClearToEmpty();
}
inline const std::string& InstrumentClosePriceRequest::instrument_id() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.InstrumentClosePriceRequest.instrument_id)
  return _internal_instrument_id();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InstrumentClosePriceRequest::set_instrument_id(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_id_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.InstrumentClosePriceRequest.instrument_id)
}
inline std::string* InstrumentClosePriceRequest::mutable_instrument_id() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_instrument_id();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.InstrumentClosePriceRequest.instrument_id)
  return _s;
}
inline const std::string& InstrumentClosePriceRequest::_internal_instrument_id() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.instrument_id_.Get();
}
inline void InstrumentClosePriceRequest::_internal_set_instrument_id(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_id_.Set(value, GetArena());
}
inline std::string* InstrumentClosePriceRequest::_internal_mutable_instrument_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.instrument_id_.Mutable( GetArena());
}
inline std::string* InstrumentClosePriceRequest::release_instrument_id() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.InstrumentClosePriceRequest.instrument_id)
  return _impl_.instrument_id_.Release();
}
inline void InstrumentClosePriceRequest::set_allocated_instrument_id(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_id_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.instrument_id_.IsDefault()) {
    _impl_.instrument_id_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.InstrumentClosePriceRequest.instrument_id)
}

// -------------------------------------------------------------------

// GetClosePricesResponse

// repeated .tinkoff.pub.invest.api.contract.v1.InstrumentClosePriceResponse close_prices = 1;
inline int GetClosePricesResponse::_internal_close_prices_size() const {
  return _internal_close_prices().size();
}
inline int GetClosePricesResponse::close_prices_size() const {
  return _internal_close_prices_size();
}
inline void GetClosePricesResponse::clear_close_prices() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.close_prices_.Clear();
}
inline ::tinkoff::pub::invest::api::contract::v1::InstrumentClosePriceResponse* GetClosePricesResponse::mutable_close_prices(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.GetClosePricesResponse.close_prices)
  return _internal_mutable_close_prices()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::InstrumentClosePriceResponse>* GetClosePricesResponse::mutable_close_prices()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.pub.invest.api.contract.v1.GetClosePricesResponse.close_prices)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_close_prices();
}
inline const ::tinkoff::pub::invest::api::contract::v1::InstrumentClosePriceResponse& GetClosePricesResponse::close_prices(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetClosePricesResponse.close_prices)
  return _internal_close_prices().Get(index);
}
inline ::tinkoff::pub::invest::api::contract::v1::InstrumentClosePriceResponse* GetClosePricesResponse::add_close_prices() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tinkoff::pub::invest::api::contract::v1::InstrumentClosePriceResponse* _add = _internal_mutable_close_prices()->Add();
  // @@protoc_insertion_point(field_add:tinkoff.pub.invest.api.contract.v1.GetClosePricesResponse.close_prices)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::InstrumentClosePriceResponse>& GetClosePricesResponse::close_prices() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tinkoff.pub.invest.api.contract.v1.GetClosePricesResponse.close_prices)
  return _internal_close_prices();
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::InstrumentClosePriceResponse>&
GetClosePricesResponse::_internal_close_prices() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.close_prices_;
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::InstrumentClosePriceResponse>*
GetClosePricesResponse::_internal_mutable_close_prices() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.close_prices_;
}

// -------------------------------------------------------------------

// InstrumentClosePriceResponse

// string figi = 1;
inline void InstrumentClosePriceResponse::clear_figi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.ClearToEmpty();
}
inline const std::string& InstrumentClosePriceResponse::figi() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.InstrumentClosePriceResponse.figi)
  return _internal_figi();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InstrumentClosePriceResponse::set_figi(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.InstrumentClosePriceResponse.figi)
}
inline std::string* InstrumentClosePriceResponse::mutable_figi() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_figi();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.InstrumentClosePriceResponse.figi)
  return _s;
}
inline const std::string& InstrumentClosePriceResponse::_internal_figi() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.figi_.Get();
}
inline void InstrumentClosePriceResponse::_internal_set_figi(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.Set(value, GetArena());
}
inline std::string* InstrumentClosePriceResponse::_internal_mutable_figi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.figi_.Mutable( GetArena());
}
inline std::string* InstrumentClosePriceResponse::release_figi() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.InstrumentClosePriceResponse.figi)
  return _impl_.figi_.Release();
}
inline void InstrumentClosePriceResponse::set_allocated_figi(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.figi_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.figi_.IsDefault()) {
    _impl_.figi_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.InstrumentClosePriceResponse.figi)
}

// string instrument_uid = 2;
inline void InstrumentClosePriceResponse::clear_instrument_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_uid_.ClearToEmpty();
}
inline const std::string& InstrumentClosePriceResponse::instrument_uid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.InstrumentClosePriceResponse.instrument_uid)
  return _internal_instrument_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void InstrumentClosePriceResponse::set_instrument_uid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.InstrumentClosePriceResponse.instrument_uid)
}
inline std::string* InstrumentClosePriceResponse::mutable_instrument_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_instrument_uid();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.InstrumentClosePriceResponse.instrument_uid)
  return _s;
}
inline const std::string& InstrumentClosePriceResponse::_internal_instrument_uid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.instrument_uid_.Get();
}
inline void InstrumentClosePriceResponse::_internal_set_instrument_uid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_uid_.Set(value, GetArena());
}
inline std::string* InstrumentClosePriceResponse::_internal_mutable_instrument_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.instrument_uid_.Mutable( GetArena());
}
inline std::string* InstrumentClosePriceResponse::release_instrument_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.InstrumentClosePriceResponse.instrument_uid)
  return _impl_.instrument_uid_.Release();
}
inline void InstrumentClosePriceResponse::set_allocated_instrument_uid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_uid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.instrument_uid_.IsDefault()) {
    _impl_.instrument_uid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.InstrumentClosePriceResponse.instrument_uid)
}

// .tinkoff.pub.invest.api.contract.v1.Quotation price = 11;
inline bool InstrumentClosePriceResponse::has_price() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.price_ != nullptr);
  return value;
}
inline const ::tinkoff::pub::invest::api::contract::v1::Quotation& InstrumentClosePriceResponse::_internal_price() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tinkoff::pub::invest::api::contract::v1::Quotation* p = _impl_.price_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::pub::invest::api::contract::v1::Quotation&>(::tinkoff::pub::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::pub::invest::api::contract::v1::Quotation& InstrumentClosePriceResponse::price() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.InstrumentClosePriceResponse.price)
  return _internal_price();
}
inline void InstrumentClosePriceResponse::unsafe_arena_set_allocated_price(::tinkoff::pub::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.price_);
  }
  _impl_.price_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.InstrumentClosePriceResponse.price)
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* InstrumentClosePriceResponse::release_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* released = _impl_.price_;
  _impl_.price_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* InstrumentClosePriceResponse::unsafe_arena_release_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.InstrumentClosePriceResponse.price)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* temp = _impl_.price_;
  _impl_.price_ = nullptr;
  return temp;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* InstrumentClosePriceResponse::_internal_mutable_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.price_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::pub::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.price_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.price_;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* InstrumentClosePriceResponse::mutable_price() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* _msg = _internal_mutable_price();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.InstrumentClosePriceResponse.price)
  return _msg;
}
inline void InstrumentClosePriceResponse::set_allocated_price(::tinkoff::pub::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.price_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.price_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.InstrumentClosePriceResponse.price)
}

// .tinkoff.pub.invest.api.contract.v1.Quotation evening_session_price = 12;
inline bool InstrumentClosePriceResponse::has_evening_session_price() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.evening_session_price_ != nullptr);
  return value;
}
inline const ::tinkoff::pub::invest::api::contract::v1::Quotation& InstrumentClosePriceResponse::_internal_evening_session_price() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tinkoff::pub::invest::api::contract::v1::Quotation* p = _impl_.evening_session_price_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::pub::invest::api::contract::v1::Quotation&>(::tinkoff::pub::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::pub::invest::api::contract::v1::Quotation& InstrumentClosePriceResponse::evening_session_price() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.InstrumentClosePriceResponse.evening_session_price)
  return _internal_evening_session_price();
}
inline void InstrumentClosePriceResponse::unsafe_arena_set_allocated_evening_session_price(::tinkoff::pub::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.evening_session_price_);
  }
  _impl_.evening_session_price_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.InstrumentClosePriceResponse.evening_session_price)
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* InstrumentClosePriceResponse::release_evening_session_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* released = _impl_.evening_session_price_;
  _impl_.evening_session_price_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* InstrumentClosePriceResponse::unsafe_arena_release_evening_session_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.InstrumentClosePriceResponse.evening_session_price)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* temp = _impl_.evening_session_price_;
  _impl_.evening_session_price_ = nullptr;
  return temp;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* InstrumentClosePriceResponse::_internal_mutable_evening_session_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.evening_session_price_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::pub::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.evening_session_price_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.evening_session_price_;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* InstrumentClosePriceResponse::mutable_evening_session_price() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* _msg = _internal_mutable_evening_session_price();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.InstrumentClosePriceResponse.evening_session_price)
  return _msg;
}
inline void InstrumentClosePriceResponse::set_allocated_evening_session_price(::tinkoff::pub::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.evening_session_price_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.evening_session_price_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.InstrumentClosePriceResponse.evening_session_price)
}

// .google.protobuf.Timestamp time = 21;
inline bool InstrumentClosePriceResponse::has_time() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.time_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& InstrumentClosePriceResponse::_internal_time() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.time_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& InstrumentClosePriceResponse::time() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.InstrumentClosePriceResponse.time)
  return _internal_time();
}
inline void InstrumentClosePriceResponse::unsafe_arena_set_allocated_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.time_);
  }
  _impl_.time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.InstrumentClosePriceResponse.time)
}
inline ::google::protobuf::Timestamp* InstrumentClosePriceResponse::release_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::protobuf::Timestamp* released = _impl_.time_;
  _impl_.time_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* InstrumentClosePriceResponse::unsafe_arena_release_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.InstrumentClosePriceResponse.time)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::google::protobuf::Timestamp* temp = _impl_.time_;
  _impl_.time_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* InstrumentClosePriceResponse::_internal_mutable_time() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.time_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.time_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.time_;
}
inline ::google::protobuf::Timestamp* InstrumentClosePriceResponse::mutable_time() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_time();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.InstrumentClosePriceResponse.time)
  return _msg;
}
inline void InstrumentClosePriceResponse::set_allocated_time(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.time_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.time_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.InstrumentClosePriceResponse.time)
}

// -------------------------------------------------------------------

// GetTechAnalysisRequest_Smoothing

// int32 fast_length = 1;
inline void GetTechAnalysisRequest_Smoothing::clear_fast_length() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fast_length_ = 0;
}
inline ::int32_t GetTechAnalysisRequest_Smoothing::fast_length() const {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisRequest.Smoothing.fast_length)
  return _internal_fast_length();
}
inline void GetTechAnalysisRequest_Smoothing::set_fast_length(::int32_t value) {
  _internal_set_fast_length(value);
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisRequest.Smoothing.fast_length)
}
inline ::int32_t GetTechAnalysisRequest_Smoothing::_internal_fast_length() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.fast_length_;
}
inline void GetTechAnalysisRequest_Smoothing::_internal_set_fast_length(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.fast_length_ = value;
}

// int32 slow_length = 2;
inline void GetTechAnalysisRequest_Smoothing::clear_slow_length() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.slow_length_ = 0;
}
inline ::int32_t GetTechAnalysisRequest_Smoothing::slow_length() const {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisRequest.Smoothing.slow_length)
  return _internal_slow_length();
}
inline void GetTechAnalysisRequest_Smoothing::set_slow_length(::int32_t value) {
  _internal_set_slow_length(value);
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisRequest.Smoothing.slow_length)
}
inline ::int32_t GetTechAnalysisRequest_Smoothing::_internal_slow_length() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.slow_length_;
}
inline void GetTechAnalysisRequest_Smoothing::_internal_set_slow_length(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.slow_length_ = value;
}

// int32 signal_smoothing = 3;
inline void GetTechAnalysisRequest_Smoothing::clear_signal_smoothing() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.signal_smoothing_ = 0;
}
inline ::int32_t GetTechAnalysisRequest_Smoothing::signal_smoothing() const {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisRequest.Smoothing.signal_smoothing)
  return _internal_signal_smoothing();
}
inline void GetTechAnalysisRequest_Smoothing::set_signal_smoothing(::int32_t value) {
  _internal_set_signal_smoothing(value);
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisRequest.Smoothing.signal_smoothing)
}
inline ::int32_t GetTechAnalysisRequest_Smoothing::_internal_signal_smoothing() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.signal_smoothing_;
}
inline void GetTechAnalysisRequest_Smoothing::_internal_set_signal_smoothing(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.signal_smoothing_ = value;
}

// -------------------------------------------------------------------

// GetTechAnalysisRequest_Deviation

// .tinkoff.pub.invest.api.contract.v1.Quotation deviation_multiplier = 1;
inline bool GetTechAnalysisRequest_Deviation::has_deviation_multiplier() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.deviation_multiplier_ != nullptr);
  return value;
}
inline const ::tinkoff::pub::invest::api::contract::v1::Quotation& GetTechAnalysisRequest_Deviation::_internal_deviation_multiplier() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tinkoff::pub::invest::api::contract::v1::Quotation* p = _impl_.deviation_multiplier_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::pub::invest::api::contract::v1::Quotation&>(::tinkoff::pub::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::pub::invest::api::contract::v1::Quotation& GetTechAnalysisRequest_Deviation::deviation_multiplier() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisRequest.Deviation.deviation_multiplier)
  return _internal_deviation_multiplier();
}
inline void GetTechAnalysisRequest_Deviation::unsafe_arena_set_allocated_deviation_multiplier(::tinkoff::pub::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.deviation_multiplier_);
  }
  _impl_.deviation_multiplier_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisRequest.Deviation.deviation_multiplier)
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* GetTechAnalysisRequest_Deviation::release_deviation_multiplier() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* released = _impl_.deviation_multiplier_;
  _impl_.deviation_multiplier_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* GetTechAnalysisRequest_Deviation::unsafe_arena_release_deviation_multiplier() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisRequest.Deviation.deviation_multiplier)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* temp = _impl_.deviation_multiplier_;
  _impl_.deviation_multiplier_ = nullptr;
  return temp;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* GetTechAnalysisRequest_Deviation::_internal_mutable_deviation_multiplier() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.deviation_multiplier_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::pub::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.deviation_multiplier_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.deviation_multiplier_;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* GetTechAnalysisRequest_Deviation::mutable_deviation_multiplier() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* _msg = _internal_mutable_deviation_multiplier();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisRequest.Deviation.deviation_multiplier)
  return _msg;
}
inline void GetTechAnalysisRequest_Deviation::set_allocated_deviation_multiplier(::tinkoff::pub::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.deviation_multiplier_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.deviation_multiplier_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisRequest.Deviation.deviation_multiplier)
}

// -------------------------------------------------------------------

// GetTechAnalysisRequest

// .tinkoff.pub.invest.api.contract.v1.GetTechAnalysisRequest.IndicatorType indicator_type = 1 [(.google.api.field_behavior) = REQUIRED];
inline void GetTechAnalysisRequest::clear_indicator_type() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.indicator_type_ = 0;
}
inline ::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_IndicatorType GetTechAnalysisRequest::indicator_type() const {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisRequest.indicator_type)
  return _internal_indicator_type();
}
inline void GetTechAnalysisRequest::set_indicator_type(::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_IndicatorType value) {
  _internal_set_indicator_type(value);
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisRequest.indicator_type)
}
inline ::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_IndicatorType GetTechAnalysisRequest::_internal_indicator_type() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_IndicatorType>(_impl_.indicator_type_);
}
inline void GetTechAnalysisRequest::_internal_set_indicator_type(::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_IndicatorType value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.indicator_type_ = value;
}

// string instrument_uid = 2 [(.google.api.field_behavior) = REQUIRED];
inline void GetTechAnalysisRequest::clear_instrument_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_uid_.ClearToEmpty();
}
inline const std::string& GetTechAnalysisRequest::instrument_uid() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisRequest.instrument_uid)
  return _internal_instrument_uid();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void GetTechAnalysisRequest::set_instrument_uid(Arg_&& arg,
                                                     Args_... args) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_uid_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisRequest.instrument_uid)
}
inline std::string* GetTechAnalysisRequest::mutable_instrument_uid() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_instrument_uid();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisRequest.instrument_uid)
  return _s;
}
inline const std::string& GetTechAnalysisRequest::_internal_instrument_uid() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.instrument_uid_.Get();
}
inline void GetTechAnalysisRequest::_internal_set_instrument_uid(const std::string& value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_uid_.Set(value, GetArena());
}
inline std::string* GetTechAnalysisRequest::_internal_mutable_instrument_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _impl_.instrument_uid_.Mutable( GetArena());
}
inline std::string* GetTechAnalysisRequest::release_instrument_uid() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisRequest.instrument_uid)
  return _impl_.instrument_uid_.Release();
}
inline void GetTechAnalysisRequest::set_allocated_instrument_uid(std::string* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.instrument_uid_.SetAllocated(value, GetArena());
  if (::google::protobuf::internal::DebugHardenForceCopyDefaultString() && _impl_.instrument_uid_.IsDefault()) {
    _impl_.instrument_uid_.Set("", GetArena());
  }
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisRequest.instrument_uid)
}

// .google.protobuf.Timestamp from = 3 [(.google.api.field_behavior) = REQUIRED];
inline bool GetTechAnalysisRequest::has_from() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.from_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& GetTechAnalysisRequest::_internal_from() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.from_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& GetTechAnalysisRequest::from() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisRequest.from)
  return _internal_from();
}
inline void GetTechAnalysisRequest::unsafe_arena_set_allocated_from(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.from_);
  }
  _impl_.from_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisRequest.from)
}
inline ::google::protobuf::Timestamp* GetTechAnalysisRequest::release_from() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.from_;
  _impl_.from_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* GetTechAnalysisRequest::unsafe_arena_release_from() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisRequest.from)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.from_;
  _impl_.from_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* GetTechAnalysisRequest::_internal_mutable_from() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.from_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.from_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.from_;
}
inline ::google::protobuf::Timestamp* GetTechAnalysisRequest::mutable_from() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_from();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisRequest.from)
  return _msg;
}
inline void GetTechAnalysisRequest::set_allocated_from(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.from_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.from_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisRequest.from)
}

// .google.protobuf.Timestamp to = 4 [(.google.api.field_behavior) = REQUIRED];
inline bool GetTechAnalysisRequest::has_to() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.to_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& GetTechAnalysisRequest::_internal_to() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.to_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& GetTechAnalysisRequest::to() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisRequest.to)
  return _internal_to();
}
inline void GetTechAnalysisRequest::unsafe_arena_set_allocated_to(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.to_);
  }
  _impl_.to_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisRequest.to)
}
inline ::google::protobuf::Timestamp* GetTechAnalysisRequest::release_to() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* released = _impl_.to_;
  _impl_.to_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* GetTechAnalysisRequest::unsafe_arena_release_to() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisRequest.to)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::google::protobuf::Timestamp* temp = _impl_.to_;
  _impl_.to_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* GetTechAnalysisRequest::_internal_mutable_to() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.to_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.to_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.to_;
}
inline ::google::protobuf::Timestamp* GetTechAnalysisRequest::mutable_to() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_to();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisRequest.to)
  return _msg;
}
inline void GetTechAnalysisRequest::set_allocated_to(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.to_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.to_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisRequest.to)
}

// .tinkoff.pub.invest.api.contract.v1.GetTechAnalysisRequest.IndicatorInterval interval = 5 [(.google.api.field_behavior) = REQUIRED];
inline void GetTechAnalysisRequest::clear_interval() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.interval_ = 0;
}
inline ::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_IndicatorInterval GetTechAnalysisRequest::interval() const {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisRequest.interval)
  return _internal_interval();
}
inline void GetTechAnalysisRequest::set_interval(::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_IndicatorInterval value) {
  _internal_set_interval(value);
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisRequest.interval)
}
inline ::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_IndicatorInterval GetTechAnalysisRequest::_internal_interval() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_IndicatorInterval>(_impl_.interval_);
}
inline void GetTechAnalysisRequest::_internal_set_interval(::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_IndicatorInterval value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.interval_ = value;
}

// .tinkoff.pub.invest.api.contract.v1.GetTechAnalysisRequest.TypeOfPrice type_of_price = 6 [(.google.api.field_behavior) = REQUIRED];
inline void GetTechAnalysisRequest::clear_type_of_price() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_of_price_ = 0;
}
inline ::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_TypeOfPrice GetTechAnalysisRequest::type_of_price() const {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisRequest.type_of_price)
  return _internal_type_of_price();
}
inline void GetTechAnalysisRequest::set_type_of_price(::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_TypeOfPrice value) {
  _internal_set_type_of_price(value);
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisRequest.type_of_price)
}
inline ::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_TypeOfPrice GetTechAnalysisRequest::_internal_type_of_price() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return static_cast<::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_TypeOfPrice>(_impl_.type_of_price_);
}
inline void GetTechAnalysisRequest::_internal_set_type_of_price(::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_TypeOfPrice value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.type_of_price_ = value;
}

// int32 length = 7;
inline void GetTechAnalysisRequest::clear_length() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.length_ = 0;
}
inline ::int32_t GetTechAnalysisRequest::length() const {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisRequest.length)
  return _internal_length();
}
inline void GetTechAnalysisRequest::set_length(::int32_t value) {
  _internal_set_length(value);
  // @@protoc_insertion_point(field_set:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisRequest.length)
}
inline ::int32_t GetTechAnalysisRequest::_internal_length() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.length_;
}
inline void GetTechAnalysisRequest::_internal_set_length(::int32_t value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.length_ = value;
}

// .tinkoff.pub.invest.api.contract.v1.GetTechAnalysisRequest.Deviation deviation = 8;
inline bool GetTechAnalysisRequest::has_deviation() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.deviation_ != nullptr);
  return value;
}
inline void GetTechAnalysisRequest::clear_deviation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.deviation_ != nullptr) _impl_.deviation_->Clear();
  _impl_._has_bits_[0] &= ~0x00000004u;
}
inline const ::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_Deviation& GetTechAnalysisRequest::_internal_deviation() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_Deviation* p = _impl_.deviation_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_Deviation&>(::tinkoff::pub::invest::api::contract::v1::_GetTechAnalysisRequest_Deviation_default_instance_);
}
inline const ::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_Deviation& GetTechAnalysisRequest::deviation() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisRequest.deviation)
  return _internal_deviation();
}
inline void GetTechAnalysisRequest::unsafe_arena_set_allocated_deviation(::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_Deviation* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.deviation_);
  }
  _impl_.deviation_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_Deviation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisRequest.deviation)
}
inline ::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_Deviation* GetTechAnalysisRequest::release_deviation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_Deviation* released = _impl_.deviation_;
  _impl_.deviation_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_Deviation* GetTechAnalysisRequest::unsafe_arena_release_deviation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisRequest.deviation)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_Deviation* temp = _impl_.deviation_;
  _impl_.deviation_ = nullptr;
  return temp;
}
inline ::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_Deviation* GetTechAnalysisRequest::_internal_mutable_deviation() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.deviation_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_Deviation>(GetArena());
    _impl_.deviation_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_Deviation*>(p);
  }
  return _impl_.deviation_;
}
inline ::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_Deviation* GetTechAnalysisRequest::mutable_deviation() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_Deviation* _msg = _internal_mutable_deviation();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisRequest.deviation)
  return _msg;
}
inline void GetTechAnalysisRequest::set_allocated_deviation(::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_Deviation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.deviation_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.deviation_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_Deviation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisRequest.deviation)
}

// .tinkoff.pub.invest.api.contract.v1.GetTechAnalysisRequest.Smoothing smoothing = 9;
inline bool GetTechAnalysisRequest::has_smoothing() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.smoothing_ != nullptr);
  return value;
}
inline void GetTechAnalysisRequest::clear_smoothing() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.smoothing_ != nullptr) _impl_.smoothing_->Clear();
  _impl_._has_bits_[0] &= ~0x00000008u;
}
inline const ::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_Smoothing& GetTechAnalysisRequest::_internal_smoothing() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_Smoothing* p = _impl_.smoothing_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_Smoothing&>(::tinkoff::pub::invest::api::contract::v1::_GetTechAnalysisRequest_Smoothing_default_instance_);
}
inline const ::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_Smoothing& GetTechAnalysisRequest::smoothing() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisRequest.smoothing)
  return _internal_smoothing();
}
inline void GetTechAnalysisRequest::unsafe_arena_set_allocated_smoothing(::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_Smoothing* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.smoothing_);
  }
  _impl_.smoothing_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_Smoothing*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisRequest.smoothing)
}
inline ::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_Smoothing* GetTechAnalysisRequest::release_smoothing() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_Smoothing* released = _impl_.smoothing_;
  _impl_.smoothing_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_Smoothing* GetTechAnalysisRequest::unsafe_arena_release_smoothing() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisRequest.smoothing)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_Smoothing* temp = _impl_.smoothing_;
  _impl_.smoothing_ = nullptr;
  return temp;
}
inline ::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_Smoothing* GetTechAnalysisRequest::_internal_mutable_smoothing() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.smoothing_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_Smoothing>(GetArena());
    _impl_.smoothing_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_Smoothing*>(p);
  }
  return _impl_.smoothing_;
}
inline ::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_Smoothing* GetTechAnalysisRequest::mutable_smoothing() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_Smoothing* _msg = _internal_mutable_smoothing();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisRequest.smoothing)
  return _msg;
}
inline void GetTechAnalysisRequest::set_allocated_smoothing(::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_Smoothing* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete (_impl_.smoothing_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = (value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.smoothing_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_Smoothing*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisRequest.smoothing)
}

// -------------------------------------------------------------------

// GetTechAnalysisResponse_TechAnalysisItem

// .google.protobuf.Timestamp timestamp = 1;
inline bool GetTechAnalysisResponse_TechAnalysisItem::has_timestamp() const {
  bool value = (_impl_._has_bits_[0] & 0x00000001u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.timestamp_ != nullptr);
  return value;
}
inline const ::google::protobuf::Timestamp& GetTechAnalysisResponse_TechAnalysisItem::_internal_timestamp() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::google::protobuf::Timestamp* p = _impl_.timestamp_;
  return p != nullptr ? *p : reinterpret_cast<const ::google::protobuf::Timestamp&>(::google::protobuf::_Timestamp_default_instance_);
}
inline const ::google::protobuf::Timestamp& GetTechAnalysisResponse_TechAnalysisItem::timestamp() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItem.timestamp)
  return _internal_timestamp();
}
inline void GetTechAnalysisResponse_TechAnalysisItem::unsafe_arena_set_allocated_timestamp(::google::protobuf::Timestamp* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.timestamp_);
  }
  _impl_.timestamp_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItem.timestamp)
}
inline ::google::protobuf::Timestamp* GetTechAnalysisResponse_TechAnalysisItem::release_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* released = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::google::protobuf::Timestamp* GetTechAnalysisResponse_TechAnalysisItem::unsafe_arena_release_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItem.timestamp)

  _impl_._has_bits_[0] &= ~0x00000001u;
  ::google::protobuf::Timestamp* temp = _impl_.timestamp_;
  _impl_.timestamp_ = nullptr;
  return temp;
}
inline ::google::protobuf::Timestamp* GetTechAnalysisResponse_TechAnalysisItem::_internal_mutable_timestamp() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.timestamp_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::google::protobuf::Timestamp>(GetArena());
    _impl_.timestamp_ = reinterpret_cast<::google::protobuf::Timestamp*>(p);
  }
  return _impl_.timestamp_;
}
inline ::google::protobuf::Timestamp* GetTechAnalysisResponse_TechAnalysisItem::mutable_timestamp() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000001u;
  ::google::protobuf::Timestamp* _msg = _internal_mutable_timestamp();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItem.timestamp)
  return _msg;
}
inline void GetTechAnalysisResponse_TechAnalysisItem::set_allocated_timestamp(::google::protobuf::Timestamp* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.timestamp_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000001u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000001u;
  }

  _impl_.timestamp_ = reinterpret_cast<::google::protobuf::Timestamp*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItem.timestamp)
}

// optional .tinkoff.pub.invest.api.contract.v1.Quotation middle_band = 2;
inline bool GetTechAnalysisResponse_TechAnalysisItem::has_middle_band() const {
  bool value = (_impl_._has_bits_[0] & 0x00000002u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.middle_band_ != nullptr);
  return value;
}
inline const ::tinkoff::pub::invest::api::contract::v1::Quotation& GetTechAnalysisResponse_TechAnalysisItem::_internal_middle_band() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tinkoff::pub::invest::api::contract::v1::Quotation* p = _impl_.middle_band_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::pub::invest::api::contract::v1::Quotation&>(::tinkoff::pub::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::pub::invest::api::contract::v1::Quotation& GetTechAnalysisResponse_TechAnalysisItem::middle_band() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItem.middle_band)
  return _internal_middle_band();
}
inline void GetTechAnalysisResponse_TechAnalysisItem::unsafe_arena_set_allocated_middle_band(::tinkoff::pub::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.middle_band_);
  }
  _impl_.middle_band_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItem.middle_band)
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* GetTechAnalysisResponse_TechAnalysisItem::release_middle_band() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* released = _impl_.middle_band_;
  _impl_.middle_band_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* GetTechAnalysisResponse_TechAnalysisItem::unsafe_arena_release_middle_band() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItem.middle_band)

  _impl_._has_bits_[0] &= ~0x00000002u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* temp = _impl_.middle_band_;
  _impl_.middle_band_ = nullptr;
  return temp;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* GetTechAnalysisResponse_TechAnalysisItem::_internal_mutable_middle_band() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.middle_band_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::pub::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.middle_band_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.middle_band_;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* GetTechAnalysisResponse_TechAnalysisItem::mutable_middle_band() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000002u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* _msg = _internal_mutable_middle_band();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItem.middle_band)
  return _msg;
}
inline void GetTechAnalysisResponse_TechAnalysisItem::set_allocated_middle_band(::tinkoff::pub::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.middle_band_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000002u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000002u;
  }

  _impl_.middle_band_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItem.middle_band)
}

// optional .tinkoff.pub.invest.api.contract.v1.Quotation upper_band = 3;
inline bool GetTechAnalysisResponse_TechAnalysisItem::has_upper_band() const {
  bool value = (_impl_._has_bits_[0] & 0x00000004u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.upper_band_ != nullptr);
  return value;
}
inline const ::tinkoff::pub::invest::api::contract::v1::Quotation& GetTechAnalysisResponse_TechAnalysisItem::_internal_upper_band() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tinkoff::pub::invest::api::contract::v1::Quotation* p = _impl_.upper_band_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::pub::invest::api::contract::v1::Quotation&>(::tinkoff::pub::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::pub::invest::api::contract::v1::Quotation& GetTechAnalysisResponse_TechAnalysisItem::upper_band() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItem.upper_band)
  return _internal_upper_band();
}
inline void GetTechAnalysisResponse_TechAnalysisItem::unsafe_arena_set_allocated_upper_band(::tinkoff::pub::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.upper_band_);
  }
  _impl_.upper_band_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItem.upper_band)
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* GetTechAnalysisResponse_TechAnalysisItem::release_upper_band() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* released = _impl_.upper_band_;
  _impl_.upper_band_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* GetTechAnalysisResponse_TechAnalysisItem::unsafe_arena_release_upper_band() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItem.upper_band)

  _impl_._has_bits_[0] &= ~0x00000004u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* temp = _impl_.upper_band_;
  _impl_.upper_band_ = nullptr;
  return temp;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* GetTechAnalysisResponse_TechAnalysisItem::_internal_mutable_upper_band() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.upper_band_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::pub::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.upper_band_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.upper_band_;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* GetTechAnalysisResponse_TechAnalysisItem::mutable_upper_band() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000004u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* _msg = _internal_mutable_upper_band();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItem.upper_band)
  return _msg;
}
inline void GetTechAnalysisResponse_TechAnalysisItem::set_allocated_upper_band(::tinkoff::pub::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.upper_band_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000004u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000004u;
  }

  _impl_.upper_band_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItem.upper_band)
}

// optional .tinkoff.pub.invest.api.contract.v1.Quotation lower_band = 4;
inline bool GetTechAnalysisResponse_TechAnalysisItem::has_lower_band() const {
  bool value = (_impl_._has_bits_[0] & 0x00000008u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.lower_band_ != nullptr);
  return value;
}
inline const ::tinkoff::pub::invest::api::contract::v1::Quotation& GetTechAnalysisResponse_TechAnalysisItem::_internal_lower_band() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tinkoff::pub::invest::api::contract::v1::Quotation* p = _impl_.lower_band_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::pub::invest::api::contract::v1::Quotation&>(::tinkoff::pub::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::pub::invest::api::contract::v1::Quotation& GetTechAnalysisResponse_TechAnalysisItem::lower_band() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItem.lower_band)
  return _internal_lower_band();
}
inline void GetTechAnalysisResponse_TechAnalysisItem::unsafe_arena_set_allocated_lower_band(::tinkoff::pub::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.lower_band_);
  }
  _impl_.lower_band_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItem.lower_band)
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* GetTechAnalysisResponse_TechAnalysisItem::release_lower_band() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* released = _impl_.lower_band_;
  _impl_.lower_band_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* GetTechAnalysisResponse_TechAnalysisItem::unsafe_arena_release_lower_band() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItem.lower_band)

  _impl_._has_bits_[0] &= ~0x00000008u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* temp = _impl_.lower_band_;
  _impl_.lower_band_ = nullptr;
  return temp;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* GetTechAnalysisResponse_TechAnalysisItem::_internal_mutable_lower_band() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.lower_band_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::pub::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.lower_band_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.lower_band_;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* GetTechAnalysisResponse_TechAnalysisItem::mutable_lower_band() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000008u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* _msg = _internal_mutable_lower_band();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItem.lower_band)
  return _msg;
}
inline void GetTechAnalysisResponse_TechAnalysisItem::set_allocated_lower_band(::tinkoff::pub::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.lower_band_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000008u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000008u;
  }

  _impl_.lower_band_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItem.lower_band)
}

// optional .tinkoff.pub.invest.api.contract.v1.Quotation signal = 5;
inline bool GetTechAnalysisResponse_TechAnalysisItem::has_signal() const {
  bool value = (_impl_._has_bits_[0] & 0x00000010u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.signal_ != nullptr);
  return value;
}
inline const ::tinkoff::pub::invest::api::contract::v1::Quotation& GetTechAnalysisResponse_TechAnalysisItem::_internal_signal() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tinkoff::pub::invest::api::contract::v1::Quotation* p = _impl_.signal_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::pub::invest::api::contract::v1::Quotation&>(::tinkoff::pub::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::pub::invest::api::contract::v1::Quotation& GetTechAnalysisResponse_TechAnalysisItem::signal() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItem.signal)
  return _internal_signal();
}
inline void GetTechAnalysisResponse_TechAnalysisItem::unsafe_arena_set_allocated_signal(::tinkoff::pub::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.signal_);
  }
  _impl_.signal_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItem.signal)
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* GetTechAnalysisResponse_TechAnalysisItem::release_signal() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* released = _impl_.signal_;
  _impl_.signal_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* GetTechAnalysisResponse_TechAnalysisItem::unsafe_arena_release_signal() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItem.signal)

  _impl_._has_bits_[0] &= ~0x00000010u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* temp = _impl_.signal_;
  _impl_.signal_ = nullptr;
  return temp;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* GetTechAnalysisResponse_TechAnalysisItem::_internal_mutable_signal() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.signal_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::pub::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.signal_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.signal_;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* GetTechAnalysisResponse_TechAnalysisItem::mutable_signal() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000010u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* _msg = _internal_mutable_signal();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItem.signal)
  return _msg;
}
inline void GetTechAnalysisResponse_TechAnalysisItem::set_allocated_signal(::tinkoff::pub::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.signal_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000010u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000010u;
  }

  _impl_.signal_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItem.signal)
}

// optional .tinkoff.pub.invest.api.contract.v1.Quotation macd = 6;
inline bool GetTechAnalysisResponse_TechAnalysisItem::has_macd() const {
  bool value = (_impl_._has_bits_[0] & 0x00000020u) != 0;
  PROTOBUF_ASSUME(!value || _impl_.macd_ != nullptr);
  return value;
}
inline const ::tinkoff::pub::invest::api::contract::v1::Quotation& GetTechAnalysisResponse_TechAnalysisItem::_internal_macd() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  const ::tinkoff::pub::invest::api::contract::v1::Quotation* p = _impl_.macd_;
  return p != nullptr ? *p : reinterpret_cast<const ::tinkoff::pub::invest::api::contract::v1::Quotation&>(::tinkoff::pub::invest::api::contract::v1::_Quotation_default_instance_);
}
inline const ::tinkoff::pub::invest::api::contract::v1::Quotation& GetTechAnalysisResponse_TechAnalysisItem::macd() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItem.macd)
  return _internal_macd();
}
inline void GetTechAnalysisResponse_TechAnalysisItem::unsafe_arena_set_allocated_macd(::tinkoff::pub::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.macd_);
  }
  _impl_.macd_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(value);
  if (value != nullptr) {
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItem.macd)
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* GetTechAnalysisResponse_TechAnalysisItem::release_macd() {
  ::google::protobuf::internal::TSanWrite(&_impl_);

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* released = _impl_.macd_;
  _impl_.macd_ = nullptr;
  if (::google::protobuf::internal::DebugHardenForceCopyInRelease()) {
    auto* old = reinterpret_cast<::google::protobuf::MessageLite*>(released);
    released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    if (GetArena() == nullptr) {
      delete old;
    }
  } else {
    if (GetArena() != nullptr) {
      released = ::google::protobuf::internal::DuplicateIfNonNull(released);
    }
  }
  return released;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* GetTechAnalysisResponse_TechAnalysisItem::unsafe_arena_release_macd() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  // @@protoc_insertion_point(field_release:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItem.macd)

  _impl_._has_bits_[0] &= ~0x00000020u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* temp = _impl_.macd_;
  _impl_.macd_ = nullptr;
  return temp;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* GetTechAnalysisResponse_TechAnalysisItem::_internal_mutable_macd() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (_impl_.macd_ == nullptr) {
    auto* p = ::google::protobuf::Message::DefaultConstruct<::tinkoff::pub::invest::api::contract::v1::Quotation>(GetArena());
    _impl_.macd_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(p);
  }
  return _impl_.macd_;
}
inline ::tinkoff::pub::invest::api::contract::v1::Quotation* GetTechAnalysisResponse_TechAnalysisItem::mutable_macd() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  _impl_._has_bits_[0] |= 0x00000020u;
  ::tinkoff::pub::invest::api::contract::v1::Quotation* _msg = _internal_mutable_macd();
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItem.macd)
  return _msg;
}
inline void GetTechAnalysisResponse_TechAnalysisItem::set_allocated_macd(::tinkoff::pub::invest::api::contract::v1::Quotation* value) {
  ::google::protobuf::Arena* message_arena = GetArena();
  ::google::protobuf::internal::TSanWrite(&_impl_);
  if (message_arena == nullptr) {
    delete reinterpret_cast<::google::protobuf::MessageLite*>(_impl_.macd_);
  }

  if (value != nullptr) {
    ::google::protobuf::Arena* submessage_arena = reinterpret_cast<::google::protobuf::MessageLite*>(value)->GetArena();
    if (message_arena != submessage_arena) {
      value = ::google::protobuf::internal::GetOwnedMessage(message_arena, value, submessage_arena);
    }
    _impl_._has_bits_[0] |= 0x00000020u;
  } else {
    _impl_._has_bits_[0] &= ~0x00000020u;
  }

  _impl_.macd_ = reinterpret_cast<::tinkoff::pub::invest::api::contract::v1::Quotation*>(value);
  // @@protoc_insertion_point(field_set_allocated:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItem.macd)
}

// -------------------------------------------------------------------

// GetTechAnalysisResponse

// repeated .tinkoff.pub.invest.api.contract.v1.GetTechAnalysisResponse.TechAnalysisItem technical_indicators = 1;
inline int GetTechAnalysisResponse::_internal_technical_indicators_size() const {
  return _internal_technical_indicators().size();
}
inline int GetTechAnalysisResponse::technical_indicators_size() const {
  return _internal_technical_indicators_size();
}
inline void GetTechAnalysisResponse::clear_technical_indicators() {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  _impl_.technical_indicators_.Clear();
}
inline ::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisResponse_TechAnalysisItem* GetTechAnalysisResponse::mutable_technical_indicators(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisResponse.technical_indicators)
  return _internal_mutable_technical_indicators()->Mutable(index);
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisResponse_TechAnalysisItem>* GetTechAnalysisResponse::mutable_technical_indicators()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisResponse.technical_indicators)
  ::google::protobuf::internal::TSanWrite(&_impl_);
  return _internal_mutable_technical_indicators();
}
inline const ::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisResponse_TechAnalysisItem& GetTechAnalysisResponse::technical_indicators(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisResponse.technical_indicators)
  return _internal_technical_indicators().Get(index);
}
inline ::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisResponse_TechAnalysisItem* GetTechAnalysisResponse::add_technical_indicators() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::google::protobuf::internal::TSanWrite(&_impl_);
  ::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisResponse_TechAnalysisItem* _add = _internal_mutable_technical_indicators()->Add();
  // @@protoc_insertion_point(field_add:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisResponse.technical_indicators)
  return _add;
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisResponse_TechAnalysisItem>& GetTechAnalysisResponse::technical_indicators() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:tinkoff.pub.invest.api.contract.v1.GetTechAnalysisResponse.technical_indicators)
  return _internal_technical_indicators();
}
inline const ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisResponse_TechAnalysisItem>&
GetTechAnalysisResponse::_internal_technical_indicators() const {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return _impl_.technical_indicators_;
}
inline ::google::protobuf::RepeatedPtrField<::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisResponse_TechAnalysisItem>*
GetTechAnalysisResponse::_internal_mutable_technical_indicators() {
  ::google::protobuf::internal::TSanRead(&_impl_);
  return &_impl_.technical_indicators_;
}

#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)
}  // namespace v1
}  // namespace contract
}  // namespace api
}  // namespace invest
}  // namespace pub
}  // namespace tinkoff


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::tinkoff::pub::invest::api::contract::v1::GetCandlesRequest_CandleSource> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tinkoff::pub::invest::api::contract::v1::GetCandlesRequest_CandleSource>() {
  return ::tinkoff::pub::invest::api::contract::v1::GetCandlesRequest_CandleSource_descriptor();
}
template <>
struct is_proto_enum<::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_IndicatorInterval> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_IndicatorInterval>() {
  return ::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_IndicatorInterval_descriptor();
}
template <>
struct is_proto_enum<::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_TypeOfPrice> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_TypeOfPrice>() {
  return ::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_TypeOfPrice_descriptor();
}
template <>
struct is_proto_enum<::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_IndicatorType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_IndicatorType>() {
  return ::tinkoff::pub::invest::api::contract::v1::GetTechAnalysisRequest_IndicatorType_descriptor();
}
template <>
struct is_proto_enum<::tinkoff::pub::invest::api::contract::v1::SubscriptionAction> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tinkoff::pub::invest::api::contract::v1::SubscriptionAction>() {
  return ::tinkoff::pub::invest::api::contract::v1::SubscriptionAction_descriptor();
}
template <>
struct is_proto_enum<::tinkoff::pub::invest::api::contract::v1::SubscriptionInterval> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tinkoff::pub::invest::api::contract::v1::SubscriptionInterval>() {
  return ::tinkoff::pub::invest::api::contract::v1::SubscriptionInterval_descriptor();
}
template <>
struct is_proto_enum<::tinkoff::pub::invest::api::contract::v1::SubscriptionStatus> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tinkoff::pub::invest::api::contract::v1::SubscriptionStatus>() {
  return ::tinkoff::pub::invest::api::contract::v1::SubscriptionStatus_descriptor();
}
template <>
struct is_proto_enum<::tinkoff::pub::invest::api::contract::v1::TradeSourceType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tinkoff::pub::invest::api::contract::v1::TradeSourceType>() {
  return ::tinkoff::pub::invest::api::contract::v1::TradeSourceType_descriptor();
}
template <>
struct is_proto_enum<::tinkoff::pub::invest::api::contract::v1::TradeDirection> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tinkoff::pub::invest::api::contract::v1::TradeDirection>() {
  return ::tinkoff::pub::invest::api::contract::v1::TradeDirection_descriptor();
}
template <>
struct is_proto_enum<::tinkoff::pub::invest::api::contract::v1::CandleInterval> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tinkoff::pub::invest::api::contract::v1::CandleInterval>() {
  return ::tinkoff::pub::invest::api::contract::v1::CandleInterval_descriptor();
}
template <>
struct is_proto_enum<::tinkoff::pub::invest::api::contract::v1::CandleSource> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tinkoff::pub::invest::api::contract::v1::CandleSource>() {
  return ::tinkoff::pub::invest::api::contract::v1::CandleSource_descriptor();
}
template <>
struct is_proto_enum<::tinkoff::pub::invest::api::contract::v1::OrderBookType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tinkoff::pub::invest::api::contract::v1::OrderBookType>() {
  return ::tinkoff::pub::invest::api::contract::v1::OrderBookType_descriptor();
}
template <>
struct is_proto_enum<::tinkoff::pub::invest::api::contract::v1::LastPriceType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::tinkoff::pub::invest::api::contract::v1::LastPriceType>() {
  return ::tinkoff::pub::invest::api::contract::v1::LastPriceType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // marketdata_2eproto_2epb_2eh
