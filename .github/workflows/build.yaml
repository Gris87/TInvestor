name: TInvestor workflow

on: [push]

# Setup environment variables
env:
  QT_MIRRORS:          "download.qt.io;mirrors.ocf.berkeley.edu/qt;ftp.fau.de/qtproject;mirror.bit.edu.cn/qtproject"
  QT_VERSION:          "6.9.0"
  GOOGLE_TEST_VERSION: "v1.16.0"
  ZLIB_VERSION:        "v1.3.1"
  QUAZIP_VERSION:      "v1.5"
  VCPKG_VERSION:       "2025.04.09"

# List of jobs
jobs:
  # Release job.
  # Provides meta information for release.
  # This job is only used when github.ref contains /tags/
  # It should be first in order to upload release artifacts.
  release:
    name: Create release
    if: contains(github.ref, '/tags/')
    runs-on: ubuntu-latest
    steps:
      # Create release
      - name: Create release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body: |
            Release for TInvestor.

          draft: false
          prerelease: false

      # Create file with url to release page
      - name: Store release url
        shell: pwsh
        run: Write-Output "${{ steps.create_release.outputs.upload_url }}" > ./release_upload_url.txt

      # Upload file with url to release page
      - name: Upload release url
        uses: actions/upload-artifact@v4
        with:
          name: release_upload_url.txt
          path: ./release_upload_url.txt
          retention-days: 1
          compression-level: 9

  # Setup environment and upload artifacts
  setup1:
    name: Setup 1 [${{ matrix.config.name }}]
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
          - { name: "win64", os: windows-latest }
          - { name: "linux", os: ubuntu-latest }
      fail-fast: false

    steps:
      # Download/upload cache
      - name: Caching
        uses: actions/cache@v4
        id: cache-env
        with:
          path: ./Qt
          key: ${{ runner.os }}-setup1-${{ env.QT_VERSION }}-${{ env.ZLIB_VERSION }}-${{ env.QUAZIP_VERSION }}

      # Install required packages
      - name: System packages
        if: steps.cache-env.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          switch ("${{ runner.os }}")
          {
            "Windows" { choco install bzip2 }
            "Linux"   { sudo apt-get update }
            "macOS"   { brew update }
          }

      # Download Qt with specified version
      - name: Download Qt
        if: steps.cache-env.outputs.cache-hit != 'true'
        id: qt
        shell: cmake -P {0}
        run: |
          # Set qt_version variable to environment variable QT_VERSION
          set(qt_version ${{ env.QT_VERSION }})

          # Remove all dots "." from qt_version and put result to qt_version_dotless
          string(REPLACE "." "" qt_version_dotless "${qt_version}")

          # Setup several platform-dependent variables
          if ("${{ runner.os }}" STREQUAL "Windows")
            set(url_os "windows_x86")
            set(qt_package_arch_suffix "win64_msvc2022_64")
            set(qt_dir_prefix "${qt_version}/msvc2022_64")
            set(qt_package_suffix "-Windows-Windows_11_23H2-MSVC2022-Windows-Windows_11_23H2-X86_64")
          elseif ("${{ runner.os }}" STREQUAL "Linux")
            set(url_os "linux_x64")
            set(qt_package_arch_suffix "linux_gcc_64")
            set(qt_dir_prefix "${qt_version}/gcc_64")
            set(qt_package_suffix "-Linux-RHEL_8_10-GCC-Linux-RHEL_8_10-X86_64")
          elseif ("${{ runner.os }}" STREQUAL "macOS")
            set(url_os "mac_x64")
            set(qt_package_arch_suffix "clang_64")
            set(qt_dir_prefix "${qt_version}/macos")
            set(qt_package_suffix "-MacOS-MacOS_14-Clang-MacOS-MacOS_14-X86_64-ARM64")
          endif()

          # Set qt_base_url
          set(qt_base_url "https://\${qt_mirror}/online/qtsdkrepository/${url_os}/desktop/qt6_${qt_version_dotless}/qt6_${qt_version_dotless}")

          # Try to download Updates.xml from available QT mirrors
          foreach(qt_mirror $ENV{QT_MIRRORS})
            cmake_language(EVAL CODE "
              message(\"Downloading: ${qt_base_url}/Updates.xml\")
              file(DOWNLOAD \"${qt_base_url}/Updates.xml\" ./Updates.xml)
            ")
            file(SIZE ./Updates.xml fileSize)
            if (fileSize GREATER 0)
              break()
            endif()
          endforeach()

          # Get package version that used together with package file name in order to download package
          file(READ ./Updates.xml updates_xml)
          string(REGEX MATCH "<Name>qt.qt6.*<Version>([0-9+-.]+)</Version>" updates_xml_output "${updates_xml}")
          set(qt_package_version ${CMAKE_MATCH_1})

          # Declare downloadAndExtract function
          function(downloadAndExtract url archive target_dir)
            foreach(qt_mirror $ENV{QT_MIRRORS})
              cmake_language(EVAL CODE "
                message(\"Downloading: ${url}\")
                file(DOWNLOAD \"${url}\" ./${archive})
              ")
              file(SIZE ./${archive} fileSize)
              if (fileSize GREATER 0)
                break()
              endif()
            endforeach()

            file(MAKE_DIRECTORY ${target_dir})
            execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ${CMAKE_CURRENT_SOURCE_DIR}/${archive} WORKING_DIRECTORY ${target_dir})
          endfunction()

          # Download base packages
          foreach(package qtbase qtdeclarative qtsvg qttools qttranslations)
            downloadAndExtract(
              "${qt_base_url}/qt.qt6.${qt_version_dotless}.${qt_package_arch_suffix}/${qt_package_version}${package}${qt_package_suffix}.7z"
              ${package}.7z
              "Qt/${qt_dir_prefix}"
            )
          endforeach()

          # Download addons
          foreach(package qt5compat qtcharts)
            downloadAndExtract(
              "${qt_base_url}/qt.qt6.${qt_version_dotless}.addons.${package}.${qt_package_arch_suffix}/${qt_package_version}${package}${qt_package_suffix}.7z"
              ${package}.7z
              "Qt/${qt_dir_prefix}"
            )
          endforeach()

          if ("${{ runner.os }}" STREQUAL "Windows")
            # jom is used for parallel building under Windows
            downloadAndExtract(
              "https://\${qt_mirror}/official_releases/jom/jom.zip"
              jom.zip
              "Qt/jom"
            )
          elseif ("${{ runner.os }}" STREQUAL "Linux")
            # uic depends on libicu73.so
            downloadAndExtract(
              "${qt_base_url}/qt.qt6.${qt_version_dotless}.${qt_package_arch_suffix}/${qt_package_version}icu-linux-Rhel8.6-x86_64.7z"
              icu.7z
              "Qt/${qt_dir_prefix}/lib"
            )
          endif()

          # Export qt_dir for other steps
          file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/Qt/${qt_dir_prefix}" qt_dir)
          file(APPEND "$ENV{GITHUB_OUTPUT}" "qt_dir=${qt_dir}")

      # Checkout zlib repository with specific version to $GITHUB_WORKSPACE/zlib-source
      - name: Checkout zlib
        if: steps.cache-env.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
          repository: madler/zlib
          path: zlib-source
          ref: ${{ env.ZLIB_VERSION }}

      # Build zlib with specified version
      - name: Build zlib
        if: steps.cache-env.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          # Create build-zlib folder and enter into it
          New-Item -Path "." -Name "build-zlib" -ItemType "directory"
          Set-Location -Path "build-zlib"

          # Build Plugin
          cmake `
            -S ../zlib-source `
            -B . `
            -DCMAKE_POSITION_INDEPENDENT_CODE=ON `
            -DCMAKE_BUILD_TYPE=Release `
            -DCMAKE_INSTALL_PREFIX="${Env:GITHUB_WORKSPACE}/install-zlib"
          cmake --build . --config Release
          cmake --install . --config Release

      # Checkout quazip repository with specific version to $GITHUB_WORKSPACE/quazip-source
      - name: Checkout quazip
        if: steps.cache-env.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
          repository: stachenov/quazip
          path: quazip-source
          ref: ${{ env.QUAZIP_VERSION }}

      # Build quazip with specified version
      - name: Build quazip
        if: steps.cache-env.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          switch ("${{ runner.os }}")
          {
              "Windows" {
                  ${ZLIB_LIBRARY} = "zlib.lib"
              }
              "Linux" {
                  ${ZLIB_LIBRARY} = "libz.a"
              }
          }

          # Create build-quazip folder and enter into it
          New-Item -Path "." -Name "build-quazip" -ItemType "directory"
          Set-Location -Path "build-quazip"

          # Build Plugin
          cmake `
            -S ../quazip-source `
            -B . `
            -DCMAKE_BUILD_TYPE=Release `
            -DCMAKE_INSTALL_PREFIX="${Env:GITHUB_WORKSPACE}/Qt/quazip/install" `
            -DCMAKE_PREFIX_PATH="${{ steps.qt.outputs.qt_dir }}/lib/cmake" `
            -DZLIB_LIBRARY:FILEPATH="${Env:GITHUB_WORKSPACE}/install-zlib/lib/${ZLIB_LIBRARY}" `
            -DZLIB_INCLUDE_DIR:PATH="${Env:GITHUB_WORKSPACE}/install-zlib/include"
          cmake --build . --config Release
          cmake --install . --config Release

          # Cleanup
          Remove-Item "${Env:GITHUB_WORKSPACE}/Qt/quazip/install/lib/cmake" -Recurse -Force
          Remove-Item "${Env:GITHUB_WORKSPACE}/Qt/quazip/install/lib/pkgconfig" -Recurse -Force

      # Upload environment artifacts
      - name: Upload environment artifacts
        uses: thebrowsercompany/gha-upload-tar-artifact@main
        with:
          name: environment1-${{ matrix.config.name }}
          path: ./Qt
          retention-days: 1

  # Setup environment and upload artifacts
  setup2:
    name: Setup 2 [${{ matrix.config.name }}]
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
          - { name: "win64", os: windows-latest }
          - { name: "linux", os: ubuntu-latest }
      fail-fast: false

    steps:
      # Download/upload cache
      - name: Caching
        uses: actions/cache@v4
        id: cache-env
        with:
          path: ./Qt
          key: ${{ runner.os }}-setup2-${{ env.VCPKG_VERSION }}

      # Checkout vcpkg repository with specific version to $GITHUB_WORKSPACE/vcpkg-source
      - name: Checkout vcpkg
        if: steps.cache-env.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
          repository: microsoft/vcpkg
          path: vcpkg-source
          ref: ${{ env.VCPKG_VERSION }}

      # Build grpc with specified version
      - name: Build grpc
        if: steps.cache-env.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          # Enter to vcpkg-source folder
          Set-Location -Path "vcpkg-source"

          switch ("${{ runner.os }}")
          {
              "Windows" {
                  ./bootstrap-vcpkg.bat
              }
              "Linux" {
                  ./bootstrap-vcpkg.sh
              }
          }

          ./vcpkg integrate install
          ./vcpkg install grpc

          # Cleanup
          switch ("${{ runner.os }}")
          {
              "Windows" {
                  ${PACKAGE_NAME} = "x64-windows"
                  Remove-Item "installed/${PACKAGE_NAME}/bin/*.pdb"
                  Remove-Item "installed/${PACKAGE_NAME}/lib/absl_decode_rust_punycode.lib"
                  Remove-Item "installed/${PACKAGE_NAME}/lib/absl_demangle_rust.lib"
                  Remove-Item "installed/${PACKAGE_NAME}/lib/absl_flags_parse.lib"
                  Remove-Item "installed/${PACKAGE_NAME}/lib/absl_flags_usage.lib"
                  Remove-Item "installed/${PACKAGE_NAME}/lib/absl_flags_usage_internal.lib"
                  Remove-Item "installed/${PACKAGE_NAME}/lib/absl_log_flags.lib"
                  Remove-Item "installed/${PACKAGE_NAME}/lib/absl_log_internal_structured_proto.lib"
                  Remove-Item "installed/${PACKAGE_NAME}/lib/absl_poison.lib"
                  Remove-Item "installed/${PACKAGE_NAME}/lib/absl_tracing_internal.lib"
                  Remove-Item "installed/${PACKAGE_NAME}/lib/absl_utf8_for_code_point.lib"
                  Remove-Item "installed/${PACKAGE_NAME}/lib/grpc++_alts.lib"
                  Remove-Item "installed/${PACKAGE_NAME}/lib/grpc++_error_details.lib"
                  Remove-Item "installed/${PACKAGE_NAME}/lib/grpc++_unsecure.lib"
                  Remove-Item "installed/${PACKAGE_NAME}/lib/grpc_plugin_support.lib"
                  Remove-Item "installed/${PACKAGE_NAME}/lib/grpc_unsecure.lib"
                  Remove-Item "installed/${PACKAGE_NAME}/lib/grpcpp_channelz.lib"
                  Remove-Item "installed/${PACKAGE_NAME}/lib/libprotobuf-lite.lib"
                  Remove-Item "installed/${PACKAGE_NAME}/lib/libprotoc.lib"
                  Remove-Item "installed/${PACKAGE_NAME}/lib/utf8_validity.lib"
              }
              "Linux" {
                  ${PACKAGE_NAME} = "x64-linux"
                  Remove-Item "installed/${PACKAGE_NAME}/etc" -Recurse -Force
                  Remove-Item "installed/${PACKAGE_NAME}/lib/libabsl_bad_any_cast_impl.a"
                  Remove-Item "installed/${PACKAGE_NAME}/lib/libabsl_cordz_sample_token.a"
                  Remove-Item "installed/${PACKAGE_NAME}/lib/libabsl_failure_signal_handler.a"
                  Remove-Item "installed/${PACKAGE_NAME}/lib/libabsl_flags_parse.a"
                  Remove-Item "installed/${PACKAGE_NAME}/lib/libabsl_flags_usage.a"
                  Remove-Item "installed/${PACKAGE_NAME}/lib/libabsl_flags_usage_internal.a"
                  Remove-Item "installed/${PACKAGE_NAME}/lib/libabsl_log_flags.a"
                  Remove-Item "installed/${PACKAGE_NAME}/lib/libabsl_periodic_sampler.a"
                  Remove-Item "installed/${PACKAGE_NAME}/lib/libabsl_poison.a"
                  Remove-Item "installed/${PACKAGE_NAME}/lib/libabsl_random_internal_distribution_test_util.a"
                  Remove-Item "installed/${PACKAGE_NAME}/lib/libabsl_scoped_set_env.a"
                  Remove-Item "installed/${PACKAGE_NAME}/lib/libgrpc++_alts.a"
                  Remove-Item "installed/${PACKAGE_NAME}/lib/libgrpc++_error_details.a"
                  Remove-Item "installed/${PACKAGE_NAME}/lib/libgrpc++_unsecure.a"
                  Remove-Item "installed/${PACKAGE_NAME}/lib/libgrpc_authorization_provider.a"
                  Remove-Item "installed/${PACKAGE_NAME}/lib/libgrpc_plugin_support.a"
                  Remove-Item "installed/${PACKAGE_NAME}/lib/libgrpc_unsecure.a"
                  Remove-Item "installed/${PACKAGE_NAME}/lib/libgrpcpp_channelz.a"
                  Remove-Item "installed/${PACKAGE_NAME}/lib/libprotobuf-lite.a"
                  Remove-Item "installed/${PACKAGE_NAME}/lib/libprotoc.a"
              }
          }

          Remove-Item "installed/vcpkg" -Recurse -Force
          Remove-Item "installed/${PACKAGE_NAME}/debug" -Recurse -Force
          Remove-Item "installed/${PACKAGE_NAME}/lib/pkgconfig" -Recurse -Force
          Remove-Item "installed/${PACKAGE_NAME}/share" -Recurse -Force
          Remove-Item "installed/${PACKAGE_NAME}/tools" -Recurse -Force

          Copy-Item installed -Destination "${Env:GITHUB_WORKSPACE}/Qt/vcpkg/installed" -Recurse

      # Upload environment artifacts
      - name: Upload environment artifacts
        uses: thebrowsercompany/gha-upload-tar-artifact@main
        with:
          name: environment2-${{ matrix.config.name }}
          path: ./Qt
          retention-days: 1

  # Build project
  build:
    needs: [setup1, setup2]
    name: Build [${{ matrix.config.name }}]
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
          - { name: "win64", os: windows-latest }
          - { name: "linux", os: ubuntu-latest }
      fail-fast: false

    steps:
      # Checkout latest commit for this repository to $GITHUB_WORKSPACE/TInvestor-source
      - name: Checkout TInvestor
        uses: actions/checkout@v4
        with:
          path: TInvestor-source
          
      # Calculate TInvestor hash on sources
      - name: Calculate TInvestor hash
        id: folders-hash
        uses: theowenyoung/folder-hash@v3
        with:
          path: |
            ./Qt
            ./TInvestor-source/app
            ./TInvestor-source/libs
            ./TInvestor-source/test
            
      # Download/upload cache
      - name: Caching
        uses: actions/cache@v4
        id: cache-build
        with:
          path: ./TInvestor-source/build
          key: ${{ runner.os }}-build-${{ steps.folders-hash.outputs.hash }}
          restore-keys: ${{ runner.os }}-build-

      # Download environment artifacts
      - name: Download environment artifacts 1
        if: steps.cache-build.outputs.cache-hit != 'true'
        uses: thebrowsercompany/gha-download-tar-artifact@main
        with:
          name: environment1-${{ matrix.config.name }}
          path: ./Qt

      # Download environment artifacts
      - name: Download environment artifacts 2
        if: steps.cache-build.outputs.cache-hit != 'true'
        uses: thebrowsercompany/gha-download-tar-artifact@main
        with:
          name: environment2-${{ matrix.config.name }}
          path: ./Qt

      # Checkout googletest repository with specific version to $GITHUB_WORKSPACE/googletest-source
      - name: Checkout googletest
        if: steps.cache-build.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
          repository: google/googletest
          path: Qt/googletest-source
          ref: ${{ env.GOOGLE_TEST_VERSION }}

      # Build TInvestor
      - name: Build TInvestor
        if: steps.cache-build.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          # Setup Developer PowerShell for Windows
          switch ("${{ runner.os }}")
          {
              "Windows" {
                  Write-Output "Setup Developer PowerShell"
                  # https://github.com/microsoft/terminal/issues/3821#issuecomment-651506501
                  # The setup-msbuild action is not used since it does not set up the path to 'cl'
                  # see: https://github.com/microsoft/setup-msbuild/issues/24
                  ${VS_INST_PATH} = & "${env:ProgramFiles(x86)}/Microsoft Visual Studio/Installer/vswhere.exe" -latest -property installationPath
                  Write-Output "VS Installation Path: ${VS_INST_PATH}"
                  Import-Module ${VS_INST_PATH}/Common7/Tools/Microsoft.VisualStudio.DevShell.dll
                  Enter-VsDevShell -VsInstallPath ${VS_INST_PATH} -SkipAutomaticLocation -DevCmdArguments '-arch=x64 -no_logo'
              }
          }

          ${Env:QUAZIP_PATH} = "${Env:GITHUB_WORKSPACE}/Qt/quazip";
          ${Env:VCPKG_PATH} = "${Env:GITHUB_WORKSPACE}/Qt/vcpkg";
          ${Env:GOOGLETEST_DIR} = "${Env:GITHUB_WORKSPACE}/Qt/googletest-source";

          # Create TInvestor-source/build/Desktop-Release folder and enter into it
          New-Item -Path "TInvestor-source/build/Desktop-Release" -ItemType "directory"
          Set-Location -Path "TInvestor-source/build/Desktop-Release"

          switch ("${{ runner.os }}")
          {
              "Windows" {
                  & "${Env:GITHUB_WORKSPACE}/Qt/${Env:QT_VERSION}/msvc2022_64/bin/qmake.exe" "${Env:GITHUB_WORKSPACE}/TInvestor-source/TInvestor.pro" -spec win32-msvc "CONFIG+=qtquickcompiler"
                  chcp 65001
                  & "${Env:GITHUB_WORKSPACE}/Qt/jom/jom.exe" -f "${Env:GITHUB_WORKSPACE}/TInvestor-source/build/Desktop-Release/Makefile" qmake_all
                  chcp 65001
                  & "${Env:GITHUB_WORKSPACE}/Qt/jom/jom.exe"
              }
              "Linux" {
                  & "${Env:GITHUB_WORKSPACE}/Qt/${Env:QT_VERSION}/gcc_64/bin/qmake" "${Env:GITHUB_WORKSPACE}/TInvestor-source/TInvestor.pro" -spec linux-g++ CONFIG+=qtquickcompiler
                  make -f "${Env:GITHUB_WORKSPACE}/TInvestor-source/build/Desktop-Release/Makefile" qmake_all
                  make -j4
              }
          }

      # Prepare artifacts
      - name: Prepare artifacts
        shell: pwsh
        run: |
          Copy-Item "${Env:GITHUB_WORKSPACE}/TInvestor-source/build/Desktop-Release" -Destination artifacts -Recurse

      # Upload artifacts
      - name: Upload artifacts
        uses: thebrowsercompany/gha-upload-tar-artifact@main
        with:
          name: build-${{ matrix.config.name }}
          path: ./artifacts
          retention-days: 1
