name: CI

on: [push]

# Setup environment variables
env:
  QT_MIRRORS:          "download.qt.io;mirrors.ocf.berkeley.edu/qt;ftp.fau.de/qtproject;mirror.bit.edu.cn/qtproject"
  QT_VERSION:          "6.9.0"
  ZLIB_VERSION:        "v1.3.1"
  QUAZIP_VERSION:      "v1.5"
  VCPKG_VERSION:       "2025.04.09"
  CLANG_VERSION:       "20.1.3"
  GOOGLE_TEST_VERSION: "v1.16.0"
  GIST_ID:             "c6ca4b78912b06400bb99a569cc9fccd"

# List of jobs
jobs:
  # Setup environment and upload artifacts
  env-qt-zlib-quazip:
    name: Environment Qt/ZLib/Quazip [${{ matrix.config.name }}]
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
          - { name: "win64", os: windows-latest }
          - { name: "linux", os: ubuntu-latest }
      fail-fast: false

    steps:
      # Download/upload cache
      - name: Caching
        uses: actions/cache@v4
        id: cache-env
        with:
          path: ./Qt
          key: ${{ runner.os }}-env-qt-zlib-quazip-${{ env.QT_VERSION }}-${{ env.ZLIB_VERSION }}-${{ env.QUAZIP_VERSION }}

      # Install required packages
      - name: System packages
        if: steps.cache-env.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          switch ("${{ runner.os }}")
          {
            "Windows" { choco install bzip2 }
            "Linux"   { sudo apt-get update }
            "macOS"   { brew update }
          }

      # Download Qt with specified version
      - name: Download Qt
        if: steps.cache-env.outputs.cache-hit != 'true'
        id: qt
        shell: cmake -P {0}
        run: |
          # Set qt_version variable to environment variable QT_VERSION
          set(qt_version ${{ env.QT_VERSION }})

          # Remove all dots "." from qt_version and put result to qt_version_dotless
          string(REPLACE "." "" qt_version_dotless "${qt_version}")

          # Setup several platform-dependent variables
          if ("${{ runner.os }}" STREQUAL "Windows")
            set(url_os "windows_x86")
            set(qt_package_arch_suffix "win64_msvc2022_64")
            set(qt_dir_prefix "${qt_version}/msvc2022_64")
            set(qt_package_suffix "-Windows-Windows_11_23H2-MSVC2022-Windows-Windows_11_23H2-X86_64")
          elseif ("${{ runner.os }}" STREQUAL "Linux")
            set(url_os "linux_x64")
            set(qt_package_arch_suffix "linux_gcc_64")
            set(qt_dir_prefix "${qt_version}/gcc_64")
            set(qt_package_suffix "-Linux-RHEL_8_10-GCC-Linux-RHEL_8_10-X86_64")
          elseif ("${{ runner.os }}" STREQUAL "macOS")
            set(url_os "mac_x64")
            set(qt_package_arch_suffix "clang_64")
            set(qt_dir_prefix "${qt_version}/macos")
            set(qt_package_suffix "-MacOS-MacOS_14-Clang-MacOS-MacOS_14-X86_64-ARM64")
          endif()

          # Set qt_base_url
          set(qt_base_url "https://\${qt_mirror}/online/qtsdkrepository/${url_os}/desktop/qt6_${qt_version_dotless}/qt6_${qt_version_dotless}")

          # Try to download Updates.xml from available QT mirrors
          foreach(qt_mirror $ENV{QT_MIRRORS})
            cmake_language(EVAL CODE "
              message(\"Downloading: ${qt_base_url}/Updates.xml\")
              file(DOWNLOAD \"${qt_base_url}/Updates.xml\" ./Updates.xml)
            ")
            file(SIZE ./Updates.xml fileSize)
            if (fileSize GREATER 0)
              break()
            endif()
          endforeach()

          # Get package version that used together with package file name in order to download package
          file(READ ./Updates.xml updates_xml)
          string(REGEX MATCH "<Name>qt.qt6.*<Version>([0-9+-.]+)</Version>" updates_xml_output "${updates_xml}")
          set(qt_package_version ${CMAKE_MATCH_1})

          # Declare downloadAndExtract function
          function(downloadAndExtract url archive target_dir)
            foreach(qt_mirror $ENV{QT_MIRRORS})
              cmake_language(EVAL CODE "
                message(\"Downloading: ${url}\")
                file(DOWNLOAD \"${url}\" ./${archive})
              ")
              file(SIZE ./${archive} fileSize)
              if (fileSize GREATER 0)
                break()
              endif()
            endforeach()

            file(MAKE_DIRECTORY ${target_dir})
            execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ${CMAKE_CURRENT_SOURCE_DIR}/${archive} WORKING_DIRECTORY ${target_dir})
          endfunction()

          # Download base packages
          foreach(package qtbase qtdeclarative qtsvg qttools qttranslations)
            downloadAndExtract(
              "${qt_base_url}/qt.qt6.${qt_version_dotless}.${qt_package_arch_suffix}/${qt_package_version}${package}${qt_package_suffix}.7z"
              ${package}.7z
              "Qt/${qt_dir_prefix}"
            )
          endforeach()

          # Download addons
          foreach(package qt5compat qtcharts)
            downloadAndExtract(
              "${qt_base_url}/qt.qt6.${qt_version_dotless}.addons.${package}.${qt_package_arch_suffix}/${qt_package_version}${package}${qt_package_suffix}.7z"
              ${package}.7z
              "Qt/${qt_dir_prefix}"
            )
          endforeach()

          if ("${{ runner.os }}" STREQUAL "Windows")
            # jom is used for parallel building under Windows
            downloadAndExtract(
              "https://\${qt_mirror}/official_releases/jom/jom.zip"
              jom.zip
              "Qt/jom"
            )
          elseif ("${{ runner.os }}" STREQUAL "Linux")
            # uic depends on libicu73.so
            downloadAndExtract(
              "${qt_base_url}/qt.qt6.${qt_version_dotless}.${qt_package_arch_suffix}/${qt_package_version}icu-linux-Rhel8.6-x86_64.7z"
              icu.7z
              "Qt/${qt_dir_prefix}/lib"
            )
          endif()

          # Export qt_dir for other steps
          file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/Qt/${qt_dir_prefix}" qt_dir)
          file(APPEND "$ENV{GITHUB_OUTPUT}" "qt_dir=${qt_dir}")

      # Checkout zlib repository with specific version to $GITHUB_WORKSPACE/zlib-source
      - name: Checkout zlib
        if: steps.cache-env.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
          repository: madler/zlib
          path: zlib-source
          ref: ${{ env.ZLIB_VERSION }}

      # Build zlib with specified version
      - name: Build zlib
        if: steps.cache-env.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          # Create build-zlib folder and enter into it
          New-Item -Path "." -Name "build-zlib" -ItemType "directory"
          Set-Location -Path "build-zlib"

          # Build debug
          cmake `
            -S ../zlib-source `
            -B . `
            -DCMAKE_POSITION_INDEPENDENT_CODE=ON `
            -DCMAKE_BUILD_TYPE=Debug `
            -DCMAKE_INSTALL_PREFIX="${Env:GITHUB_WORKSPACE}/Qt/zlib/install"
          cmake --build . --config Debug
          cmake --install . --config Debug

          # Build release
          cmake `
            -S ../zlib-source `
            -B . `
            -DCMAKE_POSITION_INDEPENDENT_CODE=ON `
            -DCMAKE_BUILD_TYPE=Release `
            -DCMAKE_INSTALL_PREFIX="${Env:GITHUB_WORKSPACE}/Qt/zlib/install"
          cmake --build . --config Release
          cmake --install . --config Release

      # Checkout quazip repository with specific version to $GITHUB_WORKSPACE/quazip-source
      - name: Checkout quazip
        if: steps.cache-env.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
          repository: stachenov/quazip
          path: quazip-source
          ref: ${{ env.QUAZIP_VERSION }}

      # Build quazip with specified version
      - name: Build quazip
        if: steps.cache-env.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          switch ("${{ runner.os }}")
          {
              "Windows" {
                  ${ZLIB_LIBRARY_DEBUG}   = "zlibd.lib"
                  ${ZLIB_LIBRARY_RELEASE} = "zlib.lib"
              }
              "Linux" {
                  ${ZLIB_LIBRARY_DEBUG}   = "libz.a"
                  ${ZLIB_LIBRARY_RELEASE} = "libz.a"
              }
          }

          # Create build-quazip folder and enter into it
          New-Item -Path "." -Name "build-quazip" -ItemType "directory"
          Set-Location -Path "build-quazip"

          # Build debug
          cmake `
            -S ../quazip-source `
            -B . `
            -DCMAKE_BUILD_TYPE=Debug `
            -DCMAKE_INSTALL_PREFIX="${Env:GITHUB_WORKSPACE}/Qt/quazip/install" `
            -DCMAKE_PREFIX_PATH="${{ steps.qt.outputs.qt_dir }}/lib/cmake" `
            -DZLIB_LIBRARY:FILEPATH="${Env:GITHUB_WORKSPACE}/Qt/zlib/install/lib/${ZLIB_LIBRARY_DEBUG}" `
            -DZLIB_INCLUDE_DIR:PATH="${Env:GITHUB_WORKSPACE}/Qt/zlib/install/include"
          cmake --build . --config Debug
          cmake --install . --config Debug

          # Build release
          cmake `
            -S ../quazip-source `
            -B . `
            -DCMAKE_BUILD_TYPE=Release `
            -DCMAKE_INSTALL_PREFIX="${Env:GITHUB_WORKSPACE}/Qt/quazip/install" `
            -DCMAKE_PREFIX_PATH="${{ steps.qt.outputs.qt_dir }}/lib/cmake" `
            -DZLIB_LIBRARY:FILEPATH="${Env:GITHUB_WORKSPACE}/Qt/zlib/install/lib/${ZLIB_LIBRARY_RELEASE}" `
            -DZLIB_INCLUDE_DIR:PATH="${Env:GITHUB_WORKSPACE}/Qt/zlib/install/include"
          cmake --build . --config Release
          cmake --install . --config Release

          # Cleanup
          Remove-Item "${Env:GITHUB_WORKSPACE}/Qt/zlib/install/share" -Recurse -Force
          Remove-Item "${Env:GITHUB_WORKSPACE}/Qt/quazip/install/lib/cmake" -Recurse -Force
          Remove-Item "${Env:GITHUB_WORKSPACE}/Qt/quazip/install/lib/pkgconfig" -Recurse -Force

      # Upload environment artifacts
      - name: Upload environment artifacts
        uses: thebrowsercompany/gha-upload-tar-artifact@main
        with:
          name: env-qt-zlib-quazip-${{ matrix.config.name }}
          path: ./Qt
          retention-days: 1

  # Setup environment and upload artifacts
  env-vcpkg:
    name: Environment vcpkg [${{ matrix.config.name }}]
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
          - { name: "win64", os: windows-latest }
          - { name: "linux", os: ubuntu-latest }
      fail-fast: false

    steps:
      # Download/upload cache
      - name: Caching
        uses: actions/cache@v4
        id: cache-env
        with:
          path: ./Qt
          key: ${{ runner.os }}-env-vcpkg-${{ env.VCPKG_VERSION }}

      # Checkout vcpkg repository with specific version to $GITHUB_WORKSPACE/vcpkg-source
      - name: Checkout vcpkg
        if: steps.cache-env.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
          repository: microsoft/vcpkg
          path: vcpkg-source
          ref: ${{ env.VCPKG_VERSION }}

      # Build grpc with specified version
      - name: Build grpc
        if: steps.cache-env.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          # Enter to vcpkg-source folder
          Set-Location -Path "vcpkg-source"

          switch ("${{ runner.os }}")
          {
              "Windows" {
                  ./bootstrap-vcpkg.bat
              }
              "Linux" {
                  ./bootstrap-vcpkg.sh
              }
          }

          ./vcpkg integrate install
          ./vcpkg install grpc

          # Cleanup
          switch ("${{ runner.os }}")
          {
              "Windows" {
                  ${PACKAGE_NAME} = "x64-windows"
                  Remove-Item "installed/${PACKAGE_NAME}/debug/bin/*.pdb" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/debug/lib/absl_decode_rust_punycode.lib" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/debug/lib/absl_demangle_rust.lib" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/debug/lib/absl_flags_parse.lib" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/debug/lib/absl_flags_usage.lib" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/debug/lib/absl_flags_usage_internal.lib" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/debug/lib/absl_log_flags.lib" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/debug/lib/absl_log_internal_structured_proto.lib" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/debug/lib/absl_poison.lib" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/debug/lib/absl_tracing_internal.lib" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/debug/lib/absl_utf8_for_code_point.lib" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/debug/lib/grpc++_alts.lib" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/debug/lib/grpc++_error_details.lib" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/debug/lib/grpc++_unsecure.lib" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/debug/lib/grpc_plugin_support.lib" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/debug/lib/grpc_unsecure.lib" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/debug/lib/grpcpp_channelz.lib" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/debug/lib/libprotobuf-lited.lib" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/debug/lib/libprotocd.lib" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/debug/lib/utf8_validity.lib" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/bin/*.pdb" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/lib/absl_decode_rust_punycode.lib" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/lib/absl_demangle_rust.lib" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/lib/absl_flags_parse.lib" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/lib/absl_flags_usage.lib" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/lib/absl_flags_usage_internal.lib" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/lib/absl_log_flags.lib" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/lib/absl_log_internal_structured_proto.lib" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/lib/absl_poison.lib" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/lib/absl_tracing_internal.lib" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/lib/absl_utf8_for_code_point.lib" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/lib/grpc++_alts.lib" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/lib/grpc++_error_details.lib" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/lib/grpc++_unsecure.lib" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/lib/grpc_plugin_support.lib" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/lib/grpc_unsecure.lib" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/lib/grpcpp_channelz.lib" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/lib/libprotobuf-lite.lib" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/lib/libprotoc.lib" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/lib/utf8_validity.lib" -Force
              }
              "Linux" {
                  ${PACKAGE_NAME} = "x64-linux"
                  Remove-Item "installed/${PACKAGE_NAME}/etc" -Recurse -Force
                  Remove-Item "installed/${PACKAGE_NAME}/debug/lib/libabsl_bad_any_cast_impl.a" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/debug/lib/libabsl_cordz_sample_token.a" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/debug/lib/libabsl_failure_signal_handler.a" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/debug/lib/libabsl_flags_parse.a" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/debug/lib/libabsl_flags_usage.a" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/debug/lib/libabsl_flags_usage_internal.a" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/debug/lib/libabsl_log_flags.a" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/debug/lib/libabsl_periodic_sampler.a" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/debug/lib/libabsl_poison.a" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/debug/lib/libabsl_random_internal_distribution_test_util.a" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/debug/lib/libabsl_scoped_set_env.a" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/debug/lib/libgrpc++_alts.a" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/debug/lib/libgrpc++_error_details.a" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/debug/lib/libgrpc++_unsecure.a" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/debug/lib/libgrpc_authorization_provider.a" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/debug/lib/libgrpc_plugin_support.a" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/debug/lib/libgrpc_unsecure.a" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/debug/lib/libgrpcpp_channelz.a" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/debug/lib/libprotobuf-lited.a" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/debug/lib/libprotocd.a" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/lib/libabsl_bad_any_cast_impl.a" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/lib/libabsl_cordz_sample_token.a" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/lib/libabsl_failure_signal_handler.a" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/lib/libabsl_flags_parse.a" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/lib/libabsl_flags_usage.a" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/lib/libabsl_flags_usage_internal.a" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/lib/libabsl_log_flags.a" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/lib/libabsl_periodic_sampler.a" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/lib/libabsl_poison.a" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/lib/libabsl_random_internal_distribution_test_util.a" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/lib/libabsl_scoped_set_env.a" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/lib/libgrpc++_alts.a" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/lib/libgrpc++_error_details.a" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/lib/libgrpc++_unsecure.a" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/lib/libgrpc_authorization_provider.a" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/lib/libgrpc_plugin_support.a" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/lib/libgrpc_unsecure.a" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/lib/libgrpcpp_channelz.a" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/lib/libprotobuf-lite.a" -Force
                  Remove-Item "installed/${PACKAGE_NAME}/lib/libprotoc.a" -Force
              }
          }

          Remove-Item "installed/vcpkg" -Recurse -Force
          Remove-Item "installed/${PACKAGE_NAME}/lib/pkgconfig" -Recurse -Force
          Remove-Item "installed/${PACKAGE_NAME}/share" -Recurse -Force
          Remove-Item "installed/${PACKAGE_NAME}/tools" -Recurse -Force

          Copy-Item installed -Destination "${Env:GITHUB_WORKSPACE}/Qt/vcpkg/installed" -Recurse

      # Upload environment artifacts
      - name: Upload environment artifacts
        uses: thebrowsercompany/gha-upload-tar-artifact@main
        with:
          name: env-vcpkg-${{ matrix.config.name }}
          path: ./Qt
          retention-days: 1

  # Check style
  check-style:
    name: Check style [${{ matrix.config.name }}]
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
          - { name: "win64", os: windows-latest }
          - { name: "linux", os: ubuntu-latest }
      fail-fast: false

    steps:
      # Set git to disable line endings conversion
      - name: Configure git
        run: |
          git config --global core.autocrlf false

      # Checkout latest commit for this repository to $GITHUB_WORKSPACE/TInvestor-source
      - name: Checkout TInvestor
        uses: actions/checkout@v4
        with:
          path: TInvestor-source

      # Calculate TInvestor hash on sources
      - name: Calculate TInvestor hash
        id: folders-hash
        uses: theowenyoung/folder-hash@v3
        with:
          path: |
            ./TInvestor-source/app
            ./TInvestor-source/libs
            ./TInvestor-source/test
            ./TInvestor-source/tools/py3/check-style

      # Download/upload cache
      - name: Caching
        uses: actions/cache@v4
        id: cache-style
        with:
          path: ./success
          key: ${{ runner.os }}-check-style-${{ steps.folders-hash.outputs.hash }}

      # Install required packages
      - name: System packages
        if: steps.cache-style.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          pip install loguru

      # Download clang
      - name: Download clang
        if: steps.cache-style.outputs.cache-hit != 'true'
        shell: cmake -P {0}
        run: |
          # Setup several platform-dependent variables
          if ("${{ runner.os }}" STREQUAL "Windows")
            set(os_tar_url "clang+llvm-${{ env.CLANG_VERSION }}-x86_64-pc-windows-msvc.tar.xz")
          elseif ("${{ runner.os }}" STREQUAL "Linux")
            set(os_tar_url "LLVM-${{ env.CLANG_VERSION }}-Linux-X64.tar.xz")
          elseif ("${{ runner.os }}" STREQUAL "macOS")
            set(os_tar_url "LLVM-${{ env.CLANG_VERSION }}-macOS-X64.tar.xz")
          endif()

          # Set clang_release_url
          set(clang_release_url "https://github.com/llvm/llvm-project/releases/download/llvmorg-${{ env.CLANG_VERSION }}/${os_tar_url}")

          # Download clang_release_url
          cmake_language(EVAL CODE "
            message(\"Downloading: ${clang_release_url}\")
            file(DOWNLOAD \"${clang_release_url}\" ./clang.tar.xz)
          ")

          file(MAKE_DIRECTORY Qt/clang)
          execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ${CMAKE_CURRENT_SOURCE_DIR}/clang.tar.xz WORKING_DIRECTORY Qt/clang)

      # Check style
      - name: Check style
        if: steps.cache-style.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          switch ("${{ runner.os }}")
          {
              "Windows" {
                  ${Env:PATH} = "${Env:GITHUB_WORKSPACE}/Qt/clang/clang+llvm-20.1.3-x86_64-pc-windows-msvc/bin;${Env:PATH}"
              }
              "Linux" {
                  ${Env:PATH} = "${Env:GITHUB_WORKSPACE}/Qt/clang/LLVM-${Env:CLANG_VERSION}-Linux-X64/bin:${Env:PATH}"
              }
          }

          # Enter to TInvestor-source folder
          Set-Location -Path "TInvestor-source"

          & python tools/py3/check-style

          New-Item -Path . -Name "../success" -ItemType "File"

      # Finish
      - name: Finish
        shell: pwsh
        run: |
          Write-Output "Finished"

  # Prepare compile_commands.json
  compile-commands:
    needs: [env-qt-zlib-quazip, env-vcpkg]
    name: Prepare compile_commands.json [${{ matrix.config.name }}]
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
          - { name: "win64", os: windows-latest }
          - { name: "linux", os: ubuntu-latest }
      fail-fast: false

    steps:
      # Set git to disable line endings conversion
      - name: Configure git
        run: |
          git config --global core.autocrlf false

      # Checkout latest commit for this repository to $GITHUB_WORKSPACE/TInvestor-source
      - name: Checkout TInvestor
        uses: actions/checkout@v4
        with:
          path: TInvestor-source

      # Calculate TInvestor hash on sources
      - name: Calculate TInvestor hash
        id: folders-hash
        uses: theowenyoung/folder-hash@v3
        with:
          path: |
            ./TInvestor-source/app
            ./TInvestor-source/libs
            ./TInvestor-source/test

      # Download/upload cache
      - name: Caching
        uses: actions/cache@v4
        id: cache-build
        with:
          path: ./artifacts
          key: ${{ runner.os }}-compile-commands-${{ steps.folders-hash.outputs.hash }}

      # Install required packages
      - name: System packages
        if: steps.cache-build.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          switch ("${{ runner.os }}")
          {
            "Windows" { choco install bzip2 }
            "Linux"   { sudo apt-get update; sudo apt-get install -y libgl1-mesa-dev libxkbcommon-dev libxkbcommon-x11-dev libxcb-cursor0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-shape0 libxcb-shm0 libxcb-sync1 libxcb-util1 libxcb-xfixes0 libxcb-xkb1 libxcb1 }
            "macOS"   { brew update }
          }

      # Download environment artifacts
      - name: Download environment artifacts (Qt/ZLib/Quazip)
        if: steps.cache-build.outputs.cache-hit != 'true'
        uses: thebrowsercompany/gha-download-tar-artifact@main
        with:
          name: env-qt-zlib-quazip-${{ matrix.config.name }}
          path: ./Qt

      # Download environment artifacts
      - name: Download environment artifacts (vcpkg)
        if: steps.cache-build.outputs.cache-hit != 'true'
        uses: thebrowsercompany/gha-download-tar-artifact@main
        with:
          name: env-vcpkg-${{ matrix.config.name }}
          path: ./Qt

      # Checkout googletest repository with specific version to $GITHUB_WORKSPACE/googletest-source
      - name: Checkout googletest
        if: steps.cache-build.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
          repository: google/googletest
          path: Qt/googletest-source
          ref: ${{ env.GOOGLE_TEST_VERSION }}

      # Prepare compile_commands.json
      - name: Prepare compile_commands.json
        if: steps.cache-build.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          ${Env:ZLIB_PATH} = "${Env:GITHUB_WORKSPACE}/Qt/zlib"
          ${Env:QUAZIP_PATH} = "${Env:GITHUB_WORKSPACE}/Qt/quazip"
          ${Env:VCPKG_PATH} = "${Env:GITHUB_WORKSPACE}/Qt/vcpkg"
          ${Env:GOOGLETEST_DIR} = "${Env:GITHUB_WORKSPACE}/Qt/googletest-source"

          # Create TInvestor-source/build/Desktop-Debug folder and enter into it
          New-Item -Path "TInvestor-source/build/Desktop-Debug" -ItemType "directory" -Force
          Set-Location -Path "TInvestor-source/build/Desktop-Debug"

          switch ("${{ runner.os }}")
          {
              "Windows" {
                  ${Env:QTDIR} = "${Env:GITHUB_WORKSPACE}/Qt/${Env:QT_VERSION}/msvc2022_64"
                  & "${Env:QTDIR}/bin/qmake.exe" "${Env:GITHUB_WORKSPACE}/TInvestor-source/TInvestor.pro" -spec win32-msvc "CONFIG+=debug" "CONFIG+=qml_debug"
                  chcp 65001
                  & "${Env:GITHUB_WORKSPACE}/Qt/jom/jom.exe" -f "${Env:GITHUB_WORKSPACE}/TInvestor-source/build/Desktop-Debug/Makefile" qmake_all
                  chcp 65001
                  & "${Env:GITHUB_WORKSPACE}/Qt/jom/jom.exe"
              }
              "Linux" {
                  ${Env:QTDIR} = "${Env:GITHUB_WORKSPACE}/Qt/${Env:QT_VERSION}/gcc_64"
                  & "${Env:QTDIR}/bin/qmake" "${Env:GITHUB_WORKSPACE}/TInvestor-source/TInvestor.pro" -spec linux-g++ CONFIG+=debug CONFIG+=qml_debug
                  make -f "${Env:GITHUB_WORKSPACE}/TInvestor-source/build/Desktop-Debug/Makefile" qmake_all
                  make -j4
              }
          }

      # Upload artifacts
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: compile-commands-${{ matrix.config.name }}
          path: ./artifacts
          retention-days: 1
          compression-level: 9

  # Build project in Debug
  build-debug:
    needs: [env-qt-zlib-quazip, env-vcpkg]
    name: Build Debug [${{ matrix.config.name }}]
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
          - { name: "win64", os: windows-latest }
          - { name: "linux", os: ubuntu-latest }
      fail-fast: false

    steps:
      # Set git to disable line endings conversion
      - name: Configure git
        run: |
          git config --global core.autocrlf false

      # Checkout latest commit for this repository to $GITHUB_WORKSPACE/TInvestor-source
      - name: Checkout TInvestor
        uses: actions/checkout@v4
        with:
          path: TInvestor-source

      # Calculate TInvestor hash on sources
      - name: Calculate TInvestor hash
        id: folders-hash
        uses: theowenyoung/folder-hash@v3
        with:
          path: |
            ./TInvestor-source/app
            ./TInvestor-source/libs
            ./TInvestor-source/test

      # Download/upload cache
      - name: Caching
        uses: actions/cache@v4
        id: cache-build
        with:
          path: ./artifacts
          key: ${{ runner.os }}-build-debug-${{ steps.folders-hash.outputs.hash }}

      # Install required packages
      - name: System packages
        if: steps.cache-build.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          switch ("${{ runner.os }}")
          {
            "Windows" { choco install bzip2 }
            "Linux"   { sudo apt-get update; sudo apt-get install -y libgl1-mesa-dev libxkbcommon-dev libxkbcommon-x11-dev libxcb-cursor0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-shape0 libxcb-shm0 libxcb-sync1 libxcb-util1 libxcb-xfixes0 libxcb-xkb1 libxcb1 }
            "macOS"   { brew update }
          }

      # Download environment artifacts
      - name: Download environment artifacts (Qt/ZLib/Quazip)
        if: steps.cache-build.outputs.cache-hit != 'true'
        uses: thebrowsercompany/gha-download-tar-artifact@main
        with:
          name: env-qt-zlib-quazip-${{ matrix.config.name }}
          path: ./Qt

      # Download environment artifacts
      - name: Download environment artifacts (vcpkg)
        if: steps.cache-build.outputs.cache-hit != 'true'
        uses: thebrowsercompany/gha-download-tar-artifact@main
        with:
          name: env-vcpkg-${{ matrix.config.name }}
          path: ./Qt

      # Checkout googletest repository with specific version to $GITHUB_WORKSPACE/googletest-source
      - name: Checkout googletest
        if: steps.cache-build.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
          repository: google/googletest
          path: Qt/googletest-source
          ref: ${{ env.GOOGLE_TEST_VERSION }}

      # Build TInvestor
      - name: Build TInvestor
        if: steps.cache-build.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          # Setup Developer PowerShell for Windows
          switch ("${{ runner.os }}")
          {
              "Windows" {
                  Write-Output "Setup Developer PowerShell"
                  # https://github.com/microsoft/terminal/issues/3821#issuecomment-651506501
                  # The setup-msbuild action is not used since it does not set up the path to 'cl'
                  # see: https://github.com/microsoft/setup-msbuild/issues/24
                  ${VS_INST_PATH} = & "${env:ProgramFiles(x86)}/Microsoft Visual Studio/Installer/vswhere.exe" -latest -property installationPath
                  Write-Output "VS Installation Path: ${VS_INST_PATH}"
                  Import-Module ${VS_INST_PATH}/Common7/Tools/Microsoft.VisualStudio.DevShell.dll
                  Enter-VsDevShell -VsInstallPath ${VS_INST_PATH} -SkipAutomaticLocation -DevCmdArguments '-arch=x64 -no_logo'
              }
          }

          ${Env:ZLIB_PATH} = "${Env:GITHUB_WORKSPACE}/Qt/zlib"
          ${Env:QUAZIP_PATH} = "${Env:GITHUB_WORKSPACE}/Qt/quazip"
          ${Env:VCPKG_PATH} = "${Env:GITHUB_WORKSPACE}/Qt/vcpkg"
          ${Env:GOOGLETEST_DIR} = "${Env:GITHUB_WORKSPACE}/Qt/googletest-source"

          # Create TInvestor-source/build/Desktop-Debug folder and enter into it
          New-Item -Path "TInvestor-source/build/Desktop-Debug" -ItemType "directory" -Force
          Set-Location -Path "TInvestor-source/build/Desktop-Debug"

          switch ("${{ runner.os }}")
          {
              "Windows" {
                  ${Env:QTDIR} = "${Env:GITHUB_WORKSPACE}/Qt/${Env:QT_VERSION}/msvc2022_64"
                  & "${Env:QTDIR}/bin/qmake.exe" "${Env:GITHUB_WORKSPACE}/TInvestor-source/TInvestor.pro" -spec win32-msvc "CONFIG+=debug" "CONFIG+=qml_debug"
                  chcp 65001
                  & "${Env:GITHUB_WORKSPACE}/Qt/jom/jom.exe" -f "${Env:GITHUB_WORKSPACE}/TInvestor-source/build/Desktop-Debug/Makefile" qmake_all
                  chcp 65001
                  & "${Env:GITHUB_WORKSPACE}/Qt/jom/jom.exe"
              }
              "Linux" {
                  ${Env:QTDIR} = "${Env:GITHUB_WORKSPACE}/Qt/${Env:QT_VERSION}/gcc_64"
                  & "${Env:QTDIR}/bin/qmake" "${Env:GITHUB_WORKSPACE}/TInvestor-source/TInvestor.pro" -spec linux-g++ CONFIG+=debug CONFIG+=qml_debug
                  make -f "${Env:GITHUB_WORKSPACE}/TInvestor-source/build/Desktop-Debug/Makefile" qmake_all
                  make -j4
              }
          }

      # Prepare artifacts
      - name: Prepare artifacts
        if: steps.cache-build.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          Copy-Item "${Env:GITHUB_WORKSPACE}/TInvestor-source/build/Desktop-Debug" -Destination artifacts -Recurse

          switch ("${{ runner.os }}")
          {
              "Windows" {
                  Remove-Item "artifacts/app/build/gen" -Recurse -Force
                  Remove-Item "artifacts/app/debug" -Recurse -Force
                  Remove-Item "artifacts/app/release" -Recurse -Force
                  Remove-Item "artifacts/app/Makefile.TInvestor" -Force
                  Remove-Item "artifacts/app/Makefile.TInvestor.Debug" -Force
                  Remove-Item "artifacts/app/Makefile.TInvestor.Release" -Force
                  Remove-Item "artifacts/libs" -Recurse -Force
                  Remove-Item "artifacts/test/build/gen" -Recurse -Force
                  Remove-Item "artifacts/test/debug" -Recurse -Force
                  Remove-Item "artifacts/test/release" -Recurse -Force
                  Remove-Item "artifacts/test/Makefile.tests" -Force
                  Remove-Item "artifacts/test/Makefile.tests.Debug" -Force
                  Remove-Item "artifacts/test/Makefile.tests.Release" -Force
                  Remove-Item "artifacts/.qmake.stash" -Force
                  Remove-Item "artifacts/Makefile" -Force
              }
              "Linux" {
                  Remove-Item "artifacts/app/build/gen" -Recurse -Force
                  Remove-Item "artifacts/app/Makefile.TInvestor" -Force
                  Remove-Item "artifacts/libs" -Recurse -Force
                  # Remove-Item "artifacts/test/build/gen" -Recurse -Force # Do not delete. Needed for coverage
                  Remove-Item "artifacts/test/Makefile.tests" -Force
                  Remove-Item "artifacts/.qmake.stash" -Force
                  Remove-Item "artifacts/Makefile" -Force
              }
          }

      # Upload artifacts
      - name: Upload artifacts
        uses: thebrowsercompany/gha-upload-tar-artifact@main
        with:
          name: build-debug-${{ matrix.config.name }}
          path: ./artifacts
          retention-days: 1

  # Build project in Release
  build-release:
    needs: [env-qt-zlib-quazip, env-vcpkg]
    name: Build Release [${{ matrix.config.name }}]
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
          - { name: "win64", os: windows-latest }
          - { name: "linux", os: ubuntu-latest }
      fail-fast: false

    steps:
      # Set git to disable line endings conversion
      - name: Configure git
        run: |
          git config --global core.autocrlf false

      # Checkout latest commit for this repository to $GITHUB_WORKSPACE/TInvestor-source
      - name: Checkout TInvestor
        uses: actions/checkout@v4
        with:
          path: TInvestor-source

      # Calculate TInvestor hash on sources
      - name: Calculate TInvestor hash
        id: folders-hash
        uses: theowenyoung/folder-hash@v3
        with:
          path: |
            ./TInvestor-source/app
            ./TInvestor-source/libs
            ./TInvestor-source/test

      # Download/upload cache
      - name: Caching
        uses: actions/cache@v4
        id: cache-build
        with:
          path: ./artifacts
          key: ${{ runner.os }}-build-release-${{ steps.folders-hash.outputs.hash }}

      # Install required packages
      - name: System packages
        if: steps.cache-build.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          switch ("${{ runner.os }}")
          {
            "Windows" { choco install bzip2 }
            "Linux"   { sudo apt-get update; sudo apt-get install -y libgl1-mesa-dev libxkbcommon-dev libxkbcommon-x11-dev libxcb-cursor0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 libxcb-randr0 libxcb-render-util0 libxcb-shape0 libxcb-shm0 libxcb-sync1 libxcb-util1 libxcb-xfixes0 libxcb-xkb1 libxcb1 }
            "macOS"   { brew update }
          }

      # Download environment artifacts
      - name: Download environment artifacts (Qt/ZLib/Quazip)
        if: steps.cache-build.outputs.cache-hit != 'true'
        uses: thebrowsercompany/gha-download-tar-artifact@main
        with:
          name: env-qt-zlib-quazip-${{ matrix.config.name }}
          path: ./Qt

      # Download environment artifacts
      - name: Download environment artifacts (vcpkg)
        if: steps.cache-build.outputs.cache-hit != 'true'
        uses: thebrowsercompany/gha-download-tar-artifact@main
        with:
          name: env-vcpkg-${{ matrix.config.name }}
          path: ./Qt

      # Checkout googletest repository with specific version to $GITHUB_WORKSPACE/googletest-source
      - name: Checkout googletest
        if: steps.cache-build.outputs.cache-hit != 'true'
        uses: actions/checkout@v4
        with:
          repository: google/googletest
          path: Qt/googletest-source
          ref: ${{ env.GOOGLE_TEST_VERSION }}

      # Build TInvestor
      - name: Build TInvestor
        if: steps.cache-build.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          # Setup Developer PowerShell for Windows
          switch ("${{ runner.os }}")
          {
              "Windows" {
                  Write-Output "Setup Developer PowerShell"
                  # https://github.com/microsoft/terminal/issues/3821#issuecomment-651506501
                  # The setup-msbuild action is not used since it does not set up the path to 'cl'
                  # see: https://github.com/microsoft/setup-msbuild/issues/24
                  ${VS_INST_PATH} = & "${env:ProgramFiles(x86)}/Microsoft Visual Studio/Installer/vswhere.exe" -latest -property installationPath
                  Write-Output "VS Installation Path: ${VS_INST_PATH}"
                  Import-Module ${VS_INST_PATH}/Common7/Tools/Microsoft.VisualStudio.DevShell.dll
                  Enter-VsDevShell -VsInstallPath ${VS_INST_PATH} -SkipAutomaticLocation -DevCmdArguments '-arch=x64 -no_logo'
              }
          }

          ${Env:ZLIB_PATH} = "${Env:GITHUB_WORKSPACE}/Qt/zlib"
          ${Env:QUAZIP_PATH} = "${Env:GITHUB_WORKSPACE}/Qt/quazip"
          ${Env:VCPKG_PATH} = "${Env:GITHUB_WORKSPACE}/Qt/vcpkg"
          ${Env:GOOGLETEST_DIR} = "${Env:GITHUB_WORKSPACE}/Qt/googletest-source"

          # Create TInvestor-source/build/Desktop-Release folder and enter into it
          New-Item -Path "TInvestor-source/build/Desktop-Release" -ItemType "directory" -Force
          Set-Location -Path "TInvestor-source/build/Desktop-Release"

          switch ("${{ runner.os }}")
          {
              "Windows" {
                  ${Env:QTDIR} = "${Env:GITHUB_WORKSPACE}/Qt/${Env:QT_VERSION}/msvc2022_64"
                  & "${Env:QTDIR}/bin/qmake.exe" "${Env:GITHUB_WORKSPACE}/TInvestor-source/TInvestor.pro" -spec win32-msvc "CONFIG+=qtquickcompiler"
                  chcp 65001
                  & "${Env:GITHUB_WORKSPACE}/Qt/jom/jom.exe" -f "${Env:GITHUB_WORKSPACE}/TInvestor-source/build/Desktop-Release/Makefile" qmake_all
                  chcp 65001
                  & "${Env:GITHUB_WORKSPACE}/Qt/jom/jom.exe"
              }
              "Linux" {
                  ${Env:QTDIR} = "${Env:GITHUB_WORKSPACE}/Qt/${Env:QT_VERSION}/gcc_64"
                  & "${Env:QTDIR}/bin/qmake" "${Env:GITHUB_WORKSPACE}/TInvestor-source/TInvestor.pro" -spec linux-g++ CONFIG+=qtquickcompiler
                  make -f "${Env:GITHUB_WORKSPACE}/TInvestor-source/build/Desktop-Release/Makefile" qmake_all
                  make -j4
              }
          }

      # Prepare artifacts
      - name: Prepare artifacts
        if: steps.cache-build.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          Copy-Item "${Env:GITHUB_WORKSPACE}/TInvestor-source/build/Desktop-Release" -Destination artifacts -Recurse

          switch ("${{ runner.os }}")
          {
              "Windows" {
                  Remove-Item "artifacts/app/build/gen" -Recurse -Force
                  Remove-Item "artifacts/app/debug" -Recurse -Force
                  Remove-Item "artifacts/app/release" -Recurse -Force
                  Remove-Item "artifacts/app/Makefile.TInvestor" -Force
                  Remove-Item "artifacts/app/Makefile.TInvestor.Debug" -Force
                  Remove-Item "artifacts/app/Makefile.TInvestor.Release" -Force
                  Remove-Item "artifacts/libs" -Recurse -Force
                  Remove-Item "artifacts/test/build/gen" -Recurse -Force
                  Remove-Item "artifacts/test/debug" -Recurse -Force
                  Remove-Item "artifacts/test/release" -Recurse -Force
                  Remove-Item "artifacts/test/Makefile.tests" -Force
                  Remove-Item "artifacts/test/Makefile.tests.Debug" -Force
                  Remove-Item "artifacts/test/Makefile.tests.Release" -Force
                  Remove-Item "artifacts/.qmake.stash" -Force
                  Remove-Item "artifacts/Makefile" -Force
              }
              "Linux" {
                  Remove-Item "artifacts/app/build/gen" -Recurse -Force
                  Remove-Item "artifacts/app/Makefile.TInvestor" -Force
                  Remove-Item "artifacts/libs" -Recurse -Force
                  Remove-Item "artifacts/test/build/gen" -Recurse -Force
                  Remove-Item "artifacts/test/Makefile.tests" -Force
                  Remove-Item "artifacts/.qmake.stash" -Force
                  Remove-Item "artifacts/Makefile" -Force
              }
          }

      # Upload artifacts
      - name: Upload artifacts
        uses: thebrowsercompany/gha-upload-tar-artifact@main
        with:
          name: build-release-${{ matrix.config.name }}
          path: ./artifacts
          retention-days: 1

  # Test project
  test:
    needs: [build-debug, build-release]
    name: Test [${{ matrix.config.name }}]
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
          - { name: "win64", os: windows-latest }
          - { name: "linux", os: ubuntu-latest }
      fail-fast: false

    steps:
      # Set git to disable line endings conversion
      - name: Configure git
        run: |
          git config --global core.autocrlf false

      # Checkout latest commit for this repository to $GITHUB_WORKSPACE/TInvestor-source
      - name: Checkout TInvestor
        uses: actions/checkout@v4
        with:
          path: TInvestor-source

      # Calculate TInvestor hash on sources
      - name: Calculate TInvestor hash
        id: folders-hash
        uses: theowenyoung/folder-hash@v3
        with:
          path: |
            ./TInvestor-source/app
            ./TInvestor-source/libs
            ./TInvestor-source/test

      # Download/upload cache
      - name: Caching
        uses: actions/cache@v4
        id: cache-test
        with:
          path: ./TInvestor-source/build/CoverageReport
          key: ${{ runner.os }}-test-${{ steps.folders-hash.outputs.hash }}

      # Install required packages
      - name: System packages
        if: steps.cache-test.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          switch ("${{ runner.os }}")
          {
              "Windows" { choco install opencppcoverage }
              "Linux"   { sudo apt-get update; sudo apt-get install -y lcov }
          }

      # Download build artifacts (Debug)
      - name: Download build artifacts (Debug)
        if: steps.cache-test.outputs.cache-hit != 'true'
        uses: thebrowsercompany/gha-download-tar-artifact@main
        with:
          name: build-debug-${{ matrix.config.name }}
          path: ./TInvestor-source/build/Desktop-Debug

      # Download build artifacts (Release)
      - name: Download build artifacts (Release)
        if: steps.cache-test.outputs.cache-hit != 'true'
        uses: thebrowsercompany/gha-download-tar-artifact@main
        with:
          name: build-release-${{ matrix.config.name }}
          path: ./TInvestor-source/build/Desktop-Release

      # Test TInvestor
      - name: Test TInvestor
        if: steps.cache-test.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          # Enter to TInvestor-source/build/Desktop-Release/test/build folder
          Set-Location -Path "TInvestor-source/build/Desktop-Release/test/build"

          switch ("${{ runner.os }}")
          {
              "Windows" {
                  & tzutil /s "Russian Standard Time"

                  & ./tests.exe
                  Start-Sleep -Seconds 10
              }
              "Linux" {
                  & sudo timedatectl set-timezone Europe/Moscow

                  ${Env:LD_LIBRARY_PATH} = "${Env:GITHUB_WORKSPACE}/TInvestor-source/build/Desktop-Release/test/build:${Env:LD_LIBRARY_PATH}"
                  ${Env:DISPLAY} = ":99"

                  & sudo Xvfb -ac :99 -screen 0 1280x1024x24 > /dev/null 2>&1 &
                  Start-Sleep -Seconds 3

                  & ./tests
              }
          }

      # Collect coverage
      - name: Collect coverage
        if: steps.cache-test.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          # Enter to TInvestor-source folder
          Set-Location -Path "TInvestor-source"

          switch ("${{ runner.os }}")
          {
              "Windows" {
                  & tzutil /s "Russian Standard Time"
                  ${Env:PATH} = "C:\Program Files\OpenCppCoverage;${Env:PATH}"

                  & ./make_coverage.bat --ci
              }
              "Linux" {
                  & sudo timedatectl set-timezone Europe/Moscow

                  ${Env:DISPLAY} = ":99"

                  & sudo Xvfb -ac :99 -screen 0 1280x1024x24 > /dev/null 2>&1 &
                  Start-Sleep -Seconds 3

                  & ./make_coverage.sh --ci
              }
          }

      # Upload coverage badge
      - name: Upload coverage badge
        if: steps.cache-test.outputs.cache-hit != 'true'
        uses: gaelgirodon/ci-badges-action@v1
        with:
          gist-id: ${{ env.GIST_ID }}
          token: ${{ secrets.GIST_TOKEN }}
          prefix: TInvestor-${{ runner.os }}

      # Upload artifacts
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: coverage-${{ matrix.config.name }}
          path: ./TInvestor-source/build/CoverageReport
          retention-days: 1
          compression-level: 9

  # Generate documentation
  doc:
    name: Documentation [${{ matrix.config.name }}]
    runs-on: ${{ matrix.config.os }}
    strategy:
      matrix:
        config:
          - { name: "win64", os: windows-latest }
          - { name: "linux", os: ubuntu-latest }
      fail-fast: false

    steps:
      # Set git to disable line endings conversion
      - name: Configure git
        run: |
          git config --global core.autocrlf false

      # Checkout latest commit for this repository to $GITHUB_WORKSPACE/TInvestor-source
      - name: Checkout TInvestor
        uses: actions/checkout@v4
        with:
          path: TInvestor-source

      # Calculate TInvestor hash on sources
      - name: Calculate TInvestor hash
        id: folders-hash
        uses: theowenyoung/folder-hash@v3
        with:
          path: |
            ./TInvestor-source/app
            ./TInvestor-source/libs
            ./TInvestor-source/test

      # Download/upload cache
      - name: Caching
        uses: actions/cache@v4
        id: cache-doc
        with:
          path: ./artifacts
          key: ${{ runner.os }}-doc-${{ steps.folders-hash.outputs.hash }}

      # Install required packages
      - name: System packages
        if: steps.cache-doc.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          switch ("${{ runner.os }}")
          {
              "Windows" {
                  choco install doxygen.install
                  choco install graphviz
                  choco install nodejs-lts
              }
              "Linux" {
                  sudo add-apt-repository ppa:bkryza/clang-uml
                  sudo apt-get update
                  sudo apt-get install -y doxygen graphviz clang-uml nodejs npm
              }
          }

          npm install -g @mermaid-js/mermaid-cli

      # Generate doxygen
      - name: Generate doxygen
        if: steps.cache-doc.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          # Enter to TInvestor-source folder
          Set-Location -Path "TInvestor-source"

          switch ("${{ runner.os }}")
          {
              "Windows" {
                  ${Env:PATH} = "C:\Program Files\doxygen\bin;${Env:PATH}"
                  ${Env:PATH} = "C:\Program Files\Graphviz\bin;${Env:PATH}"

                  & ./make_doxygen.bat --ci
              }
              "Linux" {
                  & ./make_doxygen.sh --ci
              }
          }

      # Generate clang-uml
      - name: Generate clang-uml
        if: steps.cache-doc.outputs.cache-hit != 'true'
        shell: pwsh
        run: |
          # Enter to TInvestor-source folder
          Set-Location -Path "TInvestor-source"

          switch ("${{ runner.os }}")
          {
              "Windows" {
                  ${Env:PATH} = "${Env:GITHUB_WORKSPACE}\TInvestor-source\3rdparty\clang-uml-0.6.1;${Env:PATH}"

                  & ./make_clang_uml.bat --ci
              }
              "Linux" {
                  & ./make_clang_uml.sh --ci
              }
          }

      # Upload artifacts
      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: doc-${{ matrix.config.name }}
          path: ./artifacts
          retention-days: 1
          compression-level: 9

  # Release job.
  # Provides meta information for release.
  # This job is only used when github.ref contains /tags/
  # It should be first in order to upload release artifacts.
  release:
    name: Create release
    if: contains(github.ref, '/tags/')
    runs-on: ubuntu-latest
    steps:
      # Create release
      - name: Create release
        id: create-release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: ${{ github.ref }}
          body: |
            Release for TInvestor.

          draft: false
          prerelease: false

      # Create file with url to release page
      - name: Store release url
        shell: pwsh
        run: Write-Output "${{ steps.create-release.outputs.upload_url }}" > ./release_upload_url.txt

      # Upload file with url to release page
      - name: Upload release url
        uses: actions/upload-artifact@v4
        with:
          name: release_upload_url.txt
          path: ./release_upload_url.txt
          retention-days: 1
          compression-level: 9
