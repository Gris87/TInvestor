name: env-qt-zlib-quazip
description: Environment Qt/ZLib/Quazip
runs:
  using: "composite"
  steps:
    # Download/upload cache
    - name: Caching
      uses: actions/cache@v4
      id: cache-env
      with:
        path: ./Qt
        key: ${{ runner.os }}-env-qt-zlib-quazip-${{ env.QT_VERSION }}-${{ env.ZLIB_VERSION }}-${{ env.QUAZIP_VERSION }}

    # Install required packages
    - name: System packages
      if: steps.cache-env.outputs.cache-hit != 'true'
      shell: pwsh
      run: |
        switch ("${{ runner.os }}")
        {
          "Windows" { choco install bzip2 }
          "Linux"   { sudo apt-get update }
          "macOS"   { brew update }
        }

    # Download Qt with specified version
    - name: Download Qt
      if: steps.cache-env.outputs.cache-hit != 'true'
      id: qt
      shell: cmake -P {0}
      run: |
        # Set qt_version variable to environment variable QT_VERSION
        set(qt_version ${{ env.QT_VERSION }})

        # Remove all dots "." from qt_version and put result to qt_version_dotless
        string(REPLACE "." "" qt_version_dotless "${qt_version}")

        # Setup several platform-dependent variables
        if ("${{ runner.os }}" STREQUAL "Windows")
          set(url_os "windows_x86")
          set(qt_package_arch_suffix "win64_msvc2022_64")
          set(qt_dir_prefix "${qt_version}/msvc2022_64")
          set(qt_package_suffix "-Windows-Windows_11_23H2-MSVC2022-Windows-Windows_11_23H2-X86_64")
        elseif ("${{ runner.os }}" STREQUAL "Linux")
          set(url_os "linux_x64")
          set(qt_package_arch_suffix "linux_gcc_64")
          set(qt_dir_prefix "${qt_version}/gcc_64")
          set(qt_package_suffix "-Linux-RHEL_8_10-GCC-Linux-RHEL_8_10-X86_64")
        elseif ("${{ runner.os }}" STREQUAL "macOS")
          set(url_os "mac_x64")
          set(qt_package_arch_suffix "clang_64")
          set(qt_dir_prefix "${qt_version}/macos")
          set(qt_package_suffix "-MacOS-MacOS_14-Clang-MacOS-MacOS_14-X86_64-ARM64")
        endif()

        # Set qt_base_url
        set(qt_base_url "https://\${qt_mirror}/online/qtsdkrepository/${url_os}/desktop/qt6_${qt_version_dotless}/qt6_${qt_version_dotless}")

        # Try to download Updates.xml from available QT mirrors
        foreach(qt_mirror $ENV{QT_MIRRORS})
          cmake_language(EVAL CODE "
            message(\"Downloading: ${qt_base_url}/Updates.xml\")
            file(DOWNLOAD \"${qt_base_url}/Updates.xml\" ./Updates.xml)
          ")
          file(SIZE ./Updates.xml fileSize)
          if (fileSize GREATER 0)
            break()
          endif()
        endforeach()

        # Get package version that used together with package file name in order to download package
        file(READ ./Updates.xml updates_xml)
        string(REGEX MATCH "<Name>qt.qt6.*<Version>([0-9+-.]+)</Version>" updates_xml_output "${updates_xml}")
        set(qt_package_version ${CMAKE_MATCH_1})

        # Declare downloadAndExtract function
        function(downloadAndExtract url archive target_dir)
          foreach(qt_mirror $ENV{QT_MIRRORS})
            cmake_language(EVAL CODE "
              message(\"Downloading: ${url}\")
              file(DOWNLOAD \"${url}\" ./${archive})
            ")
            file(SIZE ./${archive} fileSize)
            if (fileSize GREATER 0)
              break()
            endif()
          endforeach()

          file(MAKE_DIRECTORY ${target_dir})
          execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ${CMAKE_CURRENT_SOURCE_DIR}/${archive} WORKING_DIRECTORY ${target_dir})
        endfunction()

        # Download base packages
        foreach(package qtbase qtdeclarative qtsvg qttools qttranslations)
          downloadAndExtract(
            "${qt_base_url}/qt.qt6.${qt_version_dotless}.${qt_package_arch_suffix}/${qt_package_version}${package}${qt_package_suffix}.7z"
            ${package}.7z
            "Qt/${qt_dir_prefix}"
          )
        endforeach()

        # Download addons
        foreach(package qt5compat qtcharts)
          downloadAndExtract(
            "${qt_base_url}/qt.qt6.${qt_version_dotless}.addons.${package}.${qt_package_arch_suffix}/${qt_package_version}${package}${qt_package_suffix}.7z"
            ${package}.7z
            "Qt/${qt_dir_prefix}"
          )
        endforeach()

        if ("${{ runner.os }}" STREQUAL "Windows")
          # jom is used for parallel building under Windows
          downloadAndExtract(
            "https://\${qt_mirror}/official_releases/jom/jom.zip"
            jom.zip
            "Qt/jom"
          )
        elseif ("${{ runner.os }}" STREQUAL "Linux")
          # uic depends on libicu73.so
          downloadAndExtract(
            "${qt_base_url}/qt.qt6.${qt_version_dotless}.${qt_package_arch_suffix}/${qt_package_version}icu-linux-Rhel8.6-x86_64.7z"
            icu.7z
            "Qt/${qt_dir_prefix}/lib"
          )
        endif()

        # Export qt_dir for other steps
        file(TO_CMAKE_PATH "$ENV{GITHUB_WORKSPACE}/Qt/${qt_dir_prefix}" qt_dir)
        file(APPEND "$ENV{GITHUB_OUTPUT}" "qt_dir=${qt_dir}")

    # Checkout zlib repository with specific version to $GITHUB_WORKSPACE/zlib-source
    - name: Checkout zlib
      if: steps.cache-env.outputs.cache-hit != 'true'
      uses: actions/checkout@v4
      with:
        repository: madler/zlib
        path: zlib-source
        ref: ${{ env.ZLIB_VERSION }}

    # Build zlib with specified version
    - name: Build zlib
      if: steps.cache-env.outputs.cache-hit != 'true'
      shell: pwsh
      run: |
        # Create build-zlib folder and enter into it
        New-Item -Path "." -Name "build-zlib" -ItemType "directory"
        Set-Location -Path "build-zlib"

        # Build debug
        cmake `
          -S ../zlib-source `
          -B . `
          -DCMAKE_POSITION_INDEPENDENT_CODE=ON `
          -DCMAKE_BUILD_TYPE=Debug `
          -DCMAKE_INSTALL_PREFIX="${Env:GITHUB_WORKSPACE}/Qt/zlib/install"
        cmake --build . --config Debug
        cmake --install . --config Debug

        # Build release
        cmake `
          -S ../zlib-source `
          -B . `
          -DCMAKE_POSITION_INDEPENDENT_CODE=ON `
          -DCMAKE_BUILD_TYPE=Release `
          -DCMAKE_INSTALL_PREFIX="${Env:GITHUB_WORKSPACE}/Qt/zlib/install"
        cmake --build . --config Release
        cmake --install . --config Release

    # Checkout quazip repository with specific version to $GITHUB_WORKSPACE/quazip-source
    - name: Checkout quazip
      if: steps.cache-env.outputs.cache-hit != 'true'
      uses: actions/checkout@v4
      with:
        repository: stachenov/quazip
        path: quazip-source
        ref: ${{ env.QUAZIP_VERSION }}

    # Build quazip with specified version
    - name: Build quazip
      if: steps.cache-env.outputs.cache-hit != 'true'
      shell: pwsh
      run: |
        switch ("${{ runner.os }}")
        {
            "Windows" {
                ${ZLIB_LIBRARY_DEBUG}   = "zlibd.lib"
                ${ZLIB_LIBRARY_RELEASE} = "zlib.lib"
            }
            "Linux" {
                ${ZLIB_LIBRARY_DEBUG}   = "libz.a"
                ${ZLIB_LIBRARY_RELEASE} = "libz.a"
            }
        }

        # Create build-quazip folder and enter into it
        New-Item -Path "." -Name "build-quazip" -ItemType "directory"
        Set-Location -Path "build-quazip"

        # Build debug
        cmake `
          -S ../quazip-source `
          -B . `
          -DCMAKE_BUILD_TYPE=Debug `
          -DCMAKE_INSTALL_PREFIX="${Env:GITHUB_WORKSPACE}/Qt/quazip/install" `
          -DCMAKE_PREFIX_PATH="${{ steps.qt.outputs.qt_dir }}/lib/cmake" `
          -DZLIB_LIBRARY:FILEPATH="${Env:GITHUB_WORKSPACE}/Qt/zlib/install/lib/${ZLIB_LIBRARY_DEBUG}" `
          -DZLIB_INCLUDE_DIR:PATH="${Env:GITHUB_WORKSPACE}/Qt/zlib/install/include"
        cmake --build . --config Debug
        cmake --install . --config Debug

        # Build release
        cmake `
          -S ../quazip-source `
          -B . `
          -DCMAKE_BUILD_TYPE=Release `
          -DCMAKE_INSTALL_PREFIX="${Env:GITHUB_WORKSPACE}/Qt/quazip/install" `
          -DCMAKE_PREFIX_PATH="${{ steps.qt.outputs.qt_dir }}/lib/cmake" `
          -DZLIB_LIBRARY:FILEPATH="${Env:GITHUB_WORKSPACE}/Qt/zlib/install/lib/${ZLIB_LIBRARY_RELEASE}" `
          -DZLIB_INCLUDE_DIR:PATH="${Env:GITHUB_WORKSPACE}/Qt/zlib/install/include"
        cmake --build . --config Release
        cmake --install . --config Release

        # Cleanup
        Remove-Item "${Env:GITHUB_WORKSPACE}/Qt/zlib/install/share" -Recurse -Force
        Remove-Item "${Env:GITHUB_WORKSPACE}/Qt/quazip/install/lib/cmake" -Recurse -Force
        Remove-Item "${Env:GITHUB_WORKSPACE}/Qt/quazip/install/lib/pkgconfig" -Recurse -Force

    # Upload environment artifacts
    - name: Upload environment artifacts
      uses: thebrowsercompany/gha-upload-tar-artifact@main
      with:
        name: env-qt-zlib-quazip-${{ matrix.config.name }}
        path: ./Qt
        retention-days: 1
