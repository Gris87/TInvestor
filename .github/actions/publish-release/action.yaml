name: publish-release
description: Publish release
inputs:
  github-token:
    description: GitHub REST API access token.
    required: true
runs:
  using: "composite"
  steps:
    # Download build artifacts (release)
    - name: Download build artifacts (release)
      uses: thebrowsercompany/gha-download-tar-artifact@main
      with:
        name: build-release-${{ matrix.config.name }}
        path: ./build-release

    # Download documentation artifacts
    - name: Download documentation artifacts
      uses: thebrowsercompany/gha-download-tar-artifact@main
      with:
        name: doc-${{ matrix.config.name }}
        path: ./doc

    # Archive result biraries
    - name: Archive result biraries
      shell: pwsh
      run: |
        switch ("${{ runner.os }}")
        {
            "Windows" {
                ${RELEASE_ARCHIVE_NAME} = "TInvestor-${{ github.ref_name }}-${{ runner.os }}.zip"
                ${DOCS_ARCHIVE_NAME}    = "TInvestor-${{ github.ref_name }}-${{ runner.os }}-doc.zip"

                Push-Location build-release/app/build
                7z a "../../../${RELEASE_ARCHIVE_NAME}" *
                Pop-Location

                Push-Location doc
                7z a "../${DOCS_ARCHIVE_NAME}" *
                Pop-Location
            }
            "Linux" {
                ${RELEASE_ARCHIVE_NAME} = "TInvestor-${{ github.ref_name }}-${{ runner.os }}.tar.xz"
                ${DOCS_ARCHIVE_NAME}    = "TInvestor-${{ github.ref_name }}-${{ runner.os }}-doc.tar.xz"

                Push-Location build-release/app/build
                tar -c -f "../../../${RELEASE_ARCHIVE_NAME}" --xz -v *
                Pop-Location

                Push-Location doc
                tar -c -f "../${DOCS_ARCHIVE_NAME}" --xz -v *
                Pop-Location
            }
        }

        Write-Output "RELEASE_ARCHIVE_NAME=${RELEASE_ARCHIVE_NAME}" | Out-File -FilePath ${env:GITHUB_ENV} -Encoding utf8 -Append
        Write-Output "DOCS_ARCHIVE_NAME=${DOCS_ARCHIVE_NAME}"       | Out-File -FilePath ${env:GITHUB_ENV} -Encoding utf8 -Append

    # Download release_upload_url.txt artifact
    - name: Download release url
      uses: actions/download-artifact@v4
      with:
        name: release_upload_url.txt
        path: ./

    # Set RELEASE_URL environment variable
    - name: Set RELEASE_URL environment variable
      shell: pwsh
      run: |
        ${RELEASE_URL} = Get-Content ./release_upload_url.txt
        Write-Output "Release URL: ${RELEASE_URL}"
        Write-Output "RELEASE_URL=${RELEASE_URL}" | Out-File -FilePath ${env:GITHUB_ENV} -Encoding utf8 -Append

    # Upload release artifacts
    - name: Upload release artifacts
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
      with:
        upload_url: ${{ env.RELEASE_URL }}
        asset_path: ./${{ env.RELEASE_ARCHIVE_NAME }}
        asset_name: ${{ env.RELEASE_ARCHIVE_NAME }}
        asset_content_type: application/zip

    # Upload documentation artifacts
    - name: Upload documentation artifacts
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
      with:
        upload_url: ${{ env.RELEASE_URL }}
        asset_path: ./${{ env.DOCS_ARCHIVE_NAME }}
        asset_name: ${{ env.DOCS_ARCHIVE_NAME }}
        asset_content_type: application/zip
