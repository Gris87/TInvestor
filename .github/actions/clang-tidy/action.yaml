name: clang-tidy
description: Clang-Tidy
runs:
  using: "composite"
  steps:
    # Set git to disable line endings conversion
    - name: Configure git
      shell: pwsh
      run: |
        & git config --global core.autocrlf false

    # Checkout latest commit for this repository to $GITHUB_WORKSPACE/TInvestor-source
    - name: Checkout TInvestor
      uses: actions/checkout@v4
      with:
        path: TInvestor-source

    # Calculate TInvestor hash on sources
    - name: Calculate TInvestor hash
      id: folders-hash
      uses: theowenyoung/folder-hash@v3
      with:
        path: |
          ./TInvestor-source/app
          ./TInvestor-source/libs
          ./TInvestor-source/test

    # Download/upload cache
    - name: Caching
      uses: actions/cache@v4
      id: cache-clang-tidy
      with:
        path: ./success
        key: ${{ runner.os }}-clang-tidy-${{ matrix.part }}-${{ steps.folders-hash.outputs.hash }}

    # Download environment artifacts
    - name: Download environment artifacts (Qt/ZLib/Quazip)
      if: steps.cache-build.outputs.cache-hit != 'true'
      uses: thebrowsercompany/gha-download-tar-artifact@main
      with:
        name: env-qt-zlib-quazip-${{ matrix.config.name }}
        path: ./Qt

    # Download environment artifacts
    - name: Download environment artifacts (vcpkg)
      if: steps.cache-build.outputs.cache-hit != 'true'
      uses: thebrowsercompany/gha-download-tar-artifact@main
      with:
        name: env-vcpkg-${{ matrix.config.name }}
        path: ./Qt

    # Checkout googletest repository with specific version to $GITHUB_WORKSPACE/googletest-source
    - name: Checkout googletest
      if: steps.cache-build.outputs.cache-hit != 'true'
      uses: actions/checkout@v4
      with:
        repository: google/googletest
        path: Qt/googletest-source
        ref: ${{ env.GOOGLE_TEST_VERSION }}

    # Download build artifacts (Debug)
    - name: Download build artifacts (Debug)
      if: steps.cache-clang-tidy.outputs.cache-hit != 'true'
      uses: thebrowsercompany/gha-download-tar-artifact@main
      with:
        name: build-debug-${{ matrix.config.name }}
        path: ./TInvestor-source/build/Desktop-Debug

    # Generate compile_commands.json
    - name: Generate compile_commands.json
      if: steps.cache-doc.outputs.cache-hit != 'true'
      shell: pwsh
      run: |
        # Enter to TInvestor-source folder
        Set-Location -Path "TInvestor-source"

        switch ("${{ runner.os }}")
        {
          "Windows" {
                & python tools/py3/generate-compile-commands `
                    --os Windows `
                    --target clang-tidy `
                    --qt-path "${Env:GITHUB_WORKSPACE}\Qt\${Env:QT_VERSION}\msvc2022_64" `
                    --qt-creator-path "${Env:GITHUB_WORKSPACE}\Qt\qtcreator-windows-x64-msvc-15.0.0" `
                    --quazip-path "${Env:GITHUB_WORKSPACE}\Qt\quazip-1.5\install\include\QuaZip-Qt6-1.5" `
                    --vcpkg-path "${Env:GITHUB_WORKSPACE}\Qt\vcpkg" `
                    --google-test-path "${Env:GITHUB_WORKSPACE}\Qt\googletest-1.16.0" `
                    --msvc-tools-path "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Tools\MSVC\14.43.34808" `
                    --msvc-auxiliary-path "C:\Program Files\Microsoft Visual Studio\2022\Enterprise\VC\Auxiliary" `
                    --windows-kits-path "C:\Program Files (x86)\Windows Kits\10\Include\10.0.26100.0" `
                    --output build\Desktop-Debug\.qtc_clangd\compile_commands.json
            }
            "Linux" {
                & python tools/py3/generate-compile-commands `
                    --os Linux `
                    --target clang-tidy `
                    --qt-path "${Env:GITHUB_WORKSPACE}/Qt/${Env:QT_VERSION}/gcc_64" `
                    --qt-creator-path "${Env:GITHUB_WORKSPACE}/Qt/qtcreator-linux-x64-16.0.1" `
                    --quazip-path "${Env:GITHUB_WORKSPACE}/Qt/quazip-1.5/install/include/QuaZip-Qt6-1.5" `
                    --vcpkg-path "${Env:GITHUB_WORKSPACE}/Qt/vcpkg" `
                    --google-test-path "${Env:GITHUB_WORKSPACE}/Qt/googletest-1.16.0" `
                    --output build/Desktop-Debug/.qtc_clangd/compile_commands.json
            }
        }

    # Download clang
    - name: Download clang
      if: steps.cache-style.outputs.cache-hit != 'true'
      shell: cmake -P {0}
      run: |
        # Setup several platform-dependent variables
        if ("${{ runner.os }}" STREQUAL "Windows")
          set(os_tar_url "clang+llvm-${{ env.CLANG_VERSION }}-x86_64-pc-windows-msvc.tar.xz")
        elseif ("${{ runner.os }}" STREQUAL "Linux")
          set(os_tar_url "LLVM-${{ env.CLANG_VERSION }}-Linux-X64.tar.xz")
        elseif ("${{ runner.os }}" STREQUAL "macOS")
          set(os_tar_url "LLVM-${{ env.CLANG_VERSION }}-macOS-X64.tar.xz")
        endif()

        # Set clang_release_url
        set(clang_release_url "https://github.com/llvm/llvm-project/releases/download/llvmorg-${{ env.CLANG_VERSION }}/${os_tar_url}")

        # Download clang_release_url
        cmake_language(EVAL CODE "
          message(\"Downloading: ${clang_release_url}\")
          file(DOWNLOAD \"${clang_release_url}\" ./clang.tar.xz)
        ")

        file(MAKE_DIRECTORY Qt/clang)
        execute_process(COMMAND ${CMAKE_COMMAND} -E tar xvf ${CMAKE_CURRENT_SOURCE_DIR}/clang.tar.xz WORKING_DIRECTORY Qt/clang)

    # Test TInvestor
    - name: Test TInvestor
      if: steps.cache-clang-tidy.outputs.cache-hit != 'true'
      shell: pwsh
      run: |
        switch ("${{ runner.os }}")
        {
            "Windows" {
                ${Env:PATH} = "${Env:GITHUB_WORKSPACE}/Qt/qtcreator-windows-x64-msvc-${Env:QTC_VERSION}/bin/clang/bin;${Env:PATH}"
                ${Env:PATH} = "${Env:GITHUB_WORKSPACE}/Qt/clang/clang+llvm-${Env:CLANG_VERSION}-x86_64-pc-windows-msvc/bin;${Env:PATH}"
            }
            "Linux" {
                ${Env:PATH} = "${Env:GITHUB_WORKSPACE}/Qt/qtcreator-linux-x64-${Env:QTC_VERSION}/libexec/qtcreator/clang/bin:${Env:PATH}"
                ${Env:PATH} = "${Env:GITHUB_WORKSPACE}/Qt/clang/LLVM-${Env:CLANG_VERSION}-Linux-X64/bin:${Env:PATH}"
            }
        }

        # Enter to TInvestor-source folder
        Set-Location -Path "TInvestor-source"

        & python tools/py3/run-clang-tidy --part ${{ matrix.part }} --number-of-parts 10

        New-Item -Path . -Name "../success" -ItemType "File"

    # Finish
    - name: Finish
      shell: pwsh
      run: |
        Write-Output "Finished"
